[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "AxiosError",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L85",
    "longname": "AxiosError",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "AxiosInstance",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L130",
    "longname": "AxiosInstance",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "AxiosRequestConfig",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L44",
    "longname": "AxiosRequestConfig",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "AxiosPromise",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L94",
    "longname": "AxiosPromise",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "AxiosResponse",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L76",
    "longname": "AxiosResponse",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "longname": "Proxy",
    "memberof": "src/.imports-from-mdn.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "ProtractorConfig",
    "externalLink": "https://github.com/angular/protractor/blob/master/lib/config.ts",
    "longname": "protractor~ProtractorConfig",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "Runner",
    "externalLink": "https://github.com/angular/protractor/blob/master/lib/runner.ts",
    "longname": "protractor~Runner",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "ElementArrayFinder",
    "externalLink": "https://www.protractortest.org/#/api?view=ElementArrayFinder",
    "longname": "ElementArrayFinder",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "ElementFinder",
    "externalLink": "https://www.protractortest.org/#/api?view=ElementFinder",
    "longname": "ElementFinder",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "ProtractorBrowser",
    "externalLink": "https://www.protractortest.org/#/api?view=ProtractorBrowser",
    "longname": "ProtractorBrowser",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "Actions",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/input_exports_Actions.html",
    "longname": "selenium-webdriver~Actions",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "AlertPromise",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_AlertPromise.html",
    "longname": "selenium-webdriver~AlertPromise",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "By",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/by_exports_By.html",
    "longname": "selenium-webdriver~By",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "Capabilities",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_Capabilities.html",
    "longname": "selenium-webdriver~Capabilities",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "Key",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_Key.html",
    "longname": "selenium-webdriver~Key",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Navigation",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_Navigation.html",
    "longname": "selenium-webdriver~Navigation",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "Options",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/ie_exports_Options.html",
    "longname": "selenium-webdriver~Options",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "WebElement",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_WebElement.html",
    "longname": "selenium-webdriver~WebElement",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "JSONObject",
    "externalLink": "https://jan-molak.github.io/tiny-types/file/src/types/json.ts.html",
    "longname": "tiny-types~JSONObject",
    "memberof": "src/.imports-from-tiny-types.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "TinyType",
    "externalLink": "https://jan-molak.github.io/tiny-types/class/src/TinyType.ts~TinyType.html",
    "longname": "tiny-types~TinyType",
    "memberof": "src/.imports-from-tiny-types.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "ElementArray",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/types.ts",
    "longname": "@wdio/types~ElementArray",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Browser",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/types.ts",
    "longname": "@wdio/types~Browser",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/types.ts",
    "longname": "@wdio/types~Element",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Options.TestRunner",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-types/src/Options.ts",
    "longname": "@wdio/types~Options.TestRunner",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "file",
    "name": "src/Serenity.ts",
    "content": "import { ensure, isDefined, isInstanceOf, property } from 'tiny-types';\n\nimport { ConfigurationError } from './errors';\nimport { DomainEvent } from './events';\nimport { formatted, has, OutputStream } from './io';\nimport { CorrelationId, Duration, Timestamp } from './model';\nimport { Actor } from './screenplay/actor/Actor';\nimport { SerenityConfig } from './SerenityConfig';\nimport { StageCrewMember, StageCrewMemberBuilder } from './stage';\nimport { Cast } from './stage/Cast';\nimport { Clock } from './stage/Clock';\nimport { Extras } from './stage/Extras';\nimport { Stage } from './stage/Stage';\nimport { StageManager } from './stage/StageManager';\n\nexport class Serenity {\n    private static defaultCueTimeout    = Duration.ofSeconds(5);\n    private static defaultActors        = new Extras();\n\n    private stage: Stage;\n    private outputStream: OutputStream  = process.stdout;\n\n    /**\n     * @param {Clock} clock\n     */\n    constructor(private readonly clock: Clock = new Clock()) {\n        this.stage = new Stage(\n            Serenity.defaultActors,\n            new StageManager(Serenity.defaultCueTimeout, clock),\n        );\n    }\n\n    /**\n     * @desc\n     *  Configures Serenity/JS. Every call to this function\n     *  replaces the previous configuration provided,\n     *  so this function should called be exactly once\n     *  in your test suite.\n     *\n     * @param {SerenityConfig} config\n     * @return {void}\n     */\n    configure(config: SerenityConfig): void {\n        const looksLikeBuilder          = has<StageCrewMemberBuilder>({ build: 'function' });\n        const looksLikeStageCrewMember  = has<StageCrewMember>({ assignedTo: 'function', notifyOf: 'function' });\n\n        const cueTimeout = config.cueTimeout\n            ? ensure('cueTimeout', config.cueTimeout, isInstanceOf(Duration))\n            : Serenity.defaultCueTimeout;\n\n        if (config.outputStream) {\n            this.outputStream = config.outputStream;\n        }\n\n        this.stage = new Stage(\n            Serenity.defaultActors,\n            new StageManager(cueTimeout, this.clock),\n        );\n\n        if (config.actors) {\n            this.engage(config.actors);\n        }\n\n        if (Array.isArray(config.crew)) {\n            this.stage.assign(\n                ...config.crew.map((stageCrewMember, i) => {\n                    if (looksLikeBuilder(stageCrewMember)) {\n                        return stageCrewMember.build({ stage: this.stage, outputStream: this.outputStream });\n                    }\n\n                    if (looksLikeStageCrewMember(stageCrewMember)) {\n                        return stageCrewMember.assignedTo(this.stage);\n                    }\n\n                    throw new ConfigurationError(\n                        formatted `Entries under \\`crew\\` should implement either StageCrewMember or StageCrewMemberBuilder interfaces, \\`${ stageCrewMember }\\` found at index ${ i }`\n                    );\n                }),\n            );\n        }\n    }\n\n    /**\n     * @desc\n     *  Re-configures Serenity/JS with a new {@link Cast} of {@link Actor}s\n     *  you'd like to use in any subsequent call to {@link actorCalled}.\n     *\n     *  This method provides an alternative to calling {@link Actor#whoCan}\n     *  directly in your tests and you'd typically us it in a \"before each\"\n     *  hook of your test runner of choice.\n     *\n     * @example <caption>Engaging a cast of actors</caption>\n     *  import { Actor, Cast } from '@serenity-js/core';\n     *\n     *  class Actors implements Cast {\n     *      prepare(actor: Actor) {\n     *          return actor.whoCan(\n     *              // ... abilities you'd like the Actor to have\n     *          );\n     *      }\n     *  }\n     *\n     * engage(new Actors();\n     *\n     * @example <caption>Usage with Jasmine</caption>\n     *  import 'jasmine';\n     *\n     *  beforeEach(() => engage(new Actors()));\n     *\n     * @example <caption>Usage with Cucumber</caption>\n     *  import { Before } from 'cucumber';\n     *\n     *  Before(() => engage(new Actors());\n     *\n     * @param {Cast} actors\n     * @returns {void}\n     *\n     * @see {@link Actor}\n     * @see {@link Cast}\n     */\n    engage(actors: Cast): void {\n        this.stage.engage(\n            ensure('actors', actors, property('prepare', isDefined())),\n        );\n    }\n\n    /**\n     * @desc\n     *  Instantiates or retrieves an actor {@link Actor}\n     *  called `name` if one has already been instantiated.\n     *\n     * @example <caption>Usage with Jasmine</caption>\n     *   import 'jasmine';\n     *   import { actorCalled } from '@serenity-js/core';\n     *\n     *   describe('Feature', () => {\n     *\n     *      it('should have some behaviour', () =>\n     *          actorCalled('James').attemptsTo(\n     *              // ... activities\n     *          ));\n     *   });\n     *\n     * @example <caption>Usage with Cucumber</caption>\n     *   import { actorCalled } from '@serenity-js/core';\n     *   import { Given } from 'cucumber';\n     *\n     *   Given(/(.*?) is a registered user/, (name: string) =>\n     *      actorCalled(name).attemptsTo(\n     *              // ... activities\n     *          ));\n     *\n     * @param {string} name\n     *  The name of the actor to instantiate or retrieve\n     *\n     * @returns {Actor}\n     *\n     * @see {@link engage}\n     * @see {@link Actor}\n     * @see {@link Cast}\n     */\n    theActorCalled(name: string): Actor {\n        return this.stage.theActorCalled(name);\n    }\n\n    /**\n     * @desc\n     *  Retrieves an actor who was last instantiated or retrieved\n     *  using {@link actorCalled}.\n     *\n     *  This function is particularly useful when automating Cucumber scenarios.\n     *\n     * @example <caption>Usage with Cucumber</caption>\n     *   import { actorCalled } from '@serenity-js/core';\n     *   import { Given, When } from 'cucumber';\n     *\n     *   Given(/(.*?) is a registered user/, (name: string) =>\n     *      actorCalled(name).attemptsTo(\n     *              // ... activities\n     *          ));\n     *\n     *   When(/(?:he|she|they) browse their recent orders/, () =>\n     *      actorInTheSpotlight().attemptsTo(\n     *              // ... activities\n     *          ));\n     *\n     * @returns {Actor}\n     *\n     * @see {@link engage}\n     * @see {@link actorCalled}\n     * @see {@link Actor}\n     * @see {@link Cast}\n     */\n    theActorInTheSpotlight(): Actor {\n        return this.stage.theActorInTheSpotlight();\n    }\n\n    announce(event: DomainEvent): void {\n        this.stage.announce(event);\n    }\n\n    currentTime(): Timestamp {\n        return this.stage.currentTime();\n    }\n\n    assignNewSceneId(): CorrelationId {\n        return this.stage.assignNewSceneId();\n    }\n\n    currentSceneId(): CorrelationId {\n        return this.stage.currentSceneId();\n    }\n\n    assignNewActivityId(): CorrelationId {\n        return this.stage.assignNewActivityId();\n    }\n\n    /**\n     * @package\n     */\n    waitForNextCue(): Promise<void> {\n        return this.stage.waitForNextCue();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/Serenity.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 32,
    "kind": "class",
    "name": "Serenity",
    "memberof": "src/Serenity.ts",
    "static": true,
    "longname": "src/Serenity.ts~Serenity",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{Serenity}",
    "description": " ",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "defaultCueTimeout",
    "memberof": "src/Serenity.ts~Serenity",
    "static": true,
    "longname": "src/Serenity.ts~Serenity.defaultCueTimeout",
    "access": "private",
    "description": " ",
    "lineNumber": 17,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "defaultActors",
    "memberof": "src/Serenity.ts~Serenity",
    "static": true,
    "longname": "src/Serenity.ts~Serenity.defaultActors",
    "access": "private",
    "description": " ",
    "lineNumber": 18,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "member",
    "name": "stage",
    "memberof": "src/Serenity.ts~Serenity",
    "static": false,
    "longname": "src/Serenity.ts~Serenity#stage",
    "access": "private",
    "description": " ",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Stage"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 36,
    "kind": "member",
    "name": "outputStream",
    "memberof": "src/Serenity.ts~Serenity",
    "static": false,
    "longname": "src/Serenity.ts~Serenity#outputStream",
    "access": "private",
    "description": " ",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "OutputStream"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 37,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Clock"
        ],
        "spread": false,
        "optional": false,
        "name": "clock",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#configure",
    "access": "public",
    "description": " Configures Serenity/JS. Every call to this function\n replaces the previous configuration provided,\n so this function should called be exactly once\n in your test suite.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "SerenityConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "engage",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#engage",
    "access": "public",
    "description": " Re-configures Serenity/JS with a new {@link Cast} of {@link Actor}s\n you'd like to use in any subsequent call to {@link actorCalled}.\n\n This method provides an alternative to calling {@link Actor#whoCan}\n directly in your tests and you'd typically us it in a \"before each\"\n hook of your test runner of choice.",
    "examples": [
      "<caption>Engaging a cast of actors</caption>\n import { Actor, Cast } from '@serenity-js/core';\n\n class Actors implements Cast {\n     prepare(actor: Actor) {\n         return actor.whoCan(\n             // ... abilities you'd like the Actor to have\n         );\n     }\n }\n\nengage(new Actors();",
      "<caption>Usage with Jasmine</caption>\n import 'jasmine';\n\n beforeEach(() => engage(new Actors()));",
      "<caption>Usage with Cucumber</caption>\n import { Before } from 'cucumber';\n\n Before(() => engage(new Actors());"
    ],
    "see": [
      "{@link Actor}",
      "{@link Cast}"
    ],
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Cast"
        ],
        "spread": false,
        "optional": false,
        "name": "actors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "theActorCalled",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#theActorCalled",
    "access": "public",
    "description": " Instantiates or retrieves an actor {@link Actor}\n called `name` if one has already been instantiated.",
    "examples": [
      "<caption>Usage with Jasmine</caption>\n  import 'jasmine';\n  import { actorCalled } from '@serenity-js/core';\n\n  describe('Feature', () => {\n\n     it('should have some behaviour', () =>\n         actorCalled('James').attemptsTo(\n             // ... activities\n         ));\n  });",
      "<caption>Usage with Cucumber</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { Given } from 'cucumber';\n\n  Given(/(.*?) is a registered user/, (name: string) =>\n     actorCalled(name).attemptsTo(\n             // ... activities\n         ));"
    ],
    "see": [
      "{@link engage}",
      "{@link Actor}",
      "{@link Cast}"
    ],
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Actor}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the actor to instantiate or retrieve"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "theActorInTheSpotlight",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#theActorInTheSpotlight",
    "access": "public",
    "description": " Retrieves an actor who was last instantiated or retrieved\n using {@link actorCalled}.\n\n This function is particularly useful when automating Cucumber scenarios.",
    "examples": [
      "<caption>Usage with Cucumber</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { Given, When } from 'cucumber';\n\n  Given(/(.*?) is a registered user/, (name: string) =>\n     actorCalled(name).attemptsTo(\n             // ... activities\n         ));\n\n  When(/(?:he|she|they) browse their recent orders/, () =>\n     actorInTheSpotlight().attemptsTo(\n             // ... activities\n         ));"
    ],
    "see": [
      "{@link engage}",
      "{@link actorCalled}",
      "{@link Actor}",
      "{@link Cast}"
    ],
    "lineNumber": 295,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Actor}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "announce",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#announce",
    "access": "public",
    "description": " ",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "currentTime",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#currentTime",
    "access": "public",
    "description": " ",
    "lineNumber": 202,
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "assignNewSceneId",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#assignNewSceneId",
    "access": "public",
    "description": " ",
    "lineNumber": 206,
    "return": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "currentSceneId",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#currentSceneId",
    "access": "public",
    "description": " ",
    "lineNumber": 210,
    "return": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "assignNewActivityId",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#assignNewActivityId",
    "access": "public",
    "description": " ",
    "lineNumber": 214,
    "return": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "waitForNextCue",
    "memberof": "src/Serenity.ts~Serenity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Serenity.ts~Serenity#waitForNextCue",
    "access": "package",
    "description": "",
    "lineNumber": 390,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/SerenityConfig.ts",
    "content": "import { OutputStream } from './io';\nimport { Duration } from './model';\nimport { Cast, StageCrewMember, StageCrewMemberBuilder } from './stage';\n\n/**\n * @interface\n *\n * @see {@link configure}\n */\nexport abstract class SerenityConfig {\n    /**\n     * @desc\n     *  A {@link Cast} of {@link Actor}s to be used when {@link actorCalled}\n     *  and {@link actorInTheSpotlight} functions are called.\n     *\n     * @type {?Cast}\n     */\n    actors?:        Cast;\n\n    /**\n     * @desc\n     *  A list of {@link StageCrewMemberBuilder}s or {@link StageCrewMember}s\n     *  to be notified of {@link DomainEvent}s that occur during the scenario execution.\n     *\n     * @type {?Array<StageCrewMember | StageCrewMemberBuilder>}\n     */\n    crew?:          Array<StageCrewMember | StageCrewMemberBuilder>;\n\n    /**\n     * @desc\n     *  The maximum amount of time Serenity/JS should wait for any post-scenario\n     *  async operations to complete. Those include generating the screenshots,\n     *  saving reports to disk and so on. **Please note** that this is not\n     *  a scenario timeout, which should be configured in your test runner.\n     *\n     * @type {?Duration}\n     */\n    cueTimeout?:    Duration;\n\n    /**\n     * @desc\n     *  An output stream to be injected into {@link StageCrewMemberBuilder}s\n     *\n     *  Defaults to [`process.stdout`](https://nodejs.org/api/process.html#process_process_stdout).\n     *\n     * @type {?OutputStream}\n     */\n    outputStream?: OutputStream;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/SerenityConfig.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "SerenityConfig",
    "memberof": "src/SerenityConfig.ts",
    "static": true,
    "longname": "src/SerenityConfig.ts~SerenityConfig",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{SerenityConfig}",
    "description": "",
    "see": [
      "{@link configure}"
    ],
    "lineNumber": 17,
    "interface": true
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "actors",
    "memberof": "src/SerenityConfig.ts~SerenityConfig",
    "static": false,
    "longname": "src/SerenityConfig.ts~SerenityConfig#actors",
    "access": "public",
    "description": " A {@link Cast} of {@link Actor}s to be used when {@link actorCalled}\n and {@link actorInTheSpotlight} functions are called.",
    "lineNumber": 36,
    "type": {
      "nullable": true,
      "types": [
        "Cast"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "crew",
    "memberof": "src/SerenityConfig.ts~SerenityConfig",
    "static": false,
    "longname": "src/SerenityConfig.ts~SerenityConfig#crew",
    "access": "public",
    "description": " A list of {@link StageCrewMemberBuilder}s or {@link StageCrewMember}s\n to be notified of {@link DomainEvent}s that occur during the scenario execution.",
    "lineNumber": 56,
    "type": {
      "nullable": true,
      "types": [
        "Array<StageCrewMember | StageCrewMemberBuilder>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "cueTimeout",
    "memberof": "src/SerenityConfig.ts~SerenityConfig",
    "static": false,
    "longname": "src/SerenityConfig.ts~SerenityConfig#cueTimeout",
    "access": "public",
    "description": " The maximum amount of time Serenity/JS should wait for any post-scenario\n async operations to complete. Those include generating the screenshots,\n saving reports to disk and so on. **Please note** that this is not\n a scenario timeout, which should be configured in your test runner.",
    "lineNumber": 78,
    "type": {
      "nullable": true,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "outputStream",
    "memberof": "src/SerenityConfig.ts~SerenityConfig",
    "static": false,
    "longname": "src/SerenityConfig.ts~SerenityConfig#outputStream",
    "access": "public",
    "description": " An output stream to be injected into {@link StageCrewMemberBuilder}s\n\n Defaults to [`process.stdout`](https://nodejs.org/api/process.html#process_process_stdout).",
    "lineNumber": 99,
    "type": {
      "nullable": true,
      "types": [
        "OutputStream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/errors/AssertionError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that an assertion has failed.\n *\n * @extends {RuntimeError}\n */\nexport class AssertionError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {unknown} expected - The value that was expected\n     * @param {unknown} actual - The value that was received instead of the expected one\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, public readonly expected: unknown, public readonly actual: unknown, cause?: Error) {\n        super(AssertionError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/errors/AssertionError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "class",
    "name": "AssertionError",
    "memberof": "src/errors/AssertionError.ts",
    "static": true,
    "longname": "src/errors/AssertionError.ts~AssertionError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{AssertionError}",
    "description": " Thrown to indicate that an assertion has failed.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 59,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/AssertionError.ts~AssertionError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/AssertionError.ts~AssertionError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "unknown"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": "The value that was expected"
      },
      {
        "nullable": null,
        "types": [
          "unknown"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": "The value that was received instead of the expected one"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/errors/ConfigurationError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that a test framework or test suite configuration error occurs.\n *\n * @extends {RuntimeError}\n */\nexport class ConfigurationError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, cause?: Error) {\n        super(ConfigurationError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/errors/ConfigurationError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "class",
    "name": "ConfigurationError",
    "memberof": "src/errors/ConfigurationError.ts",
    "static": true,
    "longname": "src/errors/ConfigurationError.ts~ConfigurationError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{ConfigurationError}",
    "description": " Thrown to indicate that a test framework or test suite configuration error occurs.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 62,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/ConfigurationError.ts~ConfigurationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/ConfigurationError.ts~ConfigurationError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/errors/ImplementationPendingError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that the {@link Actor} attempted to perform\n *  a {@link Task} or {@link Interaction} that hasn't been implemented yet.\n *\n * @example <caption>A pending Task</caption>\n *  import { Task } from '@serenity-js/core';\n *\n *  // A pending Task is one that encapsulates no other activities\n *  const Authenticate = () =>\n *      Task.where(`#actor authenticates with the service up a test database` );\n *\n * @example <caption>A pending Interaction</caption>\n *  import { Interaction } from '@serenity-js/core';\n *\n *  // A pending Interaction is one that doesn't perform any action\n *  const DoubleClick = () =>\n *      Interaction.where(`#actor double-clicks`);\n *\n * @extends {RuntimeError}\n */\nexport class ImplementationPendingError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, cause?: Error) {\n        super(ImplementationPendingError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/errors/ImplementationPendingError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "ImplementationPendingError",
    "memberof": "src/errors/ImplementationPendingError.ts",
    "static": true,
    "longname": "src/errors/ImplementationPendingError.ts~ImplementationPendingError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{ImplementationPendingError}",
    "description": " Thrown to indicate that the {@link Actor} attempted to perform\n a {@link Task} or {@link Interaction} that hasn't been implemented yet.",
    "examples": [
      "<caption>A pending Task</caption>\n import { Task } from '@serenity-js/core';\n\n // A pending Task is one that encapsulates no other activities\n const Authenticate = () =>\n     Task.where(`#actor authenticates with the service up a test database` );",
      "<caption>A pending Interaction</caption>\n import { Interaction } from '@serenity-js/core';\n\n // A pending Interaction is one that doesn't perform any action\n const DoubleClick = () =>\n     Interaction.where(`#actor double-clicks`);"
    ],
    "lineNumber": 31,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/ImplementationPendingError.ts~ImplementationPendingError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/ImplementationPendingError.ts~ImplementationPendingError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/errors/LogicError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that an {@link Interaction}, a {@link Task} or a test scenario\n *  can't be executed due to a logical error.\n *  For example, it's not possible to assert on the last HTTP Response if the request\n *  hasn't been performed yet.\n *\n * @extends {RuntimeError}\n */\nexport class LogicError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, cause?: Error) {\n        super(LogicError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/errors/LogicError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "LogicError",
    "memberof": "src/errors/LogicError.ts",
    "static": true,
    "longname": "src/errors/LogicError.ts~LogicError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{LogicError}",
    "description": " Thrown to indicate that an {@link Interaction}, a {@link Task} or a test scenario\n can't be executed due to a logical error.\n For example, it's not possible to assert on the last HTTP Response if the request\n hasn't been performed yet.",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 68,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/LogicError.ts~LogicError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/LogicError.ts~LogicError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/errors/RuntimeError.ts",
    "content": "/**\n * @desc\n *  Base class for custom errors that may occur during execution of a test scenario.\n *\n * @example <caption>Custom Error definition</caption>\n * import { RuntimeError } from '@serenity-js/core';\n *\n * export class CustomError extends RuntimeError {\n *   constructor(message: string, cause?: Error) {\n *       super(CustomError, message, cause);\n *   }\n * }\n *\n * @example <caption>Sync error handling</caption>\n * try {\n *     operationThatMightThrowAnError();\n * } catch(error) {\n *     // catch and re-throw\n *     throw new CustomError('operationThatMightThrowAnError has failed', error);\n * }\n *\n * @example <caption>Async error handling</caption>\n * operationThatMightRejectAPromise().catch(error => {\n *     // catch and re-throw\n *     throw new CustomError('operationThatMightThrowAnError has failed', error);\n * });\n *\n * @extends {Error}\n */\nexport abstract class RuntimeError extends Error {\n\n    /**\n     * @param {Function} type - Constructor function used to instantiate a subclass of a RuntimeError\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    protected constructor(\n        type: new (...args: any[]) => RuntimeError,\n        message: string,\n        public readonly cause?: Error,\n    ) {\n        super(message);\n        Object.setPrototypeOf(this, type.prototype);\n        this.name = this.constructor.name;\n\n        Error.captureStackTrace(this, type);\n\n        if (cause) {\n            this.stack = `${ this.stack }\\nCaused by: ${ cause.stack }`;\n        }\n    }\n\n    /**\n     * @desc\n     *  Human-readable description\n     */\n    toString(): string {\n        return `${ this.constructor.name }: ${ this.message }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/errors/RuntimeError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "RuntimeError",
    "memberof": "src/errors/RuntimeError.ts",
    "static": true,
    "longname": "src/errors/RuntimeError.ts~RuntimeError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{RuntimeError}",
    "description": " Base class for custom errors that may occur during execution of a test scenario.",
    "examples": [
      "<caption>Custom Error definition</caption>\nimport { RuntimeError } from '@serenity-js/core';\n\nexport class CustomError extends RuntimeError {\n  constructor(message: string, cause?: Error) {\n      super(CustomError, message, cause);\n  }\n}",
      "<caption>Sync error handling</caption>\ntry {\n    operationThatMightThrowAnError();\n} catch(error) {\n    // catch and re-throw\n    throw new CustomError('operationThatMightThrowAnError has failed', error);\n}",
      "<caption>Async error handling</caption>\noperationThatMightRejectAPromise().catch(error => {\n    // catch and re-throw\n    throw new CustomError('operationThatMightThrowAnError has failed', error);\n});"
    ],
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/RuntimeError.ts~RuntimeError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/RuntimeError.ts~RuntimeError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Constructor function used to instantiate a subclass of a RuntimeError"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "name",
    "memberof": "src/errors/RuntimeError.ts~RuntimeError",
    "static": false,
    "longname": "src/errors/RuntimeError.ts~RuntimeError#name",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "stack",
    "memberof": "src/errors/RuntimeError.ts~RuntimeError",
    "static": false,
    "longname": "src/errors/RuntimeError.ts~RuntimeError#stack",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "toString",
    "memberof": "src/errors/RuntimeError.ts~RuntimeError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/RuntimeError.ts~RuntimeError#toString",
    "access": "public",
    "description": " Human-readable description",
    "lineNumber": 75,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/errors/TestCompromisedError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that the test can't be performed due to an issue with a downstream dependency.\n *  For example, it makes no sense to run a full-stack integration test if we already know that\n *  the database server is down.\n *\n * @example <caption>Throwing a TestCompromisedError from a custom Interaction</caption>\n *  import { Interaction } from '@serenity-js/core';\n *\n *  const SetUpTestDatabase = () =>\n *      Interaction.where(`#actor sets up a test database`, actor => {\n *          return SomeCustomDatabaseSpecificAbility.as(actor).setUpTestDatabase().catch(error => {\n *              throw new TestCompromisedError('Could not set up the test database', error);\n *          });\n *      });\n *\n * @extends {RuntimeError}\n */\nexport class TestCompromisedError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, cause?: Error) {\n        super(TestCompromisedError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/errors/TestCompromisedError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "class",
    "name": "TestCompromisedError",
    "memberof": "src/errors/TestCompromisedError.ts",
    "static": true,
    "longname": "src/errors/TestCompromisedError.ts~TestCompromisedError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{TestCompromisedError}",
    "description": " Thrown to indicate that the test can't be performed due to an issue with a downstream dependency.\n For example, it makes no sense to run a full-stack integration test if we already know that\n the database server is down.",
    "examples": [
      "<caption>Throwing a TestCompromisedError from a custom Interaction</caption>\n import { Interaction } from '@serenity-js/core';\n\n const SetUpTestDatabase = () =>\n     Interaction.where(`#actor sets up a test database`, actor => {\n         return SomeCustomDatabaseSpecificAbility.as(actor).setUpTestDatabase().catch(error => {\n             throw new TestCompromisedError('Could not set up the test database', error);\n         });\n     });"
    ],
    "lineNumber": 28,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/TestCompromisedError.ts~TestCompromisedError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/TestCompromisedError.ts~TestCompromisedError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/errors/UnknownError.ts",
    "content": "import { RuntimeError } from './RuntimeError';\n\n/**\n * @desc\n *  Thrown to indicate that an unknown error has occurred.\n *\n * @extends {RuntimeError}\n */\nexport class UnknownError extends RuntimeError {\n\n    /**\n     * @param {string} message - Human-readable description of the error\n     * @param {Error} [cause] - The root cause of this {@link RuntimeError}, if any\n     */\n    constructor(message: string, cause?: Error) {\n        super(UnknownError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/errors/UnknownError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "UnknownError",
    "memberof": "src/errors/UnknownError.ts",
    "static": true,
    "longname": "src/errors/UnknownError.ts~UnknownError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/errors",
    "importStyle": "{UnknownError}",
    "description": " Thrown to indicate that an unknown error has occurred.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 80,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/UnknownError.ts~UnknownError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/UnknownError.ts~UnknownError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Human-readable description of the error"
      },
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": true,
        "name": "cause",
        "description": "The root cause of this {@link RuntimeError}, if any"
      }
    ]
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/errors/index.ts",
    "content": "export * from './AssertionError';\nexport * from './ConfigurationError';\nexport * from './ImplementationPendingError';\nexport * from './LogicError';\nexport * from './RuntimeError';\nexport * from './TestCompromisedError';\nexport * from './UnknownError';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/errors/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/events/ActivityFinished.ts",
    "content": "import { ensure, isDefined } from 'tiny-types';\n\nimport { ActivityDetails, CorrelationId, Outcome, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\n/**\n * @desc\n *  Emitted when an {@link Activity} is finished.\n *\n * @abstract\n * @extends {DomainEvent}\n */\nexport abstract class ActivityFinished extends DomainEvent {\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly activityId: CorrelationId,\n        public readonly details: ActivityDetails,\n        public readonly outcome: Outcome,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('activityId', activityId, isDefined());\n        ensure('details', details, isDefined());\n        ensure('outcome', outcome, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/ActivityFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "ActivityFinished",
    "memberof": "src/events/ActivityFinished.ts",
    "static": true,
    "longname": "src/events/ActivityFinished.ts~ActivityFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ActivityFinished}",
    "description": " Emitted when an {@link Activity} is finished.",
    "lineNumber": 20,
    "abstract": true,
    "interface": false,
    "extends": [
      "DomainEvent"
    ]
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ActivityFinished.ts~ActivityFinished",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ActivityFinished.ts~ActivityFinished#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/events/ActivityRelatedArtifactArchived.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Path } from '../io';\nimport { Artifact, ArtifactType, CorrelationId, Name, Timestamp } from '../model';\nimport { ArtifactArchived } from './ArtifactArchived';\n\n// todo: there should be two types of events here:\n//  - ActivityArtifactGenerated\n//  - SceneArtifactGenerated\nexport class ActivityRelatedArtifactArchived extends ArtifactArchived {\n    static fromJSON(o: JSONObject): ActivityRelatedArtifactArchived {\n        return new ActivityRelatedArtifactArchived(\n            CorrelationId.fromJSON(o.sceneId as string),\n            CorrelationId.fromJSON(o.activityId as string),\n            Name.fromJSON(o.name as string),\n            Artifact.ofType(o.type as string),\n            Path.fromJSON(o.path as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        sceneId: CorrelationId,\n        public readonly activityId: CorrelationId,\n        name: Name,\n        type: ArtifactType,\n        path: Path,\n        timestamp?: Timestamp,\n    ) {\n        super(sceneId, name, type, path, timestamp);\n        ensure('activityId', activityId, isDefined());\n    }\n\n    toJSON(): JSONObject {\n        return {\n            sceneId: this.sceneId.toJSON(),\n            activityId: this.activityId.toJSON(),\n            name: this.name.toJSON(),\n            type: this.type.name,\n            path: this.path.toJSON(),\n            timestamp: this.timestamp.toJSON(),\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/ActivityRelatedArtifactArchived.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "ActivityRelatedArtifactArchived",
    "memberof": "src/events/ActivityRelatedArtifactArchived.ts",
    "static": true,
    "longname": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ActivityRelatedArtifactArchived}",
    "description": " ",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/events/ArtifactArchived.js~ArtifactArchived"
    ]
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ActivityRelatedArtifactArchived"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "JSONObject"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/events/ActivityRelatedArtifactGenerated.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Artifact, CorrelationId, Name, SerialisedArtifact, Timestamp } from '../model';\nimport { ArtifactGenerated } from './ArtifactGenerated';\n\nexport class ActivityRelatedArtifactGenerated extends ArtifactGenerated {\n    static fromJSON(o: JSONObject): ActivityRelatedArtifactGenerated {\n        return new ActivityRelatedArtifactGenerated(\n            CorrelationId.fromJSON(o.sceneId as string),\n            CorrelationId.fromJSON(o.activityId as string),\n            Name.fromJSON(o.name as string),\n            Artifact.fromJSON(o.artifact as SerialisedArtifact),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        sceneId: CorrelationId,\n        public readonly activityId: CorrelationId,\n        name: Name,\n        artifact: Artifact,\n        timestamp?: Timestamp,\n    ) {\n        super(sceneId, name, artifact, timestamp);\n        ensure('activityId', activityId, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/ActivityRelatedArtifactGenerated.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "ActivityRelatedArtifactGenerated",
    "memberof": "src/events/ActivityRelatedArtifactGenerated.ts",
    "static": true,
    "longname": "src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ActivityRelatedArtifactGenerated}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/ArtifactGenerated.js~ArtifactGenerated"
    ]
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ActivityRelatedArtifactGenerated"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/events/ActivityStarts.ts",
    "content": "import { ensure, isDefined } from 'tiny-types';\n\nimport { ActivityDetails, CorrelationId, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\n/**\n * @desc\n *  Emitted when an {@link Activity} starts.\n *\n * @abstract\n * @extends {DomainEvent}\n */\nexport abstract class ActivityStarts extends DomainEvent {\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly activityId: CorrelationId,\n        public readonly details: ActivityDetails,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('activityId', activityId, isDefined());\n        ensure('details', details, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/ActivityStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "ActivityStarts",
    "memberof": "src/events/ActivityStarts.ts",
    "static": true,
    "longname": "src/events/ActivityStarts.ts~ActivityStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ActivityStarts}",
    "description": " Emitted when an {@link Activity} starts.",
    "lineNumber": 20,
    "abstract": true,
    "interface": false,
    "extends": [
      "DomainEvent"
    ]
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ActivityStarts.ts~ActivityStarts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ActivityStarts.ts~ActivityStarts#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/events/ArtifactArchived.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Path } from '../io';\nimport { Artifact, ArtifactType, CorrelationId, Name, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class ArtifactArchived extends DomainEvent {\n    static fromJSON(o: JSONObject): ArtifactArchived {\n        return new ArtifactArchived(\n            CorrelationId.fromJSON(o.sceneId as string),\n            Name.fromJSON(o.name as string),\n            Artifact.ofType(o.type as string),\n            Path.fromJSON(o.path as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly name: Name,\n        public readonly type: ArtifactType,\n        public readonly path: Path,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n\n        ensure('sceneId', sceneId, isDefined());\n        ensure('name', name, isDefined());\n        ensure('type', type, isDefined());\n        ensure('path', path, isDefined());\n    }\n\n    toJSON(): JSONObject {\n        return {\n            name: this.name.toJSON(),\n            type: this.type.name,\n            path: this.path.toJSON(),\n            timestamp: this.timestamp.toJSON(),\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/ArtifactArchived.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "class",
    "name": "ArtifactArchived",
    "memberof": "src/events/ArtifactArchived.ts",
    "static": true,
    "longname": "src/events/ArtifactArchived.ts~ArtifactArchived",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ArtifactArchived}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/ArtifactArchived.ts~ArtifactArchived",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/ArtifactArchived.ts~ArtifactArchived.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ArtifactArchived"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ArtifactArchived.ts~ArtifactArchived",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ArtifactArchived.ts~ArtifactArchived#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/events/ArtifactArchived.ts~ArtifactArchived",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ArtifactArchived.ts~ArtifactArchived#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 33,
    "return": {
      "nullable": null,
      "types": [
        "JSONObject"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/events/ArtifactGenerated.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Artifact, CorrelationId, Name, SerialisedArtifact, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class ArtifactGenerated extends DomainEvent {\n    static fromJSON(o: JSONObject): ArtifactGenerated {\n        return new ArtifactGenerated(\n            CorrelationId.fromJSON(o.sceneId as string),\n            Name.fromJSON(o.name as string),\n            Artifact.fromJSON(o.artifact as SerialisedArtifact),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly name: Name,\n        public readonly artifact: Artifact,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('name', name, isDefined());\n        ensure('artifact', artifact, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/ArtifactGenerated.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "class",
    "name": "ArtifactGenerated",
    "memberof": "src/events/ArtifactGenerated.ts",
    "static": true,
    "longname": "src/events/ArtifactGenerated.ts~ArtifactGenerated",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{ArtifactGenerated}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/ArtifactGenerated.ts~ArtifactGenerated",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/ArtifactGenerated.ts~ArtifactGenerated.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ArtifactGenerated"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 105,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ArtifactGenerated.ts~ArtifactGenerated",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ArtifactGenerated.ts~ArtifactGenerated#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/events/AsyncOperationAttempted.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Description, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class AsyncOperationAttempted extends DomainEvent {\n    static fromJSON(o: JSONObject): AsyncOperationAttempted {\n        return new AsyncOperationAttempted(\n            Description.fromJSON(o.taskDescription as string),\n            CorrelationId.fromJSON(o.correlationId as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly taskDescription: Description,\n        public readonly correlationId: CorrelationId,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('taskDescription', taskDescription, isDefined());\n        ensure('correlationId', correlationId, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/AsyncOperationAttempted.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "class",
    "name": "AsyncOperationAttempted",
    "memberof": "src/events/AsyncOperationAttempted.ts",
    "static": true,
    "longname": "src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{AsyncOperationAttempted}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AsyncOperationAttempted"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 109,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/events/AsyncOperationCompleted.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Description, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class AsyncOperationCompleted extends DomainEvent {\n    static fromJSON(o: JSONObject): AsyncOperationCompleted {\n        return new AsyncOperationCompleted(\n            Description.fromJSON(o.taskDescription as string),\n            CorrelationId.fromJSON(o.correlationId as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly taskDescription: Description,\n        public readonly correlationId: CorrelationId,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('taskDescription', taskDescription, isDefined());\n        ensure('correlationId', correlationId, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/AsyncOperationCompleted.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "class",
    "name": "AsyncOperationCompleted",
    "memberof": "src/events/AsyncOperationCompleted.ts",
    "static": true,
    "longname": "src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{AsyncOperationCompleted}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AsyncOperationCompleted"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/events/AsyncOperationFailed.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { ErrorSerialiser } from '../io';\nimport { CorrelationId, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class AsyncOperationFailed extends DomainEvent {\n    static fromJSON(o: JSONObject): AsyncOperationFailed {\n        return new AsyncOperationFailed(\n            ErrorSerialiser.deserialise(o.error as string),\n            CorrelationId.fromJSON(o.correlationId as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly error: Error,\n        public readonly correlationId: CorrelationId,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('error', error, isDefined());\n        ensure('correlationId', correlationId, isDefined());\n    }\n\n    toJSON(): JSONObject {\n        return {\n            correlationId: this.correlationId.toJSON(),\n            error: ErrorSerialiser.serialise(this.error),\n            timestamp: this.timestamp.toJSON(),\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/AsyncOperationFailed.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "class",
    "name": "AsyncOperationFailed",
    "memberof": "src/events/AsyncOperationFailed.ts",
    "static": true,
    "longname": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{AsyncOperationFailed}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AsyncOperationFailed"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 117,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/AsyncOperationFailed.ts~AsyncOperationFailed#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "return": {
      "nullable": null,
      "types": [
        "JSONObject"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/events/BusinessRuleDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { BusinessRule, CorrelationId, ScenarioDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\n/**\n * @desc\n *  Emitted by [@serenity-js/cucumber](https://serenity-js.org/modules/cucumber)\n *  when a [business rule](https://cucumber.io/docs/gherkin/reference/#rule) is detected.\n *\n * @extends {DomainEvent}\n */\nexport class BusinessRuleDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject): BusinessRuleDetected {\n        return new BusinessRuleDetected(\n            CorrelationId.fromJSON(o.sceneId as string),\n            ScenarioDetails.fromJSON(o.details as JSONObject),\n            BusinessRule.fromJSON(o.rule as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly details: ScenarioDetails,\n        public readonly rule: BusinessRule,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('details', details, isDefined());\n        ensure('rule', rule, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/BusinessRuleDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "BusinessRuleDetected",
    "memberof": "src/events/BusinessRuleDetected.ts",
    "static": true,
    "longname": "src/events/BusinessRuleDetected.ts~BusinessRuleDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{BusinessRuleDetected}",
    "description": " Emitted by [@serenity-js/cucumber](https://serenity-js.org/modules/cucumber)\n when a [business rule](https://cucumber.io/docs/gherkin/reference/#rule) is detected.",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "DomainEvent"
    ]
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/BusinessRuleDetected.ts~BusinessRuleDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/BusinessRuleDetected.ts~BusinessRuleDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BusinessRuleDetected"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/BusinessRuleDetected.ts~BusinessRuleDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/BusinessRuleDetected.ts~BusinessRuleDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/events/DomainEvent.ts",
    "content": "import { ensure, isDefined, TinyType } from 'tiny-types';\n\nimport { Timestamp } from '../model';\n\n/**\n * @desc\n *  Represents an internal domain event that occurs during test execution.\n *\n * @abstract\n * @extends {tiny-types~TinyType}\n */\nexport abstract class DomainEvent extends TinyType {\n\n    /**\n     * @param {Timestamp} timestamp\n     * @protected\n     */\n    protected constructor(public readonly timestamp: Timestamp = new Timestamp()) {\n        super();\n        ensure('timestamp', timestamp, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/DomainEvent.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "class",
    "name": "DomainEvent",
    "memberof": "src/events/DomainEvent.ts",
    "static": true,
    "longname": "src/events/DomainEvent.ts~DomainEvent",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{DomainEvent}",
    "description": " Represents an internal domain event that occurs during test execution.",
    "lineNumber": 19,
    "abstract": true,
    "interface": false,
    "extends": [
      "TinyType"
    ]
  },
  {
    "__docId__": 125,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/DomainEvent.ts~DomainEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/DomainEvent.ts~DomainEvent#constructor",
    "access": "protected",
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Timestamp"
        ],
        "spread": false,
        "optional": false,
        "name": "timestamp",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/events/FeatureNarrativeDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Description, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class FeatureNarrativeDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject): FeatureNarrativeDetected {\n        return new FeatureNarrativeDetected(\n            CorrelationId.fromJSON(o.sceneId as string),\n            Description.fromJSON(o.description as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly description: Description,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('description', description, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/FeatureNarrativeDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "class",
    "name": "FeatureNarrativeDetected",
    "memberof": "src/events/FeatureNarrativeDetected.ts",
    "static": true,
    "longname": "src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{FeatureNarrativeDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FeatureNarrativeDetected"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 129,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/events/InteractionFinished.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { ActivityDetails, CorrelationId, Outcome, SerialisedOutcome, Timestamp } from '../model';\nimport { ActivityFinished } from './ActivityFinished';\n\nexport class InteractionFinished extends ActivityFinished {\n    static fromJSON(o: JSONObject): InteractionFinished {\n        return new InteractionFinished(\n            CorrelationId.fromJSON(o.sceneId as string),\n            CorrelationId.fromJSON(o.activityId as string),\n            ActivityDetails.fromJSON(o.details as JSONObject),\n            Outcome.fromJSON(o.outcome as SerialisedOutcome),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/InteractionFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "InteractionFinished",
    "memberof": "src/events/InteractionFinished.ts",
    "static": true,
    "longname": "src/events/InteractionFinished.ts~InteractionFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{InteractionFinished}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/ActivityFinished.js~ActivityFinished"
    ]
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/InteractionFinished.ts~InteractionFinished",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/InteractionFinished.ts~InteractionFinished.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InteractionFinished"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/events/InteractionStarts.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { ActivityDetails, CorrelationId, Timestamp } from '../model';\nimport { ActivityStarts } from './ActivityStarts';\n\nexport class InteractionStarts extends ActivityStarts {\n    static fromJSON(o: JSONObject): InteractionStarts {\n        return new InteractionStarts(\n            CorrelationId.fromJSON(o.sceneId as string),\n            CorrelationId.fromJSON(o.activityId as string),\n            ActivityDetails.fromJSON(o.details as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/InteractionStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "class",
    "name": "InteractionStarts",
    "memberof": "src/events/InteractionStarts.ts",
    "static": true,
    "longname": "src/events/InteractionStarts.ts~InteractionStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{InteractionStarts}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/ActivityStarts.js~ActivityStarts"
    ]
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/InteractionStarts.ts~InteractionStarts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/InteractionStarts.ts~InteractionStarts.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "InteractionStarts"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/events/RetryableSceneDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\n/**\n * @desc\n *  Indicates that the test runner will retry running the test scenario upon failure.\n *\n * @extends {DomainEvent}\n */\nexport class RetryableSceneDetected extends DomainEvent {\n\n    /**\n     * @desc\n     *  Deserialises the event from a JSONObject\n     *\n     * @param {tiny-types~JSONObject} o\n     * @returns {RetryableSceneDetected}\n     */\n    static fromJSON(o: JSONObject): RetryableSceneDetected {\n        return new RetryableSceneDetected(\n            CorrelationId.fromJSON(o.sceneId as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    /**\n     * @param {CorrelationId} sceneId\n     * @param {Timestamp} [timestamp]\n     */\n    constructor(\n        public readonly sceneId: CorrelationId,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/RetryableSceneDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "class",
    "name": "RetryableSceneDetected",
    "memberof": "src/events/RetryableSceneDetected.ts",
    "static": true,
    "longname": "src/events/RetryableSceneDetected.ts~RetryableSceneDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{RetryableSceneDetected}",
    "description": " Indicates that the test runner will retry running the test scenario upon failure.",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "DomainEvent"
    ]
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/RetryableSceneDetected.ts~RetryableSceneDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/RetryableSceneDetected.ts~RetryableSceneDetected.fromJSON",
    "access": "public",
    "description": " Deserialises the event from a JSONObject",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RetryableSceneDetected}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RetryableSceneDetected"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 139,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/RetryableSceneDetected.ts~RetryableSceneDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/RetryableSceneDetected.ts~RetryableSceneDetected#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "CorrelationId"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Timestamp"
        ],
        "spread": false,
        "optional": true,
        "name": "timestamp",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/events/SceneBackgroundDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Description, Name } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneBackgroundDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject): SceneBackgroundDetected {\n        return new SceneBackgroundDetected(\n            CorrelationId.fromJSON(o.sceneId as string),\n            Name.fromJSON(o.name as string),\n            Description.fromJSON(o.description as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly name: Name,\n        public readonly description: Description,\n    ) {\n        super();\n        ensure('sceneId', sceneId, isDefined());\n        ensure('name', name, isDefined());\n        ensure('description', description, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/SceneBackgroundDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "class",
    "name": "SceneBackgroundDetected",
    "memberof": "src/events/SceneBackgroundDetected.ts",
    "static": true,
    "longname": "src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneBackgroundDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SceneBackgroundDetected"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 143,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/events/SceneDescriptionDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Description, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneDescriptionDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject): SceneDescriptionDetected {\n        return new SceneDescriptionDetected(\n            CorrelationId.fromJSON(o.sceneId as string),\n            Description.fromJSON(o.description as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly description: Description,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('description', description, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/SceneDescriptionDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "class",
    "name": "SceneDescriptionDetected",
    "memberof": "src/events/SceneDescriptionDetected.ts",
    "static": true,
    "longname": "src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneDescriptionDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SceneDescriptionDetected"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 147,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/events/SceneFinished.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Outcome, ScenarioDetails, SerialisedOutcome, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneFinished extends DomainEvent {\n    static fromJSON(o: JSONObject): SceneFinished {\n        return new SceneFinished(\n            CorrelationId.fromJSON(o.sceneId as string),\n            ScenarioDetails.fromJSON(o.details as JSONObject),\n            Outcome.fromJSON(o.outcome as SerialisedOutcome),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly details: ScenarioDetails,\n        public readonly outcome: Outcome,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('details', details, isDefined());\n        ensure('outcome', outcome, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/SceneFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "class",
    "name": "SceneFinished",
    "memberof": "src/events/SceneFinished.ts",
    "static": true,
    "longname": "src/events/SceneFinished.ts~SceneFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneFinished}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneFinished.ts~SceneFinished",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneFinished.ts~SceneFinished.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SceneFinished"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneFinished.ts~SceneFinished",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneFinished.ts~SceneFinished#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/events/SceneFinishes.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Outcome, ScenarioDetails, SerialisedOutcome, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneFinishes extends DomainEvent {\n    static fromJSON(o: JSONObject): SceneFinishes {\n        return new SceneFinishes(\n            CorrelationId.fromJSON(o.sceneId as string),\n            ScenarioDetails.fromJSON(o.details as JSONObject),\n            Outcome.fromJSON(o.outcome as SerialisedOutcome),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly details: ScenarioDetails,\n        public readonly outcome: Outcome,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('details', details, isDefined());\n        ensure('outcome', outcome, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/SceneFinishes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "class",
    "name": "SceneFinishes",
    "memberof": "src/events/SceneFinishes.ts",
    "static": true,
    "longname": "src/events/SceneFinishes.ts~SceneFinishes",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneFinishes}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneFinishes.ts~SceneFinishes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneFinishes.ts~SceneFinishes.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SceneFinishes"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneFinishes.ts~SceneFinishes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneFinishes.ts~SceneFinishes#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "src/events/SceneParametersDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, ScenarioDetails, ScenarioParameters, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneParametersDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject): SceneParametersDetected {\n        return new SceneParametersDetected(\n            CorrelationId.fromJSON(o.sceneId as string),\n            ScenarioDetails.fromJSON(o.details as JSONObject),\n            ScenarioParameters.fromJSON(o.parameters as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly details: ScenarioDetails,\n        public readonly parameters: ScenarioParameters,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('details', details, isDefined());\n        ensure('parameters', parameters, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/SceneParametersDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "SceneParametersDetected",
    "memberof": "src/events/SceneParametersDetected.ts",
    "static": true,
    "longname": "src/events/SceneParametersDetected.ts~SceneParametersDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneParametersDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneParametersDetected.ts~SceneParametersDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneParametersDetected.ts~SceneParametersDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SceneParametersDetected"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneParametersDetected.ts~SceneParametersDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneParametersDetected.ts~SceneParametersDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/events/SceneSequenceDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, ScenarioDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneSequenceDetected extends DomainEvent {\n    static fromJSON(o: JSONObject): SceneSequenceDetected {\n        return new SceneSequenceDetected(\n            CorrelationId.fromJSON(o.sceneId as string),\n            ScenarioDetails.fromJSON(o.details as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly details: ScenarioDetails,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('details', details, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/SceneSequenceDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "class",
    "name": "SceneSequenceDetected",
    "memberof": "src/events/SceneSequenceDetected.ts",
    "static": true,
    "longname": "src/events/SceneSequenceDetected.ts~SceneSequenceDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneSequenceDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneSequenceDetected.ts~SceneSequenceDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneSequenceDetected.ts~SceneSequenceDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SceneSequenceDetected"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneSequenceDetected.ts~SceneSequenceDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneSequenceDetected.ts~SceneSequenceDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "src/events/SceneStarts.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, ScenarioDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneStarts extends DomainEvent {\n    static fromJSON(o: JSONObject): SceneStarts {\n        return new SceneStarts(\n            CorrelationId.fromJSON(o.sceneId as string),\n            ScenarioDetails.fromJSON(o.details as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly details: ScenarioDetails,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('details', details, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/SceneStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "SceneStarts",
    "memberof": "src/events/SceneStarts.ts",
    "static": true,
    "longname": "src/events/SceneStarts.ts~SceneStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneStarts}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneStarts.ts~SceneStarts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneStarts.ts~SceneStarts.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SceneStarts"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneStarts.ts~SceneStarts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneStarts.ts~SceneStarts#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/events/SceneTagged.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Tag, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneTagged extends DomainEvent {\n    static fromJSON(o: JSONObject): SceneTagged {\n        return new SceneTagged(\n            CorrelationId.fromJSON(o.sceneId as string),\n            Tag.fromJSON(o.tag as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly tag: Tag,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('tag', tag, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/SceneTagged.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "class",
    "name": "SceneTagged",
    "memberof": "src/events/SceneTagged.ts",
    "static": true,
    "longname": "src/events/SceneTagged.ts~SceneTagged",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneTagged}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneTagged.ts~SceneTagged",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneTagged.ts~SceneTagged.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SceneTagged"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 171,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneTagged.ts~SceneTagged",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneTagged.ts~SceneTagged#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/events/SceneTemplateDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Description, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class SceneTemplateDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject): SceneTemplateDetected {\n        return new SceneTemplateDetected(\n            CorrelationId.fromJSON(o.sceneId as string),\n            Description.fromJSON(o.template as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly template: Description,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('sceneId', sceneId, isDefined());\n        ensure('template', template, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/SceneTemplateDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "SceneTemplateDetected",
    "memberof": "src/events/SceneTemplateDetected.ts",
    "static": true,
    "longname": "src/events/SceneTemplateDetected.ts~SceneTemplateDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{SceneTemplateDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/SceneTemplateDetected.ts~SceneTemplateDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/SceneTemplateDetected.ts~SceneTemplateDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SceneTemplateDetected"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 175,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SceneTemplateDetected.ts~SceneTemplateDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SceneTemplateDetected.ts~SceneTemplateDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "src/events/TaskFinished.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { ActivityDetails, CorrelationId, Outcome, SerialisedOutcome, Timestamp } from '../model';\nimport { ActivityFinished } from './ActivityFinished';\n\nexport class TaskFinished extends ActivityFinished {\n    static fromJSON(o: JSONObject): TaskFinished {\n        return new TaskFinished(\n            CorrelationId.fromJSON(o.sceneId as string),\n            CorrelationId.fromJSON(o.activityId as string),\n            ActivityDetails.fromJSON(o.details as JSONObject),\n            Outcome.fromJSON(o.outcome as SerialisedOutcome),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/TaskFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "class",
    "name": "TaskFinished",
    "memberof": "src/events/TaskFinished.ts",
    "static": true,
    "longname": "src/events/TaskFinished.ts~TaskFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TaskFinished}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/ActivityFinished.js~ActivityFinished"
    ]
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TaskFinished.ts~TaskFinished",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TaskFinished.ts~TaskFinished.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TaskFinished"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "src/events/TaskStarts.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { ActivityDetails, CorrelationId, Timestamp } from '../model';\nimport { ActivityStarts } from './ActivityStarts';\n\nexport class TaskStarts extends ActivityStarts {\n    static fromJSON(o: JSONObject): TaskStarts {\n        return new TaskStarts(\n            CorrelationId.fromJSON(o.sceneId as string),\n            CorrelationId.fromJSON(o.activityId as string),\n            ActivityDetails.fromJSON(o.details as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/TaskStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "class",
    "name": "TaskStarts",
    "memberof": "src/events/TaskStarts.ts",
    "static": true,
    "longname": "src/events/TaskStarts.ts~TaskStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TaskStarts}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/ActivityStarts.js~ActivityStarts"
    ]
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TaskStarts.ts~TaskStarts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TaskStarts.ts~TaskStarts.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TaskStarts"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/events/TestRunFinished.ts",
    "content": "import { Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\n/**\n * @desc\n *  Emitted when all the tests have finished running.\n */\nexport class TestRunFinished extends DomainEvent {\n    static fromJSON(v: string): TestRunFinished {\n        return new TestRunFinished(\n            Timestamp.fromJSON(v as string),\n        );\n    }\n\n    constructor(timestamp?: Timestamp) {\n        super(timestamp);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/TestRunFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "class",
    "name": "TestRunFinished",
    "memberof": "src/events/TestRunFinished.ts",
    "static": true,
    "longname": "src/events/TestRunFinished.ts~TestRunFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestRunFinished}",
    "description": " Emitted when all the tests have finished running.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestRunFinished.ts~TestRunFinished",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestRunFinished.ts~TestRunFinished.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunFinished"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 185,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestRunFinished.ts~TestRunFinished",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestRunFinished.ts~TestRunFinished#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/events/TestRunFinishes.ts",
    "content": "import { Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\n/**\n * @desc\n *  Emitted when the last test in the test suite has finished running\n *  and it's time for any last-minute reporting to take place.\n */\nexport class TestRunFinishes extends DomainEvent {\n    static fromJSON(v: string): TestRunFinishes {\n        return new TestRunFinishes(\n            Timestamp.fromJSON(v as string),\n        );\n    }\n\n    constructor(timestamp?: Timestamp) {\n        super(timestamp);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/TestRunFinishes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "TestRunFinishes",
    "memberof": "src/events/TestRunFinishes.ts",
    "static": true,
    "longname": "src/events/TestRunFinishes.ts~TestRunFinishes",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestRunFinishes}",
    "description": " Emitted when the last test in the test suite has finished running\n and it's time for any last-minute reporting to take place.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestRunFinishes.ts~TestRunFinishes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestRunFinishes.ts~TestRunFinishes.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunFinishes"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 189,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestRunFinishes.ts~TestRunFinishes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestRunFinishes.ts~TestRunFinishes#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/events/TestRunStarts.ts",
    "content": "import { Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\n/**\n * @desc\n *  Emitted when the very first test is about to start\n *\n * @extends {DomainEvent}\n */\nexport class TestRunStarts extends DomainEvent {\n    static fromJSON(v: string): TestRunStarts {\n        return new TestRunStarts(\n            Timestamp.fromJSON(v as string),\n        );\n    }\n\n    constructor(timestamp?: Timestamp) {\n        super(timestamp);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/TestRunStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "TestRunStarts",
    "memberof": "src/events/TestRunStarts.ts",
    "static": true,
    "longname": "src/events/TestRunStarts.ts~TestRunStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestRunStarts}",
    "description": " Emitted when the very first test is about to start",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "DomainEvent"
    ]
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestRunStarts.ts~TestRunStarts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestRunStarts.ts~TestRunStarts.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunStarts"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 193,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestRunStarts.ts~TestRunStarts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestRunStarts.ts~TestRunStarts#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/events/TestRunnerDetected.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { CorrelationId, Name, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class TestRunnerDetected extends DomainEvent {\n    public static fromJSON(o: JSONObject): TestRunnerDetected {\n        return new TestRunnerDetected(\n            CorrelationId.fromJSON(o.sceneId as string),\n            Name.fromJSON(o.name as string),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly sceneId: CorrelationId,\n        public readonly name: Name,\n        public readonly timestamp: Timestamp = new Timestamp(),\n    ) {\n        super();\n        ensure('sceneId', sceneId, isDefined());\n        ensure('name', name, isDefined());\n        ensure('timestamp', timestamp, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/TestRunnerDetected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "TestRunnerDetected",
    "memberof": "src/events/TestRunnerDetected.ts",
    "static": true,
    "longname": "src/events/TestRunnerDetected.ts~TestRunnerDetected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestRunnerDetected}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestRunnerDetected.ts~TestRunnerDetected",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestRunnerDetected.ts~TestRunnerDetected.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerDetected"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 197,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestRunnerDetected.ts~TestRunnerDetected",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestRunnerDetected.ts~TestRunnerDetected#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "src/events/TestSuiteFinished.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { Outcome, SerialisedOutcome, TestSuiteDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class TestSuiteFinished extends DomainEvent {\n    static fromJSON(o: JSONObject): TestSuiteFinished {\n        return new TestSuiteFinished(\n            TestSuiteDetails.fromJSON(o.details as JSONObject),\n            Outcome.fromJSON(o.outcome as SerialisedOutcome),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly details: TestSuiteDetails,\n        public readonly outcome: Outcome,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('details', details, isDefined());\n        ensure('outcome', outcome, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/TestSuiteFinished.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "TestSuiteFinished",
    "memberof": "src/events/TestSuiteFinished.ts",
    "static": true,
    "longname": "src/events/TestSuiteFinished.ts~TestSuiteFinished",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestSuiteFinished}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestSuiteFinished.ts~TestSuiteFinished",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestSuiteFinished.ts~TestSuiteFinished.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestSuiteFinished"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 201,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestSuiteFinished.ts~TestSuiteFinished",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestSuiteFinished.ts~TestSuiteFinished#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "src/events/TestSuiteStarts.ts",
    "content": "import { ensure, isDefined, JSONObject } from 'tiny-types';\n\nimport { TestSuiteDetails, Timestamp } from '../model';\nimport { DomainEvent } from './DomainEvent';\n\nexport class TestSuiteStarts extends DomainEvent {\n    static fromJSON(o: JSONObject): TestSuiteStarts {\n        return new TestSuiteStarts(\n            TestSuiteDetails.fromJSON(o.details as JSONObject),\n            Timestamp.fromJSON(o.timestamp as string),\n        );\n    }\n\n    constructor(\n        public readonly details: TestSuiteDetails,\n        timestamp?: Timestamp,\n    ) {\n        super(timestamp);\n        ensure('details', details, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/TestSuiteStarts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "TestSuiteStarts",
    "memberof": "src/events/TestSuiteStarts.ts",
    "static": true,
    "longname": "src/events/TestSuiteStarts.ts~TestSuiteStarts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/events",
    "importStyle": "{TestSuiteStarts}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/events/DomainEvent.js~DomainEvent"
    ]
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/events/TestSuiteStarts.ts~TestSuiteStarts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/events/TestSuiteStarts.ts~TestSuiteStarts.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestSuiteStarts"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 205,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TestSuiteStarts.ts~TestSuiteStarts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TestSuiteStarts.ts~TestSuiteStarts#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/events/index.ts",
    "content": "export * from './ActivityFinished';\nexport * from './ActivityRelatedArtifactArchived';\nexport * from './ActivityRelatedArtifactGenerated';\nexport * from './ActivityStarts';\nexport * from './ArtifactArchived';\nexport * from './ArtifactGenerated';\nexport * from './AsyncOperationAttempted';\nexport * from './AsyncOperationCompleted';\nexport * from './AsyncOperationFailed';\nexport * from './BusinessRuleDetected';\nexport * from './DomainEvent';\nexport * from './FeatureNarrativeDetected';\nexport * from './InteractionFinished';\nexport * from './InteractionStarts';\nexport * from './RetryableSceneDetected';\nexport * from './SceneBackgroundDetected';\nexport * from './SceneDescriptionDetected';\nexport * from './SceneFinished';\nexport * from './SceneFinishes';\nexport * from './SceneParametersDetected';\nexport * from './SceneSequenceDetected';\nexport * from './SceneStarts';\nexport * from './SceneTagged';\nexport * from './SceneTemplateDetected';\nexport * from './TaskFinished';\nexport * from './TaskStarts';\nexport * from './TestRunFinished';\nexport * from './TestRunFinishes';\nexport * from './TestRunnerDetected';\nexport * from './TestRunStarts';\nexport * from './TestSuiteFinished';\nexport * from './TestSuiteStarts';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/events/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/index.ts",
    "content": "export * from './errors';\nexport * from './instance';\nexport { Duration } from './model';\nexport * from './screenplay';\nexport * from './Serenity';\nexport { SerenityConfig } from './SerenityConfig';\nexport * from './stage';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "src/instance.ts",
    "content": "import { Actor } from './screenplay/actor';\nimport { Serenity } from './Serenity';\nimport { SerenityConfig } from './SerenityConfig';\nimport { Cast, Clock } from './stage';\n\nconst clock = new Clock();\n\nexport const serenity = new Serenity(clock);\n\n/**\n * @desc\n *  Configures Serenity/JS. Every call to this function\n *  replaces the previous configuration provided,\n *  so this function should called be exactly once\n *  in your test suite.\n *\n *  This function is an alias for {@link Serenity#configure}.\n *\n * @param {SerenityConfig} config\n * @return {void}\n *\n * @see {@link Serenity#configure}\n */\nexport function configure(config: SerenityConfig): void {\n    serenity.configure(config);\n}\n\n/**\n * @desc\n *  Re-configures Serenity/JS with a new {@link Cast} of {@link Actor}s\n *  you'd like to use in any subsequent call to {@link actorCalled}.\n *\n *  This function is an alias for {@link Serenity#engage},\n *  which provides an alternative to calling {@link Actor#whoCan}\n *  directly in your tests and is typically invoked in a \"before all\"\n *  or \"before each\" hook of your test runner of choice.\n *\n *  If your implementation of the {@link Cast} interface is stateless,\n *  you can invoke this function once before your entire test suite is executed, see\n *  - [`beforeAll`](https://jasmine.github.io/api/3.6/global.html#beforeAll) in Jasmine,\n *  - [`before`](https://mochajs.org/#hooks) in Mocha,\n *  - [`BeforeAll`](https://github.com/cucumber/cucumber-js/blob/master/docs/support_files/hooks.md#beforeall--afterall) in Cucumber.js\n *\n *  However, if your {@link Cast} holds state that you want reset before each scenario,\n *  it's better to invoke `engage` before each test using:\n *  - [`beforeEach`](https://jasmine.github.io/api/3.6/global.html#beforeEach) in Jasmine\n *  - [`beforeEach`](https://mochajs.org/#hooks) in Mocha,\n *  - [`Before`](https://github.com/cucumber/cucumber-js/blob/master/docs/support_files/hooks.md#hooks) in Cucumber.js\n *\n * @example <caption>Engaging a cast of actors</caption>\n *  import { Actor, Cast } from '@serenity-js/core';\n *\n *  class Actors implements Cast {\n *      prepare(actor: Actor) {\n *          return actor.whoCan(\n *              // ... abilities you'd like the Actor to have\n *          );\n *      }\n *  }\n *\n * engage(new Actors();\n *\n * @example <caption>Usage with Jasmine</caption>\n *  import 'jasmine';\n *\n *  beforeEach(() => engage(new Actors()));\n *\n * @example <caption>Usage with Cucumber</caption>\n *  import { Before } from 'cucumber';\n *\n *  Before(() => engage(new Actors());\n *\n * @param {Cast} actors\n * @returns {void}\n *\n * @see {@link Actor}\n * @see {@link Cast}\n *\n * @see {@link Serenity#engage}\n */\nexport function engage(actors: Cast): void {\n    serenity.engage(actors);\n}\n\n/**\n * @desc\n *  Instantiates or retrieves an actor {@link Actor}\n *  called `name` if one has already been instantiated.\n *\n *  This method is an alias for {@link Serenity#theActorCalled}.\n *\n * @example <caption>Usage with Jasmine</caption>\n *   import 'jasmine';\n *   import { actorCalled } from '@serenity-js/core';\n *\n *   describe('Feature', () => {\n *\n *      it('should have some behaviour', () =>\n *          actorCalled('James').attemptsTo(\n *              // ... activities\n *          ));\n *   });\n *\n * @example <caption>Usage with Cucumber</caption>\n *   import { actorCalled } from '@serenity-js/core';\n *   import { Given } from 'cucumber';\n *\n *   Given(/(.*?) is a registered user/, (name: string) =>\n *      actorCalled(name).attemptsTo(\n *              // ... activities\n *          ));\n *\n * @param {string} name\n *  The name of the actor to instantiate or retrieve\n *\n * @returns {Actor}\n *\n * @see {@link engage}\n * @see {@link Actor}\n * @see {@link Cast}\n * @see {@link Serenity#theActorCalled}\n */\nexport function actorCalled(name: string): Actor {\n    return serenity.theActorCalled(name);\n}\n\n/**\n * @desc\n *  Retrieves an actor who was last instantiated or retrieved\n *  using {@link actorCalled}.\n *\n *  This function is particularly useful when automating Cucumber scenarios.\n *\n *  This function is an alias for {@link Serenity#theActorInTheSpotlight}.\n *\n * @example <caption>Usage with Cucumber</caption>\n *   import { actorCalled } from '@serenity-js/core';\n *   import { Given, When } from 'cucumber';\n *\n *   Given(/(.*?) is a registered user/, (name: string) =>\n *      actorCalled(name).attemptsTo(\n *              // ... activities\n *          ));\n *\n *   When(/(?:he|she|they) browse their recent orders/, () =>\n *      actorInTheSpotlight().attemptsTo(\n *              // ... activities\n *          ));\n *\n * @returns {Actor}\n *\n * @see {@link engage}\n * @see {@link actorCalled}\n * @see {@link Actor}\n * @see {@link Cast}\n */\nexport function actorInTheSpotlight(): Actor {\n    return serenity.theActorInTheSpotlight();\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/instance.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "variable",
    "name": "clock",
    "memberof": "src/instance.ts",
    "static": true,
    "longname": "src/instance.ts~clock",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/instance.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "src/stage/Clock.ts~Clock"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "name": "serenity",
    "memberof": "src/instance.ts",
    "static": true,
    "longname": "src/instance.ts~serenity",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{serenity}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "src/Serenity.ts~Serenity"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "configure",
    "memberof": "src/instance.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/instance.ts~configure",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{configure}",
    "description": " Configures Serenity/JS. Every call to this function\n replaces the previous configuration provided,\n so this function should called be exactly once\n in your test suite.\n\n This function is an alias for {@link Serenity#configure}.",
    "see": [
      "{@link Serenity#configure}"
    ],
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "SerenityConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "engage",
    "memberof": "src/instance.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/instance.ts~engage",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{engage}",
    "description": " Re-configures Serenity/JS with a new {@link Cast} of {@link Actor}s\n you'd like to use in any subsequent call to {@link actorCalled}.\n\n This function is an alias for {@link Serenity#engage},\n which provides an alternative to calling {@link Actor#whoCan}\n directly in your tests and is typically invoked in a \"before all\"\n or \"before each\" hook of your test runner of choice.\n\n If your implementation of the {@link Cast} interface is stateless,\n you can invoke this function once before your entire test suite is executed, see\n - [`beforeAll`](https://jasmine.github.io/api/3.6/global.html#beforeAll) in Jasmine,\n - [`before`](https://mochajs.org/#hooks) in Mocha,\n - [`BeforeAll`](https://github.com/cucumber/cucumber-js/blob/master/docs/support_files/hooks.md#beforeall--afterall) in Cucumber.js\n\n However, if your {@link Cast} holds state that you want reset before each scenario,\n it's better to invoke `engage` before each test using:\n - [`beforeEach`](https://jasmine.github.io/api/3.6/global.html#beforeEach) in Jasmine\n - [`beforeEach`](https://mochajs.org/#hooks) in Mocha,\n - [`Before`](https://github.com/cucumber/cucumber-js/blob/master/docs/support_files/hooks.md#hooks) in Cucumber.js",
    "examples": [
      "<caption>Engaging a cast of actors</caption>\n import { Actor, Cast } from '@serenity-js/core';\n\n class Actors implements Cast {\n     prepare(actor: Actor) {\n         return actor.whoCan(\n             // ... abilities you'd like the Actor to have\n         );\n     }\n }\n\nengage(new Actors();",
      "<caption>Usage with Jasmine</caption>\n import 'jasmine';\n\n beforeEach(() => engage(new Actors()));",
      "<caption>Usage with Cucumber</caption>\n import { Before } from 'cucumber';\n\n Before(() => engage(new Actors());"
    ],
    "see": [
      "{@link Actor}",
      "{@link Cast}",
      "{@link Serenity#engage}"
    ],
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Cast"
        ],
        "spread": false,
        "optional": false,
        "name": "actors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "actorCalled",
    "memberof": "src/instance.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/instance.ts~actorCalled",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{actorCalled}",
    "description": " Instantiates or retrieves an actor {@link Actor}\n called `name` if one has already been instantiated.\n\n This method is an alias for {@link Serenity#theActorCalled}.",
    "examples": [
      "<caption>Usage with Jasmine</caption>\n  import 'jasmine';\n  import { actorCalled } from '@serenity-js/core';\n\n  describe('Feature', () => {\n\n     it('should have some behaviour', () =>\n         actorCalled('James').attemptsTo(\n             // ... activities\n         ));\n  });",
      "<caption>Usage with Cucumber</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { Given } from 'cucumber';\n\n  Given(/(.*?) is a registered user/, (name: string) =>\n     actorCalled(name).attemptsTo(\n             // ... activities\n         ));"
    ],
    "see": [
      "{@link engage}",
      "{@link Actor}",
      "{@link Cast}",
      "{@link Serenity#theActorCalled}"
    ],
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Actor}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the actor to instantiate or retrieve"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "actorInTheSpotlight",
    "memberof": "src/instance.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/instance.ts~actorInTheSpotlight",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core",
    "importStyle": "{actorInTheSpotlight}",
    "description": " Retrieves an actor who was last instantiated or retrieved\n using {@link actorCalled}.\n\n This function is particularly useful when automating Cucumber scenarios.\n\n This function is an alias for {@link Serenity#theActorInTheSpotlight}.",
    "examples": [
      "<caption>Usage with Cucumber</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { Given, When } from 'cucumber';\n\n  Given(/(.*?) is a registered user/, (name: string) =>\n     actorCalled(name).attemptsTo(\n             // ... activities\n         ));\n\n  When(/(?:he|she|they) browse their recent orders/, () =>\n     actorInTheSpotlight().attemptsTo(\n             // ... activities\n         ));"
    ],
    "see": [
      "{@link engage}",
      "{@link actorCalled}",
      "{@link Actor}",
      "{@link Cast}"
    ],
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Actor}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "src/io/AssertionReportDiffer.ts",
    "content": "import { Change, diffLines } from 'diff';\n\nexport class AssertionReportDiffer {\n    constructor(private readonly mappers: AssertionReportDiffMappers) {\n    }\n\n    diff(expectedValue: string, actualValue: string): string {\n        const changes = diffLines(actualValue, expectedValue)\n            .map(change => this.markChanges(change));\n\n        return [\n            `Difference (${ this.mappers.expected('expected') }, ${ this.mappers.actual('actual') }):`,\n            '',\n            changes.length === 2\n                ? changes.join('\\n')\n                : changes.join(''),\n        ].join('\\n');\n    }\n\n    private markChanges(change: Change): string {\n\n        return change.added\n            ? this.eachLineOf(change.value, this.mappers.expected)\n            : (change.removed\n                ? this.eachLineOf(change.value, this.mappers.actual)\n                : this.eachLineOf(change.value, this.mappers.matching));\n    }\n\n    private eachLineOf(lines: string, mapper: (line: string) => string): string {\n        return lines.split('\\n').map(\n            line =>\n                line.trim()\n                    ? mapper(line)\n                    : line\n        ).join('\\n');\n    }\n}\n\nexport interface AssertionReportDiffMappers {\n    expected:   (line: string) => string;\n    actual:     (line: string) => string;\n    matching:   (line: string) => string;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/AssertionReportDiffer.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "AssertionReportDiffer",
    "memberof": "src/io/AssertionReportDiffer.ts",
    "static": true,
    "longname": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{AssertionReportDiffer}",
    "description": " ",
    "lineNumber": 3,
    "interface": false
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "diff",
    "memberof": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer#diff",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "actualValue",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "markChanges",
    "memberof": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer#markChanges",
    "access": "private",
    "description": " ",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Change"
        ],
        "spread": false,
        "optional": false,
        "name": "change",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "eachLineOf",
    "memberof": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/AssertionReportDiffer.ts~AssertionReportDiffer#eachLineOf",
    "access": "private",
    "description": " ",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lines",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "src/io/Config.ts",
    "content": "/**\n * @experimental\n */\nexport class Config<T extends object> { // eslint-disable-line @typescript-eslint/ban-types\n    private readonly transformations = new Map();\n\n    constructor(private readonly config: T) {\n    }\n\n    where<K extends keyof T>(fieldName: K, transformation: (value: T[K]) => T[K]): this {\n        this.transformations.set(fieldName, transformation);\n        return this;\n    }\n\n    whereIf<K extends keyof T>(condition: boolean, fieldName: K, transformation: (value: T[K]) => T[K]): this {\n        if (condition === true) {\n            this.transformations.set(fieldName, transformation);\n        }\n\n        return this;\n    }\n\n    keys(): string[] {\n        return Object.keys(this.config);\n    }\n\n    has<K extends keyof T>(key: K): boolean {\n        return Object.prototype.hasOwnProperty.call(this.config, key);\n    }\n\n    get<K extends keyof T>(key: K): T[K] {\n        return this.transformations.has(key)\n            ? this.transformations.get(key)(this.config[key])\n            : this.config[key];\n    }\n\n    getAsList<K extends keyof T>(key: K): Array<ItemOf<T[K]>> {\n        const value = this.get(key);\n\n        return value !== null && value !== undefined\n            ? [].concat(value)\n            : [];\n    }\n\n    object(): T {\n        return this.keys().reduce((acc, key) => {\n            acc[key] = this.get(key as keyof T);\n            return acc;\n        }, {}) as T;\n    }\n}\n\ntype ItemOf<A> = A extends Array<infer E> ? E : A;\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/Config.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "class",
    "name": "Config",
    "memberof": "src/io/Config.ts",
    "static": true,
    "longname": "src/io/Config.ts~Config",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{Config}",
    "description": "",
    "lineNumber": 11,
    "experimental": true,
    "interface": false
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "transformations",
    "memberof": "src/io/Config.ts~Config",
    "static": false,
    "longname": "src/io/Config.ts~Config#transformations",
    "access": "private",
    "description": " ",
    "lineNumber": 5,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/Config.ts~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Config.ts~Config#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "where",
    "memberof": "src/io/Config.ts~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Config.ts~Config#where",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "K"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "whereIf",
    "memberof": "src/io/Config.ts~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Config.ts~Config#whereIf",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "K"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "keys",
    "memberof": "src/io/Config.ts~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Config.ts~Config#keys",
    "access": "public",
    "description": " ",
    "lineNumber": 23,
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "has",
    "memberof": "src/io/Config.ts~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Config.ts~Config#has",
    "access": "public",
    "description": " ",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "K"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "get",
    "memberof": "src/io/Config.ts~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Config.ts~Config#get",
    "access": "public",
    "description": " ",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "K"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "getAsList",
    "memberof": "src/io/Config.ts~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Config.ts~Config#getAsList",
    "access": "public",
    "description": " ",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "K"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "object",
    "memberof": "src/io/Config.ts~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Config.ts~Config#object",
    "access": "public",
    "description": " ",
    "lineNumber": 45,
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "src/io/ErrorSerialiser.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport * as serenitySpecificErrors from '../errors';\nimport { parse, stringify } from './json';\n\n/**\n *\n * @extends {tiny-types~JSONObject}\n * @public\n */\nexport interface SerialisedError extends JSONObject {\n    /**\n     *  Name of the constructor function used to instantiate\n     *  the original {@link Error} object.\n     */\n    name:    string;\n\n    /**\n     *  Message of the original {@link Error} object\n     */\n    message: string;\n\n    /**\n     *  Stack trace of the original {@link Error} object\n     */\n    stack:   string;\n}\n\nexport class ErrorSerialiser {\n    private static recognisedErrors = [\n        ...Object.keys(serenitySpecificErrors).map(key => serenitySpecificErrors[key]),\n        Error,\n        EvalError,\n        RangeError,\n        ReferenceError,\n        SyntaxError,\n        TypeError,\n        URIError,\n    ];\n\n    static serialise(error: Error): string {\n        const serialisedError = Object.getOwnPropertyNames(error).reduce((serialised, key) => {\n            serialised[key] = error[key]\n            return serialised;\n        }, { name: error.constructor.name || error.name }) as SerialisedError;\n\n        return stringify(serialisedError);\n    }\n\n    static deserialise<E extends Error>(stringifiedError: string): E {\n        const serialisedError = parse(stringifiedError) as SerialisedError;\n\n        const constructor = ErrorSerialiser.recognisedErrors.find(errorType => errorType.name === serialisedError.name) || Error;\n        const deserialised = Object.create(constructor.prototype);\n        for (const property in serialisedError) {\n            if (Object.prototype.hasOwnProperty.call(serialisedError, property)) {\n                deserialised[property] = serialisedError[property];\n            }\n        }\n        return deserialised;\n    }\n\n    static deserialiseFromStackTrace(stack: string): Error {\n        const stackTracePattern = /^([^\\s:]*Error).*?(?::\\s)?(.*?)\\n(^ +at.*)$/ms;\n\n        if (! stackTracePattern.test(stack)) {\n            return new Error(String(stack));\n        }\n\n        const [, name, message, callStack_ ] = stack.match(stackTracePattern);\n\n        return ErrorSerialiser.deserialise(stringify({ name, message: message.trim(), stack }));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/ErrorSerialiser.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "SerialisedError",
    "memberof": "src/io/ErrorSerialiser.ts",
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~SerialisedError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{SerialisedError}",
    "description": "",
    "lineNumber": 18,
    "interface": true,
    "extends": [
      "JSONObject"
    ]
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "name",
    "memberof": "src/io/ErrorSerialiser.ts~SerialisedError",
    "static": false,
    "longname": "src/io/ErrorSerialiser.ts~SerialisedError#name",
    "access": "public",
    "description": "[object Object],[object Object],[object Object] ",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "message",
    "memberof": "src/io/ErrorSerialiser.ts~SerialisedError",
    "static": false,
    "longname": "src/io/ErrorSerialiser.ts~SerialisedError#message",
    "access": "public",
    "description": "[object Object],[object Object],[object Object] ",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "stack",
    "memberof": "src/io/ErrorSerialiser.ts~SerialisedError",
    "static": false,
    "longname": "src/io/ErrorSerialiser.ts~SerialisedError#stack",
    "access": "public",
    "description": "[object Object],[object Object],[object Object] ",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 237,
    "kind": "class",
    "name": "ErrorSerialiser",
    "memberof": "src/io/ErrorSerialiser.ts",
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~ErrorSerialiser",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{ErrorSerialiser}",
    "description": " ",
    "lineNumber": 29,
    "interface": false
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "recognisedErrors",
    "memberof": "src/io/ErrorSerialiser.ts~ErrorSerialiser",
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~ErrorSerialiser.recognisedErrors",
    "access": "private",
    "description": " ",
    "lineNumber": 30,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "serialise",
    "memberof": "src/io/ErrorSerialiser.ts~ErrorSerialiser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~ErrorSerialiser.serialise",
    "access": "public",
    "description": " ",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "deserialise",
    "memberof": "src/io/ErrorSerialiser.ts~ErrorSerialiser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~ErrorSerialiser.deserialise",
    "access": "public",
    "description": " ",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stringifiedError",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "E"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "deserialiseFromStackTrace",
    "memberof": "src/io/ErrorSerialiser.ts~ErrorSerialiser",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/ErrorSerialiser.ts~ErrorSerialiser.deserialiseFromStackTrace",
    "access": "public",
    "description": " ",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stack",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "file",
    "name": "src/io/ErrorStackParser.ts",
    "content": "import * as parser from 'error-stack-parser';\nimport StackFrame = require('stackframe');\n\n/**\n * @desc\n *  A thin wrapper around error-stack-parser module\n *\n * @see https://www.npmjs.com/package/error-stack-parser\n *\n * @package\n */\nexport class ErrorStackParser {\n    parse(error: Error): StackFrame[] {\n        return parser.parse(error);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/ErrorStackParser.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 243,
    "kind": "class",
    "name": "ErrorStackParser",
    "memberof": "src/io/ErrorStackParser.ts",
    "static": true,
    "longname": "src/io/ErrorStackParser.ts~ErrorStackParser",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/io/ErrorStackParser.ts",
    "importStyle": "{ErrorStackParser}",
    "description": " A thin wrapper around error-stack-parser module",
    "see": [
      "https://www.npmjs.com/package/error-stack-parser"
    ],
    "lineNumber": 19,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "parse",
    "memberof": "src/io/ErrorStackParser.ts~ErrorStackParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ErrorStackParser.ts~ErrorStackParser#parse",
    "access": "public",
    "description": " ",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "src/io/FileFinder.ts",
    "content": "import fg = require('fast-glob');\nimport { Path } from './Path';\n\nexport class FileFinder {\n    constructor(private readonly cwd: Path) {\n    }\n\n    filesMatching(globPatterns: string[] | string | undefined): Path[] {\n        if (! globPatterns) {\n            return [];\n        }\n\n        return fg.sync(globPatterns, {\n            cwd: this.cwd.value,\n            absolute: true,\n            unique: true,\n        }).map((value: string) => new Path(value));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/FileFinder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "class",
    "name": "FileFinder",
    "memberof": "src/io/FileFinder.ts",
    "static": true,
    "longname": "src/io/FileFinder.ts~FileFinder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{FileFinder}",
    "description": " ",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/FileFinder.ts~FileFinder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileFinder.ts~FileFinder#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "filesMatching",
    "memberof": "src/io/FileFinder.ts~FileFinder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileFinder.ts~FileFinder#filesMatching",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined ",
          " undefined ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "globPatterns",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "src/io/FileSystem.ts",
    "content": "import * as cuid from 'cuid';\nimport * as nodeFS from 'fs';\nimport { WriteFileOptions } from 'fs';\nimport * as gracefulFS from 'graceful-fs';\nimport * as nodeOS from 'os';\nimport { promisify } from 'util';\n\nimport { Path } from './Path';\n\nexport class FileSystem {\n\n    constructor(\n        private readonly root: Path,\n        private readonly fs: typeof nodeFS = gracefulFS,\n        private readonly os: typeof nodeOS = nodeOS,\n        private readonly directoryMode = Number.parseInt('0777', 8) & (~process.umask()),\n    ) {\n    }\n\n    public store(relativeOrAbsolutePathToFile: Path, data: string | NodeJS.ArrayBufferView, encoding?: WriteFileOptions): Promise<Path> {\n        return Promise.resolve()\n            .then(() => this.ensureDirectoryExistsAt(relativeOrAbsolutePathToFile.directory()))\n            .then(() => this.write(this.root.resolve(relativeOrAbsolutePathToFile), data, encoding));\n    }\n\n    public createReadStream(relativeOrAbsolutePathToFile: Path): nodeFS.ReadStream {\n        return this.fs.createReadStream(this.root.resolve(relativeOrAbsolutePathToFile).value);\n    }\n\n    public createWriteStreamTo(relativeOrAbsolutePathToFile: Path): nodeFS.WriteStream {\n        return this.fs.createWriteStream(this.root.resolve(relativeOrAbsolutePathToFile).value);\n    }\n\n    public stat(relativeOrAbsolutePathToFile: Path): Promise<nodeFS.Stats> {\n        const stat = promisify(this.fs.stat);\n\n        return stat(this.root.resolve(relativeOrAbsolutePathToFile).value);\n    }\n\n    public exists(relativeOrAbsolutePathToFile: Path): boolean {\n        return this.fs.existsSync(this.root.resolve(relativeOrAbsolutePathToFile).value);\n    }\n\n    public remove(relativeOrAbsolutePathToFileOrDirectory: Path): Promise<void> {\n        const\n            stat = promisify(this.fs.stat),\n            unlink = promisify(this.fs.unlink),\n            readdir = promisify(this.fs.readdir),\n            rmdir = promisify(this.fs.rmdir);\n\n        const absolutePath = this.root.resolve(relativeOrAbsolutePathToFileOrDirectory);\n\n        return stat(absolutePath.value)\n            .then(result =>\n                result.isFile()\n                    ? unlink(absolutePath.value)\n                    : readdir(absolutePath.value)\n                        .then(entries =>\n                            Promise.all(entries.map(entry =>\n                                this.remove(absolutePath.join(new Path(entry)))),\n                            ).then(() => rmdir(absolutePath.value)),\n                        ),\n            )\n            .then(() => void 0)\n            .catch(error => {\n                if (error?.code === 'ENOENT') {\n                    return void 0;\n                }\n                throw error;\n            });\n    }\n\n    public ensureDirectoryExistsAt(relativeOrAbsolutePathToDirectory: Path): Promise<Path> {\n\n        const absolutePath = this.root.resolve(relativeOrAbsolutePathToDirectory);\n\n        return absolutePath.split().reduce((promisedParent, child) => {\n            return promisedParent.then(parent => new Promise((resolve, reject) => {\n                const current = parent.resolve(new Path(child));\n\n                this.fs.mkdir(current.value, this.directoryMode, error => {\n                    if (! error || error.code === 'EEXIST') {\n                        return resolve(current);\n                    }\n\n                    // To avoid `EISDIR` error on Mac and `EACCES`-->`ENOENT` and `EPERM` on Windows.\n                    if (error.code === 'ENOENT') { // Throw the original parentDir error on `current` `ENOENT` failure.\n                        throw new Error(`EACCES: permission denied, mkdir '${ parent.value }'`);\n                    }\n\n                    const caughtError = !! ~['EACCES', 'EPERM', 'EISDIR'].indexOf(error.code);\n                    if (! caughtError || (caughtError && current.equals(relativeOrAbsolutePathToDirectory))) {\n                        throw error; // Throw if it's just the last created dir.\n                    }\n\n                    return resolve(current);\n                });\n            }));\n        }, Promise.resolve(absolutePath.root()));\n    }\n\n    public rename(source: Path, destination: Path): Promise<void> {\n        const rename = promisify(this.fs.rename);\n\n        return rename(source.value, destination.value);\n    }\n\n    public tempFilePath(prefix = '', suffix = '.tmp'): Path {\n        return Path.from(this.fs.realpathSync(this.os.tmpdir()), `${ prefix }${ cuid() }${ suffix }`);\n    }\n\n    private write(path: Path, data: string | NodeJS.ArrayBufferView, encoding?: WriteFileOptions): Promise<Path> {\n        return new Promise((resolve, reject) => {\n            this.fs.writeFile(\n                path.value,\n                data,\n                encoding,\n                error => error\n                    ? reject(error)\n                    : resolve(path),\n            );\n        });\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/FileSystem.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "class",
    "name": "FileSystem",
    "memberof": "src/io/FileSystem.ts",
    "static": true,
    "longname": "src/io/FileSystem.ts~FileSystem",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{FileSystem}",
    "description": " ",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 251,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "store",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#store",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToFile",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined ",
          " "
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "WriteFileOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "createReadStream",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#createReadStream",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToFile",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "createWriteStreamTo",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#createWriteStreamTo",
    "access": "public",
    "description": " ",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToFile",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "stat",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#stat",
    "access": "public",
    "description": " ",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToFile",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "exists",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#exists",
    "access": "public",
    "description": " ",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToFile",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "remove",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#remove",
    "access": "public",
    "description": " ",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToFileOrDirectory",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "ensureDirectoryExistsAt",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#ensureDirectoryExistsAt",
    "access": "public",
    "description": " ",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativeOrAbsolutePathToDirectory",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "rename",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#rename",
    "access": "public",
    "description": " ",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "tempFilePath",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#tempFilePath",
    "access": "public",
    "description": " ",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "suffix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "write",
    "memberof": "src/io/FileSystem.ts~FileSystem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystem.ts~FileSystem#write",
    "access": "private",
    "description": " ",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined ",
          " "
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "WriteFileOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 262,
    "kind": "file",
    "name": "src/io/FileSystemLocation.ts",
    "content": "import { JSONObject, TinyType } from 'tiny-types';\n\nimport { Path } from './Path';\n\nexport class FileSystemLocation extends TinyType {\n    static fromJSON(o: JSONObject): FileSystemLocation {\n        return new FileSystemLocation(\n            Path.fromJSON(o.path as string),\n            o.line as number,\n            o.column as number,\n        );\n    }\n\n    constructor(\n        public readonly path: Path,\n        public readonly line?: number,\n        public readonly column?: number,\n    ) {\n        super();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/FileSystemLocation.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "class",
    "name": "FileSystemLocation",
    "memberof": "src/io/FileSystemLocation.ts",
    "static": true,
    "longname": "src/io/FileSystemLocation.ts~FileSystemLocation",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{FileSystemLocation}",
    "description": " ",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/io/FileSystemLocation.ts~FileSystemLocation",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/FileSystemLocation.ts~FileSystemLocation.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FileSystemLocation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 265,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/FileSystemLocation.ts~FileSystemLocation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/FileSystemLocation.ts~FileSystemLocation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "src/io/ModuleLoader.ts",
    "content": "// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst Module = require('module'); // No type definitions available\nimport * as path from 'path';   // eslint-disable-line unicorn/import-style\n\nimport { Version } from './Version';\n\n/**\n * @desc\n *  Dynamically loads Node modules located relative to `cwd`.\n */\nexport class ModuleLoader {\n\n    /**\n     * @param {string} cwd\n     *  Current working directory, relative to which Node modules should be resolved.\n     */\n    constructor(public readonly cwd: string) {\n    }\n\n    /**\n     * @desc\n     *  Returns true if a given module is available to be required, false otherwise.\n     *\n     * @param {string} moduleId\n     *  NPM module id, for example 'cucumber' or '@serenity-js/core'\n     */\n    hasAvailable(moduleId: string): boolean {\n        try {\n            return !! this.require(moduleId);\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * @desc\n     *  Works like `require.resolve`, but relative to specified current working directory\n     *\n     * @param {string} moduleId\n     *  NPM module id, for example `cucumber` or `@serenity-js/core`\n     *\n     * @returns {string}\n     *  Path a given Node module\n     */\n    resolve(moduleId: string): string {\n        const fromFile = path.join(this.cwd, 'noop.js');\n\n        return Module._resolveFilename(moduleId, {\n            id: fromFile,\n            filename: fromFile,\n            paths: Module._nodeModulePaths(this.cwd),\n        });\n    }\n\n    /**\n     * @desc\n     *  Works like `require`, but relative to specified current working directory\n     *\n     * @param {string} moduleId\n     *\n     * @returns {any}\n     */\n    require(moduleId: string): any {\n        try {\n            return require(this.resolve(moduleId));\n        }\n        catch {\n            return require(moduleId);\n        }\n    }\n\n    /**\n     * @desc\n     *  Returns {@link Version} of module specified by `moduleId`, based on its `package.json`.\n     *\n     * @param {string} moduleId\n     * @returns {Version}\n     */\n    versionOf(moduleId: string): Version {\n        return new Version(this.require(`${ moduleId }/package.json`).version);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/ModuleLoader.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "variable",
    "name": "Module",
    "memberof": "src/io/ModuleLoader.ts",
    "static": true,
    "longname": "src/io/ModuleLoader.ts~Module",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/io/ModuleLoader.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "class",
    "name": "ModuleLoader",
    "memberof": "src/io/ModuleLoader.ts",
    "static": true,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{ModuleLoader}",
    "description": " Dynamically loads Node modules located relative to `cwd`.",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 269,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/ModuleLoader.ts~ModuleLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cwd",
        "description": "Current working directory, relative to which Node modules should be resolved."
      }
    ]
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "hasAvailable",
    "memberof": "src/io/ModuleLoader.ts~ModuleLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader#hasAvailable",
    "access": "public",
    "description": " Returns true if a given module is available to be required, false otherwise.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleId",
        "description": "NPM module id, for example 'cucumber' or '@serenity-js/core'"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "resolve",
    "memberof": "src/io/ModuleLoader.ts~ModuleLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader#resolve",
    "access": "public",
    "description": " Works like `require.resolve`, but relative to specified current working directory",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}\n Path a given Node module"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleId",
        "description": "NPM module id, for example `cucumber` or `@serenity-js/core`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Path a given Node module"
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "require",
    "memberof": "src/io/ModuleLoader.ts~ModuleLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader#require",
    "access": "public",
    "description": " Works like `require`, but relative to specified current working directory",
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "versionOf",
    "memberof": "src/io/ModuleLoader.ts~ModuleLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/ModuleLoader.ts~ModuleLoader#versionOf",
    "access": "public",
    "description": " Returns {@link Version} of module specified by `moduleId`, based on its `package.json`.",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Version}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Version"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 274,
    "kind": "file",
    "name": "src/io/OutputStream.ts",
    "content": "/**\n * @desc\n *  An output stream to be injected into {@link StageCrewMemberBuilder}s configured via {@link SerenityConfig#crew}.\n *\n * @interface\n *\n * @see {@link StageCrewMemberBuilder}\n * @see {@link Serenity#configure}\n * @see {@link SerenityConfig#crew}\n */\nexport interface OutputStream {\n    /**\n     * @type {function(content: string): void}\n     */\n    write: (content: string) => void;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/OutputStream.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "class",
    "name": "OutputStream",
    "memberof": "src/io/OutputStream.ts",
    "static": true,
    "longname": "src/io/OutputStream.ts~OutputStream",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{OutputStream}",
    "description": " An output stream to be injected into {@link StageCrewMemberBuilder}s configured via {@link SerenityConfig#crew}.",
    "see": [
      "{@link StageCrewMemberBuilder}",
      "{@link Serenity#configure}",
      "{@link SerenityConfig#crew}"
    ],
    "lineNumber": 18,
    "interface": true
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "write",
    "memberof": "src/io/OutputStream.ts~OutputStream",
    "static": false,
    "longname": "src/io/OutputStream.ts~OutputStream#write",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "function(content: string): void"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "src/io/Path.ts",
    "content": "import { ensure, isDefined, isGreaterThan, property, TinyType } from 'tiny-types';\n\nimport filenamify = require('filenamify');\nimport path = require('upath');\n\nexport class Path extends TinyType {\n    private static readonly Separator = '/';\n    public readonly value: string;\n\n    static fromJSON(v: string): Path {\n        return new Path(v);\n    }\n\n    static from(...segments: string[]): Path {\n        return new Path(path.joinSafe(...segments));\n    }\n\n    static fromSanitisedString(value: string): Path {\n        const\n            normalised = path.normalize(value).replace(/[\"'/:\\\\]/gi, ''),\n            extension  = path.extname(normalised),\n            basename   = path.basename(normalised, extension),\n            filename   = filenamify(basename, { replacement: '-', maxLength: 250 })\n                .trim()\n                .replace(/[\\s-]+/g, '-');\n\n        return new Path(path.join(\n            path.dirname(normalised),\n            `${ filename }${ extension }`,\n        ));\n    }\n\n    constructor(value: string) {\n        super();\n        ensure(Path.name, value, isDefined(), property('length', isGreaterThan(0)));\n\n        this.value = path.normalize(value);\n    }\n\n    join(another: Path): Path {\n        return new Path(path.join(this.value, another.value));\n    }\n\n    split(): string[] {\n        return this.value\n            .split(Path.Separator)\n            .filter(segment => !! segment); // so that we ignore the trailing path separator in absolute paths\n    }\n\n    resolve(another: Path): Path {\n        return new Path(path.resolve(this.value, another.value));\n    }\n\n    directory(): Path {\n        return new Path(path.dirname(this.value));\n    }\n\n    basename(): string {\n        return path.basename(this.value);\n    }\n\n    isAbsolute(): boolean {\n        return path.isAbsolute(this.value);\n    }\n\n    root(): Path {\n        return new Path(path.parse(this.value).root);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/Path.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "class",
    "name": "Path",
    "memberof": "src/io/Path.ts",
    "static": true,
    "longname": "src/io/Path.ts~Path",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{Path}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "Separator",
    "memberof": "src/io/Path.ts~Path",
    "static": true,
    "longname": "src/io/Path.ts~Path.Separator",
    "access": "private",
    "description": " ",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "value",
    "memberof": "src/io/Path.ts~Path",
    "static": false,
    "longname": "src/io/Path.ts~Path#value",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/Path.ts~Path.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "from",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/Path.ts~Path.from",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "segments",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "fromSanitisedString",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/Path.ts~Path.fromSanitisedString",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 284,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "join",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#join",
    "access": "public",
    "description": " ",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "split",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#split",
    "access": "public",
    "description": " ",
    "lineNumber": 44,
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "resolve",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#resolve",
    "access": "public",
    "description": " ",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "directory",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#directory",
    "access": "public",
    "description": " ",
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "basename",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#basename",
    "access": "public",
    "description": " ",
    "lineNumber": 58,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "isAbsolute",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#isAbsolute",
    "access": "public",
    "description": " ",
    "lineNumber": 62,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "root",
    "memberof": "src/io/Path.ts~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Path.ts~Path#root",
    "access": "public",
    "description": " ",
    "lineNumber": 66,
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 293,
    "kind": "file",
    "name": "src/io/TestRunnerAdapter.ts",
    "content": "import { Outcome } from '../model';\n\n/**\n * @desc\n *  Describes an adapter needed to run a given type of tests programmatically\n *\n * @interface\n */\nexport interface TestRunnerAdapter {\n\n    /**\n     * @desc\n     *  Loads test scenarios.\n     *\n     * @type {function(pathsToScenarios: string[]): Promise<void>}\n     */\n    load: (pathsToScenarios: string[]) => Promise<void>;\n\n    /**\n     * @desc\n     *  Returns the number of loaded scenarios\n     *\n     * @throws {LogicError}\n     *  If called before `load`\n     *\n     * @type {function(): number}\n     */\n    scenarioCount: () => number;\n\n    /**\n     * @desc\n     *  Runs loaded test scenarios.\n     *\n     * @throws {LogicError}\n     *  If called before `load`\n     *\n     * @abstract\n     * @type {function(): Promise<void>}\n     */\n    run: () => Promise<void>;\n\n    /**\n     * @desc\n     *  Scenario success threshold for this test runner.\n     *\n     * @abstract\n     * @type {Outcome | { Code: number }}\n     */\n    successThreshold: () => Outcome | { Code: number };\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/TestRunnerAdapter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 294,
    "kind": "class",
    "name": "TestRunnerAdapter",
    "memberof": "src/io/TestRunnerAdapter.ts",
    "static": true,
    "longname": "src/io/TestRunnerAdapter.ts~TestRunnerAdapter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{TestRunnerAdapter}",
    "description": " Describes an adapter needed to run a given type of tests programmatically",
    "lineNumber": 16,
    "interface": true
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "load",
    "memberof": "src/io/TestRunnerAdapter.ts~TestRunnerAdapter",
    "static": false,
    "longname": "src/io/TestRunnerAdapter.ts~TestRunnerAdapter#load",
    "access": "public",
    "description": " Loads test scenarios.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "function(pathsToScenarios: string[]): Promise<void>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "scenarioCount",
    "memberof": "src/io/TestRunnerAdapter.ts~TestRunnerAdapter",
    "static": false,
    "longname": "src/io/TestRunnerAdapter.ts~TestRunnerAdapter#scenarioCount",
    "access": "public",
    "description": " Returns the number of loaded scenarios",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "function(): number"
      ],
      "spread": false,
      "description": null
    },
    "throws": [
      {
        "types": [
          "LogicError"
        ],
        "description": "If called before `load`"
      }
    ]
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "run",
    "memberof": "src/io/TestRunnerAdapter.ts~TestRunnerAdapter",
    "static": false,
    "longname": "src/io/TestRunnerAdapter.ts~TestRunnerAdapter#run",
    "access": "public",
    "description": " Runs loaded test scenarios.",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "function(): Promise<void>"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true,
    "throws": [
      {
        "types": [
          "LogicError"
        ],
        "description": "If called before `load`"
      }
    ]
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "successThreshold",
    "memberof": "src/io/TestRunnerAdapter.ts~TestRunnerAdapter",
    "static": false,
    "longname": "src/io/TestRunnerAdapter.ts~TestRunnerAdapter#successThreshold",
    "access": "public",
    "description": " Scenario success threshold for this test runner.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "Outcome ",
        " { Code: number }"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "src/io/Version.ts",
    "content": "import semver = require('semver');\nimport { ensure, isDefined, isString, Predicate, TinyType } from 'tiny-types';\n\n/**\n * @desc\n *  A tiny type describing a version number, like `1.2.3`\n *\n * @extends {tiny-types~TinyType}\n */\nexport class Version extends TinyType {\n\n    /**\n     * @param {string} version\n     * @returns {Version}\n     */\n    static fromJSON(version: string): Version {\n        return new Version(version);\n    }\n\n    /**\n     * @param {string} version\n     */\n    constructor(private readonly version: string) {\n        super();\n        ensure('version', version, isDefined(), isString(), isValid());\n    }\n\n    /**\n     * @param {Version} other\n     * @returns {boolean}\n     */\n    isAtLeast(other: Version): boolean {\n        return semver.gte(this.version, other.version);\n    }\n\n    /**\n     * @returns {number}\n     *  Major version number of a given package version, i.e. `1` in `1.2.3`\n     */\n    major(): number {\n        return Number(this.version.split('.')[0]);\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString(): string {\n        return `${ this.version }`;\n    }\n}\n\n/**\n * @package\n */\nfunction isValid(): Predicate<string> {\n    return Predicate.to(`be a valid version number`, (version: string) =>\n        !! semver.valid(version),\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/Version.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "class",
    "name": "Version",
    "memberof": "src/io/Version.ts",
    "static": true,
    "longname": "src/io/Version.ts~Version",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{Version}",
    "description": " A tiny type describing a version number, like `1.2.3`",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "TinyType"
    ]
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/io/Version.ts~Version",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/Version.ts~Version.fromJSON",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Version}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Version"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 302,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/io/Version.ts~Version",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Version.ts~Version#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "isAtLeast",
    "memberof": "src/io/Version.ts~Version",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Version.ts~Version#isAtLeast",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Version"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "major",
    "memberof": "src/io/Version.ts~Version",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Version.ts~Version#major",
    "access": "public",
    "description": "",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}\n Major version number of a given package version, i.e. `1` in `1.2.3`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Major version number of a given package version, i.e. `1` in `1.2.3`"
    },
    "params": []
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "toString",
    "memberof": "src/io/Version.ts~Version",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/io/Version.ts~Version#toString",
    "access": "public",
    "description": "",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 306,
    "kind": "function",
    "name": "isValid",
    "memberof": "src/io/Version.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/Version.ts~isValid",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/io/Version.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 121,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "file",
    "name": "src/io/collections/index.ts",
    "content": "export * from './mappable';\nexport * from './reducible';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/collections/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "src/io/collections/mappable.ts",
    "content": "/**\n * @desc\n *  Describes a collection providing\n *  a [`map`-like interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n *\n * @interface\n *\n * @see {@link Question#map}\n * @see {@link ElementArrayFinder}\n */\nexport interface Mappable<Item> {\n\n    /**\n     * @desc\n     *  Applies a {@link MappingFunction} function to each element of a {@link Mappable} collection.\n     *\n     *  The callback receives an item from the collection as the first argument\n     *  and its index as the second argument.\n     *\n     * @abstract\n     *\n     * @type {function<U>(callback: (item?: Item, index?: number) => U): PromiseLike<U[]> | U[]}\n     */\n    map: <U>(callback: (item?: Item, index?: number) => U) => PromiseLike<U[]> | U[];\n}\n\n/**\n * @desc\n *  A mapping function converting one type into another.\n *\n * @public\n *\n * @typedef {function(item?: V, index?: number) => Promise<O> | O} Mapping<V,O>\n */\nexport type MappingFunction<V, O> =\n    (item?: V, index?: number) => O;\n\n/**\n * @desc\n *  Checks if the value is a {@link Mappable} collection of items.\n *\n * @example <caption>An Array</caption>\n *  import { Mappable } from '@serenity-js/core/lib/io';\n *\n *  Mappable.isMappable([ 1, 2, 3 ]) === true\n *\n * @example <caption>Protractor's ElementArrayFinder</caption>\n *  import { Mappable } from '@serenity-js/core/lib/io';\n *  import { element } from 'protractor';\n *\n *  Mappable.isMappable(element.all(by.tagName('li')) === true\n *\n * @param {Mappable<Item> | any} maybeCollection\n * @returns {boolean}\n */\nexport function isMappable<Item>(maybeCollection: Mappable<Item> | any): maybeCollection is Mappable<Item> {\n    return !! maybeCollection\n        && !! maybeCollection.map\n        && typeof maybeCollection.map === 'function';\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/collections/mappable.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "class",
    "name": "Mappable",
    "memberof": "src/io/collections/mappable.ts",
    "static": true,
    "longname": "src/io/collections/mappable.ts~Mappable",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io/collections",
    "importStyle": "{Mappable}",
    "description": " Describes a collection providing\n a [`map`-like interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).",
    "see": [
      "{@link Question#map}",
      "{@link ElementArrayFinder}"
    ],
    "lineNumber": 18,
    "interface": true
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "map",
    "memberof": "src/io/collections/mappable.ts~Mappable",
    "static": false,
    "longname": "src/io/collections/mappable.ts~Mappable#map",
    "access": "public",
    "description": " Applies a {@link MappingFunction} function to each element of a {@link Mappable} collection.\n\n The callback receives an item from the collection as the first argument\n and its index as the second argument.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "function<U>(callback: (item?: Item, index?: number) => U): PromiseLike<U[]> ",
        " U[]"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 311,
    "kind": "typedef",
    "name": "Mapping<V,O>",
    "memberof": "src/io/collections/mappable.ts",
    "static": true,
    "longname": "src/io/collections/mappable.ts~Mapping<V,O>",
    "access": "public",
    "description": " A mapping function converting one type into another.",
    "lineNumber": 60,
    "type": {
      "types": [
        "function(item?: V, index?: number) => Promise<O> ",
        " O"
      ],
      "optional": false,
      "name": "Mapping<V,O>"
    }
  },
  {
    "__docId__": 312,
    "kind": "function",
    "name": "isMappable",
    "memberof": "src/io/collections/mappable.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/collections/mappable.ts~isMappable",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io/collections",
    "importStyle": "{isMappable}",
    "description": " Checks if the value is a {@link Mappable} collection of items.",
    "examples": [
      "<caption>An Array</caption>\n import { Mappable } from '@serenity-js/core/lib/io';\n\n Mappable.isMappable([ 1, 2, 3 ]) === true",
      "<caption>Protractor's ElementArrayFinder</caption>\n import { Mappable } from '@serenity-js/core/lib/io';\n import { element } from 'protractor';\n\n Mappable.isMappable(element.all(by.tagName('li')) === true"
    ],
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Mappable<Item> ",
          " any"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeCollection",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 313,
    "kind": "file",
    "name": "src/io/collections/reducible.ts",
    "content": "/**\n * @desc\n *  Describes a collection providing\n *  a [`reduce`-like interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n *\n * @interface\n *\n * @see {@link ElementArrayFinder}\n * @see {@link Loop}\n */\nexport interface Reducible {\n    /**\n     * @type {function<T,A>(callback: (accumulator: A, currentValue: T, index: number) => A, initialValue: A): PromiseLike<A> | A}\n     */\n    reduce: <T, A>(fn: (accumulator: A, currentValue: T, index: number) => A, initialValue: A) => PromiseLike<A> | A;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/collections/reducible.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 314,
    "kind": "class",
    "name": "Reducible",
    "memberof": "src/io/collections/reducible.ts",
    "static": true,
    "longname": "src/io/collections/reducible.ts~Reducible",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io/collections",
    "importStyle": "{Reducible}",
    "description": " Describes a collection providing\n a [`reduce`-like interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).",
    "see": [
      "{@link ElementArrayFinder}",
      "{@link Loop}"
    ],
    "lineNumber": 18,
    "interface": true
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "reduce",
    "memberof": "src/io/collections/reducible.ts~Reducible",
    "static": false,
    "longname": "src/io/collections/reducible.ts~Reducible#reduce",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "function<T,A>(callback: (accumulator: A, currentValue: T, index: number) => A, initialValue: A): PromiseLike<A> ",
        " A"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 316,
    "kind": "file",
    "name": "src/io/commaSeparated.ts",
    "content": "/**\n * @desc\n *  Produces a comma-separated list based on the list provided.\n *\n * @param {Array<string>} list\n * @param {function(item: string): string} map\n * @param {string} [acc=''] acc\n *\n * @returns {string}\n */\nexport function commaSeparated(\n    list: Array<string | { toString: () => string }>,\n    map = item => `${ item }`.trim(),\n    acc = '',\n): string {\n    switch (list.length) {\n        case 0:     return acc;\n        case 1:     return commaSeparated(tail(list), map, `${ acc }${ map(head(list)) }`);\n        case 2:     return commaSeparated(tail(list), map, `${ acc }${ map(head(list)) } and `);\n        default:    return commaSeparated(tail(list), map, `${ acc }${ map(head(list)) }, `);\n    }\n}\n\n/** @package */\nfunction head<T>(list: T[]): T {\n    return list[0];\n}\n\n/** @package */\nfunction tail<T>(list: T[]): T[] {\n    return list.slice(1);\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/commaSeparated.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "function",
    "name": "commaSeparated",
    "memberof": "src/io/commaSeparated.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/commaSeparated.ts~commaSeparated",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{commaSeparated}",
    "description": " Produces a comma-separated list based on the list provided.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(item: string): string"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "acc",
        "description": "acc"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 318,
    "kind": "function",
    "name": "head",
    "memberof": "src/io/commaSeparated.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/commaSeparated.ts~head",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/io/commaSeparated.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "ignore": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "function",
    "name": "tail",
    "memberof": "src/io/commaSeparated.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/commaSeparated.ts~tail",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/io/commaSeparated.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "ignore": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "file",
    "name": "src/io/formatted.ts",
    "content": "import { Answerable } from '../screenplay/Answerable';\nimport { inspected } from './inspected';\n\n/**\n * @desc\n *  A tag function returning a human-readable description of a template containing one or more {@link Answerable}s.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\n *\n * @param {TemplateStringsArray} templates\n * @param {Array<Answerable<any>>} placeholders\n * @returns {string}\n */\nexport function formatted(templates: TemplateStringsArray, ...placeholders: Array<Answerable<any>>): string {\n    return templates\n        .map((template, i) => i < placeholders.length\n            ? [ template, compacted(inspected(placeholders[i])) ]\n            : [ template ])\n        .reduce((acc, tuple) => acc.concat(tuple))\n        .join('');\n}\n\n/** @private */\nfunction compacted(multiline: string) {\n    return multiline\n        .replace(/\\r?\\n/g, ' ')\n        .replace(/\\s+/g, ' ');\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/formatted.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 321,
    "kind": "function",
    "name": "formatted",
    "memberof": "src/io/formatted.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/formatted.ts~formatted",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{formatted}",
    "description": " A tag function returning a human-readable description of a template containing one or more {@link Answerable}s.",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TemplateStringsArray"
        ],
        "spread": false,
        "optional": false,
        "name": "templates",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Answerable<any>>"
        ],
        "spread": false,
        "optional": false,
        "name": "placeholders",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 322,
    "kind": "function",
    "name": "compacted",
    "memberof": "src/io/formatted.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/formatted.ts~compacted",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/formatted.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "ignore": true,
    "params": [
      {
        "name": "multiline",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "file",
    "name": "src/io/index.ts",
    "content": "export * from './AssertionReportDiffer';\nexport * from './collections';\nexport * from './commaSeparated';\nexport * from './Config';\nexport * from './ErrorSerialiser';\nexport * from './ErrorStackParser';\nexport * from './FileFinder';\nexport * from './FileSystem';\nexport * from './FileSystemLocation';\nexport * from './formatted';\nexport * from './json';\nexport * from './ModuleLoader';\nexport * from './OutputStream';\nexport * from './Path';\nexport * from './reflection';\nexport * from './TestRunnerAdapter';\nexport * from './trimmed';\nexport * from './Version';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 324,
    "kind": "file",
    "name": "src/io/inspected.ts",
    "content": "import { inspect } from 'util';\n\nimport { Answerable } from '../screenplay/Answerable';\nimport { Question } from '../screenplay/Question';\n\n/**\n * @desc\n *  Provides a human-readable description of the {@link Answerable<T>}.\n *  Similar to {@link util~inspect}.\n *\n * @public\n * @param {Answerable<any>} value\n * @return {string}\n */\nexport function inspected(value: Answerable<any>): string {\n    if (! isDefined(value)) {\n        return inspect(value);\n    }\n\n    if (Array.isArray(value)) {\n        return [\n            '[',\n            value.map(item => `  ${ inspected(item) }`).join(',\\n'),\n            ']',\n        ].join('\\n');\n    }\n\n    if (isAPromise(value)) {\n        return `a Promise`;\n    }\n\n    if (Question.isAQuestion(value)) {\n        return value.toString();\n    }\n\n    if (isADate(value)) {\n        return value.toISOString();\n    }\n\n    if (hasItsOwnToString(value)) {\n        return value.toString();\n    }\n\n    if (isInspectable(value)) {\n        return value.inspect();\n    }\n\n    if (isANamedFunction(value)) {\n        return `${ value.name } property`;\n    }\n\n    if (! hasCustomInspectionFunction(value) && isPlainObject(value) && isSerialisableAsJSON(value)) {\n        return JSON.stringify(value, undefined, 4);\n    }\n\n    return inspect(value, { breakLength: Number.POSITIVE_INFINITY, compact: true, sorted: false  });\n}\n\n/**\n * @desc\n * Checks if the value is defined\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isDefined(v: Answerable<any>) {\n    return !! v;\n}\n\n/**\n * @desc\n * Checks if the value defines its own `toString` method\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction hasItsOwnToString(v: Answerable<any>): v is { toString: () => string } {\n    return typeof v === 'object'\n        && !! (v as any).toString\n        && typeof (v as any).toString === 'function'\n        && ! isNative((v as any).toString);\n}\n\n/**\n * @desc\n * Checks if the value defines its own `inspect` method\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isInspectable(v: Answerable<any>): v is { inspect: () => string } {\n    return !! (v as any).inspect && typeof (v as any).inspect === 'function';\n}\n\n/**\n * @desc\n * Checks if the value is a {@link Date}\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isADate(v: Answerable<any>): v is Date {\n    return v instanceof Date;\n}\n\n/**\n * @desc\n * Checks if the value is a {@link Promise}\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isAPromise<T>(v: Answerable<T>): v is Promise<T> {\n    return !! (v as any).then;\n}\n\n/**\n * @desc\n * Checks if the value is a named {@link Function}\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isANamedFunction(v: any): v is { name: string } {\n    return Object.prototype.toString.call(v) === '[object Function]' && (v as any).name !== '';\n}\n\n/**\n * @desc\n * Checks if the value defines its own `inspect` method\n * See: https://nodejs.org/api/util.html#util_util_inspect_custom\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction hasCustomInspectionFunction(v: Answerable<any>): v is object { // eslint-disable-line @typescript-eslint/ban-types\n    return v && v[Symbol.for('nodejs.util.inspect.custom')];\n}\n\n/**\n * @desc\n * Checks if the value has a good chance of being a plain JavaScript object\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isPlainObject(v: Answerable<any>): v is object {   // eslint-disable-line @typescript-eslint/ban-types\n\n    // Basic check for Type object that's not null\n    if (typeof v === 'object' && v !== null) {\n\n        // If Object.getPrototypeOf supported, use it\n        if (typeof Object.getPrototypeOf === 'function') {\n            const proto = Object.getPrototypeOf(v);\n            return proto === Object.prototype || proto === null;\n        }\n\n        // Otherwise, use internal class\n        // This should be reliable as if getPrototypeOf not supported, is pre-ES5\n        return Object.prototype.toString.call(v) === '[object Object]';\n    }\n\n    // Not an object\n    return false;\n}\n\n/**\n * @desc\n * Checks if the value is a JSON object that can be stringified\n *\n * @private\n * @param {Answerable<any>} v\n */\nfunction isSerialisableAsJSON(v: any): v is object {    // eslint-disable-line @typescript-eslint/ban-types\n    try {\n        JSON.stringify(v);\n\n        return true;\n    } catch {\n        return false;\n    }\n}\n\n/**\n * https://davidwalsh.name/detect-native-function\n * @param {any} v\n */\nfunction isNative(v: any): v is Function {  // eslint-disable-line @typescript-eslint/ban-types\n\n    const\n        toString        = Object.prototype.toString,    // Used to resolve the internal `[[Class]]` of values\n        fnToString      = Function.prototype.toString,  // Used to resolve the decompiled source of functions\n        hostConstructor = /^\\[object .+?Constructor]$/; // Used to detect host constructors (Safari > 4; really typed array specific)\n\n    // Compile a regexp using a common native method as a template.\n    // We chose `Object#toString` because there's a good chance it is not being mucked with.\n    const nativeFunctionTemplate = new RegExp(\n        '^' +\n        // Coerce `Object#toString` to a string\n        String(toString)\n        // Escape any special regexp characters\n            .replace(/[$()*+./?[\\\\\\]^{|}]/g , '\\\\$&')\n            // Replace mentions of `toString` with `.*?` to keep the template generic.\n            // Replace thing like `for ...` to support environments like Rhino which add extra info\n            // such as method arity.\n            .replace(/toString|(function).*?(?=\\\\\\()| for .+?(?=\\\\])/g, '$1.*?') +\n        '$',\n    );\n\n    const type = typeof v;\n    return type === 'function'\n        // Use `Function#toString` to bypass the value's own `toString` method\n        // and avoid being faked out.\n        ? nativeFunctionTemplate.test(fnToString.call(v))\n        // Fallback to a host object check because some environments will represent\n        // things like typed arrays as DOM methods which may not conform to the\n        // normal native pattern.\n        : (v && type === 'object' && hostConstructor.test(toString.call(v))) || false;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/inspected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 325,
    "kind": "function",
    "name": "inspected",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~inspected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{inspected}",
    "description": " Provides a human-readable description of the {@link Answerable<T>}.\n Similar to {@link util~inspect}.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 326,
    "kind": "function",
    "name": "isDefined",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isDefined",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value is defined",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "hasItsOwnToString",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~hasItsOwnToString",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value defines its own `toString` method",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "isInspectable",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isInspectable",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value defines its own `inspect` method",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "function",
    "name": "isADate",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isADate",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value is a {@link Date}",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "function",
    "name": "isAPromise",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isAPromise",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value is a {@link Promise}",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "isANamedFunction",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isANamedFunction",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value is a named {@link Function}",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "function",
    "name": "hasCustomInspectionFunction",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~hasCustomInspectionFunction",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value defines its own `inspect` method\nSee: https://nodejs.org/api/util.html#util_util_inspect_custom",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "function",
    "name": "isPlainObject",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isPlainObject",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value has a good chance of being a plain JavaScript object",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "function",
    "name": "isSerialisableAsJSON",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isSerialisableAsJSON",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "Checks if the value is a JSON object that can be stringified",
    "lineNumber": 315,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<any>"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "function",
    "name": "isNative",
    "memberof": "src/io/inspected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/inspected.ts~isNative",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/io/inspected.ts",
    "importStyle": null,
    "description": "https://davidwalsh.name/detect-native-function ",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 336,
    "kind": "file",
    "name": "src/io/json/cycle.ts",
    "content": "/* eslint-disable @typescript-eslint/no-unused-vars,unicorn/better-regex,unicorn/escape-case,no-useless-escape,no-control-regex,@typescript-eslint/explicit-module-boundary-types */\n\nexport function stringify(value: unknown, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string {\n    return JSON.stringify(decycle(value), replacer, space);\n}\n\n/**\n * @desc\n *  Converts a JavaScript Object Notation (JSON) string into an object.\n *  Supports objects with cyclic references.\n *\n * @param text A valid JSON string.\n * @param reviver A function that transforms the results. This function is called for each member of the object.\n *   If a member contains nested objects, the nested objects are transformed before the parent object is.\n */\nexport function parse(text: string, reviver?: (this: any, key: string, value: any) => any) {\n    return retrocycle(JSON.parse(text, reviver));\n}\n\n/**\n * @desc\n *  Makes a deep copy of an object or array, assuring that there is at most\n *  one instance of each object or array in the resulting structure. The\n *  duplicate references (which might be forming cycles) are replaced with\n *  an object of the form:\n *\n *  ```\n *      {\"$ref\": PATH}\n *  ```\n *\n *  where the PATH is a JSONPath string that locates the first occurrence.\n *\n *  So,\n *  ```\n *      var a = [];\n *      a[0] = a;\n *      return JSON.stringify(decycle(a));\n *  ```\n *\n *  produces the string `[{\"$ref\":\"$\"}]`.\n *\n *  JSONPath is used to locate the unique object. $ indicates the top level of\n *  the object or array. [NUMBER] or [STRING] indicates a child element or property.\n *\n *  Based on work by Douglas Crockford\n *   https://github.com/jan-molak/JSON-js/blob/master/cycle.js\n *\n * @param {any} object\n *\n * @package\n */\nfunction decycle(object: any) {\n    const objects = new WeakMap<any, string>();     // object to path mappings\n\n    // The derez function recurses through the object, producing a deep copy\n    return (function derez(value, path) {\n\n        let old_path,   // The path of an earlier occurance of value\n            nu;         // The new object or array\n\n        if (\n            typeof value === 'object'\n            && value !== null\n            && !(value instanceof Boolean)\n            && !(value instanceof Date)\n            && !(value instanceof Number)\n            && !(value instanceof RegExp)\n            && !(value instanceof String)\n        ) {\n            // If the value is an object or array, look to see if we have already\n            // encountered it. If so, return a {\"$ref\":PATH} object.\n\n            old_path = objects.get(value);\n            if (old_path !== undefined) {\n                return { $ref: old_path };\n            }\n            // Otherwise, accumulate the unique value and its path.\n\n            objects.set(value, path);\n\n            // If it is an array, replicate the array.\n\n            if (Array.isArray(value)) {\n                nu = [];\n                value.forEach(function (element, i) {\n                    nu[i] = derez(element, path + '[' + i + ']');\n                });\n            } else {\n\n                // If it is an object, replicate the object.\n\n                nu = {};\n                Object.keys(value).forEach(function (name) {\n                    nu[name] = derez(\n                        value[name],\n                        path + '[' + JSON.stringify(name) + ']'\n                    );\n                });\n            }\n            return nu;\n        }\n        return value;\n    }(object, '$'));\n}\n\n/**\n * @desc\n *  Restore an object that was reduced by decycle. Members which values are\n *  objects of the form\n *  ```\n *       {$ref: PATH}\n *  ```\n *  are replaced with references to the value found by the PATH.\n *  This will restore cycles. The object will be MUTATED.\n *\n *  The eval function is used to locate the values described by a PATH. The\n *  root object is kept in a $ variable. A regular expression is used to\n *  assure that the PATH is extremely well formed. The regexp contains nested\n *  * quantifiers. That has been known to have extremely bad performance\n *  problems on some browsers for very long strings. A PATH is expected to be\n *  reasonably short. A PATH is allowed to belong to a very restricted subset of\n *  Goessner's JSONPath.\n *\n *  So,\n *  ```\n *       var s = '[{\"$ref\":\"$\"}]';\n *       return retrocycle(JSON.parse(s));\n *  ```\n *  produces an array containing a single element which is the array itself.\n *\n *  Based on work by Douglas Crockford\n *   https://github.com/jan-molak/JSON-js/blob/master/cycle.js\n *\n * @param {any} $\n *\n * @package\n */\nfunction retrocycle($: any) {\n    const px = /^\\$(?:\\[(?:\\d+|\"(?:[^\\\\\"\\u0000-\\u001f]|\\\\(?:[\\\\\"\\/bfnrt]|u[0-9a-zA-Z]{4}))*\")\\])*$/;\n\n    (function rez(value) {\n\n        // The rez function walks recursively through the object looking for $ref\n        // properties. When it finds one that has a value that is a path, then it\n        // replaces the $ref object with a reference to the value that is found by\n        // the path.\n\n        if (value && typeof value === 'object') {\n            if (Array.isArray(value)) {\n                value.forEach(function (element, i) {\n                    if (typeof element === 'object' && element !== null) {\n                        const path = element.$ref;\n                        if (typeof path === 'string' && px.test(path)) {\n                            value[i] = eval(path);\n                        } else {\n                            rez(element);\n                        }\n                    }\n                });\n            } else {\n                Object.keys(value).forEach(function (name) {\n                    const item = value[name];\n                    if (typeof item === 'object' && item !== null) {\n                        const path = item.$ref;\n                        if (typeof path === 'string' && px.test(path)) {\n                            value[name] = eval(path);\n                        } else {\n                            rez(item);\n                        }\n                    }\n                });\n            }\n        }\n    }($));\n\n    return $;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/json/cycle.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 337,
    "kind": "function",
    "name": "stringify",
    "memberof": "src/io/json/cycle.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/json/cycle.ts~stringify",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io/json",
    "importStyle": "{stringify}",
    "description": " ",
    "lineNumber": 3,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "replacer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 338,
    "kind": "function",
    "name": "parse",
    "memberof": "src/io/json/cycle.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/json/cycle.ts~parse",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io/json",
    "importStyle": "{parse}",
    "description": " Converts a JavaScript Object Notation (JSON) string into an object.\n Supports objects with cyclic references.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "A valid JSON string."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reviver",
        "description": "A function that transforms the results. This function is called for each member of the object.\n  If a member contains nested objects, the nested objects are transformed before the parent object is."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "function",
    "name": "decycle",
    "memberof": "src/io/json/cycle.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/json/cycle.ts~decycle",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/io/json/cycle.ts",
    "importStyle": null,
    "description": " Makes a deep copy of an object or array, assuring that there is at most\n one instance of each object or array in the resulting structure. The\n duplicate references (which might be forming cycles) are replaced with\n an object of the form:\n\n ```\n     {\"$ref\": PATH}\n ```\n\n where the PATH is a JSONPath string that locates the first occurrence.\n\n So,\n ```\n     var a = [];\n     a[0] = a;\n     return JSON.stringify(decycle(a));\n ```\n\n produces the string `[{\"$ref\":\"$\"}]`.\n\n JSONPath is used to locate the unique object. $ indicates the top level of\n the object or array. [NUMBER] or [STRING] indicates a child element or property.\n\n Based on work by Douglas Crockford\n  https://github.com/jan-molak/JSON-js/blob/master/cycle.js",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "function",
    "name": "retrocycle",
    "memberof": "src/io/json/cycle.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/json/cycle.ts~retrocycle",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/io/json/cycle.ts",
    "importStyle": null,
    "description": " Restore an object that was reduced by decycle. Members which values are\n objects of the form\n ```\n      {$ref: PATH}\n ```\n are replaced with references to the value found by the PATH.\n This will restore cycles. The object will be MUTATED.\n\n The eval function is used to locate the values described by a PATH. The\n root object is kept in a $ variable. A regular expression is used to\n assure that the PATH is extremely well formed. The regexp contains nested\n * quantifiers. That has been known to have extremely bad performance\n problems on some browsers for very long strings. A PATH is expected to be\n reasonably short. A PATH is allowed to belong to a very restricted subset of\n Goessner's JSONPath.\n\n So,\n ```\n      var s = '[{\"$ref\":\"$\"}]';\n      return retrocycle(JSON.parse(s));\n ```\n produces an array containing a single element which is the array itself.\n\n Based on work by Douglas Crockford\n  https://github.com/jan-molak/JSON-js/blob/master/cycle.js",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "$",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "file",
    "name": "src/io/json/index.ts",
    "content": "export * from './cycle';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/json/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 342,
    "kind": "file",
    "name": "src/io/proxies.ts",
    "content": "export interface Dictionary {\n    [key: string]: any;\n}\n\n/**\n * @private\n */\nexport function caseInsensitive<T extends Dictionary>(dictionary: T): T & Dictionary {\n    return new Proxy(dictionary, {\n        get: <K extends keyof T & string>(obj: T & Dictionary, key: K) => {     // eslint-disable-line unicorn/prevent-abbreviations\n            const found = Object.keys(obj)\n                .find(k => k.toLocaleLowerCase() === key.toLocaleLowerCase());\n\n            return found && obj[found];\n        },\n    });\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/proxies.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "function",
    "name": "caseInsensitive",
    "memberof": "src/io/proxies.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/proxies.ts~caseInsensitive",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/core/src/io/proxies.ts",
    "importStyle": "{caseInsensitive}",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "params": [
      {
        "name": "dictionary",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "file",
    "name": "src/io/reflection/has.ts",
    "content": "/**\n * @desc\n *  Checks if the `candidate` value \"quacks like a duck\".\n *  In particular, it checks if the `candidate`:\n *  - is not `null`\n *  - is not `undefined`\n *  - has expected methods or fields (evaluated via [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof))\n *\n * @example\n *  const looksLikeADuck = has({\n *      name:   'string',\n *      quack:  'function',\n *  })\n *\n *  const daisy = {\n *      name: 'Daisy',\n *      quack: () => 'quack',\n *  }\n *\n *  looksLikeADuck(daisy) // true\n *\n * @param {object} api\n *  An object where the keys are names of member fields and methods expected on the `candidate`,\n *  and values are the names of their types, i.e. `function`, `object`, etc.\n *\n * @returns {boolean}\n */\nexport function has<T>(api: Record<keyof T, string>): (candidate: unknown) => candidate is T {\n    return (candidate: unknown): candidate is T =>\n        candidate !== null\n        && candidate !== undefined\n        && Object.entries(api).reduce(\n            (result, [key, type]) =>\n                result && (typeof candidate[key]) === type,\n            true,\n        )\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/reflection/has.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 345,
    "kind": "function",
    "name": "has",
    "memberof": "src/io/reflection/has.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/reflection/has.ts~has",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io/reflection",
    "importStyle": "{has}",
    "description": " Checks if the `candidate` value \"quacks like a duck\".\n In particular, it checks if the `candidate`:\n - is not `null`\n - is not `undefined`\n - has expected methods or fields (evaluated via [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof))",
    "examples": [
      " const looksLikeADuck = has({\n     name:   'string',\n     quack:  'function',\n })\n\n const daisy = {\n     name: 'Daisy',\n     quack: () => 'quack',\n }\n\n looksLikeADuck(daisy) // true"
    ],
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "api",
        "description": "An object where the keys are names of member fields and methods expected on the `candidate`,\n and values are the names of their types, i.e. `function`, `object`, etc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 346,
    "kind": "file",
    "name": "src/io/reflection/index.ts",
    "content": "export * from './has';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/reflection/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "file",
    "name": "src/io/trimmed.ts",
    "content": "/**\n * @desc\n *  A tag function trimming the leading and trailing whitespace from multi-line strings.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\n *\n * @param {TemplateStringsArray} templates\n * @param {Array<string>} placeholders\n * @returns {string}\n */\nexport function trimmed(templates: TemplateStringsArray, ...placeholders: string[]): string {\n\n    const lines = templates\n        .map((template, i) => i < placeholders.length\n            ? [ template, placeholders[i] ]\n            : [ template ])\n        .reduce((acc, tuple) => acc.concat(tuple))\n        .join('')\n        .split('\\n');\n\n    const nonEmptyLines = lines\n        .map(line => line.trim())\n        .filter(line => !! line);\n\n    return nonEmptyLines\n        .map(line => line.replace(/\\|\\s?(.*)$/, '$1\\n'))\n        .join('');\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/io/trimmed.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 348,
    "kind": "function",
    "name": "trimmed",
    "memberof": "src/io/trimmed.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/io/trimmed.ts~trimmed",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/io",
    "importStyle": "{trimmed}",
    "description": " A tag function trimming the leading and trailing whitespace from multi-line strings.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@link",
        "tagValue": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TemplateStringsArray"
        ],
        "spread": false,
        "optional": false,
        "name": "templates",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "placeholders",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 349,
    "kind": "file",
    "name": "src/model/ActivityDetails.ts",
    "content": "import { JSONObject, TinyType } from 'tiny-types';\n\nimport { Name } from './Name';\n\nexport class ActivityDetails extends TinyType {\n    static fromJSON(o: JSONObject): ActivityDetails {\n        return new ActivityDetails(\n            Name.fromJSON(o.name as string),\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n    ) {\n        super();\n    }\n\n    toJSON(): { name: string } {\n        return {\n            name: this.name.value,\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/ActivityDetails.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 350,
    "kind": "class",
    "name": "ActivityDetails",
    "memberof": "src/model/ActivityDetails.ts",
    "static": true,
    "longname": "src/model/ActivityDetails.ts~ActivityDetails",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ActivityDetails}",
    "description": " ",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/ActivityDetails.ts~ActivityDetails",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/ActivityDetails.ts~ActivityDetails.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ActivityDetails"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 352,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/ActivityDetails.ts~ActivityDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/ActivityDetails.ts~ActivityDetails#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/ActivityDetails.ts~ActivityDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/ActivityDetails.ts~ActivityDetails#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 354,
    "kind": "file",
    "name": "src/model/Artifact.ts",
    "content": "import { ensure, isDefined, isString, JSONObject, Predicate, TinyType } from 'tiny-types';\n\nimport { LogicError } from '../errors';\nimport * as artifacts from './artifacts';\n\nexport interface SerialisedArtifact extends JSONObject {\n    type: string;\n    base64EncodedValue: string;\n}\n\nexport type ArtifactType = new (base64EncodedValue: string) => Artifact;\n\n/**\n * @extends {tiny-types~TinyType}\n */\nexport abstract class Artifact extends TinyType {\n    static fromJSON(o: SerialisedArtifact): Artifact {\n        const\n            recognisedTypes = Object.keys(artifacts),\n            type            = Artifact.ofType(o.type);\n\n        if (! type) {\n            throw new LogicError(`\n                Couldn't de-serialise artifact of an unknown type.\n                ${o.type} is not one of the recognised types: ${recognisedTypes.join(', ')}\n           `);\n        }\n\n        return new type(o.base64EncodedValue);\n    }\n\n    static ofType(name: string): ArtifactType | undefined {\n        const\n            types = Object.keys(artifacts),\n            type = types.find(constructorName => constructorName === name);\n\n        return artifacts[type];\n    }\n\n    constructor(public readonly base64EncodedValue: string) {\n        super();\n        ensure(this.constructor.name, base64EncodedValue, isDefined(), isString(), looksLikeBase64Encoded());\n    }\n\n    abstract map<T>(fn: (decodedValue: any) => T): T;\n\n    // todo: serialise on call\n    toJSON(): SerialisedArtifact {\n        return ({\n            type: this.constructor.name,\n            base64EncodedValue: this.base64EncodedValue,\n        });\n    }\n}\n\nfunction looksLikeBase64Encoded(): Predicate<string> {\n    const regex = /^[\\d+/=A-Za-z]+$/;\n\n    return Predicate.to(`be base64-encoded`, (value: string) => regex.test(value));\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/Artifact.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "class",
    "name": "Artifact",
    "memberof": "src/model/Artifact.ts",
    "static": true,
    "longname": "src/model/Artifact.ts~Artifact",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Artifact}",
    "description": "",
    "lineNumber": 59,
    "interface": false,
    "extends": [
      "TinyType"
    ]
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/Artifact.ts~Artifact",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Artifact.ts~Artifact.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "SerialisedArtifact"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Artifact"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "ofType",
    "memberof": "src/model/Artifact.ts~Artifact",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Artifact.ts~Artifact.ofType",
    "access": "public",
    "description": " ",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ArtifactType ",
        " undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 358,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Artifact.ts~Artifact",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Artifact.ts~Artifact#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/Artifact.ts~Artifact",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Artifact.ts~Artifact#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 48,
    "return": {
      "nullable": null,
      "types": [
        "SerialisedArtifact"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 360,
    "kind": "function",
    "name": "looksLikeBase64Encoded",
    "memberof": "src/model/Artifact.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Artifact.ts~looksLikeBase64Encoded",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/model/Artifact.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 56,
    "return": {
      "nullable": null,
      "types": [
        "Predicate"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 361,
    "kind": "file",
    "name": "src/model/BusinessRule.ts",
    "content": "import { ensure, isDefined, JSONObject, TinyType } from 'tiny-types';\n\nimport { Description } from './Description';\nimport { Name } from './Name';\n\nexport class BusinessRule extends TinyType {\n    static fromJSON(o: JSONObject): BusinessRule {\n        return new BusinessRule(\n            Name.fromJSON(o.name as string),\n            Description.fromJSON(o.description as string),\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n        public readonly description: Description,\n    ) {\n        super();\n        ensure('name', name, isDefined());\n        ensure('description', description, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/BusinessRule.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 362,
    "kind": "class",
    "name": "BusinessRule",
    "memberof": "src/model/BusinessRule.ts",
    "static": true,
    "longname": "src/model/BusinessRule.ts~BusinessRule",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{BusinessRule}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/BusinessRule.ts~BusinessRule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/BusinessRule.ts~BusinessRule.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BusinessRule"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 364,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/BusinessRule.ts~BusinessRule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/BusinessRule.ts~BusinessRule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 365,
    "kind": "file",
    "name": "src/model/Category.ts",
    "content": "import { ensure, isDefined, TinyType } from 'tiny-types';\n\nexport class Category extends TinyType {\n    static fromJSON(v: string): Category {\n        return new Category(v);\n    }\n\n    constructor(public readonly value: string) {\n        super();\n        ensure(this.constructor.name, value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/Category.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 366,
    "kind": "class",
    "name": "Category",
    "memberof": "src/model/Category.ts",
    "static": true,
    "longname": "src/model/Category.ts~Category",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Category}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/Category.ts~Category",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Category.ts~Category.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Category"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 368,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Category.ts~Category",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Category.ts~Category#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 369,
    "kind": "file",
    "name": "src/model/CorrelationId.ts",
    "content": "import * as cuid from 'cuid';\nimport { TinyTypeOf } from 'tiny-types';\n\nexport class CorrelationId extends TinyTypeOf<string>() {\n    static fromJSON(v: string): CorrelationId {\n        return new CorrelationId(v);\n    }\n\n    static create(): CorrelationId {\n        return new CorrelationId(cuid());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/CorrelationId.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 370,
    "kind": "class",
    "name": "CorrelationId",
    "memberof": "src/model/CorrelationId.ts",
    "static": true,
    "longname": "src/model/CorrelationId.ts~CorrelationId",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{CorrelationId}",
    "description": " ",
    "lineNumber": 4,
    "interface": false,
    "expressionExtends": ""
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/CorrelationId.ts~CorrelationId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/CorrelationId.ts~CorrelationId.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 5,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "create",
    "memberof": "src/model/CorrelationId.ts~CorrelationId",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/CorrelationId.ts~CorrelationId.create",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "return": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 373,
    "kind": "file",
    "name": "src/model/Description.ts",
    "content": "import { ensure, isDefined, TinyType } from 'tiny-types';\n\nexport class Description extends TinyType {\n    public readonly value: string;\n\n    static fromJSON(v: string): Description {\n        return new Description(v);\n    }\n\n    constructor(value: string) {\n        super();\n        ensure('value', value, isDefined());\n\n        this.value = value.split('\\n').map(line => line.trim()).join('\\n');\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/Description.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 374,
    "kind": "class",
    "name": "Description",
    "memberof": "src/model/Description.ts",
    "static": true,
    "longname": "src/model/Description.ts~Description",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Description}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "value",
    "memberof": "src/model/Description.ts~Description",
    "static": false,
    "longname": "src/model/Description.ts~Description#value",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/Description.ts~Description",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Description.ts~Description.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Description"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 377,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Description.ts~Description",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Description.ts~Description#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 379,
    "kind": "file",
    "name": "src/model/Duration.ts",
    "content": "import { TinyType } from 'tiny-types';\n\nexport class Duration extends TinyType {\n\n    private static msPerSecond = 1000;\n    private static msPerMinute = Duration.msPerSecond * 60;\n    private static msPerHour   = Duration.msPerMinute * 60;\n    private static msPerDay    = Duration.msPerHour * 24;\n    private static msPerYear   = Duration.msPerDay * 365;\n\n    static ofMilliseconds   = (milliseconds: number): Duration => new Duration(milliseconds);\n    static ofSeconds        = (seconds: number): Duration      => Duration.ofMilliseconds(seconds  * Duration.msPerSecond);\n    static ofMinutes        = (minutes: number): Duration      => Duration.ofMilliseconds(minutes  * Duration.msPerMinute);\n    static ofHours          = (hours: number): Duration        => Duration.ofMilliseconds(hours    * Duration.msPerHour);\n    static ofDays           = (days: number): Duration         => Duration.ofMilliseconds(days     * Duration.msPerDay);\n    static ofYears          = (years: number): Duration        => Duration.ofMilliseconds(years    * Duration.msPerYear);\n\n    constructor(private readonly milliseconds: number) {\n        super();\n    }\n\n    isLessThan(another: Duration): boolean {\n        return this.milliseconds < another.milliseconds;\n    }\n\n    isLessThanOrEqualTo(another: Duration): boolean {\n        return this.milliseconds <= another.milliseconds;\n    }\n\n    isGreaterThan(another: Duration): boolean {\n        return this.milliseconds > another.milliseconds;\n    }\n\n    isGreaterThanOrEqualTo(another: Duration): boolean {\n        return this.milliseconds >= another.milliseconds;\n    }\n\n    plus(another: Duration): Duration {\n        return new Duration(this.milliseconds + another.milliseconds);\n    }\n\n    inMilliseconds(): number {\n        return this.milliseconds;\n    }\n\n    toString(): string {\n        const ms = this.milliseconds;\n\n        const levels = [\n            [ Math.floor(   ms / Duration.msPerYear), 'y'],\n            [ Math.floor(  (ms % Duration.msPerYear) / Duration.msPerDay), 'd'],\n            [ Math.floor( ((ms % Duration.msPerYear) % Duration.msPerDay) / Duration.msPerHour), 'h'],\n            [ Math.floor((((ms % Duration.msPerYear) % Duration.msPerDay) % Duration.msPerHour) / Duration.msPerMinute), 'm'],\n            [ Math.floor((((ms % Duration.msPerYear) % Duration.msPerDay) % Duration.msPerHour) % Duration.msPerMinute / Duration.msPerSecond), 's'],\n            [ (((ms % Duration.msPerYear) % Duration.msPerDay) % Duration.msPerHour) % Duration.msPerMinute % Duration.msPerSecond, 'ms'],\n        ];\n\n        return levels.reduce((acc, l, i) => l[0] > 0 || i === levels.length\n            ? `${ acc } ${ l[0] }${ l[1] }`\n            : acc,\n        '').trim() || '0ms';\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/Duration.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 380,
    "kind": "class",
    "name": "Duration",
    "memberof": "src/model/Duration.ts",
    "static": true,
    "longname": "src/model/Duration.ts~Duration",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Duration}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "msPerSecond",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.msPerSecond",
    "access": "private",
    "description": " ",
    "lineNumber": 5,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "msPerMinute",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.msPerMinute",
    "access": "private",
    "description": " ",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "msPerHour",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.msPerHour",
    "access": "private",
    "description": " ",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "msPerDay",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.msPerDay",
    "access": "private",
    "description": " ",
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "msPerYear",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.msPerYear",
    "access": "private",
    "description": " ",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "ofMilliseconds",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofMilliseconds",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "ofSeconds",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofSeconds",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "ofMinutes",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofMinutes",
    "access": "public",
    "description": " ",
    "lineNumber": 13,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "ofHours",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofHours",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "ofDays",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofDays",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "ofYears",
    "memberof": "src/model/Duration.ts~Duration",
    "static": true,
    "longname": "src/model/Duration.ts~Duration.ofYears",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "isLessThan",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#isLessThan",
    "access": "public",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "isLessThanOrEqualTo",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#isLessThanOrEqualTo",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "isGreaterThan",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#isGreaterThan",
    "access": "public",
    "description": " ",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "isGreaterThanOrEqualTo",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#isGreaterThanOrEqualTo",
    "access": "public",
    "description": " ",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "plus",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#plus",
    "access": "public",
    "description": " ",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "inMilliseconds",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#inMilliseconds",
    "access": "public",
    "description": " ",
    "lineNumber": 42,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "toString",
    "memberof": "src/model/Duration.ts~Duration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Duration.ts~Duration#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 46,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 400,
    "kind": "file",
    "name": "src/model/Name.ts",
    "content": "import { ensure, isDefined, TinyType } from 'tiny-types';\n\nexport class Name extends TinyType {\n    static fromJSON(v: string): Name {\n        return new Name(v);\n    }\n\n    constructor(public readonly value: string) {\n        super();\n        ensure(this.constructor.name, value, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/Name.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 401,
    "kind": "class",
    "name": "Name",
    "memberof": "src/model/Name.ts",
    "static": true,
    "longname": "src/model/Name.ts~Name",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Name}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/Name.ts~Name",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Name.ts~Name.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Name"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 403,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Name.ts~Name",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Name.ts~Name#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 404,
    "kind": "file",
    "name": "src/model/ScenarioDetails.ts",
    "content": "import { JSONObject, TinyType } from 'tiny-types';\n\nimport { FileSystemLocation } from '../io';\nimport { Category } from './Category';\nimport { Name } from './Name';\n\nexport class ScenarioDetails extends TinyType {\n    static fromJSON(o: JSONObject): ScenarioDetails {\n        return new ScenarioDetails(\n            Name.fromJSON(o.name as string),\n            Category.fromJSON(o.category as string),\n            FileSystemLocation.fromJSON(o.location as JSONObject),\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n        public readonly category: Category,\n        public readonly location: FileSystemLocation,\n    ) {\n        super();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/ScenarioDetails.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 405,
    "kind": "class",
    "name": "ScenarioDetails",
    "memberof": "src/model/ScenarioDetails.ts",
    "static": true,
    "longname": "src/model/ScenarioDetails.ts~ScenarioDetails",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ScenarioDetails}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/ScenarioDetails.ts~ScenarioDetails",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/ScenarioDetails.ts~ScenarioDetails.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ScenarioDetails"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 407,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/ScenarioDetails.ts~ScenarioDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/ScenarioDetails.ts~ScenarioDetails#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 408,
    "kind": "file",
    "name": "src/model/ScenarioParameters.ts",
    "content": "import { ensure, isDefined, JSONObject, TinyType } from 'tiny-types';\n\nimport { Description } from './Description';\nimport { Name } from './Name';\n\nexport class ScenarioParameters extends TinyType {\n    public static fromJSON(o: JSONObject): ScenarioParameters {\n        return new ScenarioParameters(\n            Name.fromJSON(o.name as string),\n            Description.fromJSON(o.description as string),\n            (o as any).values,\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n        public readonly description: Description,\n        public readonly values: { [ parameter: string ]: string },\n    ) {\n        super();\n\n        ensure('name', name, isDefined());\n        ensure('description', description, isDefined());\n        ensure('values', values, isDefined());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/ScenarioParameters.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 409,
    "kind": "class",
    "name": "ScenarioParameters",
    "memberof": "src/model/ScenarioParameters.ts",
    "static": true,
    "longname": "src/model/ScenarioParameters.ts~ScenarioParameters",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ScenarioParameters}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/ScenarioParameters.ts~ScenarioParameters",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/ScenarioParameters.ts~ScenarioParameters.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ScenarioParameters"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 411,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/ScenarioParameters.ts~ScenarioParameters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/ScenarioParameters.ts~ScenarioParameters#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 412,
    "kind": "file",
    "name": "src/model/TestSuiteDetails.ts",
    "content": "import { JSONObject, TinyType } from 'tiny-types';\n\nimport { FileSystemLocation } from '../io';\nimport { CorrelationId } from './CorrelationId';\nimport { Name } from './Name';\n\nexport class TestSuiteDetails extends TinyType {\n    static fromJSON(o: JSONObject): TestSuiteDetails {\n        return new TestSuiteDetails(\n            Name.fromJSON(o.name as string),\n            FileSystemLocation.fromJSON(o.location as JSONObject),\n            CorrelationId.fromJSON(o.correlationId as string),\n        );\n    }\n\n    constructor(\n        public readonly name: Name,\n        public readonly location: FileSystemLocation,\n        public readonly correlationId: CorrelationId = CorrelationId.create(),\n    ) {\n        super();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/TestSuiteDetails.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "class",
    "name": "TestSuiteDetails",
    "memberof": "src/model/TestSuiteDetails.ts",
    "static": true,
    "longname": "src/model/TestSuiteDetails.ts~TestSuiteDetails",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{TestSuiteDetails}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/TestSuiteDetails.ts~TestSuiteDetails",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/TestSuiteDetails.ts~TestSuiteDetails.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestSuiteDetails"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 415,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/TestSuiteDetails.ts~TestSuiteDetails",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/TestSuiteDetails.ts~TestSuiteDetails#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 416,
    "kind": "file",
    "name": "src/model/Timestamp.ts",
    "content": "import * as moment from 'moment';\nimport { ensure, isDefined, isInstanceOf, Predicate, TinyType } from 'tiny-types';\n\nimport { Duration } from './Duration';\n\nexport class Timestamp extends TinyType {\n    static fromJSON(v: string): Timestamp {\n        return new Timestamp(new Date(ensure(Timestamp.name, v, isSerialisedISO8601Date())));\n    }\n\n    static fromMillisecondTimestamp(v: number): Timestamp {\n        return new Timestamp(moment(v).toDate());\n    }\n\n    constructor(public readonly value: Date = new Date()) {\n        super();\n        ensure(Timestamp.name, value, isDefined(), isInstanceOf(Date));\n    }\n\n    diff(another: Timestamp): Duration {\n        return new Duration(Math.abs(moment(this.value).diff(another.value, 'ms', true)));\n    }\n\n    plus(duration: Duration): Timestamp {\n        return new Timestamp(moment(this.value).add(duration.inMilliseconds(), 'ms').toDate());\n    }\n\n    less(duration: Duration): Timestamp {\n        return new Timestamp(moment(this.value).subtract(duration.inMilliseconds(), 'ms').toDate());\n    }\n\n    toMillisecondTimestamp(): number {\n        return moment(this.value).valueOf();\n    }\n\n    toJSON(): string {\n        return this.value.toJSON();\n    }\n\n    toString(): string {\n        return this.value.toString();\n    }\n}\n\nfunction isSerialisedISO8601Date(): Predicate<string> {\n    return Predicate.to(`be an ISO-8601-compliant date`, (value: string) =>\n        moment(value, moment.ISO_8601, true).isValid());\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/Timestamp.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 417,
    "kind": "class",
    "name": "Timestamp",
    "memberof": "src/model/Timestamp.ts",
    "static": true,
    "longname": "src/model/Timestamp.ts~Timestamp",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Timestamp}",
    "description": " ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Timestamp.ts~Timestamp.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "fromMillisecondTimestamp",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Timestamp.ts~Timestamp.fromMillisecondTimestamp",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 420,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "diff",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#diff",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Timestamp"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "plus",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#plus",
    "access": "public",
    "description": " ",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "less",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#less",
    "access": "public",
    "description": " ",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "toMillisecondTimestamp",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#toMillisecondTimestamp",
    "access": "public",
    "description": " ",
    "lineNumber": 32,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 36,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "toString",
    "memberof": "src/model/Timestamp.ts~Timestamp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/Timestamp.ts~Timestamp#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 40,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 427,
    "kind": "function",
    "name": "isSerialisedISO8601Date",
    "memberof": "src/model/Timestamp.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/Timestamp.ts~isSerialisedISO8601Date",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/core/src/model/Timestamp.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 45,
    "return": {
      "nullable": null,
      "types": [
        "Predicate"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 428,
    "kind": "file",
    "name": "src/model/artifacts/AssertionReport.ts",
    "content": "import { JSONData } from './JSONData';\n\nexport class AssertionReport extends JSONData {\n    static fromJSON(value: { expected: string, actual: string }): AssertionReport {\n        return new AssertionReport(Buffer.from(JSON.stringify(value, undefined, 0), 'utf8').toString('base64'));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/artifacts/AssertionReport.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 429,
    "kind": "class",
    "name": "AssertionReport",
    "memberof": "src/model/artifacts/AssertionReport.ts",
    "static": true,
    "longname": "src/model/artifacts/AssertionReport.ts~AssertionReport",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{AssertionReport}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/model/artifacts/JSONData.js~JSONData"
    ]
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/AssertionReport.ts~AssertionReport",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/AssertionReport.ts~AssertionReport.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AssertionReport"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 431,
    "kind": "file",
    "name": "src/model/artifacts/HTTPRequestResponse.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { JSONData } from './JSONData';\n\n/**\n * @desc\n *  The value of the {@link HTTPRequestResponse} {@link Artifact} describing a HTTP request/response pair.\n *\n * @public\n */\nexport interface RequestAndResponse extends JSONObject {\n    request: {\n        url: string;\n        method: string;\n        headers: { [header: string]: string };\n        data?: any;\n    };\n    response: {\n        status: number;\n        data?: any;\n        headers?: { [header: string]: string };\n    };\n}\n\n/**\n * @desc\n *  An {@link Artifact} describing a HTTP request/response pair.\n *\n * @public\n */\nexport class HTTPRequestResponse extends JSONData {\n    static fromJSON(value: RequestAndResponse): HTTPRequestResponse {\n        return new HTTPRequestResponse(Buffer.from(JSON.stringify(value, undefined, 0), 'utf8').toString('base64'));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/artifacts/HTTPRequestResponse.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 432,
    "kind": "class",
    "name": "RequestAndResponse",
    "memberof": "src/model/artifacts/HTTPRequestResponse.ts",
    "static": true,
    "longname": "src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{RequestAndResponse}",
    "description": " The value of the {@link HTTPRequestResponse} {@link Artifact} describing a HTTP request/response pair.",
    "lineNumber": 18,
    "interface": true,
    "extends": [
      "tiny-types~JSONObject"
    ]
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "request",
    "memberof": "src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse",
    "static": false,
    "longname": "src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse#request",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "response",
    "memberof": "src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse",
    "static": false,
    "longname": "src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse#response",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 435,
    "kind": "class",
    "name": "HTTPRequestResponse",
    "memberof": "src/model/artifacts/HTTPRequestResponse.ts",
    "static": true,
    "longname": "src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{HTTPRequestResponse}",
    "description": " An {@link Artifact} describing a HTTP request/response pair.",
    "lineNumber": 144,
    "interface": false,
    "extends": [
      "src/model/artifacts/JSONData.js~JSONData"
    ]
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "RequestAndResponse"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HTTPRequestResponse"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 437,
    "kind": "file",
    "name": "src/model/artifacts/JSONData.ts",
    "content": "import { JSONValue } from 'tiny-types';\n\nimport { Artifact } from '../Artifact';\n\nexport class JSONData extends Artifact {\n    static fromJSON(value: JSONValue): JSONData {\n        return new JSONData(Buffer.from(JSON.stringify(value, undefined, 0), 'utf8').toString('base64'));\n    }\n\n    map<O>(fn: (decodedValue: JSONValue) => O): O {\n        return fn(JSON.parse(Buffer.from(this.base64EncodedValue, 'base64').toString('utf8')));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/artifacts/JSONData.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 438,
    "kind": "class",
    "name": "JSONData",
    "memberof": "src/model/artifacts/JSONData.ts",
    "static": true,
    "longname": "src/model/artifacts/JSONData.ts~JSONData",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{JSONData}",
    "description": " ",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "src/model/Artifact.js~Artifact"
    ]
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/JSONData.ts~JSONData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/JSONData.ts~JSONData.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONValue"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "JSONData"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "map",
    "memberof": "src/model/artifacts/JSONData.ts~JSONData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/artifacts/JSONData.ts~JSONData#map",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "O"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 441,
    "kind": "file",
    "name": "src/model/artifacts/LogEntry.ts",
    "content": "import { JSONData } from './JSONData';\n\nexport class LogEntry extends JSONData {\n    static fromJSON(value: { data: string }): LogEntry {\n        return new LogEntry(Buffer.from(JSON.stringify(value, undefined, 0), 'utf8').toString('base64'));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/artifacts/LogEntry.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 442,
    "kind": "class",
    "name": "LogEntry",
    "memberof": "src/model/artifacts/LogEntry.ts",
    "static": true,
    "longname": "src/model/artifacts/LogEntry.ts~LogEntry",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{LogEntry}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/model/artifacts/JSONData.js~JSONData"
    ]
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/LogEntry.ts~LogEntry",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/LogEntry.ts~LogEntry.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "LogEntry"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 444,
    "kind": "file",
    "name": "src/model/artifacts/Photo.ts",
    "content": "import { Artifact } from '../Artifact';\n\n/**\n * @public\n * @extends {Artifact}\n */\nexport class Photo extends Artifact {\n\n    /**\n     * @desc\n     * @param {string} value\n     */\n    static fromBase64(value: string): Photo {\n        return new Photo(value);\n    }\n\n    /**\n     * @desc\n     * @param {Buffer | ArrayBuffer} value\n     */\n    static fromBuffer(value: Buffer | ArrayBuffer): Photo {\n        const buffer = value instanceof ArrayBuffer\n            ? Buffer.from(value)\n            : value;\n\n        return Photo.fromBase64(buffer.toString('base64'));\n    }\n\n    /**\n     * @param fn\n     */\n    map<O>(fn: (decodedValue: Buffer) => O): O {\n        return fn(Buffer.from(this.base64EncodedValue, 'base64'));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/artifacts/Photo.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 445,
    "kind": "class",
    "name": "Photo",
    "memberof": "src/model/artifacts/Photo.ts",
    "static": true,
    "longname": "src/model/artifacts/Photo.ts~Photo",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{Photo}",
    "description": "",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "Artifact"
    ]
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "fromBase64",
    "memberof": "src/model/artifacts/Photo.ts~Photo",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/Photo.ts~Photo.fromBase64",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "fromBuffer",
    "memberof": "src/model/artifacts/Photo.ts~Photo",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/Photo.ts~Photo.fromBuffer",
    "access": "public",
    "description": "",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer ",
          " ArrayBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "map",
    "memberof": "src/model/artifacts/Photo.ts~Photo",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/artifacts/Photo.ts~Photo#map",
    "access": "public",
    "description": "",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "file",
    "name": "src/model/artifacts/TestReport.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { Artifact } from '../Artifact';\n\nexport class TestReport extends Artifact {\n\n    static fromJSON(value: JSONObject): TestReport {\n        return new TestReport(Buffer.from(JSON.stringify(value, undefined, 0), 'utf8').toString('base64'));\n    }\n\n    map<O>(fn: (decodedValue: JSONObject) => O): O {\n        return fn(JSON.parse(Buffer.from(this.base64EncodedValue, 'base64').toString('utf8')));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/artifacts/TestReport.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 450,
    "kind": "class",
    "name": "TestReport",
    "memberof": "src/model/artifacts/TestReport.ts",
    "static": true,
    "longname": "src/model/artifacts/TestReport.ts~TestReport",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{TestReport}",
    "description": " ",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "src/model/Artifact.js~Artifact"
    ]
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/TestReport.ts~TestReport",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/TestReport.ts~TestReport.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestReport"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "map",
    "memberof": "src/model/artifacts/TestReport.ts~TestReport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/artifacts/TestReport.ts~TestReport#map",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "O"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 453,
    "kind": "file",
    "name": "src/model/artifacts/TextData.ts",
    "content": "import { JSONData } from './JSONData';\n\nexport class TextData extends JSONData {\n    static fromJSON(value: { contentType: string, data: string }): TextData {\n        return new TextData(Buffer.from(JSON.stringify(value, undefined, 0), 'utf8').toString('base64'));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/artifacts/TextData.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 454,
    "kind": "class",
    "name": "TextData",
    "memberof": "src/model/artifacts/TextData.ts",
    "static": true,
    "longname": "src/model/artifacts/TextData.ts~TextData",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/artifacts",
    "importStyle": "{TextData}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/model/artifacts/JSONData.js~JSONData"
    ]
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/artifacts/TextData.ts~TextData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/artifacts/TextData.ts~TextData.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TextData"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 456,
    "kind": "file",
    "name": "src/model/artifacts/index.ts",
    "content": "export * from './AssertionReport';\nexport * from './HTTPRequestResponse';\nexport * from './JSONData';\nexport * from './LogEntry';\nexport * from './Photo';\nexport * from './TestReport';\nexport * from './TextData';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/artifacts/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 457,
    "kind": "file",
    "name": "src/model/index.ts",
    "content": "/* eslint-disable simple-import-sort/exports */\n\nexport * from './ActivityDetails';\nexport * from './artifacts';\nexport * from './Artifact';\nexport * from './BusinessRule';\nexport * from './Category';\nexport * from './CorrelationId';\nexport * from './Description';\nexport * from './Duration';\nexport * from './Name';\nexport * from './outcomes';\nexport * from './ScenarioDetails';\nexport * from './ScenarioParameters';\nexport * from './tags';\nexport * from './TestSuiteDetails';\nexport * from './Timestamp';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 458,
    "kind": "file",
    "name": "src/model/outcomes.ts",
    "content": "/* eslint-disable @typescript-eslint/explicit-module-boundary-types,unicorn/prefer-math-trunc */\nimport { JSONObject, match, TinyType } from 'tiny-types';\n\nimport { AssertionError } from '../errors';\nimport { ErrorSerialiser } from '../io';\n\nexport interface SerialisedOutcome extends JSONObject {\n    code:    number;\n    error?:  string;\n}\n\nexport abstract class Outcome extends TinyType {\n    static fromJSON = (o: SerialisedOutcome) => match(o.code)\n        .when(ExecutionCompromised.Code,                _ => ExecutionCompromised.fromJSON(o))\n        .when(ExecutionFailedWithError.Code,            _ => ExecutionFailedWithError.fromJSON(o))\n        .when(ExecutionFailedWithAssertionError.Code,   _ => ExecutionFailedWithAssertionError.fromJSON(o))\n        .when(ImplementationPending.Code,               _ => ImplementationPending.fromJSON(o))\n        .when(ExecutionIgnored.Code,                    _ => ExecutionIgnored.fromJSON(o))\n        .when(ExecutionSkipped.Code,                    _ => ExecutionSkipped.fromJSON(o))\n        .when(ExecutionSuccessful.Code,                 _ => ExecutionSuccessful.fromJSON(o))\n        .else(_ => { throw new Error(`Outcome could not be deserialised: ${ JSON.stringify(o) }`); }) as Outcome\n\n    protected constructor(protected readonly code: number) {\n        super();\n    }\n\n    isWorseThan(another: Outcome | { Code: number }): boolean {\n        const code = (another instanceof Outcome)\n            ? another.code\n            : another.Code;\n\n        return this.code < code;\n    }\n\n    toJSON(): SerialisedOutcome {\n        return {\n            code: this.code,\n        };\n    }\n}\n\nexport abstract class ProblemIndication extends Outcome {\n\n    protected constructor(public readonly error: Error, code: number) {\n        super(code);\n    }\n\n    toJSON(): SerialisedOutcome {\n        return {\n            code: this.code,\n            error: ErrorSerialiser.serialise(this.error),\n        };\n    }\n}\n\n/**\n * Indicates a failure due to external events or systems that compromise the validity of the test.\n */\nexport class ExecutionCompromised extends ProblemIndication {\n    static Code = 1 << 0;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionCompromised(ErrorSerialiser.deserialise(o.error));\n\n    constructor(error: Error) {\n        super(error, ExecutionCompromised.Code);\n    }\n}\n\n/**\n * Indicates a failure due to an error other than recognised external system and assertion failures\n */\nexport class ExecutionFailedWithError extends ProblemIndication {\n    static Code = 1 << 1;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionFailedWithError(ErrorSerialiser.deserialise(o.error));\n\n    constructor(error: Error) {\n        super(error, ExecutionFailedWithError.Code);\n    }\n}\n\n/**\n * Execution of an Activity or Scene has failed due to an assertion error;\n */\nexport class ExecutionFailedWithAssertionError extends ProblemIndication {\n    static Code = 1 << 2;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionFailedWithAssertionError(ErrorSerialiser.deserialise(o.error));\n\n    constructor(error: AssertionError) {\n        super(error, ExecutionFailedWithAssertionError.Code);\n    }\n}\n\n/**\n * A pending Activity is one that has been specified but not yet implemented.\n * A pending Scene is one that has at least one pending Activity.\n */\nexport class ImplementationPending extends ProblemIndication {\n    static Code = 1 << 3;\n\n    static fromJSON = (o: SerialisedOutcome) => new ImplementationPending(ErrorSerialiser.deserialise(o.error));\n\n    constructor(error: Error) {\n        super(error, ImplementationPending.Code);\n    }\n}\n\n/**\n * The result of the scenario should be ignored, most likely because it's going to be retried.\n */\nexport class ExecutionIgnored extends ProblemIndication {\n    static Code = 1 << 4;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionIgnored(ErrorSerialiser.deserialise(o.error));\n\n    constructor(error: Error) {\n        super(error, ExecutionIgnored.Code);\n    }\n}\n\n/**\n * The Activity was not executed because a previous one has failed.\n * A whole Scene can be marked as skipped to indicate that it is currently \"work-in-progress\"\n */\nexport class ExecutionSkipped extends Outcome {\n    static Code = 1 << 5;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionSkipped();\n\n    constructor() {\n        super(ExecutionSkipped.Code);\n    }\n}\n\n/**\n * Scenario or activity ran as expected.\n */\nexport class ExecutionSuccessful extends Outcome {\n    static Code = 1 << 6;\n\n    static fromJSON = (o: SerialisedOutcome) => new ExecutionSuccessful();\n\n    constructor() {\n        super(ExecutionSuccessful.Code);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/outcomes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 459,
    "kind": "class",
    "name": "SerialisedOutcome",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~SerialisedOutcome",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{SerialisedOutcome}",
    "description": " ",
    "lineNumber": 2,
    "interface": false,
    "extends": [
      "JSONObject"
    ]
  },
  {
    "__docId__": 460,
    "kind": "member",
    "name": "code",
    "memberof": "src/model/outcomes.ts~SerialisedOutcome",
    "static": false,
    "longname": "src/model/outcomes.ts~SerialisedOutcome#code",
    "access": "public",
    "description": " ",
    "lineNumber": 3,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "error",
    "memberof": "src/model/outcomes.ts~SerialisedOutcome",
    "static": false,
    "longname": "src/model/outcomes.ts~SerialisedOutcome#error",
    "access": "public",
    "description": " ",
    "lineNumber": 4,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 462,
    "kind": "class",
    "name": "Outcome",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~Outcome",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{Outcome}",
    "description": " ",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "TinyType"
    ]
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~Outcome",
    "static": true,
    "longname": "src/model/outcomes.ts~Outcome.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~Outcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~Outcome#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "isWorseThan",
    "memberof": "src/model/outcomes.ts~Outcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~Outcome#isWorseThan",
    "access": "public",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Outcome ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "another",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/outcomes.ts~Outcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~Outcome#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 30,
    "return": {
      "nullable": null,
      "types": [
        "SerialisedOutcome"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 467,
    "kind": "class",
    "name": "ProblemIndication",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ProblemIndication",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ProblemIndication}",
    "description": " ",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "Outcome"
    ]
  },
  {
    "__docId__": 468,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ProblemIndication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ProblemIndication#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/outcomes.ts~ProblemIndication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ProblemIndication#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 43,
    "return": {
      "nullable": null,
      "types": [
        "SerialisedOutcome"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 470,
    "kind": "class",
    "name": "ExecutionCompromised",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionCompromised",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionCompromised}",
    "description": "Indicates a failure due to external events or systems that compromise the validity of the test. ",
    "lineNumber": 54,
    "interface": false,
    "extends": [
      "ProblemIndication"
    ]
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionCompromised",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionCompromised.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 55,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionCompromised",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionCompromised.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 57,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionCompromised",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionCompromised#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true
  },
  {
    "__docId__": 474,
    "kind": "class",
    "name": "ExecutionFailedWithError",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionFailedWithError}",
    "description": "Indicates a failure due to an error other than recognised external system and assertion failures ",
    "lineNumber": 67,
    "interface": false,
    "extends": [
      "ProblemIndication"
    ]
  },
  {
    "__docId__": 475,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithError",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithError.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 68,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithError",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithError.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 70,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true
  },
  {
    "__docId__": 478,
    "kind": "class",
    "name": "ExecutionFailedWithAssertionError",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithAssertionError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionFailedWithAssertionError}",
    "description": "Execution of an Activity or Scene has failed due to an assertion error; ",
    "lineNumber": 80,
    "interface": false,
    "extends": [
      "ProblemIndication"
    ]
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithAssertionError",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithAssertionError.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 81,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithAssertionError",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithAssertionError.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 83,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionFailedWithAssertionError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionFailedWithAssertionError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 266,
    "undocument": true
  },
  {
    "__docId__": 482,
    "kind": "class",
    "name": "ImplementationPending",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ImplementationPending",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ImplementationPending}",
    "description": "A pending Activity is one that has been specified but not yet implemented.\nA pending Scene is one that has at least one pending Activity. ",
    "lineNumber": 94,
    "interface": false,
    "extends": [
      "ProblemIndication"
    ]
  },
  {
    "__docId__": 483,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ImplementationPending",
    "static": true,
    "longname": "src/model/outcomes.ts~ImplementationPending.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 95,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ImplementationPending",
    "static": true,
    "longname": "src/model/outcomes.ts~ImplementationPending.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 97,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ImplementationPending",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ImplementationPending#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true
  },
  {
    "__docId__": 486,
    "kind": "class",
    "name": "ExecutionIgnored",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionIgnored",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionIgnored}",
    "description": "The result of the scenario should be ignored, most likely because it's going to be retried. ",
    "lineNumber": 107,
    "interface": false,
    "extends": [
      "ProblemIndication"
    ]
  },
  {
    "__docId__": 487,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionIgnored",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionIgnored.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 108,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionIgnored",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionIgnored.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 110,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionIgnored",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionIgnored#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 347,
    "undocument": true
  },
  {
    "__docId__": 490,
    "kind": "class",
    "name": "ExecutionSkipped",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSkipped",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionSkipped}",
    "description": "The Activity was not executed because a previous one has failed.\nA whole Scene can be marked as skipped to indicate that it is currently \"work-in-progress\" ",
    "lineNumber": 121,
    "interface": false,
    "extends": [
      "Outcome"
    ]
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionSkipped",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSkipped.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 122,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionSkipped",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSkipped.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 124,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionSkipped",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionSkipped#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 388,
    "undocument": true
  },
  {
    "__docId__": 494,
    "kind": "class",
    "name": "ExecutionSuccessful",
    "memberof": "src/model/outcomes.ts",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSuccessful",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model",
    "importStyle": "{ExecutionSuccessful}",
    "description": "Scenario or activity ran as expected. ",
    "lineNumber": 134,
    "interface": false,
    "extends": [
      "Outcome"
    ]
  },
  {
    "__docId__": 495,
    "kind": "member",
    "name": "Code",
    "memberof": "src/model/outcomes.ts~ExecutionSuccessful",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSuccessful.Code",
    "access": "public",
    "description": " ",
    "lineNumber": 135,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 496,
    "kind": "member",
    "name": "fromJSON",
    "memberof": "src/model/outcomes.ts~ExecutionSuccessful",
    "static": true,
    "longname": "src/model/outcomes.ts~ExecutionSuccessful.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 137,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 497,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/outcomes.ts~ExecutionSuccessful",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/outcomes.ts~ExecutionSuccessful#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 428,
    "undocument": true
  },
  {
    "__docId__": 498,
    "kind": "file",
    "name": "src/model/tags/ArbitraryTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @desc\n *  Tagged with an arbitrary tag that doesn't have any special interpretation\n *  such as @regression, @wip, etc.\n *\n * @access public\n */\nexport class ArbitraryTag extends Tag {\n    static readonly Type = 'tag';\n\n    constructor(value: string) {\n        super(value, ArbitraryTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/ArbitraryTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 499,
    "kind": "class",
    "name": "ArbitraryTag",
    "memberof": "src/model/tags/ArbitraryTag.ts",
    "static": true,
    "longname": "src/model/tags/ArbitraryTag.ts~ArbitraryTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{ArbitraryTag}",
    "description": " Tagged with an arbitrary tag that doesn't have any special interpretation\n such as @regression, @wip, etc.",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 500,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/ArbitraryTag.ts~ArbitraryTag",
    "static": true,
    "longname": "src/model/tags/ArbitraryTag.ts~ArbitraryTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/ArbitraryTag.ts~ArbitraryTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/ArbitraryTag.ts~ArbitraryTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 502,
    "kind": "file",
    "name": "src/model/tags/BrowserTag.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class BrowserTag extends Tag {\n    static readonly Type = 'browser';\n\n    static fromJSON(o: JSONObject): BrowserTag {\n        return new BrowserTag(o.browserName as string, o.browserVersion as string);\n    }\n\n    constructor(\n        public readonly browserName: string,\n        public readonly browserVersion: string = '',\n    ) {\n        super(\n            [ browserName, browserVersion ]\n                .filter(_ => !! _)\n                .join(' '),\n            BrowserTag.Type,\n        );\n    }\n\n    toJSON(): { name: string, type: string, browserName: string, browserVersion: string } {\n        return {\n            name: this.name,\n            type: BrowserTag.Type,\n            browserName: this.browserName,\n            browserVersion: this.browserVersion,\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/BrowserTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 503,
    "kind": "class",
    "name": "BrowserTag",
    "memberof": "src/model/tags/BrowserTag.ts",
    "static": true,
    "longname": "src/model/tags/BrowserTag.ts~BrowserTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{BrowserTag}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 504,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/BrowserTag.ts~BrowserTag",
    "static": true,
    "longname": "src/model/tags/BrowserTag.ts~BrowserTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/tags/BrowserTag.ts~BrowserTag",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/tags/BrowserTag.ts~BrowserTag.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BrowserTag"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 506,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/BrowserTag.ts~BrowserTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/BrowserTag.ts~BrowserTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/tags/BrowserTag.ts~BrowserTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/BrowserTag.ts~BrowserTag#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 508,
    "kind": "file",
    "name": "src/model/tags/CapabilityTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class CapabilityTag extends Tag {\n    static readonly Type = 'capability';\n\n    constructor(capability: string) {\n        super(capability, CapabilityTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/CapabilityTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 509,
    "kind": "class",
    "name": "CapabilityTag",
    "memberof": "src/model/tags/CapabilityTag.ts",
    "static": true,
    "longname": "src/model/tags/CapabilityTag.ts~CapabilityTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{CapabilityTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 510,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/CapabilityTag.ts~CapabilityTag",
    "static": true,
    "longname": "src/model/tags/CapabilityTag.ts~CapabilityTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/CapabilityTag.ts~CapabilityTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/CapabilityTag.ts~CapabilityTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 512,
    "kind": "file",
    "name": "src/model/tags/ContextTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @desc There are a couple of common use-cases for contexts: running the same test in different browsers,\n * and running the same test on different operating systems.\n * If you use the name of a browser (e.g. “chrome”, “firefox”, “safari”, “ie”),\n * the context will be represented in the reports as the icon of the respective browsers.\n * If you provide an operating system (e.g. “linux”, “windows”, “mac”, “android”, “iphone”),\n * a similar icon will be used. If you use any other term for your context,\n * it will appear in text form in the test results lists, so it is better to keep context names relatively short.\n *\n * @access public\n * @deprecated\n */\nexport class ContextTag extends Tag {\n    static readonly Type = 'context';\n\n    constructor(context: string) {\n        super(context, ContextTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/ContextTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 513,
    "kind": "class",
    "name": "ContextTag",
    "memberof": "src/model/tags/ContextTag.ts",
    "static": true,
    "longname": "src/model/tags/ContextTag.ts~ContextTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{ContextTag}",
    "description": "There are a couple of common use-cases for contexts: running the same test in different browsers,\nand running the same test on different operating systems.\nIf you use the name of a browser (e.g. “chrome”, “firefox”, “safari”, “ie”),\nthe context will be represented in the reports as the icon of the respective browsers.\nIf you provide an operating system (e.g. “linux”, “windows”, “mac”, “android”, “iphone”),\na similar icon will be used. If you use any other term for your context,\nit will appear in text form in the test results lists, so it is better to keep context names relatively short.",
    "lineNumber": 22,
    "deprecated": true,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 514,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/ContextTag.ts~ContextTag",
    "static": true,
    "longname": "src/model/tags/ContextTag.ts~ContextTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 515,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/ContextTag.ts~ContextTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/ContextTag.ts~ContextTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 516,
    "kind": "file",
    "name": "src/model/tags/ExecutionRetriedTag.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { Tag } from './Tag';\n\n/**\n * @desc\n *  Indicates that execution of a given scene\n *  has been retried for the `currentRetry`-th time.\n *\n * @access public\n */\nexport class ExecutionRetriedTag extends Tag {\n    static readonly Type = 'retry';\n\n    static fromJSON(o: JSONObject): ExecutionRetriedTag {\n        return new ExecutionRetriedTag(o.retry as number, o.description as string);\n    }\n\n    constructor(\n        public readonly retry: number,\n        public readonly description?: string,\n    ) {\n        super(description || `${ retry }${ nth(retry) } retry`, ExecutionRetriedTag.Type);\n    }\n}\n\n/**\n * @private\n * @param n\n */\nfunction nth(n): string {\n    return ['st', 'nd', 'rd'][((n + 90) % 100 - 10) % 10 - 1] || 'th';\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/ExecutionRetriedTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 517,
    "kind": "class",
    "name": "ExecutionRetriedTag",
    "memberof": "src/model/tags/ExecutionRetriedTag.ts",
    "static": true,
    "longname": "src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{ExecutionRetriedTag}",
    "description": " Indicates that execution of a given scene\n has been retried for the `currentRetry`-th time.",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag",
    "static": true,
    "longname": "src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 13,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExecutionRetriedTag"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 520,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true
  },
  {
    "__docId__": 521,
    "kind": "function",
    "name": "nth",
    "memberof": "src/model/tags/ExecutionRetriedTag.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/tags/ExecutionRetriedTag.ts~nth",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/model/tags/ExecutionRetriedTag.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "file",
    "name": "src/model/tags/FeatureTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class FeatureTag extends Tag {\n    static readonly Type = 'feature';\n\n    constructor(feature: string) {\n        super(feature, FeatureTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/FeatureTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 523,
    "kind": "class",
    "name": "FeatureTag",
    "memberof": "src/model/tags/FeatureTag.ts",
    "static": true,
    "longname": "src/model/tags/FeatureTag.ts~FeatureTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{FeatureTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 524,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/FeatureTag.ts~FeatureTag",
    "static": true,
    "longname": "src/model/tags/FeatureTag.ts~FeatureTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/FeatureTag.ts~FeatureTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/FeatureTag.ts~FeatureTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 526,
    "kind": "file",
    "name": "src/model/tags/IssueTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class IssueTag extends Tag {\n    static readonly Type = 'issue';\n\n    constructor(issueId: string) {\n        super(issueId, IssueTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/IssueTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 527,
    "kind": "class",
    "name": "IssueTag",
    "memberof": "src/model/tags/IssueTag.ts",
    "static": true,
    "longname": "src/model/tags/IssueTag.ts~IssueTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{IssueTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 528,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/IssueTag.ts~IssueTag",
    "static": true,
    "longname": "src/model/tags/IssueTag.ts~IssueTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/IssueTag.ts~IssueTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/IssueTag.ts~IssueTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 530,
    "kind": "file",
    "name": "src/model/tags/ManualTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class ManualTag extends Tag {\n    static readonly Type = 'External Tests';\n\n    constructor(name = 'Manual') {  // parametrised constructor to make all tag constructors compatible\n        super(name, ManualTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/ManualTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 531,
    "kind": "class",
    "name": "ManualTag",
    "memberof": "src/model/tags/ManualTag.ts",
    "static": true,
    "longname": "src/model/tags/ManualTag.ts~ManualTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{ManualTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/ManualTag.ts~ManualTag",
    "static": true,
    "longname": "src/model/tags/ManualTag.ts~ManualTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/ManualTag.ts~ManualTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/ManualTag.ts~ManualTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 534,
    "kind": "file",
    "name": "src/model/tags/PlatformTag.ts",
    "content": "import { JSONObject } from 'tiny-types';\n\nimport { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class PlatformTag extends Tag {\n    static readonly Type = 'platform';\n\n    static fromJSON(o: JSONObject): PlatformTag {\n        return new PlatformTag(o.platformName as string, o.platformVersion as string);\n    }\n\n    constructor(\n        public readonly platformName: string,\n        public readonly platformVersion: string = '',\n    ) {\n        super(\n            [ platformName, platformVersion ]\n                .filter(_ => !! _)\n                .join(' '),\n            PlatformTag.Type,\n        );\n    }\n\n    toJSON(): { name: string, type: string, platformName: string, platformVersion: string } {\n        return {\n            name: this.name,\n            type: PlatformTag.Type,\n            platformName: this.platformName,\n            platformVersion: this.platformVersion,\n        };\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/PlatformTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 535,
    "kind": "class",
    "name": "PlatformTag",
    "memberof": "src/model/tags/PlatformTag.ts",
    "static": true,
    "longname": "src/model/tags/PlatformTag.ts~PlatformTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{PlatformTag}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 536,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/PlatformTag.ts~PlatformTag",
    "static": true,
    "longname": "src/model/tags/PlatformTag.ts~PlatformTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/tags/PlatformTag.ts~PlatformTag",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/tags/PlatformTag.ts~PlatformTag.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PlatformTag"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 538,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/PlatformTag.ts~PlatformTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/PlatformTag.ts~PlatformTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/tags/PlatformTag.ts~PlatformTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/PlatformTag.ts~PlatformTag#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 540,
    "kind": "file",
    "name": "src/model/tags/Tag.ts",
    "content": "import { ensure, isDefined, isGreaterThan, isString, JSONObject, property, TinyType } from 'tiny-types';\n\nimport * as TagTypes from './index';\n\n/**\n * @access public\n */\nexport abstract class Tag extends TinyType {\n    static fromJSON(o: JSONObject): Tag {\n        const type: string = ensure('serialised tag type', o.type, isDefined(), isString()) as string;\n\n        const found = Object.keys(TagTypes).find(t => TagTypes[t].Type === type) || TagTypes.ArbitraryTag.name;\n\n        if (Object.prototype.hasOwnProperty.call(TagTypes[found], 'fromJSON')) {\n            return TagTypes[found].fromJSON(o);\n        }\n\n        return new TagTypes[found](o.name);\n    }\n\n    protected constructor(public readonly name: string, public readonly type: string) {\n        super();\n\n        ensure('Tag name', name, isDefined(), property('length', isGreaterThan(0)));\n        ensure('Tag type', type, isDefined(), property('length', isGreaterThan(0)));\n    }\n\n    toJSON(): { name: string, type: string } {\n        return super.toJSON() as { name: string, type: string };\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/Tag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 541,
    "kind": "class",
    "name": "Tag",
    "memberof": "src/model/tags/Tag.ts",
    "static": true,
    "longname": "src/model/tags/Tag.ts~Tag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{Tag}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "fromJSON",
    "memberof": "src/model/tags/Tag.ts~Tag",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/tags/Tag.ts~Tag.fromJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "JSONObject"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Tag"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 543,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/Tag.ts~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/Tag.ts~Tag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/model/tags/Tag.ts~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/Tag.ts~Tag#toJSON",
    "access": "public",
    "description": " ",
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 545,
    "kind": "file",
    "name": "src/model/tags/Tags.ts",
    "content": "import { match } from 'tiny-types';\n\nimport { ArbitraryTag, IssueTag, ManualTag, Tag } from './';\n\n/**\n * @package\n */\nexport class Tags {\n    private static Pattern = /^@([\\w-]+)[\\s:]?(.*)/i ;\n\n    public static from(text: string): Tag[] {\n        const [ , type, value ] = Tags.Pattern.exec(text);\n\n        return match<Tag[]>(type.toLowerCase())\n            .when('manual',     _ => [ new ManualTag() ])\n            // todo: map as arbitrary tag if value === ''; look up ticket id\n            .when(/^issues?$/,  _ => value.split(',').map(value => new IssueTag(value.trim())))\n            .else(value           => [ new ArbitraryTag(value.trim()) ]);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/Tags.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 546,
    "kind": "class",
    "name": "Tags",
    "memberof": "src/model/tags/Tags.ts",
    "static": true,
    "longname": "src/model/tags/Tags.ts~Tags",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/model/tags/Tags.ts",
    "importStyle": "{Tags}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 547,
    "kind": "member",
    "name": "Pattern",
    "memberof": "src/model/tags/Tags.ts~Tags",
    "static": true,
    "longname": "src/model/tags/Tags.ts~Tags.Pattern",
    "access": "private",
    "description": " ",
    "lineNumber": 9,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "from",
    "memberof": "src/model/tags/Tags.ts~Tags",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/tags/Tags.ts~Tags.from",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 549,
    "kind": "file",
    "name": "src/model/tags/ThemeTag.ts",
    "content": "import { Tag } from './Tag';\n\n/**\n * @access public\n */\nexport class ThemeTag extends Tag {\n    static readonly Type = 'theme';\n\n    constructor(theme: string) {\n        super(theme, ThemeTag.Type);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/ThemeTag.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 550,
    "kind": "class",
    "name": "ThemeTag",
    "memberof": "src/model/tags/ThemeTag.ts",
    "static": true,
    "longname": "src/model/tags/ThemeTag.ts~ThemeTag",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/model/tags",
    "importStyle": "{ThemeTag}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/model/tags/Tag.js~Tag"
    ]
  },
  {
    "__docId__": 551,
    "kind": "member",
    "name": "Type",
    "memberof": "src/model/tags/ThemeTag.ts~ThemeTag",
    "static": true,
    "longname": "src/model/tags/ThemeTag.ts~ThemeTag.Type",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 552,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model/tags/ThemeTag.ts~ThemeTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model/tags/ThemeTag.ts~ThemeTag#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 553,
    "kind": "file",
    "name": "src/model/tags/index.ts",
    "content": "export * from './ArbitraryTag';\nexport * from './BrowserTag';\nexport * from './CapabilityTag';\nexport * from './ContextTag';\nexport * from './ExecutionRetriedTag';\nexport * from './FeatureTag';\nexport * from './IssueTag';\nexport * from './ManualTag';\nexport * from './PlatformTag';\nexport * from './Tag';\nexport * from './Tags';\nexport * from './ThemeTag';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/model/tags/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 554,
    "kind": "file",
    "name": "src/screenplay/Ability.ts",
    "content": "/**\n * @desc\n *  An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n *  Technically speaking, it's a wrapper around a client of said interface.\n *\n * @example\n *  import { Ability, Actor, Interaction } from '@serenity-js/core';\n *\n *  class MakePhoneCalls implements Ability {\n *      static as(actor: UsesAbilities): MakesPhoneCalls {\n *          return actor.abilityTo(MakePhoneCalls);\n *      }\n *\n *      static using(phone: Phone) {\n *          return new MakePhoneCalls(phone);\n *      }\n *\n *      constructor(private readonly phone: Phone) {}\n *\n *      // some method that allows us to interact with the external interface of the system under test\n *      dial(phoneNumber: string) {\n *        // ...\n *      }\n *  }\n *\n *  const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n *\n *  const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n *      MakePhoneCalls.as(actor).dial(phoneNumber);\n *  );\n *\n * @example <caption>Ability that's automatically initialised and discarded</caption>\n *  import {\n *      Ability, actorCalled, Discardable, Initialisable,\n *      Question, UsesAbilities\n *  } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  // A low-level client we want the Actor to use, i.e. a database client:\n *  const { Client } = require('pg');\n *\n *  // A custom Ability to give an Actor access to the low-level client:\n *  class QueryPostgresDB implements Initialisable, Discardable, Ability {\n *     static as(actor: UsesAbilities) {\n *         return actor.abilityTo(QueryPostgresDB);\n *     }\n *\n *     constructor(private readonly client) {\n *     }\n *\n *     // invoked by Serenity/JS when actor.attemptsTo is first invoked\n *     initialise(): Promise<void> | void {\n *         return this.client.connect();\n *     }\n *\n *     // Helps to ensure that the Ability is not initialised more than once\n *     isInitialised(): boolean {\n *         return this.client._connected;\n *     }\n *\n *     // Discards any resources the Ability uses when the Actor is dismissed\n *     discard(): Promise<void> | void {\n *         return this.client.end();\n *     }\n *\n *     // Any custom integration APIs the custom Ability\n *     // should make available to the Actor.\n *     query(query: string) {\n *         return this.client.query(query);\n *     }\n *\n *     // ... other custom integration APIs\n *  }\n *\n *  // A custom Question to allow the Actor query the system\n *  const CurrentDBUser = () =>\n *      Question.about('current db user', actor =>\n *          QueryPostgresDB.as(actor)\n *              .query('SELECT current_user')\n *              .then(result => result.rows[0].current_user)\n *      );\n *\n *  // Example test scenario where the Actor uses an Ability to QueryPostgresDB\n *  // to assert on the username the connection has been established with\n *  describe('Serenity/JS', () => {\n *     it('can initialise and discard abilities automatically', () =>\n *         actorCalled('Debbie')\n *             .whoCan(new QueryPostgresDB(new Client()))\n *             .attemptsTo(\n *                 Ensure.that(CurrentDBUser(), equals('jan'))\n *             ));\n *  });\n *\n * @see {@link Initialisable}\n * @see {@link Discardable}\n *\n * @access public\n */\nexport interface Ability {  // eslint-disable-line @typescript-eslint/no-empty-interface\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/Ability.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 555,
    "kind": "class",
    "name": "Ability",
    "memberof": "src/screenplay/Ability.ts",
    "static": true,
    "longname": "src/screenplay/Ability.ts~Ability",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{Ability}",
    "description": " An Ability enables the {@link Actor} to interact with an external interface of the system under test.\n Technically speaking, it's a wrapper around a client of said interface.",
    "examples": [
      " import { Ability, Actor, Interaction } from '@serenity-js/core';\n\n class MakePhoneCalls implements Ability {\n     static as(actor: UsesAbilities): MakesPhoneCalls {\n         return actor.abilityTo(MakePhoneCalls);\n     }\n\n     static using(phone: Phone) {\n         return new MakePhoneCalls(phone);\n     }\n\n     constructor(private readonly phone: Phone) {}\n\n     // some method that allows us to interact with the external interface of the system under test\n     dial(phoneNumber: string) {\n       // ...\n     }\n }\n\n const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n\n const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n     MakePhoneCalls.as(actor).dial(phoneNumber);\n );",
      "<caption>Ability that's automatically initialised and discarded</caption>\n import {\n     Ability, actorCalled, Discardable, Initialisable,\n     Question, UsesAbilities\n } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n\n // A low-level client we want the Actor to use, i.e. a database client:\n const { Client } = require('pg');\n\n // A custom Ability to give an Actor access to the low-level client:\n class QueryPostgresDB implements Initialisable, Discardable, Ability {\n    static as(actor: UsesAbilities) {\n        return actor.abilityTo(QueryPostgresDB);\n    }\n\n    constructor(private readonly client) {\n    }\n\n    // invoked by Serenity/JS when actor.attemptsTo is first invoked\n    initialise(): Promise<void> | void {\n        return this.client.connect();\n    }\n\n    // Helps to ensure that the Ability is not initialised more than once\n    isInitialised(): boolean {\n        return this.client._connected;\n    }\n\n    // Discards any resources the Ability uses when the Actor is dismissed\n    discard(): Promise<void> | void {\n        return this.client.end();\n    }\n\n    // Any custom integration APIs the custom Ability\n    // should make available to the Actor.\n    query(query: string) {\n        return this.client.query(query);\n    }\n\n    // ... other custom integration APIs\n }\n\n // A custom Question to allow the Actor query the system\n const CurrentDBUser = () =>\n     Question.about('current db user', actor =>\n         QueryPostgresDB.as(actor)\n             .query('SELECT current_user')\n             .then(result => result.rows[0].current_user)\n     );\n\n // Example test scenario where the Actor uses an Ability to QueryPostgresDB\n // to assert on the username the connection has been established with\n describe('Serenity/JS', () => {\n    it('can initialise and discard abilities automatically', () =>\n        actorCalled('Debbie')\n            .whoCan(new QueryPostgresDB(new Client()))\n            .attemptsTo(\n                Ensure.that(CurrentDBUser(), equals('jan'))\n            ));\n });"
    ],
    "see": [
      "{@link Initialisable}",
      "{@link Discardable}"
    ],
    "lineNumber": 106,
    "interface": true
  },
  {
    "__docId__": 556,
    "kind": "file",
    "name": "src/screenplay/AbilityType.ts",
    "content": "import { Ability } from './Ability';\nimport { UsesAbilities } from './actor';\n\n/**\n * @desc\n *  An interface describing the static access method that every {@link Ability} class\n *  needs to provide in order to be accessible from within an {@link Interaction}.\n */\nexport interface AbilityType<A extends Ability> extends Function {\n\n    /**\n     * @desc\n     *  Retrieves the Ability in question from the {@link Actor}, provided that the {@link Actor} has it.\n     *\n     * @example\n     * import { Ability, Actor, Interface } from '@serenity-js/core';\n     *\n     * class MakePhoneCalls implements Ability {\n     *     static as(actor: UsesAbilities): MakesPhoneCalls {\n     *         return actor.abilityTo(MakePhoneCalls);\n     *     }\n     *\n     *     static using(phone: Phone) {\n     *         return new MakePhoneCalls(phone);\n     *     }\n     *\n     *     constructor(private readonly phone: Phone) {}\n     *\n     *     // some method that allows us to interact with the external interface of the system under test\n     *     dial(phoneNumber: string) {\n     *       // ...\n     *     }\n     * }\n     *\n     * const Connie = Actor.named('Connie').whoCan(MakePhoneCalls.using(phone));\n     *\n     * const Call = (phoneNumber: string) => Interaction.where(`#actor calls ${ phoneNumber }`, actor =>\n     *  MakePhoneCalls.as(actor).dial(phoneNumber);\n     * );\n     *\n     * @param {UsesAbilities} actor\n     */\n    as(actor: UsesAbilities): A;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/AbilityType.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 557,
    "kind": "class",
    "name": "AbilityType",
    "memberof": "src/screenplay/AbilityType.ts",
    "static": true,
    "longname": "src/screenplay/AbilityType.ts~AbilityType",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{AbilityType}",
    "description": " An interface describing the static access method that every {@link Ability} class\n needs to provide in order to be accessible from within an {@link Interaction}.",
    "lineNumber": 16,
    "interface": true,
    "extends": [
      "Function"
    ]
  },
  {
    "__docId__": 558,
    "kind": "file",
    "name": "src/screenplay/Activity.ts",
    "content": "import { AnswersQuestions, PerformsActivities, UsesAbilities } from './actor';\n\n/**\n * @desc\n *  A command object representing an activity that an {@link Actor} can perform.\n *\n * @see {@link Actor}\n * @see https://en.wikipedia.org/wiki/Command_pattern\n */\nexport interface Activity {\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this Activity.\n     *\n     * @param {PerformsActivities | UsesAbilities | AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link PerformsActivities}\n     * @see {@link UsesAbilities}\n     * @see {@link AnswersQuestions}\n     */\n    performAs(actor: PerformsActivities | UsesAbilities | AnswersQuestions): PromiseLike<any>;\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this Activity.\n     *\n     * @returns {string}\n     */\n    toString(): string;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/Activity.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 559,
    "kind": "class",
    "name": "Activity",
    "memberof": "src/screenplay/Activity.ts",
    "static": true,
    "longname": "src/screenplay/Activity.ts~Activity",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{Activity}",
    "description": " A command object representing an activity that an {@link Actor} can perform.",
    "see": [
      "{@link Actor}",
      "https://en.wikipedia.org/wiki/Command_pattern"
    ],
    "lineNumber": 17,
    "interface": true
  },
  {
    "__docId__": 560,
    "kind": "file",
    "name": "src/screenplay/Answerable.ts",
    "content": "import { Question } from './Question';\n\n/**\n * @desc\n *  A union type that provides a convenient way to represent any value\n *  that can be resolved by {@link Actor#answer}.\n *\n * @public\n *\n * @typedef {Question<Promise<T>> | Question<T> | Promise<T> | T} Answerable<T>\n */\nexport type Answerable<T> = Question<Promise<T>> | Question<T> | Promise<T> | T;\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/Answerable.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 561,
    "kind": "typedef",
    "name": "Answerable<T>",
    "memberof": "src/screenplay/Answerable.ts",
    "static": true,
    "longname": "src/screenplay/Answerable.ts~Answerable<T>",
    "access": "public",
    "description": " A union type that provides a convenient way to represent any value\n that can be resolved by {@link Actor#answer}.",
    "lineNumber": 19,
    "type": {
      "types": [
        "Question<Promise<T>> | Question<T> | Promise<T> | T"
      ],
      "optional": false,
      "name": "Answerable<T>"
    }
  },
  {
    "__docId__": 562,
    "kind": "file",
    "name": "src/screenplay/Interaction.ts",
    "content": "import { Activity } from './Activity';\nimport { Actor, AnswersQuestions, CollectsArtifacts, UsesAbilities } from './actor';\n\n/**\n * @desc\n *  Directly exercises the {@link Actor}'s {@link Ability} to interact\n *  with the System Under Test.\n *\n * @implements {Activity}\n * @see {@link Ability}\n * @see {@link Actor}\n */\nexport abstract class Interaction implements Activity {\n    static where(\n        description: string,\n        interaction: (actor: UsesAbilities & AnswersQuestions & CollectsArtifacts) => PromiseLike<void> | void,\n    ): Interaction {\n        return new DynamicallyGeneratedInteraction(description, interaction);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link UsesAbilities}\n     * @see {@link AnswersQuestions}\n     */\n    abstract performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void>;\n}\n\n/**\n * @package\n */\nclass DynamicallyGeneratedInteraction extends Interaction {\n    constructor(\n        private readonly description: string,\n        private readonly interaction: (actor: UsesAbilities & AnswersQuestions & CollectsArtifacts) => PromiseLike<void> | void,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Interaction}.\n     *\n     * @param {Actor} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     */\n    performAs(actor: Actor): PromiseLike<void> {\n        try {\n            return Promise.resolve(this.interaction(actor));\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return this.description;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/Interaction.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 563,
    "kind": "class",
    "name": "Interaction",
    "memberof": "src/screenplay/Interaction.ts",
    "static": true,
    "longname": "src/screenplay/Interaction.ts~Interaction",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{Interaction}",
    "description": " Directly exercises the {@link Actor}'s {@link Ability} to interact\n with the System Under Test.",
    "see": [
      "{@link Ability}",
      "{@link Actor}"
    ],
    "lineNumber": 20,
    "interface": false,
    "implements": [
      "Activity"
    ]
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/Interaction.ts~Interaction",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/Interaction.ts~Interaction.where",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "interaction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 565,
    "kind": "class",
    "name": "DynamicallyGeneratedInteraction",
    "memberof": "src/screenplay/Interaction.ts",
    "static": true,
    "longname": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/Interaction.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 85,
    "interface": false,
    "extends": [
      "Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 566,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Interaction}.",
    "see": [
      "{@link Actor}"
    ],
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Actor"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Interaction.ts~DynamicallyGeneratedInteraction#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 569,
    "kind": "file",
    "name": "src/screenplay/Question.ts",
    "content": "import { isMappable, Mappable } from '../io/collections';\nimport { AnswersQuestions, UsesAbilities } from './actor';\nimport { AnswerMappingFunction } from './questions/mappings';\n\n/**\n * @desc\n *  Enables the {@link Actor} to query the system under test.\n *\n * @example <caption>A basic Question</caption>\n *  import { Actor, AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\n *  import { Ensure, equals } from '@serenity-js/assertions'\n *\n *  const LastItemOf = <T>(list: T[]): Question<T> =>\n *      Question.about('last item from the list', (actor: AnswersQuestions & UsesAbilities) => {\n *          return list[list.length - 1];\n *      });\n *\n *  Actor.named('Quentin').attemptsTo(\n *      Ensure.that(LastItemFrom([1,2,3]), equals(3)),\n *  );\n *\n * @example <caption>A question using the Actor's Ability to do something</caption>\n *  import { AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\n *  import { CallAnApi } from '@serenity-js/rest'\n *\n *  const TextOfLastResponseStatus = () =>\n *      Question.about<number>(`the text of the last response status`, actor => {\n *          return CallAnApi.as(actor).mapLastResponse(response => response.statusText);\n *      });\n *\n *  @example <caption>Mapping answers to other questions</caption>\n *  import { Actor, AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\n *  import { CallAnApi, LastResponse } from '@serenity-js/rest'\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  const RequestWasSuccessful = () =>\n *      Question.about<number>(`the text of the last response status`, actor => {\n *          return LastResponse.status().answeredBy(actor) === 200;\n *      });\n *\n *  const actor = Actor.named('Quentin').whoCan(CallAnApi.at('https://myapp.com/api'));\n *\n *  actor.attemptsTo(\n *      Send.a(GetRequest.to('/books/0-688-00230-7')),\n *      Ensure.that(RequestWasSuccessful(), isTrue()),\n *  );\n *\n * @see {@link Actor}\n * @see {@link Interaction}\n * @see {@link Ability}\n *\n * @abstract\n */\nexport abstract class Question<T> {\n\n    /**\n     * @param {string} subject\n     *  The subject of this question\n     *\n     * @protected\n     */\n    protected constructor(protected subject: string) {\n    }\n\n    /**\n     * @desc\n     *  Factory method that simplifies the process of defining custom questions.\n     *\n     * @example\n     *  const EnvVariable = (name: string) =>\n     *      Question.about(`the ${ name } env variable`, actor => process.env[name])\n     *\n     * @static\n     *\n     * @param {string} description\n     * @param {function(actor: AnswersQuestions & UsesAbilities): R} body\n     *\n     * @returns {Question<R>}\n     */\n    static about<R>(description: string, body: (actor: AnswersQuestions & UsesAbilities) => R): Question<R> {\n        return new AnonymousQuestion<R>(description, body);\n    }\n\n    /**\n     * @desc\n     *  Checks if the value is a {@link Question}.\n     *\n     * @static\n     *\n     * @param {any} maybeQuestion\n     *  The value to check\n     *\n     * @returns {boolean}\n     */\n    static isAQuestion<T>(maybeQuestion: unknown): maybeQuestion is Question<T> {\n        return !! maybeQuestion && !! (maybeQuestion as any).answeredBy;\n    }\n\n    /**\n     * @desc\n     *  Describes the subject of this {@link Question}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return this.subject;\n    }\n\n    /**\n     * @desc\n     *  Changes the description of this question's subject.\n     *\n     * @param {string} subject\n     * @returns {Question<T>}\n     */\n    describedAs(subject: string): this {\n        this.subject = subject;\n\n        return this;\n    }\n\n    /**\n     * @desc\n     *  Creates a new {@link Question}, which value is a result of applying the `mapping`\n     *  function to the value of this {@link Question}.\n     *\n     * @example <caption>Mapping a Question<Promise<string>> to Question<Promise<number>></caption>\n     *  import { Question, replace, toNumber } from '@serenity-js/core';\n     *\n     *  Question.about('the price of some item', actor => '$3.99')\n     *      .map(replace('$', ''))\n     *      .map(toNumber)\n     *\n     *  // => Question<Promise<number>>\n     *  //      3.99\n     *\n     * @example <caption>Mapping all items of Question<string[]> to Question<Promise<number>></caption>\n     *  import { Question, trim } from '@serenity-js/core';\n     *\n     *  Question.about('things to do', actor => [ ' walk the dog  ', '  read a book  ' ])\n     *      .map(trim())\n     *\n     *  // => Question<Promise<string[]>>\n     *  //      [ 'walk the dog', 'read a book' ]\n     *\n     * @example <caption>Using a custom mapping function</caption>\n     *  import { Question } from '@serenity-js/core';\n     *\n     *  Question.about('normalised percentages', actor => [ 0.1, 0.3, 0.6 ])\n     *      .map((actor: AnswersQuestions) => (value: number) => value * 100)\n     *\n     *  // => Question<Promise<number[]>>\n     *  //      [ 10, 30, 60 ]\n     *\n     * @example <caption>Extracting values from LastResponse.body()</caption>\n     *  import { Question } from '@serenity-js/core';\n     *  import { LastResponse } from '@serenity-js/rest';\n     *\n     *  interface UserDetails {\n     *      id: number;\n     *      name: string;\n     *  }\n     *\n     *  LastResponse.body<UserDetails>().map(actor => details => details.id)\n     *\n     *  // => Question<number>\n     *\n     * @param {function(value: A, index?: number): Promise<O> | O} mapping\n     *  A mapping function that receives a value of type `<A>`, which is either:\n     *  - an answer to the original question, if the question is defined as `Question<Promise<A>>` or `Question<A>`\n     *  - or, if the question is defined as `Question<Promise<Mappable<A>>`, `Question<Mappable<A>>` - each item of the {@link Mappable} collection,\n     *\n     * @returns {Question<Promise<Mapped>>}\n     *  A new Question which value is a result of applying the `mapping` function\n     *  to the value of the current question, so that:\n     *  - if the answer to the current question is a `Mappable<A>`, the result becomes `Question<Promise<O[]>>`\n     *  - if the answer is a value `<A>` or `Promise<A>`, the result becomes `Question<Promise<O>>`\n     *\n     * @see {@link AnswerMappingFunction}\n     * @see {@link Mappable}\n     */\n    map<O>(mapping: AnswerMappingFunction<AnswerOrItemOfMappableCollection<T>, O>): Question<Promise<Mapped<T, O>>> {\n        return Question.about(this.subject, actor =>\n            actor.answer(this).then(value =>\n                (isMappable(value)\n                    ? Promise.all(((value).map(mapping(actor)) as Array<PromiseLike<O> | O>))\n                    : mapping(actor)(value as AnswerOrItemOfMappableCollection<T>)\n                ) as Promise<Mapped<T, O>>\n            )\n        ) as Question<Promise<Mapped<T, O>>>;\n    }\n\n    /**\n     * @abstract\n     */\n    abstract answeredBy(actor: AnswersQuestions & UsesAbilities): T;\n}\n\n/**\n * @package\n */\ntype AnswerOrItemOfMappableCollection<V> =\n    V extends PromiseLike<infer PromisedValue>\n        ? PromisedValue extends Mappable<infer Item>\n            ? Item\n            : PromisedValue\n        : V extends Mappable<infer Item>\n            ? Item\n            : V;\n\n/**\n * @package\n */\ntype Mapped<T, O> =\n    T extends PromiseLike<infer PromisedValue>\n        ? PromisedValue extends Mappable<infer Item>        // eslint-disable-line @typescript-eslint/no-unused-vars\n            ? O[]\n            : O\n        : T extends Mappable<infer Item>                    // eslint-disable-line @typescript-eslint/no-unused-vars\n            ? O[]\n            : O\n\n/**\n * @package\n */\nclass AnonymousQuestion<T> extends Question<T> {\n    constructor(private description: string, private body: (actor: AnswersQuestions & UsesAbilities) => T) {\n        super(description);\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities) {\n        return this.body(actor);\n    }\n\n    /**\n     * Changes the description of this question's subject\n     * and produces a new instance without mutating the original one.\n     *\n     * @param {string} subject\n     * @returns {Question<T>}\n     */\n    describedAs(subject: string): this {\n        this.subject = subject;\n\n        return this;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/Question.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 570,
    "kind": "class",
    "name": "Question",
    "memberof": "src/screenplay/Question.ts",
    "static": true,
    "longname": "src/screenplay/Question.ts~Question",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{Question}",
    "description": " Enables the {@link Actor} to query the system under test.",
    "examples": [
      "<caption>A basic Question</caption>\n import { Actor, AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\n import { Ensure, equals } from '@serenity-js/assertions'\n\n const LastItemOf = <T>(list: T[]): Question<T> =>\n     Question.about('last item from the list', (actor: AnswersQuestions & UsesAbilities) => {\n         return list[list.length - 1];\n     });\n\n Actor.named('Quentin').attemptsTo(\n     Ensure.that(LastItemFrom([1,2,3]), equals(3)),\n );",
      "<caption>A question using the Actor's Ability to do something</caption>\n import { AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\n import { CallAnApi } from '@serenity-js/rest'\n\n const TextOfLastResponseStatus = () =>\n     Question.about<number>(`the text of the last response status`, actor => {\n         return CallAnApi.as(actor).mapLastResponse(response => response.statusText);\n     });",
      "<caption>Mapping answers to other questions</caption>\n import { Actor, AnswersQuestions, UsesAbilities, Question } from '@serenity-js/core'\n import { CallAnApi, LastResponse } from '@serenity-js/rest'\n import { Ensure, equals } from '@serenity-js/assertions';\n\n const RequestWasSuccessful = () =>\n     Question.about<number>(`the text of the last response status`, actor => {\n         return LastResponse.status().answeredBy(actor) === 200;\n     });\n\n const actor = Actor.named('Quentin').whoCan(CallAnApi.at('https://myapp.com/api'));\n\n actor.attemptsTo(\n     Send.a(GetRequest.to('/books/0-688-00230-7')),\n     Ensure.that(RequestWasSuccessful(), isTrue()),\n );"
    ],
    "see": [
      "{@link Actor}",
      "{@link Interaction}",
      "{@link Ability}"
    ],
    "lineNumber": 61,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 571,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/Question.ts~Question",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Question.ts~Question#constructor",
    "access": "protected",
    "description": "",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject of this question"
      }
    ]
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "about",
    "memberof": "src/screenplay/Question.ts~Question",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/Question.ts~Question.about",
    "access": "public",
    "description": " Factory method that simplifies the process of defining custom questions.",
    "examples": [
      " const EnvVariable = (name: string) =>\n     Question.about(`the ${ name } env variable`, actor => process.env[name])"
    ],
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<R>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function(actor: AnswersQuestions & UsesAbilities): R"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<R>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "isAQuestion",
    "memberof": "src/screenplay/Question.ts~Question",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/Question.ts~Question.isAQuestion",
    "access": "public",
    "description": " Checks if the value is a {@link Question}.",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeQuestion",
        "description": "The value to check"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/Question.ts~Question",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Question.ts~Question#toString",
    "access": "public",
    "description": " Describes the subject of this {@link Question}.",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "describedAs",
    "memberof": "src/screenplay/Question.ts~Question",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Question.ts~Question#describedAs",
    "access": "public",
    "description": " Changes the description of this question's subject.",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<T>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<T>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 576,
    "kind": "member",
    "name": "subject",
    "memberof": "src/screenplay/Question.ts~Question",
    "static": false,
    "longname": "src/screenplay/Question.ts~Question#subject",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "map",
    "memberof": "src/screenplay/Question.ts~Question",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Question.ts~Question#map",
    "access": "public",
    "description": " Creates a new {@link Question}, which value is a result of applying the `mapping`\n function to the value of this {@link Question}.",
    "examples": [
      "<caption>Mapping a Question<Promise<string>> to Question<Promise<number>></caption>\n import { Question, replace, toNumber } from '@serenity-js/core';\n\n Question.about('the price of some item', actor => '$3.99')\n     .map(replace('$', ''))\n     .map(toNumber)\n\n // => Question<Promise<number>>\n //      3.99",
      "<caption>Mapping all items of Question<string[]> to Question<Promise<number>></caption>\n import { Question, trim } from '@serenity-js/core';\n\n Question.about('things to do', actor => [ ' walk the dog  ', '  read a book  ' ])\n     .map(trim())\n\n // => Question<Promise<string[]>>\n //      [ 'walk the dog', 'read a book' ]",
      "<caption>Using a custom mapping function</caption>\n import { Question } from '@serenity-js/core';\n\n Question.about('normalised percentages', actor => [ 0.1, 0.3, 0.6 ])\n     .map((actor: AnswersQuestions) => (value: number) => value * 100)\n\n // => Question<Promise<number[]>>\n //      [ 10, 30, 60 ]",
      "<caption>Extracting values from LastResponse.body()</caption>\n import { Question } from '@serenity-js/core';\n import { LastResponse } from '@serenity-js/rest';\n\n interface UserDetails {\n     id: number;\n     name: string;\n }\n\n LastResponse.body<UserDetails>().map(actor => details => details.id)\n\n // => Question<number>"
    ],
    "see": [
      "{@link AnswerMappingFunction}",
      "{@link Mappable}"
    ],
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<Mapped>>}\n A new Question which value is a result of applying the `mapping` function\n to the value of the current question, so that:\n - if the answer to the current question is a `Mappable<A>`, the result becomes `Question<Promise<O[]>>`\n - if the answer is a value `<A>` or `Promise<A>`, the result becomes `Question<Promise<O>>`"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function(value: A, index?: number): Promise<O> ",
          " O"
        ],
        "spread": false,
        "optional": false,
        "name": "mapping",
        "description": "A mapping function that receives a value of type `<A>`, which is either:\n - an answer to the original question, if the question is defined as `Question<Promise<A>>` or `Question<A>`\n - or, if the question is defined as `Question<Promise<Mappable<A>>`, `Question<Mappable<A>>` - each item of the {@link Mappable} collection,"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<Mapped>>"
      ],
      "spread": false,
      "description": "A new Question which value is a result of applying the `mapping` function\n to the value of the current question, so that:\n - if the answer to the current question is a `Mappable<A>`, the result becomes `Question<Promise<O[]>>`\n - if the answer is a value `<A>` or `Promise<A>`, the result becomes `Question<Promise<O>>`"
    }
  },
  {
    "__docId__": 578,
    "kind": "class",
    "name": "AnonymousQuestion",
    "memberof": "src/screenplay/Question.ts",
    "static": true,
    "longname": "src/screenplay/Question.ts~AnonymousQuestion",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/Question.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 338,
    "interface": false,
    "extends": [
      "Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 579,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/Question.ts~AnonymousQuestion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Question.ts~AnonymousQuestion#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 339,
    "undocument": true
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/Question.ts~AnonymousQuestion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Question.ts~AnonymousQuestion#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "describedAs",
    "memberof": "src/screenplay/Question.ts~AnonymousQuestion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Question.ts~AnonymousQuestion#describedAs",
    "access": "public",
    "description": "Changes the description of this question's subject\nand produces a new instance without mutating the original one. ",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 582,
    "kind": "member",
    "name": "subject",
    "memberof": "src/screenplay/Question.ts~AnonymousQuestion",
    "static": false,
    "longname": "src/screenplay/Question.ts~AnonymousQuestion#subject",
    "access": "public",
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "file",
    "name": "src/screenplay/Task.ts",
    "content": "import { ImplementationPendingError } from '../errors';\nimport { Activity } from './Activity';\nimport { PerformsActivities } from './actor';\n\n/**\n * @desc\n *  Aggregates {@link Interaction}s so that they represents logical\n *  steps of a business process an {@link Actor} can perform.\n *\n * @implements {Activity}\n * @see {@link Interaction}\n * @see {@link Actor}\n */\nexport abstract class Task implements Activity {\n\n    /**\n     * @desc\n     *  A factory method to make defining the Tasks more convenient.\n     *  Please note that calling this method without providing the list of {@link Activity} objects\n     *  will result in producing a Task that's marked as \"pending\" in the test report.\n     *\n     *  This feature is useful when you want to quickly write down a task that will be needed in the scenario,\n     *  but you're not yet sure what activities will constitute it.\n     *\n     * @example <caption>Modelling a task</caption>\n     * import { Log, Task } from '@serenity-js/core';\n     *\n     * const Debug = (something: Answerable<any>) =>\n     *     Task.where(`#actor prints the answer to a question`,\n     *          Log.the(something),\n     *     );\n     *\n     * @example <caption>Modelling a not implemented task</caption>\n     * import { Task } from '@serenity-js/core';\n     *\n     * const SignUp = () =>\n     *     Task.where(`#actor signs up for a newsletter`); // no activities given\n     *                                                     // => task marked as pending\n     *\n     * @param {string} description - A description to be used when reporting this task\n     * @param {Activity[]} activities - A list of lower-level activities that constitute the task\n     *\n     * @returns {Task}\n     */\n    static where(description: string, ...activities: Activity[]): Task {\n        return activities.length > 0\n            ? new DynamicallyGeneratedTask(description, activities)\n            : new NotImplementedTask(description);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Task}.\n     *\n     * @param {PerformsActivities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link PerformsActivities}\n     */\n    abstract performAs(actor: PerformsActivities): PromiseLike<void>;\n}\n\n/**\n * @package\n */\nclass DynamicallyGeneratedTask extends Task {\n    constructor(private description: string, private activities: Activity[]) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Task}.\n     *\n     * @param {PerformsActivities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link PerformsActivities}\n     */\n    performAs(actor: PerformsActivities): PromiseLike<void> {\n        return actor.attemptsTo(...this.activities);\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return this.description;\n    }\n}\n\n/**\n * @package\n */\nclass NotImplementedTask extends Task {\n    constructor(private description: string) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Task}.\n     *\n     * @param {PerformsActivities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link PerformsActivities}\n     */\n    performAs(actor: PerformsActivities): PromiseLike<void> {\n        return Promise.reject(\n            new ImplementationPendingError(`A task where \"${ this.toString() }\" has not been implemented yet`),\n        );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return this.description;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/Task.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 584,
    "kind": "class",
    "name": "Task",
    "memberof": "src/screenplay/Task.ts",
    "static": true,
    "longname": "src/screenplay/Task.ts~Task",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay",
    "importStyle": "{Task}",
    "description": " Aggregates {@link Interaction}s so that they represents logical\n steps of a business process an {@link Actor} can perform.",
    "see": [
      "{@link Interaction}",
      "{@link Actor}"
    ],
    "lineNumber": 21,
    "interface": false,
    "implements": [
      "Activity"
    ]
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/Task.ts~Task",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/Task.ts~Task.where",
    "access": "public",
    "description": " A factory method to make defining the Tasks more convenient.\n Please note that calling this method without providing the list of {@link Activity} objects\n will result in producing a Task that's marked as \"pending\" in the test report.\n\n This feature is useful when you want to quickly write down a task that will be needed in the scenario,\n but you're not yet sure what activities will constitute it.",
    "examples": [
      "<caption>Modelling a task</caption>\nimport { Log, Task } from '@serenity-js/core';\n\nconst Debug = (something: Answerable<any>) =>\n    Task.where(`#actor prints the answer to a question`,\n         Log.the(something),\n    );",
      "<caption>Modelling a not implemented task</caption>\nimport { Task } from '@serenity-js/core';\n\nconst SignUp = () =>\n    Task.where(`#actor signs up for a newsletter`); // no activities given\n                                                    // => task marked as pending"
    ],
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Task}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A description to be used when reporting this task"
      },
      {
        "nullable": null,
        "types": [
          "Activity[]"
        ],
        "spread": false,
        "optional": false,
        "name": "activities",
        "description": "A list of lower-level activities that constitute the task"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 586,
    "kind": "class",
    "name": "DynamicallyGeneratedTask",
    "memberof": "src/screenplay/Task.ts",
    "static": true,
    "longname": "src/screenplay/Task.ts~DynamicallyGeneratedTask",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/Task.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 114,
    "interface": false,
    "extends": [
      "Task"
    ],
    "ignore": true
  },
  {
    "__docId__": 587,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/Task.ts~DynamicallyGeneratedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~DynamicallyGeneratedTask#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/Task.ts~DynamicallyGeneratedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~DynamicallyGeneratedTask#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Task}.",
    "see": [
      "{@link Actor}",
      "{@link PerformsActivities}"
    ],
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PerformsActivities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/Task.ts~DynamicallyGeneratedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~DynamicallyGeneratedTask#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 590,
    "kind": "class",
    "name": "NotImplementedTask",
    "memberof": "src/screenplay/Task.ts",
    "static": true,
    "longname": "src/screenplay/Task.ts~NotImplementedTask",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/Task.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 179,
    "interface": false,
    "extends": [
      "Task"
    ],
    "ignore": true
  },
  {
    "__docId__": 591,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/Task.ts~NotImplementedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~NotImplementedTask#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/Task.ts~NotImplementedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~NotImplementedTask#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Task}.",
    "see": [
      "{@link Actor}",
      "{@link PerformsActivities}"
    ],
    "lineNumber": 208,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PerformsActivities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/Task.ts~NotImplementedTask",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/Task.ts~NotImplementedTask#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 594,
    "kind": "file",
    "name": "src/screenplay/abilities/Discardable.ts",
    "content": "/**\n * @desc\n *  An interface to be implemented by any {@link Ability} that needs to free up\n *  the resources it uses.\n *\n *  This {@link discard} method is invoked directly by the {@link Actor}, and indirectly by {@link Stage}:\n *  - when {@link SceneFinishes}, for actors instantiated after {@link SceneStarts} - i.e. within a test scenario or in a \"before each\" hook\n *  - when {@link TestRunFinishes}, for actors instantiated before {@link SceneStarts} - i.e. in a \"before all\" hook\n *\n * @public\n */\nexport interface Discardable {\n    discard(): Promise<void> | void;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/abilities/Discardable.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 595,
    "kind": "class",
    "name": "Discardable",
    "memberof": "src/screenplay/abilities/Discardable.ts",
    "static": true,
    "longname": "src/screenplay/abilities/Discardable.ts~Discardable",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/abilities",
    "importStyle": "{Discardable}",
    "description": " An interface to be implemented by any {@link Ability} that needs to free up\n the resources it uses.\n\n This {@link discard} method is invoked directly by the {@link Actor}, and indirectly by {@link Stage}:\n - when {@link SceneFinishes}, for actors instantiated after {@link SceneStarts} - i.e. within a test scenario or in a \"before each\" hook\n - when {@link TestRunFinishes}, for actors instantiated before {@link SceneStarts} - i.e. in a \"before all\" hook",
    "lineNumber": 19,
    "interface": true
  },
  {
    "__docId__": 596,
    "kind": "file",
    "name": "src/screenplay/abilities/Initialisable.ts",
    "content": "/**\n * @desc\n *  An interface to be implemented by any {@link Ability} that needs to initialise\n *  the resources it uses (i.e. establish a database connection).\n *\n *  The {@link initialise} method is invoked when {@link Actor#attemptsTo} is called,\n *  but only when {@link isInitialised} returns false.\n *\n * @public\n */\nexport interface Initialisable {\n\n    /**\n     * @desc\n     *  Initialises the ability. Invoked when {@link Actor#attemptsTo} is called,\n     *  but only when {@link isInitialised} returns false.\n     *\n     *  Make sure to implement {@link isInitialised} so that it returns `true`\n     *  when the ability has been successfully initialised.\n     *\n     * @returns {Promise<void> | void}\n     */\n    initialise(): Promise<void> | void;\n\n    /**\n     * @desc\n     *  Whether or not a given ability has been initialised already\n     *  and should not be initialised again.\n     *\n     * @returns {boolean}\n     */\n    isInitialised(): boolean;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/abilities/Initialisable.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 597,
    "kind": "class",
    "name": "Initialisable",
    "memberof": "src/screenplay/abilities/Initialisable.ts",
    "static": true,
    "longname": "src/screenplay/abilities/Initialisable.ts~Initialisable",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/abilities",
    "importStyle": "{Initialisable}",
    "description": " An interface to be implemented by any {@link Ability} that needs to initialise\n the resources it uses (i.e. establish a database connection).\n\n The {@link initialise} method is invoked when {@link Actor#attemptsTo} is called,\n but only when {@link isInitialised} returns false.",
    "lineNumber": 18,
    "interface": true
  },
  {
    "__docId__": 598,
    "kind": "file",
    "name": "src/screenplay/abilities/TakeNotes.ts",
    "content": "import { LogicError } from '../../errors';\nimport { Ability } from '../Ability';\nimport { AnswersQuestions, UsesAbilities } from '../actor';\nimport { Question } from '../Question';\nimport { Discardable } from './Discardable';\n\n/**\n * @desc\n *  Enables the {@link Actor} to {@link TakeNote} of an answer to a given {@link Question}\n *  and to retrieve their {@link Note} later.\n *\n * @see {@link Note}\n * @see {@link TakeNote}\n *\n * @abstract\n * @implements {Ability}\n */\nexport abstract class TakeNotes implements Ability {\n\n    /**\n     * @desc\n     *  Instantiates an ability to {@link TakeNotes} that uses an empty notepad.\n     *\n     *  This method should be used when you need the {@link Actor} to {@link TakeNote}\n     *  of an answer to some {@link Question} and retrieve such {@link Note} later on in the same scenario,\n     *  but you don't need the {@link Actor}s to share their notes.\n     *\n     * @example\n     *  import { actorCalled, Log, Note, TakeNote, TakeNotes } from '@serenity-js/core'\n     *  import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n     *  import { by, protractor } from 'protractor';\n     *\n     *  const actor = actorCalled('Apisitt').whoCan(\n     *      TakeNotes.usingAnEmptyNotepad(),\n     *      CallAnApi.at('https://api.example.org'),\n     *  );\n     *\n     *  actor.attemptsTo(\n     *      Send.a(GetRequest.to('/customers')),\n     *      TakeNote.of(LastResponse.status()),     // remember the LastResponse.status()\n     *      // ... perform some other activities\n     *      Log.the(Note.of(LastResponse.body())),  // log it later, or pass to any other interaction\n     *  );\n     *\n     * @example\n     *  import { actorCalled, Note, TakeNote, TakeNotes } from '@serenity-js/core'\n     *  import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n     *  import { by, protractor } from 'protractor';\n     *\n     *  class Vouchers {\n     *      static code             = Target.the('voucher code').located(by.id('voucher'));\n     *      static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n     *  }\n     *\n     *  const actor = actorCalled('Noah').whoCan(\n     *      TakeNotes.usingAnEmptyNotepad(),\n     *      BrowseTheWeb.using(protractor.browser),\n     *  );\n     *\n     *  actor.attemptsTo(\n     *      TakeNote.of(Text.of(Vouchers.code)),\n     *      // ... add the product to a basket, go to checkout, etc.\n     *      Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n     *  );\n     *\n     * @returns {TakeNotes & Discardable}\n     */\n    static usingAnEmptyNotepad(): TakeNotes & Discardable {\n        return new TakeNotesUsingAnEmptyNotepad();\n    }\n\n    /**\n     * @desc\n     *  Instantiates an ability to {@link TakeNotes} that uses a notepad that can be shared amongst {@link Actor}s.\n     *\n     *  This method should be used when you need the {@link Actor}s to {@link TakeNote}s\n     *  of answers to some {@link Question}s, share those notes amongst themselves,\n     *  and retrieve such shared {@link Note}s later on in the same scenario.\n     *\n     * @example\n     *  import { actorCalled, Note, TakeNote, TakeNotes } from '@serenity-js/core'\n     *  import { ManageALocalServer, StartLocalTestServer, StopLocalTestServer } from '@serenity-js/local-server'\n     *  import { BrowseTheWeb } from '@serenity-js/protractor'\n     *\n     *  const server = http.createServer(function (request, response) {\n     *      response.setHeader('Connection', 'close');\n     *      response.end('Hello!');\n     *  });\n     *\n     *  const Adam = actorCalled('Adam').whoCan(\n     *      ManageALocalServer.using(server),\n     *      TakeNotes.usingASharedNotepad(),\n     *  );\n     *\n     *  const Becky = actorCalled('Becky').whoCan(\n     *      TakeNotes.usingASharedNotepad(),\n     *      BrowseTheWeb.using(protractor.browser),\n     *  );\n     *\n     *  Adam.attemptsTo(\n     *      StartLocalTestServer.onRandomPort(),\n     *      TakeNote.of(LocalServer.url()),\n     *  );\n     *\n     *  Becky.attemptsTo(\n     *      Navigate.to(Note.of(LocalServer.url())),\n     *      // perform some UI interactions\n     *  );\n     *\n     * @returns {TakeNotes}\n     */\n    static usingASharedNotepad(): TakeNotes {\n        return new TakeNotesUsingASharedNotepad();\n    }\n\n    /**\n     * @desc\n     *  Retrieves the {@link Ability} to {@link TakeNotes}\n     *  for a given {@link Actor} to be used in custom {@link Interaction}s.\n     *\n     * @see {@link Ability}\n     * @see {@link Interaction}\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *\n     * @returns {TakeNotes}\n     */\n    static as(actor: UsesAbilities & AnswersQuestions): TakeNotes {\n        return actor.abilityTo(TakeNotes);\n    }\n\n    /**\n     * @desc\n     *  Instantiates the {@link Ability} to {@link TakeNotes}\n     *\n     * @param {Map<string, any>} notepad\n     */\n    protected constructor(protected readonly notepad: Map<string, any>) {\n    }\n\n    /**\n     * @desc\n     *  Records the answer to a given {@link Question}\n     *\n     * @param {Question<Promise<Answer>> | Question<Answer> | string} subject\n     *  Question or name to record the Answer as\n     *\n     * @param {Promise<Answer> | Answer} value\n     *  The Answer to record\n     *\n     * @returns {void}\n     */\n    record<Answer>(subject: Question<Promise<Answer>> | Question<Answer> | string, value: Promise<Answer> | Answer): void {\n        this.notepad.set(subject.toString(), value);\n    }\n\n    /**\n     * @desc\n     *  Recalls the answer to a given {@link Question}\n     *\n     * @param {Question<Promise<Answer>> | Question<Answer> | string} subject\n     *  Question or name the Answer was recorded as\n     *\n     * @returns {Promise<Answer>}\n     */\n    answerTo<Answer>(subject: Question<Promise<Answer>> | Question<Answer> | string): Promise<Answer> {\n        const key = subject.toString();\n\n        return ! this.notepad.has(key)\n            ? Promise.reject(new LogicError(`The answer to \"${ key }\" has never been recorded`))\n            : Promise.resolve(this.notepad.get(key));\n    }\n}\n\n/**\n * @package\n */\nclass TakeNotesUsingAnEmptyNotepad extends TakeNotes implements Discardable {\n\n    /**\n     * @desc\n     *  Instantiates the {@link Ability} to {@link TakeNotes}\n     *\n     * @param {Map<string, any>} notepad\n     */\n    constructor() {\n        super(new Map<string, any>());\n    }\n\n    /**\n     * @desc\n     *  Enables the {@link Actor} to clear the notepad when the {@link SceneFinishes}.\n     *\n     * @returns {Promise<void> | void}\n     */\n    discard(): Promise<void> | void {\n        this.notepad.clear();\n    }\n}\n\n/**\n * @package\n */\nclass TakeNotesUsingASharedNotepad extends TakeNotes {\n    private static sharedNotepad = new Map<string, any>();\n\n    /**\n     * @desc\n     *  Instantiates the {@link Ability} to {@link TakeNotes}\n     *\n     * @param {Map<string, any>} notepad\n     */\n    constructor() {\n        super(TakeNotesUsingASharedNotepad.sharedNotepad);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/abilities/TakeNotes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 599,
    "kind": "class",
    "name": "TakeNotes",
    "memberof": "src/screenplay/abilities/TakeNotes.ts",
    "static": true,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/abilities",
    "importStyle": "{TakeNotes}",
    "description": " Enables the {@link Actor} to {@link TakeNote} of an answer to a given {@link Question}\n and to retrieve their {@link Note} later.",
    "see": [
      "{@link Note}",
      "{@link TakeNote}"
    ],
    "lineNumber": 25,
    "abstract": true,
    "interface": false,
    "implements": [
      "Ability"
    ]
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "usingAnEmptyNotepad",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes.usingAnEmptyNotepad",
    "access": "public",
    "description": " Instantiates an ability to {@link TakeNotes} that uses an empty notepad.\n\n This method should be used when you need the {@link Actor} to {@link TakeNote}\n of an answer to some {@link Question} and retrieve such {@link Note} later on in the same scenario,\n but you don't need the {@link Actor}s to share their notes.",
    "examples": [
      " import { actorCalled, Log, Note, TakeNote, TakeNotes } from '@serenity-js/core'\n import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n import { by, protractor } from 'protractor';\n\n const actor = actorCalled('Apisitt').whoCan(\n     TakeNotes.usingAnEmptyNotepad(),\n     CallAnApi.at('https://api.example.org'),\n );\n\n actor.attemptsTo(\n     Send.a(GetRequest.to('/customers')),\n     TakeNote.of(LastResponse.status()),     // remember the LastResponse.status()\n     // ... perform some other activities\n     Log.the(Note.of(LastResponse.body())),  // log it later, or pass to any other interaction\n );",
      " import { actorCalled, Note, TakeNote, TakeNotes } from '@serenity-js/core'\n import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n import { by, protractor } from 'protractor';\n\n class Vouchers {\n     static code             = Target.the('voucher code').located(by.id('voucher'));\n     static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n }\n\n const actor = actorCalled('Noah').whoCan(\n     TakeNotes.usingAnEmptyNotepad(),\n     BrowseTheWeb.using(protractor.browser),\n );\n\n actor.attemptsTo(\n     TakeNote.of(Text.of(Vouchers.code)),\n     // ... add the product to a basket, go to checkout, etc.\n     Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n );"
    ],
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TakeNotes & Discardable}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TakeNotes & Discardable"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "usingASharedNotepad",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes.usingASharedNotepad",
    "access": "public",
    "description": " Instantiates an ability to {@link TakeNotes} that uses a notepad that can be shared amongst {@link Actor}s.\n\n This method should be used when you need the {@link Actor}s to {@link TakeNote}s\n of answers to some {@link Question}s, share those notes amongst themselves,\n and retrieve such shared {@link Note}s later on in the same scenario.",
    "examples": [
      " import { actorCalled, Note, TakeNote, TakeNotes } from '@serenity-js/core'\n import { ManageALocalServer, StartLocalTestServer, StopLocalTestServer } from '@serenity-js/local-server'\n import { BrowseTheWeb } from '@serenity-js/protractor'\n\n const server = http.createServer(function (request, response) {\n     response.setHeader('Connection', 'close');\n     response.end('Hello!');\n });\n\n const Adam = actorCalled('Adam').whoCan(\n     ManageALocalServer.using(server),\n     TakeNotes.usingASharedNotepad(),\n );\n\n const Becky = actorCalled('Becky').whoCan(\n     TakeNotes.usingASharedNotepad(),\n     BrowseTheWeb.using(protractor.browser),\n );\n\n Adam.attemptsTo(\n     StartLocalTestServer.onRandomPort(),\n     TakeNote.of(LocalServer.url()),\n );\n\n Becky.attemptsTo(\n     Navigate.to(Note.of(LocalServer.url())),\n     // perform some UI interactions\n );"
    ],
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TakeNotes}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TakeNotes"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "as",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes.as",
    "access": "public",
    "description": " Retrieves the {@link Ability} to {@link TakeNotes}\n for a given {@link Actor} to be used in custom {@link Interaction}s.",
    "see": [
      "{@link Ability}",
      "{@link Interaction}"
    ],
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TakeNotes}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TakeNotes"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 603,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes#constructor",
    "access": "public",
    "description": " Instantiates the {@link Ability} to {@link TakeNotes}",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "notepad",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "record",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes#record",
    "access": "public",
    "description": " Records the answer to a given {@link Question}",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Promise<Answer>> | Question<Answer> | string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "Question or name to record the Answer as"
      },
      {
        "nullable": null,
        "types": [
          "Promise<Answer> ",
          " Answer"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The Answer to record"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "answerTo",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotes",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotes#answerTo",
    "access": "public",
    "description": " Recalls the answer to a given {@link Question}",
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Answer>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Promise<Answer>> | Question<Answer> | string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "Question or name the Answer was recorded as"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Answer>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 606,
    "kind": "class",
    "name": "TakeNotesUsingAnEmptyNotepad",
    "memberof": "src/screenplay/abilities/TakeNotes.ts",
    "static": true,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotesUsingAnEmptyNotepad",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/abilities/TakeNotes.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 261,
    "interface": false,
    "extends": [
      "TakeNotes"
    ],
    "ignore": true
  },
  {
    "__docId__": 607,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotesUsingAnEmptyNotepad",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotesUsingAnEmptyNotepad#constructor",
    "access": "public",
    "description": " Instantiates the {@link Ability} to {@link TakeNotes}",
    "lineNumber": 269,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "notepad",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "discard",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotesUsingAnEmptyNotepad",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotesUsingAnEmptyNotepad#discard",
    "access": "public",
    "description": " Enables the {@link Actor} to clear the notepad when the {@link SceneFinishes}.",
    "lineNumber": 290,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void> | void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void> ",
        " void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 609,
    "kind": "class",
    "name": "TakeNotesUsingASharedNotepad",
    "memberof": "src/screenplay/abilities/TakeNotes.ts",
    "static": true,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotesUsingASharedNotepad",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/abilities/TakeNotes.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 305,
    "interface": false,
    "extends": [
      "TakeNotes"
    ],
    "ignore": true
  },
  {
    "__docId__": 610,
    "kind": "member",
    "name": "sharedNotepad",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotesUsingASharedNotepad",
    "static": true,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotesUsingASharedNotepad.sharedNotepad",
    "access": "private",
    "description": " ",
    "lineNumber": 205,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/abilities/TakeNotes.ts~TakeNotesUsingASharedNotepad",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/TakeNotes.ts~TakeNotesUsingASharedNotepad#constructor",
    "access": "public",
    "description": " Instantiates the {@link Ability} to {@link TakeNotes}",
    "lineNumber": 325,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "notepad",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 612,
    "kind": "file",
    "name": "src/screenplay/abilities/index.ts",
    "content": "export * from './Discardable';\nexport * from './Initialisable';\nexport * from './TakeNotes';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/abilities/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 613,
    "kind": "file",
    "name": "src/screenplay/activities/ActivityDescriber.ts",
    "content": "import { Name } from '../../model';\nimport { Activity } from '../Activity';\n\n/** @package */\nexport class ActivityDescriber {\n\n    describe(activity: Activity, actor: { name: string }): Name {\n        const template = activity.toString() !== ({}).toString()\n            ? activity.toString()\n            : `#actor performs ${ activity.constructor.name }`;\n\n        return new Name(\n            this.includeActorName(template, actor),\n        );\n    }\n\n    private includeActorName(template: string, actor: { name: string }) {\n        return template.replace('#actor', actor.name);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/activities/ActivityDescriber.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 614,
    "kind": "class",
    "name": "ActivityDescriber",
    "memberof": "src/screenplay/activities/ActivityDescriber.ts",
    "static": true,
    "longname": "src/screenplay/activities/ActivityDescriber.ts~ActivityDescriber",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/screenplay/activities/ActivityDescriber.ts",
    "importStyle": "{ActivityDescriber}",
    "description": null,
    "lineNumber": 12,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 615,
    "kind": "method",
    "name": "describe",
    "memberof": "src/screenplay/activities/ActivityDescriber.ts~ActivityDescriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/ActivityDescriber.ts~ActivityDescriber#describe",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "Activity"
        ],
        "spread": false,
        "optional": false,
        "name": "activity",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Name"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 616,
    "kind": "method",
    "name": "includeActorName",
    "memberof": "src/screenplay/activities/ActivityDescriber.ts~ActivityDescriber",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/ActivityDescriber.ts~ActivityDescriber#includeActorName",
    "access": "private",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "file",
    "name": "src/screenplay/activities/OutcomeMatcher.ts",
    "content": "import { match } from 'tiny-types';\n\nimport { AssertionError, ImplementationPendingError, TestCompromisedError } from '../../errors';\nimport {\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ImplementationPending,\n    ProblemIndication,\n} from '../../model';\n\n/** @package */\nexport class OutcomeMatcher {\n    outcomeFor(error: Error | any): ProblemIndication {\n        return match<Error, ProblemIndication>(error)\n            .when(ImplementationPendingError, _ => new ImplementationPending(error))\n            .when(TestCompromisedError, _ => new ExecutionCompromised(error))\n            .when(AssertionError, _ => new ExecutionFailedWithAssertionError(error))\n            .when(Error, _ =>\n                /AssertionError/.test(error.constructor.name) // mocha\n                    ? new ExecutionFailedWithAssertionError(error)\n                    : new ExecutionFailedWithError(error))\n            .else(_ => new ExecutionFailedWithError(error));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/activities/OutcomeMatcher.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 618,
    "kind": "class",
    "name": "OutcomeMatcher",
    "memberof": "src/screenplay/activities/OutcomeMatcher.ts",
    "static": true,
    "longname": "src/screenplay/activities/OutcomeMatcher.ts~OutcomeMatcher",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/screenplay/activities/OutcomeMatcher.ts",
    "importStyle": "{OutcomeMatcher}",
    "description": null,
    "lineNumber": 20,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "outcomeFor",
    "memberof": "src/screenplay/activities/OutcomeMatcher.ts~OutcomeMatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/OutcomeMatcher.ts~OutcomeMatcher#outcomeFor",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProblemIndication"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 620,
    "kind": "file",
    "name": "src/screenplay/activities/TrackedActivity.ts",
    "content": "import { InteractionFinished, InteractionStarts, TaskFinished, TaskStarts } from '../../events';\nimport { ActivityDetails, ExecutionSuccessful } from '../../model';\nimport { Stage } from '../../stage';\nimport { Activity } from '../Activity';\nimport { AnswersQuestions, PerformsActivities, UsesAbilities } from '../actor';\nimport { Interaction } from '../Interaction';\nimport { ActivityDescriber } from './ActivityDescriber';\nimport { OutcomeMatcher } from './OutcomeMatcher';\n\n/** @package */\nexport class TrackedActivity implements Activity {\n\n    protected static readonly describer = new ActivityDescriber();\n    protected static readonly outcomes = new OutcomeMatcher();\n\n    constructor(\n        protected readonly activity: Activity,\n        protected readonly stage: Stage,\n    ) {\n    }\n\n    performAs(actor: (PerformsActivities | UsesAbilities | AnswersQuestions) & { name: string }): PromiseLike<void> {\n        const\n            sceneId = this.stage.currentSceneId(),\n            activityId = this.stage.assignNewActivityId(),\n            details = new ActivityDetails(TrackedActivity.describer.describe(this.activity, actor));\n\n        const [ activityStarts, activityFinished] = this.activity instanceof Interaction\n            ? [ InteractionStarts, InteractionFinished ]\n            : [ TaskStarts, TaskFinished ];\n\n        return Promise.resolve()\n            .then(() => this.stage.announce(new activityStarts(sceneId, activityId, details, this.stage.currentTime())))\n            .then(() => this.activity.performAs(actor))\n            .then(() => {\n                const outcome = new ExecutionSuccessful();\n                this.stage.announce(new activityFinished(sceneId, activityId, details, outcome, this.stage.currentTime()));\n            })\n            .catch(error => {\n                const outcome = TrackedActivity.outcomes.outcomeFor(error);\n                this.stage.announce(new activityFinished(sceneId, activityId, details, outcome, this.stage.currentTime()));\n\n                throw error;\n            });\n    }\n\n    toString(): string {\n        return this.activity.toString();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/activities/TrackedActivity.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 621,
    "kind": "class",
    "name": "TrackedActivity",
    "memberof": "src/screenplay/activities/TrackedActivity.ts",
    "static": true,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/screenplay/activities/TrackedActivity.ts",
    "importStyle": "{TrackedActivity}",
    "description": null,
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 622,
    "kind": "member",
    "name": "describer",
    "memberof": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "static": true,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity.describer",
    "access": "protected",
    "description": " ",
    "lineNumber": 13,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "member",
    "name": "outcomes",
    "memberof": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "static": true,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity.outcomes",
    "access": "protected",
    "description": " ",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 624,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "PerformsActivities ",
          " UsesAbilities ",
          " AnswersQuestions & undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/activities/TrackedActivity.ts~TrackedActivity#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 47,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 627,
    "kind": "file",
    "name": "src/screenplay/activities/index.ts",
    "content": "export * from './TrackedActivity';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/activities/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 628,
    "kind": "file",
    "name": "src/screenplay/actor/Actor.ts",
    "content": "import { ConfigurationError, TestCompromisedError } from '../../errors';\nimport { ActivityRelatedArtifactGenerated } from '../../events';\nimport { Artifact, Name } from '../../model';\nimport { Ability, AbilityType, Answerable, Discardable, Initialisable } from '../../screenplay';\nimport { Stage } from '../../stage';\nimport { TrackedActivity } from '../activities';\nimport { Activity } from '../Activity';\nimport { Question } from '../Question';\nimport { AnswersQuestions } from './AnswersQuestions';\nimport { CanHaveAbilities } from './CanHaveAbilities';\nimport { CollectsArtifacts } from './CollectsArtifacts';\nimport { PerformsActivities } from './PerformsActivities';\nimport { UsesAbilities } from './UsesAbilities';\n\nexport class Actor implements\n    PerformsActivities,\n    UsesAbilities,\n    CanHaveAbilities<Actor>,\n    AnswersQuestions,\n    CollectsArtifacts\n{\n    // todo: Actor should have execution strategies\n    // todo: the default one executes every activity\n    // todo: there could be a dry-run mode that default to skip strategy\n\n    constructor(\n        public readonly name: string,\n        private readonly stage: Stage,\n        private readonly abilities: Map<AbilityType<Ability>, Ability> = new Map<AbilityType<Ability>, Ability>(),\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Retrieves actor's {@link Ability} to `doSomething`.\n     *\n     *  Please note that this method performs an [`instancepf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof)\n     *  check against abilities given to this actor via {@link Actor#whoCan}. Please also note that {@link Actor#whoCan} performs\n     *  the same check when abilities are assigned to the actor to ensure the actor has at most one instance of a given ability type.\n     *\n     * @param doSomething\n     */\n    abilityTo<T extends Ability>(doSomething: AbilityType<T>): T {\n        const found = this.findAbilityTo(doSomething);\n\n        if (! found) {\n            throw new ConfigurationError(`${ this.name } can't ${ doSomething.name } yet. ` +\n                `Did you give them the ability to do so?`);\n        }\n\n        return found;\n    }\n\n    /**\n     * @desc\n     *  Instructs the actor to attempt to perform a number of activities\n     *  (see {@link Activity}, so either {@link Task}s or {@link Interaction}s)\n     *  one by one.\n     *\n     * @param {...activities: Activity[]} activities\n     * @return {Promise<void>}\n     */\n    attemptsTo(...activities: Activity[]): Promise<void> {\n        return activities\n            .map(activity => new TrackedActivity(activity, this.stage))\n            .reduce((previous: Promise<void>, current: Activity) => {\n                return previous\n                    // synchronise async operations like taking screenshots\n                    .then(() => this.stage.waitForNextCue())\n                    .then(() =>{\n                        /* todo: add an execution strategy */\n                        return current.performAs(this);\n                    });\n            }, this.initialiseAbilities());\n    }\n\n    /**\n     * @desc\n     *  Gives this Actor a list of abilities (see {@link Ability}) they can use\n     *  to interact with the system under test or the test environment.\n     *\n     * @param {...Ability[]} abilities\n     *  A vararg list of abilities to give the actor\n     *\n     * @returns {Actor}\n     *  The actor with newly gained abilities\n     *\n     * @throws {ConfigurationError}\n     *  Throws a ConfigurationError if the actor already has an ability of this type.\n     */\n    whoCan(...abilities: Ability[]): Actor {\n        abilities.forEach(ability => {\n            const abilityType = ability.constructor as AbilityType<Ability>;\n\n            const found = this.findAbilityTo(abilityType);\n\n            if (found) {\n                const description = found.constructor.name === abilityType.name\n                    ? found.constructor.name\n                    : `${ found.constructor.name } (which extends ${ abilityType.name })`\n\n                throw new ConfigurationError(`${ this.name } already has an ability to ${ description }, so you don't need to give it to them again.`);\n            }\n\n            this.abilities.set(ability.constructor as AbilityType<Ability>, ability);\n        });\n\n        return this;\n    }\n\n    /**\n     * @param {Answerable<T>} answerable - a Question<Promise<T>>, Question<T>, Promise<T> or T\n     * @returns {Promise<T>} The answer to the Answerable\n     */\n    answer<T>(answerable: Answerable<T>): Promise<T> {\n        function isAPromise<V>(v: Answerable<V>): v is Promise<V> {\n            return !!(v as any).then;\n        }\n\n        function isDefined<V>(v: Answerable<V>) {\n            return ! (answerable === undefined || answerable === null);\n        }\n\n        if (isDefined(answerable) && isAPromise(answerable)) {\n            return answerable;\n        }\n\n        if (isDefined(answerable) && Question.isAQuestion(answerable)) {\n            return this.answer(answerable.answeredBy(this));\n        }\n\n        return Promise.resolve(answerable as T);\n    }\n\n    /**\n     * @desc\n     *  Announce collection of an {@link Artifact} so that it can be picked up by a {@link StageCrewMember}.\n     *\n     * @param {Artifact} artifact\n     * @param {?(string | Name)} name\n     *\n     * @returns {void}\n     */\n    collect(artifact: Artifact, name?: string | Name): void {\n        this.stage.announce(new ActivityRelatedArtifactGenerated(\n            this.stage.currentSceneId(),\n            this.stage.currentActivityId(),\n            this.nameFrom(name || new Name(artifact.constructor.name)),\n            artifact,\n            this.stage.currentTime(),\n        ));\n    }\n\n    /**\n     * @desc\n     *  Instructs the actor to invoke {@link Discardable#discard} method on any\n     *  {@link Discardable} {@link Ability} it's been configured with.\n     *\n     * @returns {Promise<void>}\n     */\n    dismiss(): Promise<void> {\n        return this.findAbilitiesOfType<Discardable>('discard')\n            .reduce(\n                (previous: Promise<void>, ability: (Discardable & Ability)) =>\n                    previous.then(() => ability.discard()),\n                Promise.resolve(void 0),\n            ) as Promise<void>;\n    }\n\n    /**\n     * @desc\n     *  Returns a human-readable, string representation of this Actor\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        const abilities = Array.from(this.abilities.keys()).map(type => type.name);\n\n        return `Actor(name=${ this.name }, abilities=[${ abilities.join(', ') }])`;\n    }\n\n    /**\n     * @private\n     */\n    private initialiseAbilities(): Promise<void> {\n        return this.findAbilitiesOfType<Initialisable>('initialise', 'isInitialised')\n            .filter(ability => ! ability.isInitialised())\n            .reduce(\n                (previous: Promise<void>, ability: (Initialisable & Ability)) =>\n                    previous\n                        .then(() => ability.initialise())\n                        .catch(error => {\n                            throw new TestCompromisedError(`${ this.name } couldn't initialise the ability to ${ ability.constructor.name }`, error);\n                        }),\n                Promise.resolve(void 0),\n            )\n    }\n\n    /**\n     * @param {...string[]} methodNames\n     * @private\n     */\n    private findAbilitiesOfType<T>(...methodNames: Array<keyof T>): Array<Ability & T> {\n        const abilitiesFrom = (map: Map<AbilityType<Ability>, Ability>): Ability[] =>\n            Array.from(map.values());\n\n        const abilitiesWithDesiredMethods = (ability: Ability & T): boolean =>\n            methodNames.every(methodName => typeof(ability[methodName]) === 'function');\n\n        return abilitiesFrom(this.abilities)\n            .filter(abilitiesWithDesiredMethods) as Array<Ability & T>;\n    }\n\n    /**\n     * @param {string} doSomething\n     * @private\n     */\n    private findAbilityTo<T extends Ability>(doSomething: AbilityType<T>): T | undefined {\n        for (const [abilityType_, ability] of this.abilities) {\n            if (ability instanceof doSomething) {\n                return ability as T;\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * @desc\n     *  Instantiates a {@link Name} based on the string value of the parameter,\n     *  or returns the argument if it's already an instance of {@link Name}.\n     *\n     * @param {string | Name} maybeName\n     * @returns {Name}\n     *\n     * @private\n     */\n    private nameFrom(maybeName: string | Name): Name {\n        return typeof maybeName === 'string'\n            ? new Name(maybeName)\n            : maybeName;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/actor/Actor.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 629,
    "kind": "class",
    "name": "Actor",
    "memberof": "src/screenplay/actor/Actor.ts",
    "static": true,
    "longname": "src/screenplay/actor/Actor.ts~Actor",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{Actor}",
    "description": " ",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 630,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "abilityTo",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#abilityTo",
    "access": "public",
    "description": " Retrieves actor's {@link Ability} to `doSomething`.\n\n Please note that this method performs an [`instancepf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof)\n check against abilities given to this actor via {@link Actor#whoCan}. Please also note that {@link Actor#whoCan} performs\n the same check when abilities are assigned to the actor to ensure the actor has at most one instance of a given ability type.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "doSomething",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "attemptsTo",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#attemptsTo",
    "access": "public",
    "description": " Instructs the actor to attempt to perform a number of activities\n (see {@link Activity}, so either {@link Task}s or {@link Interaction}s)\n one by one.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "...activities: Activity[]"
        ],
        "spread": true,
        "optional": false,
        "name": "activities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "whoCan",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#whoCan",
    "access": "public",
    "description": " Gives this Actor a list of abilities (see {@link Ability}) they can use\n to interact with the system under test or the test environment.",
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Actor}\n The actor with newly gained abilities"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...Ability[]"
        ],
        "spread": true,
        "optional": false,
        "name": "abilities",
        "description": "A vararg list of abilities to give the actor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": "The actor with newly gained abilities"
    },
    "throws": [
      {
        "types": [
          "ConfigurationError"
        ],
        "description": "Throws a ConfigurationError if the actor already has an ability of this type."
      }
    ]
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "answer",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#answer",
    "access": "public",
    "description": "",
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<T>} The answer to the Answerable"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "answerable",
        "description": "a Question<Promise<T>>, Question<T>, Promise<T> or T"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<T>"
      ],
      "spread": false,
      "description": "The answer to the Answerable"
    }
  },
  {
    "__docId__": 635,
    "kind": "method",
    "name": "collect",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#collect",
    "access": "public",
    "description": " Announce collection of an {@link Artifact} so that it can be picked up by a {@link StageCrewMember}.",
    "lineNumber": 238,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Artifact"
        ],
        "spread": false,
        "optional": false,
        "name": "artifact",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "string ",
          " Name"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "dismiss",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#dismiss",
    "access": "public",
    "description": " Instructs the actor to invoke {@link Discardable#discard} method on any\n {@link Discardable} {@link Ability} it's been configured with.",
    "lineNumber": 266,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#toString",
    "access": "public",
    "description": " Returns a human-readable, string representation of this Actor",
    "lineNumber": 292,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "initialiseAbilities",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#initialiseAbilities",
    "access": "private",
    "description": "",
    "lineNumber": 312,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "findAbilitiesOfType",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#findAbilitiesOfType",
    "access": "private",
    "description": "",
    "lineNumber": 343,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string[]"
        ],
        "spread": true,
        "optional": false,
        "name": "methodNames",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 640,
    "kind": "method",
    "name": "findAbilityTo",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#findAbilityTo",
    "access": "private",
    "description": "",
    "lineNumber": 371,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "doSomething",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "nameFrom",
    "memberof": "src/screenplay/actor/Actor.ts~Actor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/actor/Actor.ts~Actor#nameFrom",
    "access": "private",
    "description": " Instantiates a {@link Name} based on the string value of the parameter,\n or returns the argument if it's already an instance of {@link Name}.",
    "lineNumber": 404,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Name}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Name"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Name"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 642,
    "kind": "file",
    "name": "src/screenplay/actor/AnswersQuestions.ts",
    "content": "import { Answerable } from '../Answerable';\n\n/**\n * @desc\n *  Enables the {@link Actor} to answer a {@link Question} about the system under test\n *\n * @public\n */\nexport interface AnswersQuestions {\n    answer<T>(knownUnknown: Answerable<T>): Promise<T>;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/actor/AnswersQuestions.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 643,
    "kind": "class",
    "name": "AnswersQuestions",
    "memberof": "src/screenplay/actor/AnswersQuestions.ts",
    "static": true,
    "longname": "src/screenplay/actor/AnswersQuestions.ts~AnswersQuestions",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{AnswersQuestions}",
    "description": " Enables the {@link Actor} to answer a {@link Question} about the system under test",
    "lineNumber": 16,
    "interface": true
  },
  {
    "__docId__": 644,
    "kind": "file",
    "name": "src/screenplay/actor/CanHaveAbilities.ts",
    "content": "import { Ability } from '../Ability';\nimport { UsesAbilities } from './UsesAbilities';\n\n/**\n * @desc\n *  Enables the {@link Actor} to have an {@link Ability} or Abilities to perform some {@link Activity}.\n *\n * @public\n */\nexport interface CanHaveAbilities<Returned_Type = UsesAbilities> {\n    /**\n     * @param {Ability[]} abilities\n     * @returns {Actor}\n     */\n    whoCan(...abilities: Ability[]): Returned_Type;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/actor/CanHaveAbilities.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 645,
    "kind": "class",
    "name": "CanHaveAbilities",
    "memberof": "src/screenplay/actor/CanHaveAbilities.ts",
    "static": true,
    "longname": "src/screenplay/actor/CanHaveAbilities.ts~CanHaveAbilities",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{CanHaveAbilities}",
    "description": " Enables the {@link Actor} to have an {@link Ability} or Abilities to perform some {@link Activity}.",
    "lineNumber": 17,
    "interface": true
  },
  {
    "__docId__": 646,
    "kind": "file",
    "name": "src/screenplay/actor/CollectsArtifacts.ts",
    "content": "import { Artifact, Name } from '../../model';\n\n/**\n * @desc\n *  Enables the {@link Actor} to collect {@link Artifact}s while the scenario is being executed\n *\n * @public\n */\nexport interface CollectsArtifacts {\n    /**\n     * @desc\n     * Makes the {@link Actor} collect an {@link Artifact} so that it's included in the test report.\n     *\n     * @param {Artifact} artifact - The artifact to be collected, such as {@link JSONData}\n     * @param {Name} [name] - The name of the artifact to make it easy to recognise in the test report\n     */\n    collect(artifact: Artifact, name?: Name): void;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/actor/CollectsArtifacts.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 647,
    "kind": "class",
    "name": "CollectsArtifacts",
    "memberof": "src/screenplay/actor/CollectsArtifacts.ts",
    "static": true,
    "longname": "src/screenplay/actor/CollectsArtifacts.ts~CollectsArtifacts",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{CollectsArtifacts}",
    "description": " Enables the {@link Actor} to collect {@link Artifact}s while the scenario is being executed",
    "lineNumber": 16,
    "interface": true
  },
  {
    "__docId__": 648,
    "kind": "file",
    "name": "src/screenplay/actor/PerformsActivities.ts",
    "content": "import { Activity } from '../Activity';\n\n/**\n * @desc\n *  Enables the {@link Actor} to perform an {@link Activity}, such as a {@link Task} or an {@link Interaction}\n *\n * @public\n */\nexport interface PerformsActivities {\n    attemptsTo(...tasks: Activity[]): Promise<void>;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/actor/PerformsActivities.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 649,
    "kind": "class",
    "name": "PerformsActivities",
    "memberof": "src/screenplay/actor/PerformsActivities.ts",
    "static": true,
    "longname": "src/screenplay/actor/PerformsActivities.ts~PerformsActivities",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{PerformsActivities}",
    "description": " Enables the {@link Actor} to perform an {@link Activity}, such as a {@link Task} or an {@link Interaction}",
    "lineNumber": 16,
    "interface": true
  },
  {
    "__docId__": 650,
    "kind": "file",
    "name": "src/screenplay/actor/UsesAbilities.ts",
    "content": "import { Ability } from '../Ability';\nimport { AbilityType } from '../AbilityType';\n\n/**\n * @desc\n *  Enables the {@link Actor} to use an {@link Ability} to perform some {@link Activity}.\n *\n * @public\n */\nexport interface UsesAbilities {\n\n    /**\n     * @desc\n     *  Grants access to the Actor's ability\n     *\n     * @param {AbilityType<T extends Ability>} doSomething\n     * @returns {T}\n     */\n    abilityTo<T extends Ability>(doSomething: AbilityType<T>): T;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/actor/UsesAbilities.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 651,
    "kind": "class",
    "name": "UsesAbilities",
    "memberof": "src/screenplay/actor/UsesAbilities.ts",
    "static": true,
    "longname": "src/screenplay/actor/UsesAbilities.ts~UsesAbilities",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/actor",
    "importStyle": "{UsesAbilities}",
    "description": " Enables the {@link Actor} to use an {@link Ability} to perform some {@link Activity}.",
    "lineNumber": 17,
    "interface": true
  },
  {
    "__docId__": 652,
    "kind": "file",
    "name": "src/screenplay/actor/index.ts",
    "content": "export * from './Actor';\nexport * from './AnswersQuestions';\nexport * from './CanHaveAbilities';\nexport * from './CollectsArtifacts';\nexport * from './PerformsActivities';\nexport * from './UsesAbilities';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/actor/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 653,
    "kind": "file",
    "name": "src/screenplay/index.ts",
    "content": "export * from './abilities';\nexport * from './Ability';\nexport * from './AbilityType';\nexport * from './Activity';\nexport * from './actor';\nexport * from './Answerable';\nexport * from './Interaction';\nexport * from './interactions';\nexport * from './Question';\nexport * from './questions';\nexport * from './Task';\nexport * from './tasks';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 654,
    "kind": "file",
    "name": "src/screenplay/interactions/Log.ts",
    "content": "import { formatted } from '../../io';\nimport { inspected } from '../../io/inspected';\nimport { Name } from '../../model';\nimport { LogEntry } from '../../model/artifacts';\nimport { AnswersQuestions, CollectsArtifacts, UsesAbilities } from '../actor';\nimport { Answerable } from '../Answerable';\nimport { Interaction } from '../Interaction';\n\n/**\n * @desc\n *  Enables the {@link Actor} to log arbitrary static values and answers to {@link Question}s,\n *  so that they can be printed to the terminal by the [`ConsoleReporter`](/modules/console-reporter/)\n *  and attached to the HTML report by the [`SerenityBDDReporter`](/modules/serenity-bdd/).\n *\n * @example\n *  import { Log } from '@serenity-js/core';\n *  import { Website } from '@serenity-js/protractor';\n *\n *  actor.attemptsTo(\n *      Log.the('Current page', Website.title(), Website.url()),\n *  );\n *\n * @extends {Interaction}\n */\nexport class Log extends Interaction {\n\n    /**\n     * @desc\n     *  Instantiates a new {@link Log} {@link Interaction}.\n     *\n     * @param {...items: any[]} items\n     *  The items to be logged\n     * @returns {Interaction}\n     */\n    static the(...items: Array<Answerable<any>>): Interaction {\n        return new Log(items);\n    }\n\n    /**\n     * @param {...items: any[]} items\n     *  The items to be logged\n     */\n    constructor(\n        private readonly items: Array<Answerable<any>>,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions & CollectsArtifacts} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link UsesAbilities}\n     * @see {@link AnswersQuestions}\n     * @see {@link CollectsArtifacts}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions & CollectsArtifacts): Promise<void> {\n        return Promise\n            .all(this.items.map(item => actor.answer(item)))\n            .then(items =>\n                items.forEach((item, i) =>\n                    actor.collect(LogEntry.fromJSON({ data: inspected(item) }), new Name(inspected(this.items[i]))),\n                ),\n            );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return `#actor logs: ${ this.items.map(item => formatted`${ item }`).join(', ') }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/interactions/Log.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 655,
    "kind": "class",
    "name": "Log",
    "memberof": "src/screenplay/interactions/Log.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Log.ts~Log",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/interactions",
    "importStyle": "{Log}",
    "description": " Enables the {@link Actor} to log arbitrary static values and answers to {@link Question}s,\n so that they can be printed to the terminal by the [`ConsoleReporter`](/modules/console-reporter/)\n and attached to the HTML report by the [`SerenityBDDReporter`](/modules/serenity-bdd/).",
    "examples": [
      " import { Log } from '@serenity-js/core';\n import { Website } from '@serenity-js/protractor';\n\n actor.attemptsTo(\n     Log.the('Current page', Website.title(), Website.url()),\n );"
    ],
    "lineNumber": 32,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 656,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/interactions/Log.ts~Log",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Log.ts~Log.the",
    "access": "public",
    "description": " Instantiates a new {@link Log} {@link Interaction}.",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...items: any[]"
        ],
        "spread": true,
        "optional": false,
        "name": "items",
        "description": "The items to be logged"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 657,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Log.ts~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Log.ts~Log#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "...items: any[]"
        ],
        "spread": true,
        "optional": false,
        "name": "items",
        "description": "The items to be logged"
      }
    ]
  },
  {
    "__docId__": 658,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Log.ts~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Log.ts~Log#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Interaction}.",
    "see": [
      "{@link Actor}",
      "{@link UsesAbilities}",
      "{@link AnswersQuestions}",
      "{@link CollectsArtifacts}"
    ],
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions & CollectsArtifacts"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Log.ts~Log",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Log.ts~Log#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 660,
    "kind": "file",
    "name": "src/screenplay/interactions/See.ts",
    "content": "import { AnswersQuestions, Interaction, Question } from '..';\n\nexport type Assertion<A> = (actual: A) => void;\n\n/**\n * @deprecated\n *  Use the <a href=\"/modules/assertions\"><code>@serenity-js/assertions</code> module</a> instead\n */\nexport class See<S> extends Interaction {\n    static if<T>(question: Question<T>, assertion: Assertion<T>): Interaction {\n        return new See<T>(question, assertion);\n    }\n\n    constructor(\n        private question: Question<S>,\n        private assert: Assertion<S>,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Interaction}.\n     *\n     * @param {AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link AnswersQuestions}\n     */\n    performAs(actor: AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.question).then(this.assert);\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return `#actor checks ${this.question}`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/interactions/See.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 661,
    "kind": "class",
    "name": "See",
    "memberof": "src/screenplay/interactions/See.ts",
    "static": true,
    "longname": "src/screenplay/interactions/See.ts~See",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/interactions",
    "importStyle": "{See}",
    "description": "",
    "lineNumber": 23,
    "deprecated": " Use the <a href=\"/modules/assertions\"><code>@serenity-js/assertions</code> module</a> instead",
    "interface": false,
    "extends": [
      "src/screenplay/interactions/...js~Interaction"
    ]
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "if",
    "memberof": "src/screenplay/interactions/See.ts~See",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/See.ts~See.if",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Assertion"
        ],
        "spread": false,
        "optional": false,
        "name": "assertion",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 663,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/See.ts~See",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/See.ts~See#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 664,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/See.ts~See",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/See.ts~See#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Interaction}.",
    "see": [
      "{@link Actor}",
      "{@link AnswersQuestions}"
    ],
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/See.ts~See",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/See.ts~See#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 666,
    "kind": "file",
    "name": "src/screenplay/interactions/TakeNote.ts",
    "content": "import { formatted } from '../../io';\nimport { TakeNotes } from '../abilities';\nimport { AnswersQuestions, UsesAbilities } from '../actor';\nimport { Interaction } from '../Interaction';\nimport { Question } from '../Question';\n\n/**\n * @desc\n *  Enables the {@link Actor} to remember an answer to a given {@link Question},\n *  and recall it later.\n *\n * @example <caption>Using default subject name based on the name of the question</caption>\n *  import { actorCalled, Note, TakeNote, TakeNotes } from '@serenity-js/core'\n *  import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n *  import { by, protractor } from 'protractor';\n *\n *  class Vouchers {\n *      static code             = Target.the('voucher code').located(by.id('voucher'));\n *      static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n *  }\n *\n *  const actor = actorCalled('Noah').whoCan(\n *      TakeNotes.usingAnEmptyNotepad(),\n *      BrowseTheWeb.using(protractor.browser),\n *  );\n *\n *  actor.attemptsTo(\n *      TakeNote.of(Text.of(Vouchers.code)),\n *      // ... add the product to a basket, go to checkout, etc.\n *      Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n *  );\n *\n * @example <caption>Using custom subject name</caption>\n *  actor.attemptsTo(\n *      TakeNote.of(Text.of(Vouchers.code)).as('voucher code'),\n *      // ... add the product to a basket, go to checkout, etc.\n *      Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of('voucher code'))),\n *  );\n *\n * @see {@link Note}\n * @see {@link TakeNotes}\n *\n * @extends {Interaction}\n */\nexport class TakeNote<Answer> extends Interaction {\n\n    /**\n     * @desc\n     *  Instructs the {@link Actor} to remember the answer to a given question\n     *\n     * @param {Question<Promise<A>> | Question<A>} question\n     *\n     * @returns {TakeNote<A>}\n     */\n    static of<A>(question: Question<Promise<A>> | Question<A>): TakeNote<A> {\n        return new TakeNote<A>(question);\n    }\n\n    /**\n     * @param {Question<Promise<Answer>> | Question<Answer>} question\n     * @param {string} subject\n     */\n    constructor(\n        private readonly question: Question<Promise<Answer>> | Question<Answer>,\n        private readonly subject: string = question.toString()\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Sets a custom subject name to remember the answer as.\n     *\n     * @param {string} subject\n     * @returns {TakeNote<Answer>}\n     */\n    as(subject: string): TakeNote<Answer> {\n        return new TakeNote<Answer>(this.question, subject);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link UsesAbilities}\n     * @see {@link AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.question)\n            .then(answer => TakeNotes.as(actor).record(this.subject, answer));\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor takes note of ${ this.subject }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/interactions/TakeNote.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 667,
    "kind": "class",
    "name": "TakeNote",
    "memberof": "src/screenplay/interactions/TakeNote.ts",
    "static": true,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/interactions",
    "importStyle": "{TakeNote}",
    "description": " Enables the {@link Actor} to remember an answer to a given {@link Question},\n and recall it later.",
    "examples": [
      "<caption>Using default subject name based on the name of the question</caption>\n import { actorCalled, Note, TakeNote, TakeNotes } from '@serenity-js/core'\n import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n import { by, protractor } from 'protractor';\n\n class Vouchers {\n     static code             = Target.the('voucher code').located(by.id('voucher'));\n     static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n }\n\n const actor = actorCalled('Noah').whoCan(\n     TakeNotes.usingAnEmptyNotepad(),\n     BrowseTheWeb.using(protractor.browser),\n );\n\n actor.attemptsTo(\n     TakeNote.of(Text.of(Vouchers.code)),\n     // ... add the product to a basket, go to checkout, etc.\n     Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n );",
      "<caption>Using custom subject name</caption>\n actor.attemptsTo(\n     TakeNote.of(Text.of(Vouchers.code)).as('voucher code'),\n     // ... add the product to a basket, go to checkout, etc.\n     Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of('voucher code'))),\n );"
    ],
    "see": [
      "{@link Note}",
      "{@link TakeNotes}"
    ],
    "lineNumber": 52,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 668,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote.of",
    "access": "public",
    "description": " Instructs the {@link Actor} to remember the answer to a given question",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TakeNote<A>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Promise<A>> | Question<A>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TakeNote<A>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 669,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Promise<Answer>> | Question<Answer>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "as",
    "memberof": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote#as",
    "access": "public",
    "description": " Sets a custom subject name to remember the answer as.",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TakeNote<Answer>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TakeNote<Answer>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Interaction}.",
    "see": [
      "{@link Actor}",
      "{@link UsesAbilities}",
      "{@link AnswersQuestions}"
    ],
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/TakeNote.ts~TakeNote",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/TakeNote.ts~TakeNote#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 673,
    "kind": "file",
    "name": "src/screenplay/interactions/index.ts",
    "content": "export * from './Log';\nexport * from './See';\nexport * from './TakeNote';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/interactions/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 674,
    "kind": "file",
    "name": "src/screenplay/questions/Check.ts",
    "content": "import { formatted } from '../../io';\nimport { Activity } from '../Activity';\nimport { AnswersQuestions, PerformsActivities } from '../actor';\nimport { Answerable } from '../Answerable';\nimport { Task } from '../Task';\nimport { Expectation } from './Expectation';\nimport { ExpectationMet } from './expectations';\n\n/**\n * @desc\n *  A control flow statement that enables the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n *  either to choose whether or not to perform a series of activities,\n *  or to choose which of the two provided series of activities to perform.\n *\n * @example <caption>Choose from two alternatives</caption>\n *  import { equals } from '@serenity-js/assertions';\n *  import { Check } from '@serenity-js/core';\n *\n *  actor.attemptsTo(\n *      Check.whether(process.env.MODE, equals('prod'))\n *          .andIfSo(\n *              LogInAsProdUser(),\n *          )\n *          .otherwise(\n *              LogInAsTestUser(),\n *          )\n *  );\n *\n * @example <caption>Choose whether or not to perform an activity</caption>\n *  import { equals } from '@serenity-js/assertions';\n *  import { Check } from '@serenity-js/core';\n *  import { isDisplayed } from '@serenity-js/protractor';\n *\n *  actor.attemptsTo(\n *      Check.whether(NewsletterModal(), isDisplayed())\n *          .andIfSo(\n *              DismissModal(),\n *          )\n *  );\n *\n * @extends {@serenity-js/core/lib/screenplay~Task}\n *\n * @see https://en.wikipedia.org/wiki/Control_flow\n */\nexport class Check<Actual> extends Task {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    static whether<A>(actual: Answerable<A>, expectation: Expectation<any, A>) {\n        return {\n            andIfSo: (...activities: Activity[]) => new Check(actual, expectation, activities),\n        };\n    }\n\n    /**\n     *\n     * @param actual\n     * @param expectation\n     * @param activities\n     * @param alternativeActivities\n     */\n    constructor(\n        private readonly actual: Answerable<Actual>,\n        private readonly expectation: Expectation<any, Actual>,\n        private readonly activities: Activity[],\n        private readonly alternativeActivities: Activity[] = [],\n    ) {\n        super();\n    }\n\n    /**\n     * @param {...@serenity-js/core/lib/screenplay~Activity[]} alternativeActivities\n     * @return {@serenity-js/core/lib/screenplay~Task}\n     */\n    otherwise(...alternativeActivities: Activity[]): Task {\n        return new Check<Actual>(this.actual, this.expectation, this.activities, alternativeActivities);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Task}.\n     *\n     * @param {AnswersQuestions & PerformsActivities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~PerformsActivities}\n     */\n    performAs(actor: AnswersQuestions & PerformsActivities): PromiseLike<void> {\n        return Promise.all([\n            actor.answer(this.actual),\n            actor.answer(this.expectation),\n        ]).then(([actual, expectation]) =>\n            expectation(actual).then(outcome =>\n                outcome instanceof ExpectationMet\n                    ? actor.attemptsTo(...this.activities)\n                    : actor.attemptsTo(...this.alternativeActivities),\n            ),\n        );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor checks whether ${ this.actual } does ${ this.expectation }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/Check.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 675,
    "kind": "class",
    "name": "Check",
    "memberof": "src/screenplay/questions/Check.ts",
    "static": true,
    "longname": "src/screenplay/questions/Check.ts~Check",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions",
    "importStyle": "{Check}",
    "description": " A control flow statement that enables the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n either to choose whether or not to perform a series of activities,\n or to choose which of the two provided series of activities to perform.",
    "examples": [
      "<caption>Choose from two alternatives</caption>\n import { equals } from '@serenity-js/assertions';\n import { Check } from '@serenity-js/core';\n\n actor.attemptsTo(\n     Check.whether(process.env.MODE, equals('prod'))\n         .andIfSo(\n             LogInAsProdUser(),\n         )\n         .otherwise(\n             LogInAsTestUser(),\n         )\n );",
      "<caption>Choose whether or not to perform an activity</caption>\n import { equals } from '@serenity-js/assertions';\n import { Check } from '@serenity-js/core';\n import { isDisplayed } from '@serenity-js/protractor';\n\n actor.attemptsTo(\n     Check.whether(NewsletterModal(), isDisplayed())\n         .andIfSo(\n             DismissModal(),\n         )\n );"
    ],
    "see": [
      "https://en.wikipedia.org/wiki/Control_flow"
    ],
    "lineNumber": 52,
    "interface": false,
    "extends": [
      "Task"
    ]
  },
  {
    "__docId__": 676,
    "kind": "method",
    "name": "whether",
    "memberof": "src/screenplay/questions/Check.ts~Check",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Check.ts~Check.whether",
    "access": "public",
    "description": " ",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"andIfSo\": *}"
      ]
    }
  },
  {
    "__docId__": 677,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Check.ts~Check",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Check.ts~Check#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "activities",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alternativeActivities",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 678,
    "kind": "method",
    "name": "otherwise",
    "memberof": "src/screenplay/questions/Check.ts~Check",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Check.ts~Check#otherwise",
    "access": "public",
    "description": "",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "Activity[]"
        ],
        "spread": false,
        "optional": false,
        "name": "alternativeActivities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Task"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/questions/Check.ts~Check",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Check.ts~Check#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Task}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~PerformsActivities}"
    ],
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & PerformsActivities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/Check.ts~Check",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Check.ts~Check#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 681,
    "kind": "file",
    "name": "src/screenplay/questions/Expectation.ts",
    "content": "import { formatted } from '../../io';\nimport { Answerable, AnswersQuestions, Question } from '../';\nimport { ExpectationMet, ExpectationNotMet, ExpectationOutcome  } from './expectations';\n\n/**\n * @public\n *\n * @typedef {function(actual: A, expected: E) => boolean} Predicate<A,E>\n */\nexport type Predicate<A, E> = (actual: A, expected: E) => boolean;\n\n/**\n * @desc\n *  Defines an expectation to be used with [assertions](/modules/assertions)\n *  and {@link Question}s like {@link List}.\n *\n * @extends {Question}\n */\nexport abstract class Expectation<Expected, Actual = Expected>\n    extends Question<(actual: Actual) => Promise<ExpectationOutcome<Expected, Actual>>>\n{\n\n    /**\n     * @desc\n     *  Used to define a simple {@link Expectation}\n     *\n     * @example\n     *  import { actorCalled, Expectation } from '@serenity-js/core';\n     *  import { Ensure } from '@serenity-js/assertions';\n     *\n     *  function isDivisibleBy(expected: Answerable<number>): Expectation<number> {\n     *      return Expectation.thatActualShould<number, number>('have value divisible by', expected)\n     *          .soThat((actualValue, expectedValue) => actualValue % expectedValue === 0);\n     *  }\n     *\n     *  actorCalled('Erica').attemptsTo(\n     *      Ensure.that(4, isDivisibleBy(2)),\n     *  );\n     *\n     * @param {string} relationshipName\n     * @param {@serenity-js/core/lib/screenplay~Answerable<E>} expectedValue\n     *\n     * @returns {\"soThat\": function(predicate: Predicate<A,E>): Expectation<E, A>}\n     */\n    static thatActualShould<E, A>(relationshipName: string, expectedValue: Answerable<E>): {\n        soThat: (predicate: Predicate<A, E>) => Expectation<E, A>,\n    } {\n        return ({\n            soThat: (predicate: Predicate<A, E>): Expectation<E, A> => {\n                return new DynamicallyGeneratedExpectation<E, A>(relationshipName, predicate, expectedValue);\n            },\n        });\n    }\n\n    /**\n     * @desc\n     *  Used to compose {@link Expectation}s.\n     *\n     * @example\n     *  import { actorCalled, Expectation } from '@serenity-js/core';\n     *  import { Ensure, and, or, isGreaterThan, isLessThan, equals  } from '@serenity-js/assertions';\n     *\n     *  function isWithin(lowerBound: number, upperBound: number) {\n     *      return Expectation\n     *          .to(`have value within ${ lowerBound } and ${ upperBound }`)\n     *          .soThatActual(and(\n     *              or(isGreaterThan(lowerBound), equals(lowerBound)),\n     *              or(isLessThan(upperBound), equals(upperBound)),\n     *          ));\n     *  }\n     *\n     *  actorCalled('Erica').attemptsTo(\n     *      Ensure.that(5, isWithin(3, 6)),\n     *  );\n     *\n     * @param {string} relationshipName\n     *\n     * @returns {\"soThat\": function(...expectations: Array<Expectation<any, A>>): Expectation<any, A>}\n     */\n    static to<A>(relationshipName: string): {\n        soThatActual: (...expectations: Array<Expectation<any, A>>) => Expectation<any, A>,\n    } {\n        return {\n            soThatActual: (expectation: Expectation<any, A>): Expectation<any, A> => {\n                return new ExpectationAlias<A>(relationshipName, expectation);\n            },\n        };\n    }\n\n    abstract answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<ExpectationOutcome<Expected, Actual>>;\n}\n\n/**\n * @package\n */\nclass DynamicallyGeneratedExpectation<Expected, Actual> extends Expectation<Expected, Actual> {\n\n    constructor(\n        private readonly description: string,\n        private readonly predicate: Predicate<Actual, Expected>,\n        private readonly expectedValue: Answerable<Expected>,\n    ) {\n        super(`${ description } ${ formatted `${ expectedValue }` }`);\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<ExpectationOutcome<Expected, Actual>> {\n\n        return (actual: Actual) => actor.answer(this.expectedValue)\n            .then(expected => {\n                return this.predicate(actual, expected)\n                    ? new ExpectationMet(this.toString(), expected, actual)\n                    : new ExpectationNotMet(this.toString(), expected, actual);\n            });\n    }\n}\n\n/**\n * @package\n */\nclass ExpectationAlias<Actual> extends Expectation<any, Actual> {\n\n    constructor(\n        subject: string,\n        private readonly expectation: Expectation<any, Actual>,\n    ) {\n        super(subject);\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Actual) => Promise<ExpectationOutcome<any, Actual>> {\n\n        return (actual: Actual) =>\n            this.expectation.answeredBy(actor)(actual).then(_ => _ instanceof ExpectationMet\n                ? new ExpectationMet(this.subject, _.expected, _.actual)\n                : new ExpectationNotMet(_.message, _.expected, _.actual));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/Expectation.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 682,
    "kind": "typedef",
    "name": "Predicate<A,E>",
    "memberof": "src/screenplay/questions/Expectation.ts",
    "static": true,
    "longname": "src/screenplay/questions/Expectation.ts~Predicate<A,E>",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "type": {
      "types": [
        "function(actual: A, expected: E) => boolean"
      ],
      "optional": false,
      "name": "Predicate<A,E>"
    }
  },
  {
    "__docId__": 683,
    "kind": "class",
    "name": "Expectation",
    "memberof": "src/screenplay/questions/Expectation.ts",
    "static": true,
    "longname": "src/screenplay/questions/Expectation.ts~Expectation",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions",
    "importStyle": "{Expectation}",
    "description": " Defines an expectation to be used with [assertions](/modules/assertions)\n and {@link Question}s like {@link List}.",
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "Question"
    ]
  },
  {
    "__docId__": 684,
    "kind": "method",
    "name": "thatActualShould",
    "memberof": "src/screenplay/questions/Expectation.ts~Expectation",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Expectation.ts~Expectation.thatActualShould",
    "access": "public",
    "description": " Used to define a simple {@link Expectation}",
    "examples": [
      " import { actorCalled, Expectation } from '@serenity-js/core';\n import { Ensure } from '@serenity-js/assertions';\n\n function isDivisibleBy(expected: Answerable<number>): Expectation<number> {\n     return Expectation.thatActualShould<number, number>('have value divisible by', expected)\n         .soThat((actualValue, expectedValue) => actualValue % expectedValue === 0);\n }\n\n actorCalled('Erica').attemptsTo(\n     Ensure.that(4, isDivisibleBy(2)),\n );"
    ],
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{\"soThat\": function(predicate: Predicate<A,E>): Expectation<E, A>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "relationshipName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Answerable<E>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectedValue",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "\"soThat\": function(predicate: Predicate<A,E>): Expectation<E, A>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 685,
    "kind": "method",
    "name": "to",
    "memberof": "src/screenplay/questions/Expectation.ts~Expectation",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Expectation.ts~Expectation.to",
    "access": "public",
    "description": " Used to compose {@link Expectation}s.",
    "examples": [
      " import { actorCalled, Expectation } from '@serenity-js/core';\n import { Ensure, and, or, isGreaterThan, isLessThan, equals  } from '@serenity-js/assertions';\n\n function isWithin(lowerBound: number, upperBound: number) {\n     return Expectation\n         .to(`have value within ${ lowerBound } and ${ upperBound }`)\n         .soThatActual(and(\n             or(isGreaterThan(lowerBound), equals(lowerBound)),\n             or(isLessThan(upperBound), equals(upperBound)),\n         ));\n }\n\n actorCalled('Erica').attemptsTo(\n     Ensure.that(5, isWithin(3, 6)),\n );"
    ],
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{\"soThat\": function(...expectations: Array<Expectation<any, A>>): Expectation<any, A>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "relationshipName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "\"soThat\": function(...expectations: Array<Expectation<any, A>>): Expectation<any, A>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 686,
    "kind": "class",
    "name": "DynamicallyGeneratedExpectation",
    "memberof": "src/screenplay/questions/Expectation.ts",
    "static": true,
    "longname": "src/screenplay/questions/Expectation.ts~DynamicallyGeneratedExpectation",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/questions/Expectation.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 186,
    "interface": false,
    "extends": [
      "Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 687,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Expectation.ts~DynamicallyGeneratedExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Expectation.ts~DynamicallyGeneratedExpectation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true
  },
  {
    "__docId__": 688,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Expectation.ts~DynamicallyGeneratedExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Expectation.ts~DynamicallyGeneratedExpectation#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 689,
    "kind": "class",
    "name": "ExpectationAlias",
    "memberof": "src/screenplay/questions/Expectation.ts",
    "static": true,
    "longname": "src/screenplay/questions/Expectation.ts~ExpectationAlias",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/questions/Expectation.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 230,
    "interface": false,
    "extends": [
      "Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 690,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Expectation.ts~ExpectationAlias",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Expectation.ts~ExpectationAlias#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Expectation.ts~ExpectationAlias",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Expectation.ts~ExpectationAlias#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 692,
    "kind": "file",
    "name": "src/screenplay/questions/List.ts",
    "content": "import { formatted } from '../../io';\nimport { AnswersQuestions, UsesAbilities } from '../actor';\nimport { Answerable } from '../Answerable';\nimport { Question } from '../Question';\nimport { Expectation } from './Expectation';\nimport { ArrayListAdapter, ListAdapter } from './lists';\nimport { MetaQuestion } from './MetaQuestion';\n\n/**\n * @desc\n *  Filters an {@link Answerable} list of items based on the criteria provided.\n *  Instantiate via {@link List.of}\n *\n * @example <caption>Example data structure</caption>\n *  interface TestAccount {\n *      username: string;\n *      role: string;\n *      environments: string[];\n *  }\n *\n *  const testAccounts: TestAccount[] = [\n *      {\n *          \"username\": \"tester.one@example.com\",\n *          \"role\": \"test-automation\"\n *          \"environments\": [ \"dev\", \"sit\" ],\n *      },\n *      {\n *          \"username\": \"tester.two@example.com\",\n *          \"role\": \"test-automation\"\n *          \"environments\": [ \"dev\", \"sit\", \"prod\" ],\n *      },\n *      {\n *          \"username\": \"release.bot@example.com\",\n *          \"role\": \"release-automation\"\n *          \"environments\": [ \"dev\", \"sit\", \"prod\" ],\n *      }\n *  ]\n *\n * @example <caption>Using with Property</caption>\n *  import { actorCalled, List, Property } from '@serenity-js/core';\n *  import { contain, Ensure, equals } from '@serenity-js/assertions';\n *\n *  actorCalled('Lisa').attemptsTo(\n *      Ensure.that(\n *          Property.of(\n *              List.of(testAccounts)\n *                  .where(Property.at<TestAccount>().environments, contain('prod'))\n *                  .where(Property.at<TestAccount>().role, equals('test-automation'))\n *                  .first()\n *              ).username,\n *          equals('tester.two@example.com')\n *      )\n *  )\n *\n * @extends {Question}\n * @see {@link MetaQuestion}\n */\nexport class List<\n    List_Adapter_Type extends ListAdapter<Item_Type, Collection_Type, Item_Return_Type, Collection_Return_Type>,\n    Item_Type,\n    Collection_Type,\n    Item_Return_Type = Item_Type,\n    Collection_Return_Type = Collection_Type,\n>\n    extends Question<Collection_Return_Type>\n{\n\n    /**\n     * @desc\n     *  Instantiates a new {@link List} configured to support standard {@link Array}.\n     *\n     *  **Please note:** Don't use `List.of` to wrap `Question<ElementArrayFinder>` returned by\n     *  [`Target.all`](/modules/protractor/class/src/screenplay/questions/targets/Target.ts~Target.html#static-method-all).\n     *  Instead, use [`Target.all(...).located(...).where(...)`](/modules/protractor/class/src/screenplay/questions/targets/Target.ts~Target.html),\n     *  which uses a Protractor-specific {@link ListAdapter}.\n     *\n     * @param {Answerable<Item_Type[]>} items\n     *\n     * @returns {List<ArrayListAdapter<Item_Type>, Item_Type, Item_Type[], Promise<Item_Type>, Promise<Item_Type[]>>}\n     */\n    static of<Item_Type>(items: Answerable<Item_Type[]>): List<ArrayListAdapter<Item_Type>, Item_Type, Item_Type[], Promise<Item_Type>, Promise<Item_Type[]>> {\n        return new List<ArrayListAdapter<Item_Type>, Item_Type, Item_Type[], Promise<Item_Type>, Promise<Item_Type[]>>(\n            new ArrayListAdapter(items)\n        );\n    }\n\n    /**\n     * @param {List_Adapter_Type} collection\n     */\n    constructor(private readonly collection: List_Adapter_Type) {\n        super(formatted`${ collection }`);\n    }\n\n    /**\n     * @desc\n     *  Returns the number of items left after applying any filters,\n     *\n     * @example <caption>Counting items</caption>\n     *  import { actorCalled, List } from '@serenity-js/core';\n     *  import { Ensure, equals, property } from '@serenity-js/assertions';\n     *\n     *  actorCalled('Lisa').attemptsTo(\n     *      Ensure.that(\n     *          List.of(testAccounts).count(),\n     *          equals(3)\n     *      )\n     *  )\n     *\n     * @returns {Question<Promise<number>>}\n     *\n     * @see {@link List#where}\n     */\n    count(): Question<Promise<number>> {\n        return Question.about(`the number of ${ this.collection.toString() }`, actor =>\n            this.collection.count(actor)\n        );\n    }\n\n    /**\n     * @desc\n     *  Returns the first of items left after applying any filters,\n     *\n     * @example <caption>Retrieving the first item</caption>\n     *  import { actorCalled, List } from '@serenity-js/core';\n     *  import { Ensure, equals, property } from '@serenity-js/assertions';\n     *\n     *  actorCalled('Lisa').attemptsTo(\n     *      Ensure.that(\n     *          List.of(testAccounts).first(),\n     *          property('username', equals('tester.one@example.com'))\n     *      )\n     *  )\n     *\n     * @returns {Question<Item_Return_Type>}\n     *\n     * @see {@link List#where}\n     */\n    first(): Question<Item_Return_Type> {\n        return Question.about(`the first of ${ this.collection.toString() }`, actor =>\n            this.collection.first(actor)\n        );\n    }\n\n    /**\n     * @desc\n     *  Returns the last of items left after applying any filters,\n     *\n     * @example <caption>Retrieving the last item</caption>\n     *  import { actorCalled, List } from '@serenity-js/core';\n     *  import { Ensure, equals, property } from '@serenity-js/assertions';\n     *\n     *  actorCalled('Lisa').attemptsTo(\n     *      Ensure.that(\n     *          List.of(testAccounts).last(),\n     *          property('username', equals('release.bot@example.com'))\n     *      )\n     *  )\n     *\n     * @returns {Question<Item_Return_Type>}\n     *\n     * @see {@link List#where}\n     */\n    last(): Question<Item_Return_Type> {\n        return Question.about(`the last of ${ this.collection.toString() }`, actor =>\n            this.collection.last(actor)\n        );\n    }\n\n    /**\n     * @desc\n     *  Returns the nth of the items left after applying any filters,\n     *\n     * @example <caption>Retrieving the nth item</caption>\n     *  import { actorCalled, List } from '@serenity-js/core';\n     *  import { Ensure, equals, property } from '@serenity-js/assertions';\n     *\n     *  actorCalled('Lisa').attemptsTo(\n     *      Ensure.that(\n     *          List.of(testAccounts).get(1),\n     *          property('username', equals('tester.two@example.com'))\n     *      )\n     *  )\n     *\n     * @param {number} index\n     *  Zero-based index of the item to return\n     *\n     * @returns {Question<Item_Return_Type>}\n     *\n     * @see {@link List#where}\n     */\n    get(index: number): Question<Item_Return_Type> {\n        return Question.about(`the ${ List.ordinalSuffixOf(index + 1) } of ${ this.collection }`, actor =>\n            this.collection.get(actor, index)\n        );\n    }\n\n    /**\n     * @desc\n     *  Filters the underlying collection so that the result contains only those elements that meet the {@link Expectation}\n     *\n     * @example <caption>Filtering a list</caption>\n     *  import { actorCalled, List, Property } from '@serenity-js/core';\n     *  import { contain, Ensure, equals, property } from '@serenity-js/assertions';\n     *\n     *  actorCalled('Lisa').attemptsTo(\n     *      Ensure.that(\n     *          List.of(testAccounts)\n     *              .where(Property.at<TestAccount>().environments, contain('prod'))\n     *              .where(Property.at<TestAccount>().role, equals('test-automation'))\n     *              .first(),\n     *          property('username', equals('tester.two@example.com'))\n     *      )\n     *  )\n     *\n     * @param {MetaQuestion<Item_Type, Promise<Answer_Type> | Answer_Type>} question\n     * @param {Expectation<any, Answer_Type>} expectation\n     *\n     * @returns {List<List_Adapter_Type, Item_Type, Collection_Type, Item_Return_Type, Collection_Return_Type>}\n     */\n    where<Answer_Type>(\n        question: MetaQuestion<Item_Type, Promise<Answer_Type> | Answer_Type>,\n        expectation: Expectation<any, Answer_Type>,\n    ): List<List_Adapter_Type, Item_Type, Collection_Type, Item_Return_Type, Collection_Return_Type> {\n        return new List<List_Adapter_Type, Item_Type, Collection_Type, Item_Return_Type, Collection_Return_Type>(\n            this.collection.withFilter(question, expectation) as List_Adapter_Type,\n        );\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor} answer this {@link Question} and return the underlying collection.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Collection_Return_Type}\n     *\n     * @see {@link Actor}\n     * @see {@link AnswersQuestions}\n     * @see {@link UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Collection_Return_Type {\n        return this.collection.items(actor);\n    }\n\n    private static ordinalSuffixOf(index: number): string {\n        const\n            lastDigit = index % 10,\n            lastTwoDigits = index % 100;\n\n        switch (true) {\n            case (lastDigit === 1 && lastTwoDigits !== 11):\n                return index + 'st';\n            case (lastDigit === 2 && lastTwoDigits !== 12):\n                return index + 'nd';\n            case (lastDigit === 3 && lastTwoDigits !== 13):\n                return index + 'rd';\n            default:\n                return index + 'th';\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/List.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 693,
    "kind": "class",
    "name": "List",
    "memberof": "src/screenplay/questions/List.ts",
    "static": true,
    "longname": "src/screenplay/questions/List.ts~List",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions",
    "importStyle": "{List}",
    "description": " Filters an {@link Answerable} list of items based on the criteria provided.\n Instantiate via {@link List.of}",
    "examples": [
      "<caption>Example data structure</caption>\n interface TestAccount {\n     username: string;\n     role: string;\n     environments: string[];\n }\n\n const testAccounts: TestAccount[] = [\n     {\n         \"username\": \"tester.one@example.com\",\n         \"role\": \"test-automation\"\n         \"environments\": [ \"dev\", \"sit\" ],\n     },\n     {\n         \"username\": \"tester.two@example.com\",\n         \"role\": \"test-automation\"\n         \"environments\": [ \"dev\", \"sit\", \"prod\" ],\n     },\n     {\n         \"username\": \"release.bot@example.com\",\n         \"role\": \"release-automation\"\n         \"environments\": [ \"dev\", \"sit\", \"prod\" ],\n     }\n ]",
      "<caption>Using with Property</caption>\n import { actorCalled, List, Property } from '@serenity-js/core';\n import { contain, Ensure, equals } from '@serenity-js/assertions';\n\n actorCalled('Lisa').attemptsTo(\n     Ensure.that(\n         Property.of(\n             List.of(testAccounts)\n                 .where(Property.at<TestAccount>().environments, contain('prod'))\n                 .where(Property.at<TestAccount>().role, equals('test-automation'))\n                 .first()\n             ).username,\n         equals('tester.two@example.com')\n     )\n )"
    ],
    "see": [
      "{@link MetaQuestion}"
    ],
    "lineNumber": 65,
    "interface": false,
    "extends": [
      "Question"
    ]
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/List.ts~List",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/List.ts~List.of",
    "access": "public",
    "description": " Instantiates a new {@link List} configured to support standard {@link Array}.\n\n **Please note:** Don't use `List.of` to wrap `Question<ElementArrayFinder>` returned by\n [`Target.all`](/modules/protractor/class/src/screenplay/questions/targets/Target.ts~Target.html#static-method-all).\n Instead, use [`Target.all(...).located(...).where(...)`](/modules/protractor/class/src/screenplay/questions/targets/Target.ts~Target.html),\n which uses a Protractor-specific {@link ListAdapter}.",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{List<ArrayListAdapter<Item_Type>, Item_Type, Item_Type[], Promise<Item_Type>, Promise<Item_Type[]>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Item_Type[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List<ArrayListAdapter<Item_Type>, Item_Type, Item_Type[], Promise<Item_Type>, Promise<Item_Type[]>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 695,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/List.ts~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/List.ts~List#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "List_Adapter_Type"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "count",
    "memberof": "src/screenplay/questions/List.ts~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/List.ts~List#count",
    "access": "public",
    "description": " Returns the number of items left after applying any filters,",
    "examples": [
      "<caption>Counting items</caption>\n import { actorCalled, List } from '@serenity-js/core';\n import { Ensure, equals, property } from '@serenity-js/assertions';\n\n actorCalled('Lisa').attemptsTo(\n     Ensure.that(\n         List.of(testAccounts).count(),\n         equals(3)\n     )\n )"
    ],
    "see": [
      "{@link List#where}"
    ],
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<number>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<number>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "first",
    "memberof": "src/screenplay/questions/List.ts~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/List.ts~List#first",
    "access": "public",
    "description": " Returns the first of items left after applying any filters,",
    "examples": [
      "<caption>Retrieving the first item</caption>\n import { actorCalled, List } from '@serenity-js/core';\n import { Ensure, equals, property } from '@serenity-js/assertions';\n\n actorCalled('Lisa').attemptsTo(\n     Ensure.that(\n         List.of(testAccounts).first(),\n         property('username', equals('tester.one@example.com'))\n     )\n )"
    ],
    "see": [
      "{@link List#where}"
    ],
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Item_Return_Type>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Item_Return_Type>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "last",
    "memberof": "src/screenplay/questions/List.ts~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/List.ts~List#last",
    "access": "public",
    "description": " Returns the last of items left after applying any filters,",
    "examples": [
      "<caption>Retrieving the last item</caption>\n import { actorCalled, List } from '@serenity-js/core';\n import { Ensure, equals, property } from '@serenity-js/assertions';\n\n actorCalled('Lisa').attemptsTo(\n     Ensure.that(\n         List.of(testAccounts).last(),\n         property('username', equals('release.bot@example.com'))\n     )\n )"
    ],
    "see": [
      "{@link List#where}"
    ],
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Item_Return_Type>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Item_Return_Type>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/questions/List.ts~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/List.ts~List#get",
    "access": "public",
    "description": " Returns the nth of the items left after applying any filters,",
    "examples": [
      "<caption>Retrieving the nth item</caption>\n import { actorCalled, List } from '@serenity-js/core';\n import { Ensure, equals, property } from '@serenity-js/assertions';\n\n actorCalled('Lisa').attemptsTo(\n     Ensure.that(\n         List.of(testAccounts).get(1),\n         property('username', equals('tester.two@example.com'))\n     )\n )"
    ],
    "see": [
      "{@link List#where}"
    ],
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Item_Return_Type>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Zero-based index of the item to return"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Item_Return_Type>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/questions/List.ts~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/List.ts~List#where",
    "access": "public",
    "description": " Filters the underlying collection so that the result contains only those elements that meet the {@link Expectation}",
    "examples": [
      "<caption>Filtering a list</caption>\n import { actorCalled, List, Property } from '@serenity-js/core';\n import { contain, Ensure, equals, property } from '@serenity-js/assertions';\n\n actorCalled('Lisa').attemptsTo(\n     Ensure.that(\n         List.of(testAccounts)\n             .where(Property.at<TestAccount>().environments, contain('prod'))\n             .where(Property.at<TestAccount>().role, equals('test-automation'))\n             .first(),\n         property('username', equals('tester.two@example.com'))\n     )\n )"
    ],
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{List<List_Adapter_Type, Item_Type, Collection_Type, Item_Return_Type, Collection_Return_Type>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MetaQuestion<Item_Type, Promise<Answer_Type> | Answer_Type>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation<any, Answer_Type>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "List<List_Adapter_Type, Item_Type, Collection_Type, Item_Return_Type, Collection_Return_Type>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/List.ts~List",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/List.ts~List#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link Actor} answer this {@link Question} and return the underlying collection.",
    "see": [
      "{@link Actor}",
      "{@link AnswersQuestions}",
      "{@link UsesAbilities}"
    ],
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Collection_Return_Type}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Collection_Return_Type"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "ordinalSuffixOf",
    "memberof": "src/screenplay/questions/List.ts~List",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/List.ts~List.ordinalSuffixOf",
    "access": "private",
    "description": " ",
    "lineNumber": 244,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 703,
    "kind": "file",
    "name": "src/screenplay/questions/MetaQuestion.ts",
    "content": "import { Answerable } from '../Answerable';\nimport { Question } from '../Question';\n\n/**\n * @desc\n *  A {@link Question} about another {@link Answerable}, used to retrieve a transformed version of the value it holds, or to compose {@link Question}s.\n *\n *  For example, the question [`Text.of`](/modules/protractor/class/src/screenplay/questions/text/Text.ts~Text.html)\n *  returns text content of an {@link ElementFinder} returned by [`Target`](/modules/protractor/class/src/screenplay/questions/targets/Target.ts~Target.html),\n *  which is a `Question<ElementFinder>`.\n *\n *  `MetaQuestion`s are typically used when filtering a {@link List}.\n *\n * @see {@link List}\n *\n * @public\n * @interface\n */\nexport interface MetaQuestion<Supported_Answerable_Type extends Answerable<any>, Answer> {\n    /**\n     * @desc\n     *  Transforms a given `answerable`\n     *  to another {@link Question}.\n     *\n     * @type {function<T>(another: Answerable): Question<Answer>}\n     * @public\n     *\n     * @see {@link List}\n     */\n    of: (answerable: Supported_Answerable_Type) => Question<Answer>;\n\n    /**\n     * @desc\n     *  Human-readable description of a given {@link MetaQuestion},\n     *\n     * @type {function(): string}\n     * @public\n     */\n    toString: () => string;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/MetaQuestion.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 704,
    "kind": "class",
    "name": "MetaQuestion",
    "memberof": "src/screenplay/questions/MetaQuestion.ts",
    "static": true,
    "longname": "src/screenplay/questions/MetaQuestion.ts~MetaQuestion",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions",
    "importStyle": "{MetaQuestion}",
    "description": " A {@link Question} about another {@link Answerable}, used to retrieve a transformed version of the value it holds, or to compose {@link Question}s.\n\n For example, the question [`Text.of`](/modules/protractor/class/src/screenplay/questions/text/Text.ts~Text.html)\n returns text content of an {@link ElementFinder} returned by [`Target`](/modules/protractor/class/src/screenplay/questions/targets/Target.ts~Target.html),\n which is a `Question<ElementFinder>`.\n\n `MetaQuestion`s are typically used when filtering a {@link List}.",
    "see": [
      "{@link List}"
    ],
    "lineNumber": 26,
    "interface": true
  },
  {
    "__docId__": 705,
    "kind": "member",
    "name": "of",
    "memberof": "src/screenplay/questions/MetaQuestion.ts~MetaQuestion",
    "static": false,
    "longname": "src/screenplay/questions/MetaQuestion.ts~MetaQuestion#of",
    "access": "public",
    "description": " Transforms a given `answerable`\n to another {@link Question}.",
    "see": [
      "{@link List}"
    ],
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "function<T>(another: Answerable): Question<Answer>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 706,
    "kind": "member",
    "name": "toString",
    "memberof": "src/screenplay/questions/MetaQuestion.ts~MetaQuestion",
    "static": false,
    "longname": "src/screenplay/questions/MetaQuestion.ts~MetaQuestion#toString",
    "access": "public",
    "description": " Human-readable description of a given {@link MetaQuestion},",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "function(): string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 707,
    "kind": "file",
    "name": "src/screenplay/questions/Note.ts",
    "content": "import { TakeNotes } from '../abilities';\nimport { AnswersQuestions, UsesAbilities } from '../actor';\nimport { Question } from '../Question';\n\n/**\n * @desc\n *  Enables the {@link Actor} to recall an answer to a given {@link Question},\n *  recorded using {@link TakeNote}.\n *\n * @example <caption>Using default subject name based on the name of the question</caption>\n *  import { actorCalled, Note, TakeNote, TakeNotes } from '@serenity-js/core'\n *  import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n *  import { by, protractor } from 'protractor';\n *\n *  class Vouchers {\n *      static code             = Target.the('voucher code').located(by.id('voucher'));\n *      static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n *  }\n *\n *  const actor = actorCalled('Noah').whoCan(\n *      TakeNotes.usingAnEmptyNotepad(),\n *      BrowseTheWeb.using(protractor.browser),\n *  );\n *\n *  actor.attemptsTo(\n *      TakeNote.of(Text.of(Vouchers.code)),\n *      // ... add the product to a basket, go to checkout, etc.\n *      Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n *  );\n *\n * @example <caption>Using custom subject name</caption>\n *  actor.attemptsTo(\n *      TakeNote.of(Text.of(Vouchers.code)).as('voucher code'),\n *      // ... add the product to a basket, go to checkout, etc.\n *      Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of('voucher code'))),\n *  );\n *\n * @see {@link TakeNote}\n * @see {@link TakeNotes}\n *\n * @extends {Question}\n */\nexport class Note<Answer> extends Question<Promise<Answer>> {\n\n    /**\n     * @desc\n     *  Retrieves the previously recorded answer to a given {@link Question}\n     *\n     * @param {Question<Promise<A>> | Question<A> | string} topic\n     *\n     * @returns {Note<A>}\n     */\n    static of<A>(topic: Question<Promise<A>> | Question<A> | string): Note<A> {\n        return new Note<A>(topic);\n    }\n\n    /**\n     * @param {Question<Promise<Answer>> | Question<Answer> | string} topic\n     */\n    constructor(private readonly topic: Question<Promise<Answer>> | Question<Answer> | string) {\n        super(`a note of ${ topic }`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  answer this {@link Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<Answer>}\n     *\n     * @see {@link Actor}\n     * @see {@link AnswersQuestions}\n     * @see {@link UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<Answer> {\n        return TakeNotes.as(actor).answerTo(this.topic);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/Note.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 708,
    "kind": "class",
    "name": "Note",
    "memberof": "src/screenplay/questions/Note.ts",
    "static": true,
    "longname": "src/screenplay/questions/Note.ts~Note",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions",
    "importStyle": "{Note}",
    "description": " Enables the {@link Actor} to recall an answer to a given {@link Question},\n recorded using {@link TakeNote}.",
    "examples": [
      "<caption>Using default subject name based on the name of the question</caption>\n import { actorCalled, Note, TakeNote, TakeNotes } from '@serenity-js/core'\n import { BrowseTheWeb, Target, Text } from '@serenity-js/protractor'\n import { by, protractor } from 'protractor';\n\n class Vouchers {\n     static code             = Target.the('voucher code').located(by.id('voucher'));\n     static appliedVoucher   = Target.the('voucher code').located(by.id('applied-voucher'));\n }\n\n const actor = actorCalled('Noah').whoCan(\n     TakeNotes.usingAnEmptyNotepad(),\n     BrowseTheWeb.using(protractor.browser),\n );\n\n actor.attemptsTo(\n     TakeNote.of(Text.of(Vouchers.code)),\n     // ... add the product to a basket, go to checkout, etc.\n     Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of(Text.of(Vouchers.code)))),\n );",
      "<caption>Using custom subject name</caption>\n actor.attemptsTo(\n     TakeNote.of(Text.of(Vouchers.code)).as('voucher code'),\n     // ... add the product to a basket, go to checkout, etc.\n     Ensure.that(Text.of(Vouchers.appliedVoucher), equals(Note.of('voucher code'))),\n );"
    ],
    "see": [
      "{@link TakeNote}",
      "{@link TakeNotes}"
    ],
    "lineNumber": 50,
    "interface": false,
    "extends": [
      "Question"
    ]
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Note.ts~Note",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Note.ts~Note.of",
    "access": "public",
    "description": " Retrieves the previously recorded answer to a given {@link Question}",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Note<A>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Promise<A>> | Question<A> | string"
        ],
        "spread": false,
        "optional": false,
        "name": "topic",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Note<A>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 710,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Note.ts~Note",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Note.ts~Note#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Promise<Answer>> | Question<Answer> | string"
        ],
        "spread": false,
        "optional": false,
        "name": "topic",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Note.ts~Note",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Note.ts~Note#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n answer this {@link Question}.",
    "see": [
      "{@link Actor}",
      "{@link AnswersQuestions}",
      "{@link UsesAbilities}"
    ],
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Answer>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Answer>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 712,
    "kind": "file",
    "name": "src/screenplay/questions/Property.ts",
    "content": "import { Answerable } from '../Answerable';\nimport { createMetaQuestionProxy, createQuestionProxy, WithPropertiesAsMetaQuestions, WithPropertiesAsQuestions } from './proxies';\n\n/**\n * @desc\n *  Enables easy access to properties of the value of a given {@link Answerable}.\n *\n * @example <caption>Example API response</caption>\n *  interface EnvironmentDetails {\n *      name: string;\n *      url:  string;\n *  }\n *\n *  interface EnvironmentsResponse {\n *      environments: EnvironmentDetails[];\n *  }\n *\n *  const response: EnvironmentsResponse = {\n *     \"environments\": [\n *         {\n *             \"name\": \"dev\",\n *             \"url\":  \"https://dev.example.com\"\n *         },\n *         {\n *             \"name\": \"sit\",\n *             \"url\":  \"https://sit.example.com\"\n *         }\n *     ]\n *  }\n *\n * @example <caption>Combining Property.of and Property.at</caption>\n *  import { actorCalled, List, Property } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  actorCalled('Lisa').attemptsTo(\n *      Ensure.that(\n *          Property.of(\n *              List.of(response.environments)\n *                  .where(Property.at<EnvironmentDetails>().name, equals('dev'))\n *                  .first(),\n *          ).url,\n *          equals('https://dev.example.com')\n *      )\n *  )\n *\n * @see {@link Question}\n * @see {@link List}\n */\nexport class Property {\n\n    /**\n     * @desc\n     *  Generates a {@link Proxy} around a given {@link Answerable} `subject`\n     *  to turn the properties of the value it will resolve to into {@link Question}s.\n     *\n     * @example <caption>Reading a property</caption>\n     *  import { actorCalled, Property } from '@serenity-js/core';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *\n     *  actorCalled('Lisa').attemptsTo(\n     *      Ensure.that(\n     *          Property.of(response).environments[0].name,\n     *          equals('dev')\n     *      )\n     *  )\n     *\n     * @param {Answerable<Subject>} subject\n     * @returns {Proxy<Subject>}\n     */\n    static of<Subject extends object>(subject: Answerable<Subject>): WithPropertiesAsQuestions<Subject> {   // eslint-disable-line @typescript-eslint/ban-types\n        return createQuestionProxy<Subject>(subject);\n    }\n\n    /**\n     * @desc\n     *  Generates a {@link Proxy} around a given {@link Answerable} `subject`\n     *  to turn any of its properties into {@link MetaQuestion}s\n     *  to be used when filtering a {@link List},\n     *\n     * @example <caption>Reading a property</caption>\n     *  import { actorCalled, Property } from '@serenity-js/core';\n     *  import { Ensure, equals } from '@serenity-js/assertions';\n     *\n     *  actorCalled('Lisa').attemptsTo(\n     *      Ensure.that(\n     *          List.of(response.environments)\n     *              .where(Property.at<EnvironmentDetails>().name, equals('dev'))\n     *              .first(),\n     *          equals(response.environments[0])\n     *      )\n     *  )\n     *\n     * @returns {Proxy<Subject>}\n     */\n    static at<Subject extends object>(): WithPropertiesAsMetaQuestions<Subject> {   // eslint-disable-line @typescript-eslint/ban-types\n        return createMetaQuestionProxy<Subject>();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/Property.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 713,
    "kind": "class",
    "name": "Property",
    "memberof": "src/screenplay/questions/Property.ts",
    "static": true,
    "longname": "src/screenplay/questions/Property.ts~Property",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions",
    "importStyle": "{Property}",
    "description": " Enables easy access to properties of the value of a given {@link Answerable}.",
    "examples": [
      "<caption>Example API response</caption>\n interface EnvironmentDetails {\n     name: string;\n     url:  string;\n }\n\n interface EnvironmentsResponse {\n     environments: EnvironmentDetails[];\n }\n\n const response: EnvironmentsResponse = {\n    \"environments\": [\n        {\n            \"name\": \"dev\",\n            \"url\":  \"https://dev.example.com\"\n        },\n        {\n            \"name\": \"sit\",\n            \"url\":  \"https://sit.example.com\"\n        }\n    ]\n }",
      "<caption>Combining Property.of and Property.at</caption>\n import { actorCalled, List, Property } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n\n actorCalled('Lisa').attemptsTo(\n     Ensure.that(\n         Property.of(\n             List.of(response.environments)\n                 .where(Property.at<EnvironmentDetails>().name, equals('dev'))\n                 .first(),\n         ).url,\n         equals('https://dev.example.com')\n     )\n )"
    ],
    "see": [
      "{@link Question}",
      "{@link List}"
    ],
    "lineNumber": 56,
    "interface": false
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Property.ts~Property",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Property.ts~Property.of",
    "access": "public",
    "description": " Generates a {@link Proxy} around a given {@link Answerable} `subject`\n to turn the properties of the value it will resolve to into {@link Question}s.",
    "examples": [
      "<caption>Reading a property</caption>\n import { actorCalled, Property } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n\n actorCalled('Lisa').attemptsTo(\n     Ensure.that(\n         Property.of(response).environments[0].name,\n         equals('dev')\n     )\n )"
    ],
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Proxy<Subject>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Subject>"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Proxy<Subject>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "at",
    "memberof": "src/screenplay/questions/Property.ts~Property",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Property.ts~Property.at",
    "access": "public",
    "description": " Generates a {@link Proxy} around a given {@link Answerable} `subject`\n to turn any of its properties into {@link MetaQuestion}s\n to be used when filtering a {@link List},",
    "examples": [
      "<caption>Reading a property</caption>\n import { actorCalled, Property } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n\n actorCalled('Lisa').attemptsTo(\n     Ensure.that(\n         List.of(response.environments)\n             .where(Property.at<EnvironmentDetails>().name, equals('dev'))\n             .first(),\n         equals(response.environments[0])\n     )\n )"
    ],
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Proxy<Subject>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Proxy<Subject>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 716,
    "kind": "file",
    "name": "src/screenplay/questions/Transform.ts",
    "content": "/* eslint-disable @typescript-eslint/no-unnecessary-type-constraint */\nimport { AnswersQuestions, UsesAbilities } from '../actor';\nimport { Answerable } from '../Answerable';\nimport { Question } from '../Question';\n\n/**\n * @experimental\n */\nexport class Transform<Answer_Type extends any, Output_Type> extends Question<Promise<Output_Type>> {\n    static the<AT extends any, OT>(questions: Answerable<AT> | Array<Answerable<AT>>, transformation: (...answers: AT[]) => OT): Transform<AT, OT> {\n        return new Transform<AT, OT>([].concat(questions), transformation);\n    }\n\n    constructor(\n        private readonly questions: Array<Answerable<Answer_Type>>,\n        private readonly transformation: (...answers: Answer_Type[]) => Output_Type,\n        private readonly description: string = `a transformed answer`,\n    ) {\n        super(description);\n    }\n\n    /**\n     * @deprecated\n     *  Please use {@link Transform#describedAs} instead\n     *\n     * @desc\n     *  Overrides the default {@link Transform#toString} representation of this object.\n     *\n     * @param {string} description\n     * @returns {Transform<Answer_Type, Output_Type>}\n     */\n    as(description: string): Transform<Answer_Type, Output_Type> {\n        return this.describedAs(description);\n    }\n\n    /**\n     * Changes the description of this question's subject.\n     *\n     * @param subject\n     */\n    describedAs(subject: string): this {\n        this.subject = subject;\n\n        return this;\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<Output_Type> {\n        return Promise.all(this.questions.map(question => actor.answer(question)))\n            .then(answers => this.transformation(...answers));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/Transform.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 717,
    "kind": "class",
    "name": "Transform",
    "memberof": "src/screenplay/questions/Transform.ts",
    "static": true,
    "longname": "src/screenplay/questions/Transform.ts~Transform",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions",
    "importStyle": "{Transform}",
    "description": "",
    "lineNumber": 16,
    "experimental": true,
    "interface": false,
    "extends": [
      "src/screenplay/Question.js~Question"
    ]
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Transform.ts~Transform.the",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable ",
          " Array"
        ],
        "spread": false,
        "optional": false,
        "name": "questions",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "transformation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transform"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 719,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Transform.ts~Transform#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "as",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Transform.ts~Transform#as",
    "access": "public",
    "description": " Overrides the default {@link Transform#toString} representation of this object.",
    "lineNumber": 69,
    "deprecated": " Please use {@link Transform#describedAs} instead",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Transform<Answer_Type, Output_Type>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transform<Answer_Type, Output_Type>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 721,
    "kind": "method",
    "name": "describedAs",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Transform.ts~Transform#describedAs",
    "access": "public",
    "description": "Changes the description of this question's subject. ",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 722,
    "kind": "member",
    "name": "subject",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "static": false,
    "longname": "src/screenplay/questions/Transform.ts~Transform#subject",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Transform.ts~Transform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Transform.ts~Transform#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 724,
    "kind": "file",
    "name": "src/screenplay/questions/expectations/ExpectationMet.ts",
    "content": "import { ExpectationOutcome } from './ExpectationOutcome';\n\nexport class ExpectationMet<Expected, Actual> extends ExpectationOutcome<Expected, Actual> {}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/expectations/ExpectationMet.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 725,
    "kind": "class",
    "name": "ExpectationMet",
    "memberof": "src/screenplay/questions/expectations/ExpectationMet.ts",
    "static": true,
    "longname": "src/screenplay/questions/expectations/ExpectationMet.ts~ExpectationMet",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/expectations",
    "importStyle": "{ExpectationMet}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/screenplay/questions/expectations/ExpectationOutcome.js~ExpectationOutcome"
    ]
  },
  {
    "__docId__": 726,
    "kind": "file",
    "name": "src/screenplay/questions/expectations/ExpectationNotMet.ts",
    "content": "import { ExpectationOutcome } from './ExpectationOutcome';\n\nexport class ExpectationNotMet<Expected, Actual> extends ExpectationOutcome<Expected, Actual> {}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/expectations/ExpectationNotMet.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 727,
    "kind": "class",
    "name": "ExpectationNotMet",
    "memberof": "src/screenplay/questions/expectations/ExpectationNotMet.ts",
    "static": true,
    "longname": "src/screenplay/questions/expectations/ExpectationNotMet.ts~ExpectationNotMet",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/expectations",
    "importStyle": "{ExpectationNotMet}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "src/screenplay/questions/expectations/ExpectationOutcome.js~ExpectationOutcome"
    ]
  },
  {
    "__docId__": 728,
    "kind": "file",
    "name": "src/screenplay/questions/expectations/ExpectationOutcome.ts",
    "content": "import { TinyType } from 'tiny-types';\n\nexport class ExpectationOutcome<Expected, Actual> extends TinyType {\n    constructor(\n        public readonly message: string,\n        public readonly expected: Expected,\n        public readonly actual: Actual,\n    ) {\n        super();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/expectations/ExpectationOutcome.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 729,
    "kind": "class",
    "name": "ExpectationOutcome",
    "memberof": "src/screenplay/questions/expectations/ExpectationOutcome.ts",
    "static": true,
    "longname": "src/screenplay/questions/expectations/ExpectationOutcome.ts~ExpectationOutcome",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/expectations",
    "importStyle": "{ExpectationOutcome}",
    "description": " ",
    "lineNumber": 3,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ]
  },
  {
    "__docId__": 730,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/expectations/ExpectationOutcome.ts~ExpectationOutcome",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/expectations/ExpectationOutcome.ts~ExpectationOutcome#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 731,
    "kind": "file",
    "name": "src/screenplay/questions/expectations/index.ts",
    "content": "export * from './ExpectationMet';\nexport * from './ExpectationNotMet';\nexport * from './ExpectationOutcome';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/expectations/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 732,
    "kind": "file",
    "name": "src/screenplay/questions/index.ts",
    "content": "export * from './Check';\nexport * from './Expectation';\nexport * from './expectations';\nexport * from './List';\nexport * from './mappings';\nexport * from './MetaQuestion';\nexport * from './Note';\nexport { Property } from './Property';\nexport * from './q';\nexport * from './Transform';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 733,
    "kind": "file",
    "name": "src/screenplay/questions/lists/ArrayListAdapter.ts",
    "content": "import { ensure, isArray, isNumber } from 'tiny-types';\n\nimport { formatted } from '../../../io';\nimport { AnswersQuestions, UsesAbilities } from '../../actor';\nimport { Answerable } from '../../Answerable';\nimport { Question } from '../../Question';\nimport { Expectation } from '../Expectation';\nimport { ExpectationMet } from '../expectations';\nimport { MetaQuestion } from '../MetaQuestion';\nimport { ListAdapter } from './ListAdapter';\n\n/**\n * @desc\n *  Adapts an {@link Array} so that it can be used with {@link List}\n *\n * @implements {ListAdapter}\n */\nexport class ArrayListAdapter<Item_Type> implements ListAdapter<Item_Type, Item_Type[], Promise<Item_Type>, Promise<Item_Type[]>> {\n\n    /**\n     * @param {Answerable<Item_Type[]>} array\n     */\n    constructor(private readonly array: Answerable<Item_Type[]>) {\n    }\n\n    /**\n     * @desc\n     *  Returns the number of items the underlying {@link Array} contains,\n     *  left after applying any filters.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<number>}\n     */\n    count(actor: AnswersQuestions & UsesAbilities): Promise<number> {\n        return this.arrayAs(actor)\n            .then(items => items.length);\n    }\n\n    /**\n     * @desc\n     *  Returns the underlying {@link Array},\n     *  with any filters applied.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<number>}\n     */\n    items(actor: AnswersQuestions & UsesAbilities): Promise<Item_Type[]> {\n        return this.arrayAs(actor);\n    }\n\n    /**\n     * @desc\n     *  Returns the first of items the underlying {@link Array} contains,\n     *  left after applying any filters.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<Item_Type>}\n     */\n    first(actor: AnswersQuestions & UsesAbilities): Promise<Item_Type> {\n        return this.arrayAs(actor)\n            .then(items => this.getItemAt(items, 0));\n    }\n\n    /**\n     * @desc\n     *  Returns the nth of items the underlying {@link Array} contains,\n     *  left after applying any filters.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     *\n     * @param {number} index\n     *  Zero-based index of the item to return\n     *\n     * @returns {Promise<Item_Type>}\n     */\n    get(actor: AnswersQuestions & UsesAbilities, index: number): Promise<Item_Type> {\n        return this.arrayAs(actor)\n            .then(items => this.getItemAt(items, index));\n    }\n\n    /**\n     * @desc\n     *  Returns the last of items the underlying {@link Array} contains,\n     *  left after applying any filters.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<Item_Type>}\n     */\n    last(actor: AnswersQuestions & UsesAbilities): Promise<Item_Type> {\n        return this.arrayAs(actor)\n            .then(items => this.getItemAt(items, items.length - 1));\n    }\n\n    /**\n     * @desc\n     *  Filters the underlying {@link Array} so that the result contains only those items that meet the {@link Expectation}\n     *\n     * @param {MetaQuestion<Item_Type, Promise<Answer_Type> | Answer_Type>} question\n     * @param {Expectation<any, Answer_Type>} expectation\n     *\n     * @returns {ListAdapter<Item_Type, Item_Type[], Promise<Item_Type>, Promise<Item_Type[]>>}\n     *\n     * @see {MetaQuestion}\n     */\n    withFilter<Answer_Type>(\n        question: MetaQuestion<Item_Type, Promise<Answer_Type> | Answer_Type>,\n        expectation: Expectation<any, Answer_Type>\n    ): ListAdapter<Item_Type, Item_Type[], Promise<Item_Type>, Promise<Item_Type[]>> {\n        return new ArrayListAdapter(\n            new ArrayListFilter(this.array, question, expectation)\n        );\n    }\n\n    /**\n     * @desc\n     *  Returns a human-readable description of the underlying {@link Array}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `${ this.array }`\n    }\n\n    private arrayAs(actor: AnswersQuestions & UsesAbilities): Promise<Item_Type[]> {\n        return actor.answer(this.array)\n            .then(array => ensure('ArrayListAdapter constructor parameter', array, isArray()));\n    }\n\n    private getItemAt(items: Item_Type[], index: number): Item_Type {\n\n        ensure('index', index, isNumber());\n\n        const collectionDescription = this.toString();\n        const itemsDescription = formatted`${ items }`;\n        const description = collectionDescription !== itemsDescription\n            ? `${ collectionDescription } ${ itemsDescription }`\n            : itemsDescription;\n\n        if (items.length === 0) {\n            throw new Error(`${ description } is empty`);\n        }\n\n        if (index in items) {\n            return items[index];\n        }\n\n        throw new Error(`${ description } has no item at index ${ index }`);\n    }\n}\n\n/**\n * @package\n */\nclass ArrayListFilter<Item_Type, Answer_Type>\n    extends Question<Promise<Item_Type[]>>\n{\n    constructor(\n        private readonly collection: Answerable<Item_Type[]>,\n        private readonly question: MetaQuestion<Item_Type, Promise<Answer_Type> | Answer_Type>,\n        private readonly expectation: Expectation<any, Answer_Type>\n    ) {\n        super([\n            formatted `${ collection }`,\n            collection instanceof ArrayListFilter ? 'and' : 'where',\n            formatted `${ question } does ${ expectation }`\n        ].join(' '));\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<Item_Type[]> {\n\n        return actor.answer(this.collection)\n            .then(array => ensure('ArrayListAdapter constructor parameter', array, isArray()))  // todo: extract to avoid duplication?\n            .then(array =>\n                Promise.all(array.map(item =>\n                    Promise.resolve(this.question.of(item).answeredBy(actor))\n                        .then(answer => this.expectation.answeredBy(actor)(answer))\n                        .then(outcome => ({ item, outcome }))\n                ))\n            )\n            .then(results =>\n                results.filter(result => result.outcome instanceof ExpectationMet)\n                    .map(result => result.item)\n            );\n    }\n}\n\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/lists/ArrayListAdapter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 734,
    "kind": "class",
    "name": "ArrayListAdapter",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts",
    "static": true,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/lists",
    "importStyle": "{ArrayListAdapter}",
    "description": " Adapts an {@link Array} so that it can be used with {@link List}",
    "lineNumber": 25,
    "interface": false,
    "implements": [
      "ListAdapter"
    ]
  },
  {
    "__docId__": 735,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Item_Type[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "count",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter#count",
    "access": "public",
    "description": " Returns the number of items the underlying {@link Array} contains,\n left after applying any filters.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "items",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter#items",
    "access": "public",
    "description": " Returns the underlying {@link Array},\n with any filters applied.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "first",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter#first",
    "access": "public",
    "description": " Returns the first of items the underlying {@link Array} contains,\n left after applying any filters.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Item_Type>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Item_Type>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter#get",
    "access": "public",
    "description": " Returns the nth of items the underlying {@link Array} contains,\n left after applying any filters.",
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Item_Type>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Zero-based index of the item to return"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Item_Type>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "last",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter#last",
    "access": "public",
    "description": " Returns the last of items the underlying {@link Array} contains,\n left after applying any filters.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Item_Type>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Item_Type>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "withFilter",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter#withFilter",
    "access": "public",
    "description": " Filters the underlying {@link Array} so that the result contains only those items that meet the {@link Expectation}",
    "see": [
      "{MetaQuestion}"
    ],
    "lineNumber": 194,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ListAdapter<Item_Type, Item_Type[], Promise<Item_Type>, Promise<Item_Type[]>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MetaQuestion<Item_Type, Promise<Answer_Type> | Answer_Type>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation<any, Answer_Type>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ListAdapter<Item_Type, Item_Type[], Promise<Item_Type>, Promise<Item_Type[]>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter#toString",
    "access": "public",
    "description": " Returns a human-readable description of the underlying {@link Array}.",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "arrayAs",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter#arrayAs",
    "access": "private",
    "description": " ",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "getItemAt",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter#getItemAt",
    "access": "private",
    "description": " ",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Item_Type"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 745,
    "kind": "class",
    "name": "ArrayListFilter",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts",
    "static": true,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListFilter",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/questions/lists/ArrayListAdapter.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 289,
    "interface": false,
    "extends": [
      "src/screenplay/Question.js~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 746,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListFilter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListFilter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListFilter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListFilter#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 748,
    "kind": "file",
    "name": "src/screenplay/questions/lists/ListAdapter.ts",
    "content": "import { AnswersQuestions, UsesAbilities } from '../../actor';\nimport { Expectation } from '../Expectation';\nimport { MetaQuestion } from '../MetaQuestion';\n\n/**\n * @desc\n *  Adapts various types of collections so that they can be used with {@link List}.\n *\n *  You probably won't need to implement this interface, unless you're extending Serenity/JS.\n *\n * @see {@link List}\n */\nexport interface ListAdapter<\n    Item_Type,\n    Collection_Type,\n    Item_Return_Type = Item_Type,\n    Collection_Return_Type = Collection_Type\n> {\n    count(actor: AnswersQuestions & UsesAbilities): Promise<number>;\n\n    first(actor: AnswersQuestions & UsesAbilities): Item_Return_Type;\n    last(actor: AnswersQuestions & UsesAbilities): Item_Return_Type;\n    get(actor: AnswersQuestions & UsesAbilities, index: number): Item_Return_Type;\n\n    items(actor: AnswersQuestions & UsesAbilities): Collection_Return_Type;\n\n    withFilter<Answer_Type>(\n        question: MetaQuestion<Item_Type, Promise<Answer_Type> | Answer_Type>,\n        expectation: Expectation<any, Answer_Type>,\n    ): ListAdapter<Item_Type, Collection_Type, Item_Return_Type, Collection_Return_Type>;\n\n    toString(): string;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/lists/ListAdapter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 749,
    "kind": "class",
    "name": "ListAdapter",
    "memberof": "src/screenplay/questions/lists/ListAdapter.ts",
    "static": true,
    "longname": "src/screenplay/questions/lists/ListAdapter.ts~ListAdapter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/lists",
    "importStyle": "{ListAdapter}",
    "description": " Adapts various types of collections so that they can be used with {@link List}.\n\n You probably won't need to implement this interface, unless you're extending Serenity/JS.",
    "see": [
      "{@link List}"
    ],
    "lineNumber": 20,
    "interface": true
  },
  {
    "__docId__": 750,
    "kind": "file",
    "name": "src/screenplay/questions/lists/index.ts",
    "content": "export * from './ArrayListAdapter';\nexport * from './ListAdapter';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/lists/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 751,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/AnswerMappingFunction.ts",
    "content": "import { MappingFunction } from '../../../io/collections';\nimport { AnswersQuestions } from '../../actor';\n\n/**\n * @desc\n *  A mapping function converting one type into another.\n *\n * @public\n *\n * @typedef {function(actor: AnswersQuestions) => MappingFunction<V,O>} AnswerMappingFunction<V, O>\n */\nexport type AnswerMappingFunction<V, O> =\n    (actor: AnswersQuestions) => MappingFunction<V, Promise<O> | O>\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/AnswerMappingFunction.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 752,
    "kind": "typedef",
    "name": "AnswerMappingFunction<V,",
    "memberof": "src/screenplay/questions/mappings/AnswerMappingFunction.ts",
    "static": true,
    "longname": "src/screenplay/questions/mappings/AnswerMappingFunction.ts~AnswerMappingFunction<V,",
    "access": "public",
    "description": " A mapping function converting one type into another.",
    "lineNumber": 19,
    "type": {
      "types": [
        "function(actor: AnswersQuestions) => MappingFunction<V,O>"
      ],
      "optional": false,
      "name": "AnswerMappingFunction<V,"
    }
  },
  {
    "__docId__": 753,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/index.ts",
    "content": "export * from './AnswerMappingFunction';\nexport * from './string';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 754,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/append.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined, isString } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { Answerable } from '../../../Answerable';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Appends the values to the end of the original string and returns a new string.\n *\n * @param {...Array<Answerable<string>>} values\n *  The values to append to the end of the string.\n *\n * @returns {AnswerMappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat\n */\nexport function append(...values: Array<Answerable<string>>): AnswerMappingFunction<string, string> {\n    return (actor: AnswersQuestions) =>\n        (originalAnswer: string) => {\n\n            ensure('The value to be mapped', originalAnswer, isDefined(), isString());\n\n            return Promise.all(values.map(value => actor.answer(value)))\n                .then(answers => originalAnswer.concat(...answers))\n        }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/append.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 755,
    "kind": "function",
    "name": "append",
    "memberof": "src/screenplay/questions/mappings/string/append.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/append.ts~append",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{append}",
    "description": " Appends the values to the end of the original string and returns a new string.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat"
    ],
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnswerMappingFunction<string, string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...Array<Answerable<string>>"
        ],
        "spread": true,
        "optional": false,
        "name": "values",
        "description": "The values to append to the end of the string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnswerMappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 756,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/index.ts",
    "content": "export * from './append';\nexport * from './normalize';\nexport * from './replace';\nexport * from './slice';\nexport * from './split';\nexport * from './toLocaleLowerCase';\nexport * from './toLocaleUpperCase';\nexport * from './toLowerCase';\nexport * from './toNumber';\nexport * from './toUpperCase';\nexport * from './trim';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 757,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/normalize.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined, isString } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { Answerable } from '../../../Answerable';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Returns the String value result of normalizing the string into the normalization form\n *  named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n *\n * @param {Answerable<string>} [form]\n *  One of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", specifying the Unicode Normalization Form. If omitted or undefined, \"NFC\" is used.\n *  These values have the following meanings:\n *   \"NFC\" - Canonical Decomposition, followed by Canonical Composition.\n *   \"NFD\" - Canonical Decomposition.\n *   \"NFKC\" - Compatibility Decomposition, followed by Canonical Composition.\n *   \"NFKD\" - Compatibility Decomposition.\n *\n * @returns {AnswerMappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n */\nexport function normalize(form?: Answerable<string>): AnswerMappingFunction<string, string> {\n    return (actor: AnswersQuestions) =>\n        (value: string) => {\n\n            ensure('The value to be mapped', value, isDefined(), isString())\n\n            return actor.answer(form).then(answer => value.normalize(answer));\n        }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/normalize.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 758,
    "kind": "function",
    "name": "normalize",
    "memberof": "src/screenplay/questions/mappings/string/normalize.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/normalize.ts~normalize",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{normalize}",
    "description": " Returns the String value result of normalizing the string into the normalization form\n named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize"
    ],
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnswerMappingFunction<string, string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string>"
        ],
        "spread": false,
        "optional": true,
        "name": "form",
        "description": "One of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", specifying the Unicode Normalization Form. If omitted or undefined, \"NFC\" is used.\n These values have the following meanings:\n  \"NFC\" - Canonical Decomposition, followed by Canonical Composition.\n  \"NFD\" - Canonical Decomposition.\n  \"NFKC\" - Compatibility Decomposition, followed by Canonical Composition.\n  \"NFKD\" - Compatibility Decomposition."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnswerMappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 759,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/replace.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined, isString } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { Answerable } from '../../../Answerable';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Returns a new string with some or all matches of a pattern replaced by a replacement.\n *  The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.\n *  If pattern is a string, only the first occurrence will be replaced.\n *\n * @param {Answerable<string | RegExp>} pattern\n *\n * @param {Answerable<string|function>} replacement\n *\n * @returns {MappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n */\nexport function replace(pattern: Answerable<RegExp | string>, replacement: Answerable<string | ((substring: string, ...args: any[]) => string)>): AnswerMappingFunction<string, string> {\n    return (actor: AnswersQuestions) =>\n        (value: string) => {\n            ensure('The value to be mapped', value, isDefined(), isString())\n\n            return Promise.all([\n                actor.answer(pattern),\n                actor.answer(replacement),\n            ]).then(([p, r]) =>\n                value.replace(p, r as any),\n            );\n        }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/replace.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 760,
    "kind": "function",
    "name": "replace",
    "memberof": "src/screenplay/questions/mappings/string/replace.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/replace.ts~replace",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{replace}",
    "description": " Returns a new string with some or all matches of a pattern replaced by a replacement.\n The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.\n If pattern is a string, only the first occurrence will be replaced.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"
    ],
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{MappingFunction<string, string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string | RegExp>"
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Answerable<string|function>"
        ],
        "spread": false,
        "optional": false,
        "name": "replacement",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "MappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 761,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/slice.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined, isInteger, isString } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { Answerable } from '../../../Answerable';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Extracts the part of the string between the `startIndex` and `endIndex` indexes, or to the end of the string if `endIndex` is `undefined`.\n *\n * @param {Answerable<number>} startIndex\n *  The zero-based index at which to begin extraction.\n *\n *  If negative, it is treated as `str.length + startIndex`. For example, if `startIndex` is `-3`, it is treated as `str.length - 3`\n *\n *  If `startIndex` is greater than or equal to `str.length`, an empty string is returned.\n *\n * @param {Answerable<number>} [endIndex]\n *  The zero-based index _before_ which to endIndex extraction.\n *  The character at this index will not be included.\n *\n *  If `endIndex` is omitted or undefined, or greater than `str.length`,\n *  `slice()` extracts to the endIndex of the string.\n *\n *  If negative, it is treated as `str.length + endIndex`.\n *  For example, if `endIndex` is `-3`, it is treated as `str.length - 3`.\n *\n * @returns {AnswerMappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\n */\nexport function slice(startIndex: Answerable<number>, endIndex?: Answerable<number>): AnswerMappingFunction<string, string> {\n    return (actor: AnswersQuestions) =>\n        (value: string) => {\n\n            ensure('The value to be mapped', value, isDefined(), isString())\n\n            return Promise.all([\n                actor.answer(startIndex),\n                actor.answer(endIndex),\n            ]).then(([ start, end ]) => {\n\n                ensure('startIndex', start, isDefined(), isInteger())\n\n                if (end !== undefined) {\n                    ensure('endIndex', end, isInteger());\n                }\n\n                return value.slice(start, end);\n            });\n        };\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/slice.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 762,
    "kind": "function",
    "name": "slice",
    "memberof": "src/screenplay/questions/mappings/string/slice.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/slice.ts~slice",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{slice}",
    "description": " Extracts the part of the string between the `startIndex` and `endIndex` indexes, or to the end of the string if `endIndex` is `undefined`.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring"
    ],
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnswerMappingFunction<string, string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "startIndex",
        "description": "The zero-based index at which to begin extraction.\n\n If negative, it is treated as `str.length + startIndex`. For example, if `startIndex` is `-3`, it is treated as `str.length - 3`\n\n If `startIndex` is greater than or equal to `str.length`, an empty string is returned."
      },
      {
        "nullable": null,
        "types": [
          "Answerable<number>"
        ],
        "spread": false,
        "optional": true,
        "name": "endIndex",
        "description": "The zero-based index _before_ which to endIndex extraction.\n The character at this index will not be included.\n\n If `endIndex` is omitted or undefined, or greater than `str.length`,\n `slice()` extracts to the endIndex of the string.\n\n If negative, it is treated as `str.length + endIndex`.\n For example, if `endIndex` is `-3`, it is treated as `str.length - 3`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnswerMappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 763,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/split.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined, isNotBlank, isString } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Divides a string into an ordered list of substrings, puts these substrings into an array, and returns the array.\n *  The division is done by searching for a pattern; where the pattern is provided as the first parameter in the method's call.\n *\n * @param {Answerable<string | RegExp>} separator\n *  The pattern describing where each split should occur.  The separator can be a simple string or it can be a regular expression.\n *\n * @param {Answerable<number>} [limit]\n *  A non-negative integer specifying a limit on the number of substrings to be included in the array.\n *  If provided, splits the string at each occurrence of the specified separator, but stops when limit entries have been placed in the array.\n *  Any leftover text is not included in the array at all.\n *\n * @returns {AnswerMappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\n */\nexport function split(separator: string | RegExp, limit?: number): AnswerMappingFunction<string, string[]> {\n    return (actor: AnswersQuestions) =>\n        (value: string) => {\n            ensure('The value to be mapped', value, isDefined(), isString())\n\n            return Promise.all([\n                actor.answer(separator),\n                actor.answer(limit),\n            ]).then(([ s, l ]) => {\n                ensure('The separator', value, isDefined(), isString(), isNotBlank());\n\n                return value.split(s, l);\n            });\n        };\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/split.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 764,
    "kind": "function",
    "name": "split",
    "memberof": "src/screenplay/questions/mappings/string/split.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/split.ts~split",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{split}",
    "description": " Divides a string into an ordered list of substrings, puts these substrings into an array, and returns the array.\n The division is done by searching for a pattern; where the pattern is provided as the first parameter in the method's call.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split"
    ],
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnswerMappingFunction<string, string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string | RegExp>"
        ],
        "spread": false,
        "optional": false,
        "name": "separator",
        "description": "The pattern describing where each split should occur.  The separator can be a simple string or it can be a regular expression."
      },
      {
        "nullable": null,
        "types": [
          "Answerable<number>"
        ],
        "spread": false,
        "optional": true,
        "name": "limit",
        "description": "A non-negative integer specifying a limit on the number of substrings to be included in the array.\n If provided, splits the string at each occurrence of the specified separator, but stops when limit entries have been placed in the array.\n Any leftover text is not included in the array at all."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnswerMappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 765,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/toLocaleLowerCase.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined, isString } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { Answerable } from '../../../Answerable';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Returns the calling string value converted to upper case, according to any locale-specific case mappings.\n *\n * @param {Answerable<string | string[]>} [locales]\n *  The `locale` parameter indicates the locale to be used to convert to lower case according to any\n *  locale-specific case mappings. If multiple locales are given in an `Array`,\n *  the [best available locale](https://tc39.es/ecma402/#sec-bestavailablelocale) is used.\n *  The default locale is the host environment’s current locale.\n *\n * @returns {AnswerMappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\n */\nexport function toLocaleLowerCase(locales?: Answerable<string | string[]>): AnswerMappingFunction<string, string> {\n    return (actor: AnswersQuestions) =>\n        (value: string) => {\n            ensure('The value to be mapped', value, isDefined(), isString());\n\n            return actor.answer(locales)\n                .then(l => value.toLocaleLowerCase(l));\n        }\n\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/toLocaleLowerCase.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 766,
    "kind": "function",
    "name": "toLocaleLowerCase",
    "memberof": "src/screenplay/questions/mappings/string/toLocaleLowerCase.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/toLocaleLowerCase.ts~toLocaleLowerCase",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{toLocaleLowerCase}",
    "description": " Returns the calling string value converted to upper case, according to any locale-specific case mappings.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnswerMappingFunction<string, string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string | string[]>"
        ],
        "spread": false,
        "optional": true,
        "name": "locales",
        "description": "The `locale` parameter indicates the locale to be used to convert to lower case according to any\n locale-specific case mappings. If multiple locales are given in an `Array`,\n the [best available locale](https://tc39.es/ecma402/#sec-bestavailablelocale) is used.\n The default locale is the host environment’s current locale."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnswerMappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 767,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/toLocaleUpperCase.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined, isString } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Returns a string where all alphabetic characters have been converted to uppercase,\n *  taking into account the host environment's current locale.\n *\n * @param {Answerable<string | string[]>} [locales]\n *  The `locale` parameter indicates the locale to be used to convert to lower case according to any\n *  locale-specific case mappings. If multiple locales are given in an `Array`,\n *  the [best available locale](https://tc39.es/ecma402/#sec-bestavailablelocale) is used.\n *  The default locale is the host environment’s current locale.\n *\n * @returns {AnswerMappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\n */\nexport function toLocaleUpperCase(locales?: string | string[]): AnswerMappingFunction<string, string> {\n    return (actor: AnswersQuestions) =>\n        (value: string) => {\n            ensure('The value to be mapped', value, isDefined(), isString());\n\n            return actor.answer(locales)\n                .then(l => value.toLocaleUpperCase(l));\n        }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/toLocaleUpperCase.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 768,
    "kind": "function",
    "name": "toLocaleUpperCase",
    "memberof": "src/screenplay/questions/mappings/string/toLocaleUpperCase.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/toLocaleUpperCase.ts~toLocaleUpperCase",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{toLocaleUpperCase}",
    "description": " Returns a string where all alphabetic characters have been converted to uppercase,\n taking into account the host environment's current locale.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase"
    ],
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnswerMappingFunction<string, string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string | string[]>"
        ],
        "spread": false,
        "optional": true,
        "name": "locales",
        "description": "The `locale` parameter indicates the locale to be used to convert to lower case according to any\n locale-specific case mappings. If multiple locales are given in an `Array`,\n the [best available locale](https://tc39.es/ecma402/#sec-bestavailablelocale) is used.\n The default locale is the host environment’s current locale."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnswerMappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 769,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/toLowerCase.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined, isString } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Converts all the alphabetic characters in a string to lowercase.\n *\n * @returns {AnswerMappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\n */\nexport function toLowerCase(): AnswerMappingFunction<string, string> {\n    return (actor: AnswersQuestions) =>\n        (value: string) =>\n            ensure('The value to be mapped', value, isDefined(), isString())\n                .toLowerCase();\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/toLowerCase.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 770,
    "kind": "function",
    "name": "toLowerCase",
    "memberof": "src/screenplay/questions/mappings/string/toLowerCase.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/toLowerCase.ts~toLowerCase",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{toLowerCase}",
    "description": " Converts all the alphabetic characters in a string to lowercase.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnswerMappingFunction<string, string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnswerMappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 771,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/toNumber.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Converts a `string` to a `number`.\n *\n * @returns {AnswerMappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n */\nexport function toNumber(): AnswerMappingFunction<string, number> {\n    return (actor: AnswersQuestions) =>\n        (value: string) =>\n            Number(ensure('value', value, isDefined()));\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/toNumber.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 772,
    "kind": "function",
    "name": "toNumber",
    "memberof": "src/screenplay/questions/mappings/string/toNumber.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/toNumber.ts~toNumber",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{toNumber}",
    "description": " Converts a `string` to a `number`.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnswerMappingFunction<string, string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnswerMappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 773,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/toUpperCase.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined, isString } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Converts all the alphabetic characters in a string to uppercase.\n *\n * @returns {AnswerMappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\n */\nexport function toUpperCase(): AnswerMappingFunction<string, string> {\n    return (actor: AnswersQuestions) =>\n        (value: string) =>\n            ensure('The value to be mapped', value, isDefined(), isString())\n                .toUpperCase();\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/toUpperCase.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 774,
    "kind": "function",
    "name": "toUpperCase",
    "memberof": "src/screenplay/questions/mappings/string/toUpperCase.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/toUpperCase.ts~toUpperCase",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{toUpperCase}",
    "description": " Converts all the alphabetic characters in a string to uppercase.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnswerMappingFunction<string, string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnswerMappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 775,
    "kind": "file",
    "name": "src/screenplay/questions/mappings/string/trim.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport { ensure, isDefined, isString } from 'tiny-types';\n\nimport { AnswersQuestions } from '../../../actor';\nimport { AnswerMappingFunction } from '../AnswerMappingFunction';\n\n/**\n * @desc\n *  Removes whitespace from both ends of a string.\n *  Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.)\n *  and all the line terminator characters (LF, CR, etc.).\n *\n * @returns {AnswerMappingFunction<string, string>}\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\n */\nexport function trim(): AnswerMappingFunction<string, string> {\n    return (actor: AnswersQuestions) =>\n        (value: string) =>\n            ensure('The value to be mapped', value, isDefined(), isString())\n                .trim();\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/mappings/string/trim.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 776,
    "kind": "function",
    "name": "trim",
    "memberof": "src/screenplay/questions/mappings/string/trim.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/mappings/string/trim.ts~trim",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions/mappings/string",
    "importStyle": "{trim}",
    "description": " Removes whitespace from both ends of a string.\n Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.)\n and all the line terminator characters (LF, CR, etc.).",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnswerMappingFunction<string, string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnswerMappingFunction<string, string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 777,
    "kind": "file",
    "name": "src/screenplay/questions/proxies/PropertyPathKey.ts",
    "content": "/**\n * @package\n */\nexport type PropertyPathKey = string | symbol | number;\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/proxies/PropertyPathKey.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 778,
    "kind": "file",
    "name": "src/screenplay/questions/proxies/createMetaQuestionProxy.ts",
    "content": "/* eslint-disable @typescript-eslint/ban-types */\nimport { formatted } from '../../../io';\nimport { Answerable } from '../../Answerable';\nimport { Question } from '../../Question';\nimport { MetaQuestion } from '../MetaQuestion';\nimport { describePath } from './describePath';\nimport { key } from './key';\nimport { PropertyPathKey } from './PropertyPathKey';\n\n/**\n * @package\n */\nexport type WithPropertiesAsMetaQuestions<Original_Type, Nested_Type = Original_Type> = {\n    [Key in keyof Nested_Type]: Nested_Type[Key] extends object\n        ? Question<Promise<Nested_Type[Key]>> & MetaQuestion<Answerable<Original_Type>, Promise<Nested_Type[Key]>> & WithPropertiesAsMetaQuestions<Original_Type, Nested_Type[Key]>\n        : Question<Promise<Nested_Type[Key]>> & MetaQuestion<Answerable<Original_Type>, Promise<Nested_Type[Key]>>\n}\n\n/**\n * @package\n */\nexport function createMetaQuestionProxy<Original_Type extends object>(path: PropertyPathKey[] = []): WithPropertiesAsMetaQuestions<Original_Type> {\n\n    const empty = {};\n\n    return new Proxy<Original_Type>(empty as any, {\n        get(target: unknown, name: PropertyPathKey) {\n\n            if (key(name).isOneOf<MetaQuestion<Answerable<Original_Type>, Promise<any>>>('of')) {\n\n                return function of(subject: Answerable<Original_Type>) {\n\n                    return Question.about(formatted `property ${ describePath(path) } of ${ subject }`, actor => {\n                        return actor.answer(subject).then(answer => {\n\n                            return path.reduce((subObject, keyName, index) => {\n                                if (keyName in subObject) {\n                                    return subObject[keyName];\n                                }\n                                throw new Error(formatted `property ${ describePath(path.slice(0, index + 1)) } of ${ subject } doesn't exist`);\n                            }, answer);\n\n                        });\n                    });\n                }\n            }\n\n            return createMetaQuestionProxy<Original_Type>(path.concat(name));\n        }\n    }) as WithPropertiesAsMetaQuestions<Original_Type>;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/proxies/createMetaQuestionProxy.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 779,
    "kind": "function",
    "name": "createMetaQuestionProxy",
    "memberof": "src/screenplay/questions/proxies/createMetaQuestionProxy.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/proxies/createMetaQuestionProxy.ts~createMetaQuestionProxy",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/screenplay/questions/proxies/createMetaQuestionProxy.ts",
    "importStyle": "{createMetaQuestionProxy}",
    "description": "",
    "lineNumber": 40,
    "ignore": true,
    "params": [
      {
        "name": "path",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 780,
    "kind": "file",
    "name": "src/screenplay/questions/proxies/createQuestionProxy.ts",
    "content": "/* eslint-disable @typescript-eslint/ban-types */\nimport { formatted } from '../../../io';\nimport { Answerable } from '../../Answerable';\nimport { Question } from '../../Question';\nimport { describePath } from './describePath';\nimport { key } from './key';\nimport { PropertyPathKey } from './PropertyPathKey';\n\n/**\n * @package\n */\nexport type WithPropertiesAsQuestions<Original_Type> = {\n    [Key in keyof Original_Type]: Original_Type[Key] extends object\n        ? Question<Promise<Original_Type[Key]>> & WithPropertiesAsQuestions<Original_Type[Key]>\n        : Question<Promise<Original_Type[Key]>>\n}\n\n/**\n * @package\n */\nexport function createQuestionProxy<Original_Type extends object>(subject: Answerable<Original_Type>, path: PropertyPathKey[] = []): WithPropertiesAsQuestions<Original_Type> {\n\n    const empty = {};\n\n    return new Proxy<Original_Type>(empty as any, {\n        get(target: unknown, name: PropertyPathKey) {\n\n            if (key(name).isOneOf<Question<any>>('answeredBy', 'describedAs', 'map', 'toString')) {\n\n                const question = Question.about(formatted `property ${ describePath(path) } of ${ subject }`, actor => {\n                    return actor.answer(subject).then(answer => {\n\n                        return path.reduce((subObject, keyName, index) => {\n                            if (keyName in subObject) {\n                                return subObject[keyName];\n                            }\n                            throw new Error(formatted `property ${ describePath(path.slice(0, index + 1)) } of ${ subject } doesn't exist`);\n                        }, answer);\n\n                    })\n                });\n\n                return question[name].bind(question);   // eslint-disable-line unicorn/prefer-prototype-methods\n            }\n\n            return createQuestionProxy(subject, path.concat(name));\n        }\n    }) as WithPropertiesAsQuestions<Original_Type>;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/proxies/createQuestionProxy.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 781,
    "kind": "function",
    "name": "createQuestionProxy",
    "memberof": "src/screenplay/questions/proxies/createQuestionProxy.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/proxies/createQuestionProxy.ts~createQuestionProxy",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/screenplay/questions/proxies/createQuestionProxy.ts",
    "importStyle": "{createQuestionProxy}",
    "description": "",
    "lineNumber": 41,
    "ignore": true,
    "params": [
      {
        "name": "subject",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 782,
    "kind": "file",
    "name": "src/screenplay/questions/proxies/describePath.ts",
    "content": "import { PropertyPathKey } from './PropertyPathKey';\n\n/**\n * @package\n */\nexport function describePath(parts: PropertyPathKey[]): string {\n    return parts.reduce(\n        (acc, segment) =>\n            acc.concat(\n                isNumber(segment)\n                    ? `[${ segment }]`\n                    : segment\n            ),\n        [],\n    ).join('.');\n}\n\n/**\n * @private\n */\nfunction isNumber(segment: PropertyPathKey): segment is number {\n    return Number.parseInt(String(segment), 10).toString() === segment;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/proxies/describePath.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 783,
    "kind": "function",
    "name": "describePath",
    "memberof": "src/screenplay/questions/proxies/describePath.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/proxies/describePath.ts~describePath",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/screenplay/questions/proxies/describePath.ts",
    "importStyle": "{describePath}",
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "params": [
      {
        "name": "parts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 784,
    "kind": "function",
    "name": "isNumber",
    "memberof": "src/screenplay/questions/proxies/describePath.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/proxies/describePath.ts~isNumber",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/screenplay/questions/proxies/describePath.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 43,
    "ignore": true,
    "params": [
      {
        "name": "segment",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 785,
    "kind": "file",
    "name": "src/screenplay/questions/proxies/index.ts",
    "content": "export * from './createMetaQuestionProxy';\nexport * from './createQuestionProxy';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/proxies/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 786,
    "kind": "file",
    "name": "src/screenplay/questions/proxies/key.ts",
    "content": "/* eslint-disable @typescript-eslint/ban-types,@typescript-eslint/explicit-module-boundary-types */\nimport { PropertyPathKey } from './PropertyPathKey';\n\n/**\n * @package\n * @param {PropertyPathKey} keyName\n */\nexport function key(keyName: PropertyPathKey) {\n    return {\n        isOneOf<T extends object = object>(...keys: Array<keyof T>) {\n            return !!~keys.indexOf(keyName as any);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/proxies/key.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 787,
    "kind": "function",
    "name": "key",
    "memberof": "src/screenplay/questions/proxies/key.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/proxies/key.ts~key",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/screenplay/questions/proxies/key.ts",
    "importStyle": "{key}",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "PropertyPathKey"
        ],
        "spread": false,
        "optional": false,
        "name": "keyName",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 788,
    "kind": "file",
    "name": "src/screenplay/questions/q.ts",
    "content": "import { Answerable } from '../Answerable';\nimport { Question } from '../Question';\n\n/**\n * @desc\n *  A Screenplay-flavour of a [tagged template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates),\n *  `q` is a tag function capable of resolving any `Answerable<string | number>` you parametrise it with (i.e. a {@link Question}).\n *\n * @example <caption>Interpolating `Questions`</caption>\n *  import { q, actorCalled } from '@serenity-js/core';\n *  import { Send, DeleteRequest } from '@serenity-js/rest';\n *\n *  actorCalled('Alice').attemptsTo(\n *      Send.a(DeleteRequest.to(\n *          q `/articles/${ Text.of(Article.id()) }`\n *      ))\n *  )\n *\n * @example <caption>Using a custom description</caption>\n *  import { q, actorCalled } from '@serenity-js/core';\n *  import { Send, DeleteRequest } from '@serenity-js/rest';\n *\n *  actorCalled('Alice').attemptsTo(\n *      Send.a(DeleteRequest.to(\n *          q `/articles/${ Text.of(Article.id()) }`.describedAs('/articles/:id')\n *      ))\n *  )\n *\n * @param {TemplateStringsArray} templates\n * @param {Array<Answerable<string | number>>} parameters\n *\n * @returns {Question<Promise<string>>}\n *\n * @see {@link Question}\n */\nexport function q(templates: TemplateStringsArray, ...parameters: Array<Answerable<string | number>>): Question<Promise<string>> {\n    return Question.about(templates.join('{}'), actor =>\n        Promise.all(parameters.map(parameter => actor.answer(parameter)))\n            .then(answers =>\n                templates\n                    .map((template, i) =>\n                        i < answers.length\n                            ? [ template, answers[i] ]\n                            : [ template ])\n                    .reduce((acc, tuple) =>\n                        acc.concat(tuple)\n                    )\n                    .join('')\n            )\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/questions/q.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 789,
    "kind": "function",
    "name": "q",
    "memberof": "src/screenplay/questions/q.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/q.ts~q",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/questions",
    "importStyle": "{q}",
    "description": " A Screenplay-flavour of a [tagged template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates),\n `q` is a tag function capable of resolving any `Answerable<string | number>` you parametrise it with (i.e. a {@link Question}).",
    "examples": [
      "<caption>Interpolating `Questions`</caption>\n import { q, actorCalled } from '@serenity-js/core';\n import { Send, DeleteRequest } from '@serenity-js/rest';\n\n actorCalled('Alice').attemptsTo(\n     Send.a(DeleteRequest.to(\n         q `/articles/${ Text.of(Article.id()) }`\n     ))\n )",
      "<caption>Using a custom description</caption>\n import { q, actorCalled } from '@serenity-js/core';\n import { Send, DeleteRequest } from '@serenity-js/rest';\n\n actorCalled('Alice').attemptsTo(\n     Send.a(DeleteRequest.to(\n         q `/articles/${ Text.of(Article.id()) }`.describedAs('/articles/:id')\n     ))\n )"
    ],
    "see": [
      "{@link Question}"
    ],
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TemplateStringsArray"
        ],
        "spread": false,
        "optional": false,
        "name": "templates",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Answerable<string | number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 790,
    "kind": "file",
    "name": "src/screenplay/tasks/Loop.ts",
    "content": "import { formatted, Reducible } from '../../io';\nimport { Activity } from '../Activity';\nimport { AnswersQuestions, PerformsActivities, UsesAbilities } from '../actor';\nimport { Answerable } from '../Answerable';\nimport { Question } from '../Question';\nimport { Task } from '../Task';\n\n/**\n * @desc\n *  Enables the {@link Actor} to iterate over a list of items produced by any {@link Answerable}.\n *\n *  You can think of `Loop` as a more sophisticated Screenplay-style equivalent of\n *  [`Array.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\n *  `Loop` is capable of working with both synchronous data structures,\n *  such as [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n *  and `Question<Array<T>>`,\n *  as well as asynchronous ones, so `Promise<Array<T>>` and `Question<Promise<Array<T>>>`.\n *\n *  Use {@link Loop.item} to access the current item being processed by {@link Loop}, and {@link Loop.index}\n *  to access the index of {@link Loop.item} in the list.\n *\n * @example <caption>Basic scenario - Iterating over a static list of items</caption>\n *  import { actorCalled, Loop, Log } from '@serenity-js/core';\n *\n *  actorCalled('Joe').attemptsTo(\n *      Loop.over([ 'apple', 'banana', 'candy' ]).to(\n *          Log.the('current element', Loop.item<string>()),\n *          Log.the('current index', Loop.index()),\n *      ),\n *  );\n *\n * @example <caption>API scenario - Iterating over items in an API response</caption>\n *\n *  import { actorCalled, Loop } from '@serenity-js/core';\n *  import { Send, GetRequest, CallAnApi, LastResponse } from '@serenity-js/rest';\n *  import { Ensure, property, isGreaterThan } from '@serenity-js/assertions';\n *\n *  interface TodoItem {\n *      userId: number;\n *      id: number;\n *      title: string;\n *      completed: boolean;\n *  }\n *\n *  actorCalled('Joe').whoCan(\n *      CallAnApi.at('https://jsonplaceholder.typicode.com')\n *  ).attemptsTo(\n *      Send.a(GetRequest.to('/todos')),\n *      Loop.over(LastResponse.body<TodoItem[]>()).to(\n *          Ensure.that(\n *              Loop.item<TodoItem>(),\n *              property('userId', isGreaterThan(0)),\n *          ),\n *      )\n *  );\n *\n * @example <caption>UI scenario - Example widget</caption>\n *  <nav>\n *      <div data-test=\"cookies\">\n *          <label for=\"functional-cookies\">\n *              <input type=\"checkbox\" id=\"functional-cookies\" />Allow functional cookies\n *          </label>\n *          <label for=\"performance-cookies\">\n *              <input type=\"checkbox\" id=\"performance-cookies\" />Allow performance cookies\n *          </label>\n *          <label for=\"advertising-cookies\">\n *              <input type=\"checkbox\" id=\"advertising-cookies\" />Allow advertising cookies\n *          </label>\n *      </div>\n *  </nav>\n *\n * @example <caption>UI scenario - Lean Page Object</caption>\n *  import { Target } from '@serenity-js/protractor';\n *  import { browser, by } from 'protractor';\n *\n *  class Cookies {\n *      static labels = Target.all('cookie options')\n *          .located(by.css('[data-test=\"cookies\"]'));\n *\n *      static checkbox = Target.the('checkbox')\n *          .located(by.tagName('input')),\n *  }\n *\n * @example <caption>UI scenario - Performing the same set of activities with each element</caption>\n *  import { actorCalled, Loop } from '@serenity-js/core';\n *  import { Click, Text, isSelected } from '@serenity-js/protractor';\n *  import { Ensure, startsWith } from '@serenity-js/assertions';\n *  import { protractor } from 'protractor';\n *\n *  actorCalled('Joe')\n *      .whoCan(BrowseTheWeb.using(protractor.browser))\n *      .attemptsTo(\n *          Loop.over(Cookies.labels).to(\n *               Ensure.that(\n *                  Text.of(Loop.item<ElementFinder>()),\n *                  startsWith('Allow'),\n *              ),\n *\n *              Click.on(Loop.item<ElementFinder>()),\n *              Ensure.that(\n *                  Cookies.checkbox.of(Loop.item<ElementFinder>()),\n *                  isSelected(),\n *              ),\n *          ),\n *      );\n *\n * @extends {Task}\n *\n * @see {@link Loop.item}\n * @see {@link Loop.index}\n * @see {@link Question}\n */\nexport class Loop<Item> extends Task {\n    private static currentItem: unknown = undefined;\n    private static currentIndex = 0;\n\n    /**\n     * @desc\n     *  Instantiates a {@link Task} to {@link Loop}\n     *  that enables the {@link Actor} to iterate over `items`\n     *  to perform some `activities`.\n     *\n     * @param {items: Answerable<ReducibleCollection>} items\n     * @returns {LoopBuilder}\n     */\n    static over<T>(items: Answerable<Reducible>): { to: (...activities: Activity[]) => Loop<T> } {\n        return {\n            to: (...activities: Activity[]) =>\n                new Loop<T>(items, activities)\n        }\n    }\n\n    /**\n     * @desc\n     *  Returns the current item being processed by {@link Loop.over}.\n     *\n     *  **Please note** that in order for the TypeScript transpiler to understand the exact `ExpectedType`\n     *  of the {@link Question} produced by this method you can optionally configure it with\n     *  a [_type variable_](https://www.typescriptlang.org/docs/handbook/generics.html).\n     *\n     *  For example, configuring the method with type variable of `string`, so `Loop.item<string>()`,\n     *  tells the transpiler that a `Question<string>` will be returned.\n     *\n     *  If the type variable is not configured, the transpiler assumes that returned type is a\n     *  `Question<any>`. This means that while your code could still work, you'd miss out\n     *  on checking provided by TypeScript.\n     *\n     * @returns {Question<ExpectedType>}\n     */\n    static item<ExpectedType = any>(): Question<ExpectedType> {\n        return Question.about<ExpectedType>(`current loop item`, actor =>\n            Loop.currentItem as ExpectedType,\n        );\n    }\n\n    /**\n     * @desc\n     *  Returns the index of current {@link Loop.item} in the `Answerable<Array>` given to {@link Loop.over}.\n     *\n     *  The index starts at `0`.\n     *\n     * @returns {Question<number>}\n     */\n    static index(): Question<number> {\n        return Question.about<number>(`current loop index`, actor =>\n            Loop.currentIndex,\n        );\n    }\n\n    /**\n     * @param {Answerable<Reducible>} items\n     * @param {Activity[]} activities\n     */\n    constructor(\n        private readonly items: Answerable<Reducible>,\n        private readonly activities: Activity[]\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link Actor}\n     *  perform this {@link Task}.\n     *\n     * @param {PerformsActivities & UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link Actor}\n     * @see {@link PerformsActivities}\n     * @see {@link UsesAbilities}\n     * @see {@link AnswersQuestions}\n     */\n    performAs(actor: PerformsActivities & UsesAbilities & AnswersQuestions): PromiseLike<void> | PromiseLike<any> {\n        return actor.answer(this.items)\n            .then(items =>\n                items.reduce((previous: Promise<void>, current: Item, index: number) => {\n                    return previous.then(() => {\n                        Loop.currentIndex = index;\n                        Loop.currentItem  = current;\n\n                        return actor.attemptsTo(\n                            ...this.activities\n                        );\n                    });\n                }, Promise.resolve(void 0))\n            );\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        const description =  Array.isArray(this.items)\n            ? `a list of ${ this.items.length } item${ this.items.length !== 1 ? 's' : '' }`\n            : formatted `${ this.items }`;\n\n        return `#actor loops over ${ description }`;\n    }\n}\n\n/**\n * @typedef {Object} LoopBuilder\n * @property {function(...activities: Activity[]): Loop} to\n *\n * @example <caption>Basic scenario - Iterating over a static list of items</caption>\n *  import { actorCalled, Loop, Log } from '@serenity-js/core';\n *\n *  actorCalled('Joe').attemptsTo(\n *      Loop.over([ 'apple', 'banana', 'candy' ]).to(\n *          Log.the('current element', Loop.item<string>()),\n *      ),\n *  );\n *\n * @see {@link Loop}\n * @see {@link Loop.over}\n */\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/tasks/Loop.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 791,
    "kind": "class",
    "name": "Loop",
    "memberof": "src/screenplay/tasks/Loop.ts",
    "static": true,
    "longname": "src/screenplay/tasks/Loop.ts~Loop",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/screenplay/tasks",
    "importStyle": "{Loop}",
    "description": " Enables the {@link Actor} to iterate over a list of items produced by any {@link Answerable}.\n\n You can think of `Loop` as a more sophisticated Screenplay-style equivalent of\n [`Array.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\n `Loop` is capable of working with both synchronous data structures,\n such as [`Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n and `Question<Array<T>>`,\n as well as asynchronous ones, so `Promise<Array<T>>` and `Question<Promise<Array<T>>>`.\n\n Use {@link Loop.item} to access the current item being processed by {@link Loop}, and {@link Loop.index}\n to access the index of {@link Loop.item} in the list.",
    "examples": [
      "<caption>Basic scenario - Iterating over a static list of items</caption>\n import { actorCalled, Loop, Log } from '@serenity-js/core';\n\n actorCalled('Joe').attemptsTo(\n     Loop.over([ 'apple', 'banana', 'candy' ]).to(\n         Log.the('current element', Loop.item<string>()),\n         Log.the('current index', Loop.index()),\n     ),\n );",
      "<caption>API scenario - Iterating over items in an API response</caption>\n\n import { actorCalled, Loop } from '@serenity-js/core';\n import { Send, GetRequest, CallAnApi, LastResponse } from '@serenity-js/rest';\n import { Ensure, property, isGreaterThan } from '@serenity-js/assertions';\n\n interface TodoItem {\n     userId: number;\n     id: number;\n     title: string;\n     completed: boolean;\n }\n\n actorCalled('Joe').whoCan(\n     CallAnApi.at('https://jsonplaceholder.typicode.com')\n ).attemptsTo(\n     Send.a(GetRequest.to('/todos')),\n     Loop.over(LastResponse.body<TodoItem[]>()).to(\n         Ensure.that(\n             Loop.item<TodoItem>(),\n             property('userId', isGreaterThan(0)),\n         ),\n     )\n );",
      "<caption>UI scenario - Example widget</caption>\n <nav>\n     <div data-test=\"cookies\">\n         <label for=\"functional-cookies\">\n             <input type=\"checkbox\" id=\"functional-cookies\" />Allow functional cookies\n         </label>\n         <label for=\"performance-cookies\">\n             <input type=\"checkbox\" id=\"performance-cookies\" />Allow performance cookies\n         </label>\n         <label for=\"advertising-cookies\">\n             <input type=\"checkbox\" id=\"advertising-cookies\" />Allow advertising cookies\n         </label>\n     </div>\n </nav>",
      "<caption>UI scenario - Lean Page Object</caption>\n import { Target } from '@serenity-js/protractor';\n import { browser, by } from 'protractor';\n\n class Cookies {\n     static labels = Target.all('cookie options')\n         .located(by.css('[data-test=\"cookies\"]'));\n\n     static checkbox = Target.the('checkbox')\n         .located(by.tagName('input')),\n }",
      "<caption>UI scenario - Performing the same set of activities with each element</caption>\n import { actorCalled, Loop } from '@serenity-js/core';\n import { Click, Text, isSelected } from '@serenity-js/protractor';\n import { Ensure, startsWith } from '@serenity-js/assertions';\n import { protractor } from 'protractor';\n\n actorCalled('Joe')\n     .whoCan(BrowseTheWeb.using(protractor.browser))\n     .attemptsTo(\n         Loop.over(Cookies.labels).to(\n              Ensure.that(\n                 Text.of(Loop.item<ElementFinder>()),\n                 startsWith('Allow'),\n             ),\n\n             Click.on(Loop.item<ElementFinder>()),\n             Ensure.that(\n                 Cookies.checkbox.of(Loop.item<ElementFinder>()),\n                 isSelected(),\n             ),\n         ),\n     );"
    ],
    "see": [
      "{@link Loop.item}",
      "{@link Loop.index}",
      "{@link Question}"
    ],
    "lineNumber": 120,
    "interface": false,
    "extends": [
      "Task"
    ]
  },
  {
    "__docId__": 792,
    "kind": "typedef",
    "name": "LoopBuilder",
    "memberof": "src/screenplay/tasks/Loop.ts",
    "static": true,
    "longname": "src/screenplay/tasks/Loop.ts~LoopBuilder",
    "access": "public",
    "description": "",
    "examples": [
      "<caption>Basic scenario - Iterating over a static list of items</caption>\n import { actorCalled, Loop, Log } from '@serenity-js/core';\n\n actorCalled('Joe').attemptsTo(\n     Loop.over([ 'apple', 'banana', 'candy' ]).to(\n         Log.the('current element', Loop.item<string>()),\n     ),\n );"
    ],
    "see": [
      "{@link Loop}",
      "{@link Loop.over}"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function(...activities: Activity[]): Loop"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "LoopBuilder"
    }
  },
  {
    "__docId__": 793,
    "kind": "member",
    "name": "currentItem",
    "memberof": "src/screenplay/tasks/Loop.ts~Loop",
    "static": true,
    "longname": "src/screenplay/tasks/Loop.ts~Loop.currentItem",
    "access": "private",
    "description": " ",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 794,
    "kind": "member",
    "name": "currentIndex",
    "memberof": "src/screenplay/tasks/Loop.ts~Loop",
    "static": true,
    "longname": "src/screenplay/tasks/Loop.ts~Loop.currentIndex",
    "access": "private",
    "description": " ",
    "lineNumber": 115,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 795,
    "kind": "method",
    "name": "over",
    "memberof": "src/screenplay/tasks/Loop.ts~Loop",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/tasks/Loop.ts~Loop.over",
    "access": "public",
    "description": " Instantiates a {@link Task} to {@link Loop}\n that enables the {@link Actor} to iterate over `items`\n to perform some `activities`.",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{LoopBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "items: Answerable<ReducibleCollection>"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "LoopBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 796,
    "kind": "method",
    "name": "item",
    "memberof": "src/screenplay/tasks/Loop.ts~Loop",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/tasks/Loop.ts~Loop.item",
    "access": "public",
    "description": " Returns the current item being processed by {@link Loop.over}.\n\n **Please note** that in order for the TypeScript transpiler to understand the exact `ExpectedType`\n of the {@link Question} produced by this method you can optionally configure it with\n a [_type variable_](https://www.typescriptlang.org/docs/handbook/generics.html).\n\n For example, configuring the method with type variable of `string`, so `Loop.item<string>()`,\n tells the transpiler that a `Question<string>` will be returned.\n\n If the type variable is not configured, the transpiler assumes that returned type is a\n `Question<any>`. This means that while your code could still work, you'd miss out\n on checking provided by TypeScript.",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<ExpectedType>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<ExpectedType>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "index",
    "memberof": "src/screenplay/tasks/Loop.ts~Loop",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/tasks/Loop.ts~Loop.index",
    "access": "public",
    "description": " Returns the index of current {@link Loop.item} in the `Answerable<Array>` given to {@link Loop.over}.\n\n The index starts at `0`.",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<number>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<number>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 798,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/tasks/Loop.ts~Loop",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/tasks/Loop.ts~Loop#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Reducible>"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Activity[]"
        ],
        "spread": false,
        "optional": false,
        "name": "activities",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/tasks/Loop.ts~Loop",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/tasks/Loop.ts~Loop#performAs",
    "access": "public",
    "description": " Makes the provided {@link Actor}\n perform this {@link Task}.",
    "see": [
      "{@link Actor}",
      "{@link PerformsActivities}",
      "{@link UsesAbilities}",
      "{@link AnswersQuestions}"
    ],
    "lineNumber": 290,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PerformsActivities & UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 800,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/tasks/Loop.ts~Loop",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/tasks/Loop.ts~Loop#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link Activity}.",
    "lineNumber": 323,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 801,
    "kind": "file",
    "name": "src/screenplay/tasks/index.ts",
    "content": "export * from './Loop';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/screenplay/tasks/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 802,
    "kind": "file",
    "name": "src/stage/Cast.ts",
    "content": "import { Ability, Actor } from '../screenplay';\n\n/**\n * @desc\n *  Describes the {@link Actor}s available to take part in the performance.\n *\n * @example <caption>Define a cast of actors interacting with a Web UI</caption>\n *\n *  import { engage, Actor, Cast } from '@serenity-js/core';\n *  import { BrowseTheWeb } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  class UIActors implements Cast {\n *      prepare(actor: Actor) {\n *          return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n *      }\n *  }\n *\n *  beforeEach(() => engage(new UIActors()));\n *\n * @example <caption>Using a generic cast</caption>\n *\n *  import { engage, Cast } from '@serenity-js/core';\n *  import { BrowseTheWeb } from '@serenity-js/protractor';\n *  import { protractor } from 'protractor';\n *\n *  beforeEach(() => engage(BrowseTheWeb.using(protractor.browser)));\n *\n * @example <caption>Preparing actors differently based on their name</caption>\n *\n *  import { actorCalled, engage, Cast } from '@serenity-js/core';\n *  import { BrowseTheWeb } from '@serenity-js/protractor';\n *  import { CallAnApi } from '@serenity-js/rest';\n *  import { protractor } from 'protractor';\n *\n *  class Actors implements Cast {\n *      prepare(actor: Actor) {\n *          switch (actor.name) {\n *              case 'James':\n *                  return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n *              default:\n *                  return actor.whoCan(CallAnApi.at(protractor.browser.baseUrl));\n *          }\n *      }\n *  }\n *\n *  beforeEach(() => engage(new Actors()));\n *\n *  actorCalled('James') // returns an actor using a browser\n *  actorCalled('Alice') // returns an actor interacting with an API\n *\n * @see {@link Stage}\n * @interface\n */\nexport abstract class Cast {\n    /**\n     * @desc\n     *  Creates a generic `Cast` implementation, where every actor\n     *  is given all the abilities specified when the method is called.\n     *\n     * @param {Ability[]} abilities\n     * @returns {Cast}\n     */\n    static whereEveryoneCan(...abilities: Ability[]): Cast {\n        return new GenericCast(abilities);\n    }\n\n    /**\n     * @desc\n     *  Configures an {@link Actor} instantiated when {@link Stage#actor} is invoked.\n     *\n     * @param {Actor} actor\n     * @return {Actor}\n     *\n     * @see {@link engage}\n     */\n    abstract prepare(actor: Actor): Actor;\n}\n\n/**\n * @package\n */\nclass GenericCast implements Cast {\n    constructor(private readonly abilities: Ability[]) {\n    }\n\n    prepare(actor: Actor): Actor {\n        return actor.whoCan(...this.abilities);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/Cast.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 803,
    "kind": "class",
    "name": "Cast",
    "memberof": "src/stage/Cast.ts",
    "static": true,
    "longname": "src/stage/Cast.ts~Cast",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{Cast}",
    "description": " Describes the {@link Actor}s available to take part in the performance.",
    "examples": [
      "<caption>Define a cast of actors interacting with a Web UI</caption>\n\n import { engage, Actor, Cast } from '@serenity-js/core';\n import { BrowseTheWeb } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n class UIActors implements Cast {\n     prepare(actor: Actor) {\n         return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n     }\n }\n\n beforeEach(() => engage(new UIActors()));",
      "<caption>Using a generic cast</caption>\n\n import { engage, Cast } from '@serenity-js/core';\n import { BrowseTheWeb } from '@serenity-js/protractor';\n import { protractor } from 'protractor';\n\n beforeEach(() => engage(BrowseTheWeb.using(protractor.browser)));",
      "<caption>Preparing actors differently based on their name</caption>\n\n import { actorCalled, engage, Cast } from '@serenity-js/core';\n import { BrowseTheWeb } from '@serenity-js/protractor';\n import { CallAnApi } from '@serenity-js/rest';\n import { protractor } from 'protractor';\n\n class Actors implements Cast {\n     prepare(actor: Actor) {\n         switch (actor.name) {\n             case 'James':\n                 return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n             default:\n                 return actor.whoCan(CallAnApi.at(protractor.browser.baseUrl));\n         }\n     }\n }\n\n beforeEach(() => engage(new Actors()));\n\n actorCalled('James') // returns an actor using a browser\n actorCalled('Alice') // returns an actor interacting with an API"
    ],
    "see": [
      "{@link Stage}"
    ],
    "lineNumber": 62,
    "interface": true
  },
  {
    "__docId__": 804,
    "kind": "method",
    "name": "whereEveryoneCan",
    "memberof": "src/stage/Cast.ts~Cast",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/Cast.ts~Cast.whereEveryoneCan",
    "access": "public",
    "description": " Creates a generic `Cast` implementation, where every actor\n is given all the abilities specified when the method is called.",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Cast}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Ability[]"
        ],
        "spread": false,
        "optional": false,
        "name": "abilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cast"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 805,
    "kind": "class",
    "name": "GenericCast",
    "memberof": "src/stage/Cast.ts",
    "static": true,
    "longname": "src/stage/Cast.ts~GenericCast",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/stage/Cast.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 127,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 806,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/Cast.ts~GenericCast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Cast.ts~GenericCast#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true
  },
  {
    "__docId__": 807,
    "kind": "method",
    "name": "prepare",
    "memberof": "src/stage/Cast.ts~GenericCast",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Cast.ts~GenericCast#prepare",
    "access": "public",
    "description": " ",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Actor"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 808,
    "kind": "file",
    "name": "src/stage/Clock.ts",
    "content": "import { Timestamp } from '../model';\n\n/**\n * @desc A {@link Clock} tells the time.\n *\n * @example\n * const now: Timestamp = new Clock().now()\n */\nexport class Clock {\n    constructor(private readonly checkTime: () => Date = () => new Date()) {\n    }\n\n    /**\n     * @returns {Timestamp} current time\n     */\n    now(): Timestamp {\n        return new Timestamp(this.checkTime());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/Clock.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 809,
    "kind": "class",
    "name": "Clock",
    "memberof": "src/stage/Clock.ts",
    "static": true,
    "longname": "src/stage/Clock.ts~Clock",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{Clock}",
    "description": "A {@link Clock} tells the time.",
    "examples": [
      "const now: Timestamp = new Clock().now()"
    ],
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 810,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/Clock.ts~Clock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Clock.ts~Clock#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 811,
    "kind": "method",
    "name": "now",
    "memberof": "src/stage/Clock.ts~Clock",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Clock.ts~Clock#now",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Timestamp} current time"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": "current time"
    },
    "params": []
  },
  {
    "__docId__": 812,
    "kind": "file",
    "name": "src/stage/DressingRoom.ts",
    "content": "import { Ability, Actor } from '../screenplay';\n\n/**\n * @desc\n *  Prepares the {@link Actor} for the performance.\n *\n * @example <caption>A dressing room for actors interacting with a Web UI</caption>\n *\n *  import { serenity, Actor, DressingRoom } from '@serenity-js/core'\n *  import { BrowseTheWeb } from '@serenity-js/protractor'\n *  import { protractor } from 'protractor'\n *\n *  class UIActors implements DressingRoom {\n *      prepare(actor: Actor) {\n *          return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n *      }\n *  }\n *\n *  const stage = serenity.callToStageFor(new UIActors());\n *\n * @see {@link Stage}\n * @see {@link Cast}\n * @interface\n *\n * @deprecated Please use the Cast instead\n */\nexport abstract class DressingRoom {\n    /**\n     * @desc\n     *  Creates a generic `DressingRoom` implementation, where every actor\n     *  is given all the abilities specified when the method is called.\n     *\n     * @param {Ability[]} abilities\n     * @returns {DressingRoom}\n     */\n    static whereEveryoneCan(...abilities: Ability[]): DressingRoom {\n        return new GenericDressingRoom(abilities);\n    }\n\n    abstract prepare(actor: Actor): Actor;\n}\n\n/**\n * @package\n */\nclass GenericDressingRoom implements DressingRoom {\n    constructor(private readonly abilities: Ability[]) {\n    }\n\n    prepare(actor: Actor): Actor {\n        return actor.whoCan(...this.abilities);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/DressingRoom.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 813,
    "kind": "class",
    "name": "DressingRoom",
    "memberof": "src/stage/DressingRoom.ts",
    "static": true,
    "longname": "src/stage/DressingRoom.ts~DressingRoom",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{DressingRoom}",
    "description": " Prepares the {@link Actor} for the performance.",
    "examples": [
      "<caption>A dressing room for actors interacting with a Web UI</caption>\n\n import { serenity, Actor, DressingRoom } from '@serenity-js/core'\n import { BrowseTheWeb } from '@serenity-js/protractor'\n import { protractor } from 'protractor'\n\n class UIActors implements DressingRoom {\n     prepare(actor: Actor) {\n         return actor.whoCan(BrowseTheWeb.using(protractor.browser));\n     }\n }\n\n const stage = serenity.callToStageFor(new UIActors());"
    ],
    "see": [
      "{@link Stage}",
      "{@link Cast}"
    ],
    "lineNumber": 34,
    "deprecated": "Please use the Cast instead",
    "interface": true
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "whereEveryoneCan",
    "memberof": "src/stage/DressingRoom.ts~DressingRoom",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/DressingRoom.ts~DressingRoom.whereEveryoneCan",
    "access": "public",
    "description": " Creates a generic `DressingRoom` implementation, where every actor\n is given all the abilities specified when the method is called.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DressingRoom}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Ability[]"
        ],
        "spread": false,
        "optional": false,
        "name": "abilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DressingRoom"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 815,
    "kind": "class",
    "name": "GenericDressingRoom",
    "memberof": "src/stage/DressingRoom.ts",
    "static": true,
    "longname": "src/stage/DressingRoom.ts~GenericDressingRoom",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/stage/DressingRoom.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 90,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 816,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/DressingRoom.ts~GenericDressingRoom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/DressingRoom.ts~GenericDressingRoom#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true
  },
  {
    "__docId__": 817,
    "kind": "method",
    "name": "prepare",
    "memberof": "src/stage/DressingRoom.ts~GenericDressingRoom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/DressingRoom.ts~GenericDressingRoom#prepare",
    "access": "public",
    "description": " ",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Actor"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 818,
    "kind": "file",
    "name": "src/stage/Extras.ts",
    "content": "import { Actor } from '../screenplay';\nimport { Cast } from './Cast';\n\n/**\n * @desc\n *  Produces no-op actors with no special {@link Ability}\n *\n * @private\n */\nexport class Extras implements Cast {\n    prepare(actor: Actor): Actor {\n        return actor;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/Extras.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 819,
    "kind": "class",
    "name": "Extras",
    "memberof": "src/stage/Extras.ts",
    "static": true,
    "longname": "src/stage/Extras.ts~Extras",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/core/src/stage/Extras.ts",
    "importStyle": "{Extras}",
    "description": " Produces no-op actors with no special {@link Ability}",
    "lineNumber": 17,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "prepare",
    "memberof": "src/stage/Extras.ts~Extras",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Extras.ts~Extras#prepare",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "Actor"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 821,
    "kind": "file",
    "name": "src/stage/ListensToDomainEvents.ts",
    "content": "import { DomainEvent } from '../events';\n\n/**\n * @desc\n *  A {@link StageCrewMember} that can listen and react to {@link DomainEvent}s\n *\n * @see {@link StageCrewMember}\n * @see {@link StageCrewMemberBuilder}\n * @see {@link Serenity#configure}\n * @see {@link SerenityConfig#crew}\n */\nexport interface ListensToDomainEvents {\n\n    /**\n     * @desc\n     *  Handles {@link DomainEvent} objects emitted by the {@link Stage}\n     *  that this {@link StageCrewMember} is assigned to.\n     *\n     * @type {function(event: DomainEvent): void}\n     */\n    notifyOf: (event: DomainEvent) => void;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/ListensToDomainEvents.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 822,
    "kind": "class",
    "name": "ListensToDomainEvents",
    "memberof": "src/stage/ListensToDomainEvents.ts",
    "static": true,
    "longname": "src/stage/ListensToDomainEvents.ts~ListensToDomainEvents",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{ListensToDomainEvents}",
    "description": " A {@link StageCrewMember} that can listen and react to {@link DomainEvent}s",
    "see": [
      "{@link StageCrewMember}",
      "{@link StageCrewMemberBuilder}",
      "{@link Serenity#configure}",
      "{@link SerenityConfig#crew}"
    ],
    "lineNumber": 19,
    "interface": true
  },
  {
    "__docId__": 823,
    "kind": "member",
    "name": "notifyOf",
    "memberof": "src/stage/ListensToDomainEvents.ts~ListensToDomainEvents",
    "static": false,
    "longname": "src/stage/ListensToDomainEvents.ts~ListensToDomainEvents#notifyOf",
    "access": "public",
    "description": " Handles {@link DomainEvent} objects emitted by the {@link Stage}\n that this {@link StageCrewMember} is assigned to.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "function(event: DomainEvent): void"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 824,
    "kind": "file",
    "name": "src/stage/Stage.ts",
    "content": "import { ensure, isDefined } from 'tiny-types';\n\nimport { ConfigurationError, LogicError } from '../errors';\nimport { AsyncOperationAttempted, AsyncOperationCompleted, AsyncOperationFailed, DomainEvent, SceneFinishes, SceneStarts, TestRunFinishes } from '../events';\nimport { CorrelationId, Description, Timestamp } from '../model';\nimport { Actor } from '../screenplay/actor';\nimport { ListensToDomainEvents } from '../stage';\nimport { Cast } from './Cast';\nimport { StageManager } from './StageManager';\n\n/**\n * @desc\n *  The place where {@link Actor}s perform.\n *\n *  In more technical terms, the Stage is the main event bus propagating {@link DomainEvent}s\n *  to {@link Actor}s it instantiates and {@link StageCrewMember}s that have been registered with it.\n *\n * @see {@link configure}\n * @see {@link engage}\n */\nexport class Stage {\n    /**\n     * @private\n     */\n    private static readonly unknownSceneId = new CorrelationId('unknown')\n\n    /**\n     * @desc\n     *  Actors instantiated after the scene has started,\n     *  who will be dismissed when the scene finishes.\n     *\n     * @private\n     */\n    private actorsOnFrontStage: Map<string, Actor> = new Map<string, Actor>();\n\n    /**\n     * @desc\n     *  Actors instantiated before the scene has started,\n     *  who will be dismissed when the test run finishes.\n     *\n     * @private\n     */\n    private actorsOnBackstage: Map<string, Actor> = new Map<string, Actor>();\n\n    private actorsOnStage: Map<string, Actor> = this.actorsOnBackstage;\n\n    /**\n     * @desc\n     *  The most recent actor referenced via the {@link actor} method\n     *\n     * @private\n     */\n    private actorInTheSpotlight: Actor = undefined;\n\n    private currentActivity: CorrelationId = undefined;\n    private currentScene: CorrelationId = Stage.unknownSceneId;\n\n    /**\n     * @param {Cast} cast\n     * @param {StageManager} manager\n     */\n    constructor(\n        private cast: Cast,\n        private readonly manager: StageManager,\n    ) {\n        ensure('Cast', cast, isDefined());\n        ensure('StageManager', manager, isDefined());\n    }\n\n    /**\n     * @desc An alias for {@link Stage#actor}\n     * @see {@link Stage#actor}\n     * @alias {Stage#actor}\n     * @param {string} name\n     * @return {Actor}\n     */\n    theActorCalled(name: string): Actor {\n        return this.actor(name);\n    }\n\n    /**\n     * @desc Instantiates a new {@link Actor} or fetches an existing one\n     * by their name if they've already been instantiated.\n     *\n     * @param {string} name - case-sensitive name of the Actor\n     * @return {Actor}\n     */\n    actor(name: string): Actor {\n        if (! this.instantiatedActorCalled(name)) {\n            let actor;\n            try {\n                const newActor = new Actor(name, this);\n\n                actor = this.cast.prepare(newActor);\n\n                // todo this.manager.notifyOf(ActorStarts)\n                // todo: map this in Serenity BDD Reporter so that the \"cast\" is recorded\n            }\n            catch (error) {\n                throw new ConfigurationError(`${ this.typeOf(this.cast) } encountered a problem when preparing actor \"${ name }\" for stage`, error);\n            }\n\n            if (! (actor instanceof Actor)) {\n                throw new ConfigurationError(`Instead of a new instance of actor \"${ name }\", ${ this.typeOf(this.cast) } returned ${ actor }`);\n            }\n\n            this.actorsOnStage.set(name, actor)\n        }\n\n        this.actorInTheSpotlight = this.instantiatedActorCalled(name);\n\n        return this.actorInTheSpotlight;\n    }\n\n    /**\n     * @desc\n     *  Returns the last {@link Actor} instantiated via {@link Stage#actor}.\n     *  Useful when you don't can't or choose not to reference the actor by their name.\n     *\n     * @throws {LogicError} if no {Actor} has been activated yet\n     * @return {Actor}\n     */\n    theActorInTheSpotlight(): Actor {\n        if (! this.actorInTheSpotlight) {\n            throw new LogicError(`There is no actor in the spotlight yet. Make sure you instantiate one with stage.actor(actorName) before calling this method.`);\n        }\n\n        return this.actorInTheSpotlight;\n    }\n\n    /**\n     * @desc\n     *  Returns {true} if there is an {@link Actor} in the spotlight, {false} otherwise.\n     *\n     * @return {boolean}\n     */\n    theShowHasStarted(): boolean {\n        return !! this.actorInTheSpotlight;\n    }\n\n    /**\n     * @desc\n     *  Configures the Stage to prepare {@link Actor}s\n     *  instantiated via {@link Stage#actor} using the provided {@link Cast}.\n     *\n     * @param {Cast} actors\n     * @returns {void}\n     */\n    engage(actors: Cast): void {\n        ensure('Cast', actors, isDefined());\n\n        this.cast        = actors;\n    }\n\n    /**\n     * @desc\n     *  Assigns listeners to be notified of {@link DomainEvent}s\n     *  emitted via {@link Stage#announce}\n     *\n     * @param {ListensToDomainEvents[]} listeners\n     * @returns {void}\n     */\n    assign(...listeners: ListensToDomainEvents[]): void {\n        this.manager.register(...listeners);\n    }\n\n    /**\n     * @desc\n     *  Notifies all the assigned listeners of the event.\n     *\n     * @listens {DomainEvent}\n     *\n     * @param {DomainEvent} event\n     * @returns {void}\n     */\n    announce(event: DomainEvent): void {\n        if (event instanceof SceneStarts) {\n            this.actorsOnStage = this.actorsOnFrontStage;\n        }\n\n        this.manager.notifyOf(event);\n\n        if (event instanceof SceneFinishes) {\n            this.dismiss(this.actorsOnStage);\n\n            this.actorsOnStage = this.actorsOnBackstage;\n        }\n\n        if (event instanceof TestRunFinishes) {\n            this.dismiss(this.actorsOnStage);\n        }\n    }\n\n    /**\n     * @desc\n     *  Returns current time. This method should be used whenever\n     *  {@link DomainEvent} objects are instantiated by hand.\n     *\n     * @returns {Timestamp}\n     */\n    currentTime(): Timestamp {\n        return this.manager.currentTime();\n    }\n\n    /**\n     * @desc\n     *  Generates and remembers a {@link CorrelationId}\n     *  for the current scene.\n     *\n     *  This method should be used in custom test runner adapters\n     *  when instantiating a {@link SceneStarts} event.\n     *\n     * @see {@link Stage#currentSceneId}\n     *\n     * @returns {CorrelationId}\n     */\n    assignNewSceneId(): CorrelationId {\n        // todo: inject an id factory to make it easier to test\n        this.currentScene = CorrelationId.create();\n\n        return this.currentScene;\n    }\n\n    /**\n     * @desc\n     *  Returns the {@link CorrelationId} for the current scene.\n     *\n     * @see {@link Stage#assignNewSceneId}\n     *\n     * @returns {CorrelationId}\n     */\n    currentSceneId(): CorrelationId {\n        return this.currentScene;\n    }\n\n    /**\n     * @desc\n     *  Generates and remembers a {@link CorrelationId}\n     *  for the current {@link Activity}.\n     *\n     *  This method should be used in custom test runner adapters\n     *  when instantiating an {@link ActivityStarts} event.\n     *\n     * @see {@link Stage#currentActivityId}\n     *\n     * @returns {CorrelationId}\n     */\n    assignNewActivityId(): CorrelationId {\n        // todo: inject an id factory to make it easier to test\n        this.currentActivity = CorrelationId.create();\n\n        return this.currentActivity;\n    }\n\n    /**\n     * @desc\n     *  Returns the {@link CorrelationId} for the current {@link Activity}.\n     *\n     * @see {@link Stage#assignNewSceneId}\n     *\n     * @returns {CorrelationId}\n     */\n    currentActivityId(): CorrelationId {\n        if (! this.currentActivity) {\n            throw new LogicError(`No activity is being performed. Did you call assignNewActivityId before invoking currentActivityId?`);\n        }\n\n        return this.currentActivity;\n    }\n\n    /**\n     * @desc\n     *  Returns a Promise that will be resolved when any asynchronous\n     *  post-processing activities performed by Serenity/JS are completed.\n     *\n     * @returns {Promise<void>}\n     */\n    waitForNextCue(): Promise<void> {\n        return this.manager.waitForNextCue();\n    }\n\n    private instantiatedActorCalled(name: string): Actor | undefined {\n        return this.actorsOnBackstage.has(name)\n            ? this.actorsOnBackstage.get(name)\n            : this.actorsOnFrontStage.get(name)\n    }\n\n    private dismiss(activeActors: Map<string, Actor>): Promise<void> {\n        const actors = Array.from(activeActors.values());\n\n        if (actors.includes(this.actorInTheSpotlight)) {\n            this.actorInTheSpotlight = undefined;\n        }\n\n        return Promise\n            .all(actors.map(actor => {\n                const id = CorrelationId.create();\n\n                this.announce(new AsyncOperationAttempted(\n                    new Description(`[${ this.constructor.name }] Dismissing ${ actor.name }...`),\n                    id,\n                ));\n\n                return actor.dismiss()\n                    .then(() =>\n                        this.announce(new AsyncOperationCompleted(\n                            new Description(`[${ this.constructor.name }] Dismissed ${ actor.name } successfully`),\n                            id,\n                        )))\n                    .catch(error =>\n                        this.announce(new AsyncOperationFailed(error, id)),     // todo: serialise the error!\n                    );\n\n            }))\n            .then(() => activeActors.clear());\n    }\n\n    /**\n     * @private\n     * @param {Cast} cast\n     */\n    private typeOf(cast: Cast): string {\n        return this.cast.constructor !== Object\n            ? this.cast.constructor.name\n            : 'Cast';\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/Stage.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 825,
    "kind": "class",
    "name": "Stage",
    "memberof": "src/stage/Stage.ts",
    "static": true,
    "longname": "src/stage/Stage.ts~Stage",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{Stage}",
    "description": " The place where {@link Actor}s perform.\n\n In more technical terms, the Stage is the main event bus propagating {@link DomainEvent}s\n to {@link Actor}s it instantiates and {@link StageCrewMember}s that have been registered with it.",
    "see": [
      "{@link configure}",
      "{@link engage}"
    ],
    "lineNumber": 28,
    "interface": false
  },
  {
    "__docId__": 826,
    "kind": "member",
    "name": "unknownSceneId",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": true,
    "longname": "src/stage/Stage.ts~Stage.unknownSceneId",
    "access": "private",
    "description": "",
    "lineNumber": 43,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 827,
    "kind": "member",
    "name": "actorsOnFrontStage",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#actorsOnFrontStage",
    "access": "private",
    "description": " Actors instantiated after the scene has started,\n who will be dismissed when the scene finishes.",
    "lineNumber": 63,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 828,
    "kind": "member",
    "name": "actorsOnBackstage",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#actorsOnBackstage",
    "access": "private",
    "description": " Actors instantiated before the scene has started,\n who will be dismissed when the test run finishes.",
    "lineNumber": 83,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 829,
    "kind": "member",
    "name": "actorsOnStage",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#actorsOnStage",
    "access": "private",
    "description": " ",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 830,
    "kind": "member",
    "name": "actorInTheSpotlight",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#actorInTheSpotlight",
    "access": "private",
    "description": " The most recent actor referenced via the {@link actor} method",
    "lineNumber": 115,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 831,
    "kind": "member",
    "name": "currentActivity",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#currentActivity",
    "access": "private",
    "description": " ",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 832,
    "kind": "member",
    "name": "currentScene",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#currentScene",
    "access": "private",
    "description": " ",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 833,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cast"
        ],
        "spread": false,
        "optional": false,
        "name": "cast",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "StageManager"
        ],
        "spread": false,
        "optional": false,
        "name": "manager",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 834,
    "kind": "method",
    "name": "theActorCalled",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#theActorCalled",
    "access": "public",
    "description": "An alias for {@link Stage#actor}",
    "see": [
      "{@link Stage#actor}"
    ],
    "lineNumber": 174,
    "unknown": [
      {
        "tagName": "@alias",
        "tagValue": "{Stage#actor}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 835,
    "kind": "method",
    "name": "actor",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#actor",
    "access": "public",
    "description": "Instantiates a new {@link Actor} or fetches an existing one\nby their name if they've already been instantiated.",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "case-sensitive name of the Actor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 837,
    "kind": "method",
    "name": "theActorInTheSpotlight",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#theActorInTheSpotlight",
    "access": "public",
    "description": " Returns the last {@link Actor} instantiated via {@link Stage#actor}.\n Useful when you don't can't or choose not to reference the actor by their name.",
    "lineNumber": 244,
    "return": {
      "nullable": null,
      "types": [
        "Actor"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "LogicError"
        ],
        "description": "if no {Actor} has been activated yet"
      }
    ],
    "params": []
  },
  {
    "__docId__": 838,
    "kind": "method",
    "name": "theShowHasStarted",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#theShowHasStarted",
    "access": "public",
    "description": " Returns {true} if there is an {@link Actor} in the spotlight, {false} otherwise.",
    "lineNumber": 269,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 839,
    "kind": "method",
    "name": "engage",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#engage",
    "access": "public",
    "description": " Configures the Stage to prepare {@link Actor}s\n instantiated via {@link Stage#actor} using the provided {@link Cast}.",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Cast"
        ],
        "spread": false,
        "optional": false,
        "name": "actors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 840,
    "kind": "member",
    "name": "cast",
    "memberof": "src/stage/Stage.ts~Stage",
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#cast",
    "access": "public",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 841,
    "kind": "method",
    "name": "assign",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#assign",
    "access": "public",
    "description": " Assigns listeners to be notified of {@link DomainEvent}s\n emitted via {@link Stage#announce}",
    "lineNumber": 321,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ListensToDomainEvents[]"
        ],
        "spread": false,
        "optional": false,
        "name": "listeners",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 842,
    "kind": "method",
    "name": "announce",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#announce",
    "access": "public",
    "description": " Notifies all the assigned listeners of the event.",
    "lineNumber": 347,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "listens": [
      {
        "types": [
          "DomainEvent"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 845,
    "kind": "method",
    "name": "currentTime",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#currentTime",
    "access": "public",
    "description": " Returns current time. This method should be used whenever\n {@link DomainEvent} objects are instantiated by hand.",
    "lineNumber": 383,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Timestamp}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 846,
    "kind": "method",
    "name": "assignNewSceneId",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#assignNewSceneId",
    "access": "public",
    "description": " Generates and remembers a {@link CorrelationId}\n for the current scene.\n\n This method should be used in custom test runner adapters\n when instantiating a {@link SceneStarts} event.",
    "see": [
      "{@link Stage#currentSceneId}"
    ],
    "lineNumber": 410,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{CorrelationId}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 848,
    "kind": "method",
    "name": "currentSceneId",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#currentSceneId",
    "access": "public",
    "description": " Returns the {@link CorrelationId} for the current scene.",
    "see": [
      "{@link Stage#assignNewSceneId}"
    ],
    "lineNumber": 436,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{CorrelationId}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 849,
    "kind": "method",
    "name": "assignNewActivityId",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#assignNewActivityId",
    "access": "public",
    "description": " Generates and remembers a {@link CorrelationId}\n for the current {@link Activity}.\n\n This method should be used in custom test runner adapters\n when instantiating an {@link ActivityStarts} event.",
    "see": [
      "{@link Stage#currentActivityId}"
    ],
    "lineNumber": 463,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{CorrelationId}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 851,
    "kind": "method",
    "name": "currentActivityId",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#currentActivityId",
    "access": "public",
    "description": " Returns the {@link CorrelationId} for the current {@link Activity}.",
    "see": [
      "{@link Stage#assignNewSceneId}"
    ],
    "lineNumber": 489,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{CorrelationId}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 852,
    "kind": "method",
    "name": "waitForNextCue",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#waitForNextCue",
    "access": "public",
    "description": " Returns a Promise that will be resolved when any asynchronous\n post-processing activities performed by Serenity/JS are completed.",
    "lineNumber": 515,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 853,
    "kind": "method",
    "name": "instantiatedActorCalled",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#instantiatedActorCalled",
    "access": "private",
    "description": " ",
    "lineNumber": 282,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Actor ",
        " undefined"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 854,
    "kind": "method",
    "name": "dismiss",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#dismiss",
    "access": "private",
    "description": " ",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "activeActors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 856,
    "kind": "method",
    "name": "typeOf",
    "memberof": "src/stage/Stage.ts~Stage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/Stage.ts~Stage#typeOf",
    "access": "private",
    "description": "",
    "lineNumber": 598,
    "params": [
      {
        "nullable": null,
        "types": [
          "Cast"
        ],
        "spread": false,
        "optional": false,
        "name": "cast",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 857,
    "kind": "file",
    "name": "src/stage/StageCrewMember.ts",
    "content": "import { ListensToDomainEvents } from './ListensToDomainEvents';\nimport { Stage } from './Stage';\n\n/**\n * @desc\n *  You can think of the {@link StageCrewMember} as an in-memory micro-service that reacts to {@link DomainEvent}s\n *  from the {@link StageManager}.\n *\n *  Every {@link StageCrewMember} receives a reference to the {@link Stage},\n *  and therefore {@link StageManager} as well, which enables them to emit {@link DomainEvent}s back.\n *\n *  Useful when you're interested in implementing [custom reporters](/handbook/reporting/index.html).\n *\n * @extends {ListensToDomainEvents}\n * @see {@link StageCrewMemberBuilder}\n * @see {@link SerenityConfig#crew}\n */\nexport interface StageCrewMember extends ListensToDomainEvents {\n\n    /**\n     * @desc\n     *  Assigns a {@link Stage} to this {@link StageCrewMember}\n     *\n     * @type {function(stage: Stage): StageCrewMember}\n     *  An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to\n     */\n    assignedTo: (stage: Stage) => StageCrewMember;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/StageCrewMember.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 858,
    "kind": "class",
    "name": "StageCrewMember",
    "memberof": "src/stage/StageCrewMember.ts",
    "static": true,
    "longname": "src/stage/StageCrewMember.ts~StageCrewMember",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{StageCrewMember}",
    "description": " You can think of the {@link StageCrewMember} as an in-memory micro-service that reacts to {@link DomainEvent}s\n from the {@link StageManager}.\n\n Every {@link StageCrewMember} receives a reference to the {@link Stage},\n and therefore {@link StageManager} as well, which enables them to emit {@link DomainEvent}s back.\n\n Useful when you're interested in implementing [custom reporters](/handbook/reporting/index.html).",
    "see": [
      "{@link StageCrewMemberBuilder}",
      "{@link SerenityConfig#crew}"
    ],
    "lineNumber": 25,
    "interface": true,
    "extends": [
      "ListensToDomainEvents"
    ]
  },
  {
    "__docId__": 859,
    "kind": "member",
    "name": "assignedTo",
    "memberof": "src/stage/StageCrewMember.ts~StageCrewMember",
    "static": false,
    "longname": "src/stage/StageCrewMember.ts~StageCrewMember#assignedTo",
    "access": "public",
    "description": " Assigns a {@link Stage} to this {@link StageCrewMember}",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "function(stage: Stage): StageCrewMember"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 860,
    "kind": "file",
    "name": "src/stage/StageCrewMemberBuilder.ts",
    "content": "import { ListensToDomainEvents } from './ListensToDomainEvents';\nimport { StageCrewMemberBuilderDependencies } from './StageCrewMemberBuilderDependencies';\n\n/**\n * @desc\n *  Use a {@link StageCrewMemberBuilder} to configure complex {@link StageCrewMember} objects.\n *  Useful when you're interested in implementing custom reporters with multiple configuration options.\n *\n * @see {@link StageCrewMember}\n * @see {@link StageCrewMemberBuilderDependencies}\n * @see {@link SerenityConfig#crew}\n */\nexport interface StageCrewMemberBuilder<T extends ListensToDomainEvents = ListensToDomainEvents> {\n\n    /**\n     * @desc\n     *  Instantiates a {@link StageCrewMember}, giving it access to shared dependencies\n     *  such as {@link Stage} or {@link OutputStream}\n     *\n     * @type {function(dependencies: StageCrewMemberBuilderDependencies): T}\n     */\n    build: (dependencies: StageCrewMemberBuilderDependencies) => T;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/StageCrewMemberBuilder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 861,
    "kind": "class",
    "name": "StageCrewMemberBuilder",
    "memberof": "src/stage/StageCrewMemberBuilder.ts",
    "static": true,
    "longname": "src/stage/StageCrewMemberBuilder.ts~StageCrewMemberBuilder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{StageCrewMemberBuilder}",
    "description": " Use a {@link StageCrewMemberBuilder} to configure complex {@link StageCrewMember} objects.\n Useful when you're interested in implementing custom reporters with multiple configuration options.",
    "see": [
      "{@link StageCrewMember}",
      "{@link StageCrewMemberBuilderDependencies}",
      "{@link SerenityConfig#crew}"
    ],
    "lineNumber": 20,
    "interface": true
  },
  {
    "__docId__": 862,
    "kind": "member",
    "name": "build",
    "memberof": "src/stage/StageCrewMemberBuilder.ts~StageCrewMemberBuilder",
    "static": false,
    "longname": "src/stage/StageCrewMemberBuilder.ts~StageCrewMemberBuilder#build",
    "access": "public",
    "description": " Instantiates a {@link StageCrewMember}, giving it access to shared dependencies\n such as {@link Stage} or {@link OutputStream}",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "function(dependencies: StageCrewMemberBuilderDependencies): T"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 863,
    "kind": "file",
    "name": "src/stage/StageCrewMemberBuilderDependencies.ts",
    "content": "import { OutputStream } from '../io';\nimport { Stage } from './Stage';\n\n/**\n * @desc\n *  Dependencies injected by {@link Serenity} into {@link StageCrewMemberBuilder#build}\n *\n * @interface\n *\n * @see {@link StageCrewMemberBuilder}\n */\nexport interface StageCrewMemberBuilderDependencies {\n\n    /**\n     * @type {Stage}\n     */\n    stage: Stage;\n\n    /**\n     * @desc\n     *\n     * @type {OutputStream}\n     */\n    outputStream: OutputStream;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/StageCrewMemberBuilderDependencies.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 864,
    "kind": "class",
    "name": "StageCrewMemberBuilderDependencies",
    "memberof": "src/stage/StageCrewMemberBuilderDependencies.ts",
    "static": true,
    "longname": "src/stage/StageCrewMemberBuilderDependencies.ts~StageCrewMemberBuilderDependencies",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{StageCrewMemberBuilderDependencies}",
    "description": " Dependencies injected by {@link Serenity} into {@link StageCrewMemberBuilder#build}",
    "see": [
      "{@link StageCrewMemberBuilder}"
    ],
    "lineNumber": 19,
    "interface": true
  },
  {
    "__docId__": 865,
    "kind": "member",
    "name": "stage",
    "memberof": "src/stage/StageCrewMemberBuilderDependencies.ts~StageCrewMemberBuilderDependencies",
    "static": false,
    "longname": "src/stage/StageCrewMemberBuilderDependencies.ts~StageCrewMemberBuilderDependencies#stage",
    "access": "public",
    "description": "",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Stage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 866,
    "kind": "member",
    "name": "outputStream",
    "memberof": "src/stage/StageCrewMemberBuilderDependencies.ts~StageCrewMemberBuilderDependencies",
    "static": false,
    "longname": "src/stage/StageCrewMemberBuilderDependencies.ts~StageCrewMemberBuilderDependencies#outputStream",
    "access": "public",
    "description": "",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "OutputStream"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 867,
    "kind": "file",
    "name": "src/stage/StageManager.ts",
    "content": "import { AsyncOperationAttempted, AsyncOperationCompleted, AsyncOperationFailed, DomainEvent } from '../events';\nimport { CorrelationId, Description, Duration, Timestamp } from '../model';\nimport { ListensToDomainEvents } from '../stage';\nimport { Clock } from './Clock';\n\nexport class StageManager {\n    private readonly subscribers: ListensToDomainEvents[] = [];\n    private readonly wip: WIP;\n\n    constructor(private readonly cueTimeout: Duration, private readonly clock: Clock) {\n        this.wip = new WIP(cueTimeout, clock);\n    }\n\n    register(...subscribers: ListensToDomainEvents[]): void {\n        this.subscribers.push(...subscribers);\n    }\n\n    deregister(subscriber: ListensToDomainEvents): void {\n        this.subscribers.splice(this.subscribers.indexOf(subscriber), 1);\n    }\n\n    notifyOf(event: DomainEvent): void {\n        this.wip.recordIfAsync(event);\n\n        this.subscribers.forEach(crewMember => crewMember.notifyOf(event));\n    }\n\n    waitForNextCue(): Promise<void> {\n        return new Promise((resolve, reject) => {\n\n            const timeout = setTimeout(() => {\n                clearInterval(interval);\n\n                if (this.wip.hasFailedOperations()) {\n                    const error = new Error(this.wip.descriptionOfFailedOperations());\n\n                    this.wip.resetFailedOperations();\n\n                    return reject(error);\n                }\n\n                if (this.wip.hasActiveOperations()) {\n                    const error = new Error(this.wip.descriptionOfTimedOutOperations());\n\n                    return reject(error);\n                }\n\n                // \"else\" can't happen because this case is covered by the interval check below\n\n            }, this.cueTimeout.inMilliseconds());\n\n            const interval = setInterval(() => {\n                if (this.wip.hasAllOperationsCompleted()) {\n                    clearTimeout(timeout);\n                    clearInterval(interval);\n\n                    if (this.wip.hasFailedOperations()) {\n\n                        const error = new Error(this.wip.descriptionOfFailedOperations());\n\n                        this.wip.resetFailedOperations();\n\n                        return reject(error);\n                    }\n\n                    return resolve();\n                }\n            }, 10);\n        });\n    }\n\n    currentTime(): Timestamp {\n        return this.clock.now();\n    }\n}\n\n/**\n * @package\n */\nclass WIP {\n    private readonly wip = new Map<CorrelationId, AsyncOperationDetails>();\n    private readonly failedOperations: FailedAsyncOperationDetails[] = [];\n\n    constructor(\n        private readonly cueTimeout: Duration,\n        private readonly clock: Clock,\n    ) {\n    }\n\n    recordIfAsync(event: DomainEvent): void {\n        if (event instanceof AsyncOperationAttempted) {\n            this.set(event.correlationId, {\n                taskDescription:    event.taskDescription,\n                startedAt:          event.timestamp,\n            });\n        }\n\n        if (event instanceof AsyncOperationCompleted) {\n            this.delete(event.correlationId);\n        }\n\n        if (event instanceof AsyncOperationFailed) {\n            const original = this.get(event.correlationId);\n\n            this.failedOperations.push({\n                taskDescription:    original.taskDescription,\n                startedAt:          original.startedAt,\n                duration:           event.timestamp.diff(original.startedAt),\n                error:              event.error,\n            });\n\n            this.delete(event.correlationId)\n        }\n    }\n\n    hasAllOperationsCompleted(): boolean {\n        return this.wip.size === 0;\n    }\n\n    hasActiveOperations(): boolean {\n        return this.wip.size > 0;\n    }\n\n    hasFailedOperations(): boolean {\n        return this.failedOperations.length > 0;\n    }\n\n    descriptionOfTimedOutOperations(): string {\n        const now = this.clock.now();\n\n        return this.activeOperations().reduce(\n            (acc, op) => acc.concat(`${ now.diff(op.startedAt) } - ${ op.taskDescription.value }`),\n            [`${ this.header(this.wip.size) } within a ${ this.cueTimeout } cue timeout:`],\n        ).join('\\n');\n    }\n\n    descriptionOfFailedOperations() {\n        let message = `${ this.header(this.failedOperations.length) }:\\n`;\n\n        this.failedOperations.forEach((op: FailedAsyncOperationDetails) => {\n            message += `${ op.taskDescription.value } - ${ op.error.stack }\\n---\\n`;\n        });\n\n        return message;\n    }\n\n    resetFailedOperations() {\n        this.failedOperations.length = 0;\n    }\n\n    private activeOperations() {\n        return Array.from(this.wip.values());\n    }\n\n    private header(numberOfFailures): string {\n        return numberOfFailures === 1\n            ? `1 async operation has failed to complete`\n            : `${ numberOfFailures } async operations have failed to complete`;\n    }\n\n    private set(correlationId: CorrelationId, details: AsyncOperationDetails) {\n        return this.wip.set(correlationId, details);\n    }\n\n    private get(correlationId: CorrelationId) {\n        return this.wip.get(this.asReference(correlationId));\n    }\n\n    private delete(correlationId: CorrelationId) {\n        this.wip.delete(this.asReference(correlationId))\n    }\n\n    private asReference(key: CorrelationId): CorrelationId | undefined {\n        for (const [ k, v_ ] of this.wip.entries()) {\n            if (k.equals(key)) {\n                return k;\n            }\n        }\n\n        return undefined;   // eslint-disable-line unicorn/no-useless-undefined\n    }\n}\n\n/**\n * @package\n */\ninterface AsyncOperationDetails {\n    taskDescription:    Description;\n    startedAt:          Timestamp;\n    duration?:          Duration;\n    error?:             Error;\n}\n\n/**\n * @package\n */\ninterface FailedAsyncOperationDetails {\n    taskDescription:    Description;\n    startedAt:          Timestamp;\n    duration:           Duration;\n    error:              Error;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/StageManager.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 868,
    "kind": "class",
    "name": "StageManager",
    "memberof": "src/stage/StageManager.ts",
    "static": true,
    "longname": "src/stage/StageManager.ts~StageManager",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{StageManager}",
    "description": " ",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 869,
    "kind": "member",
    "name": "subscribers",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#subscribers",
    "access": "private",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 870,
    "kind": "member",
    "name": "wip",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#wip",
    "access": "private",
    "description": " ",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "WIP"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 871,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 873,
    "kind": "method",
    "name": "register",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#register",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "subscribers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 874,
    "kind": "method",
    "name": "deregister",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#deregister",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "ListensToDomainEvents"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriber",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 875,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#notifyOf",
    "access": "public",
    "description": " ",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 876,
    "kind": "method",
    "name": "waitForNextCue",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#waitForNextCue",
    "access": "public",
    "description": " ",
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 877,
    "kind": "method",
    "name": "currentTime",
    "memberof": "src/stage/StageManager.ts~StageManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~StageManager#currentTime",
    "access": "public",
    "description": " ",
    "lineNumber": 72,
    "return": {
      "nullable": null,
      "types": [
        "Timestamp"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 878,
    "kind": "class",
    "name": "WIP",
    "memberof": "src/stage/StageManager.ts",
    "static": true,
    "longname": "src/stage/StageManager.ts~WIP",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/core/src/stage/StageManager.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 177,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 879,
    "kind": "member",
    "name": "wip",
    "memberof": "src/stage/StageManager.ts~WIP",
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#wip",
    "access": "private",
    "description": " ",
    "lineNumber": 81,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 880,
    "kind": "member",
    "name": "failedOperations",
    "memberof": "src/stage/StageManager.ts~WIP",
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#failedOperations",
    "access": "private",
    "description": " ",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 881,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true
  },
  {
    "__docId__": 882,
    "kind": "method",
    "name": "recordIfAsync",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#recordIfAsync",
    "access": "public",
    "description": " ",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 883,
    "kind": "method",
    "name": "hasAllOperationsCompleted",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#hasAllOperationsCompleted",
    "access": "public",
    "description": " ",
    "lineNumber": 116,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 884,
    "kind": "method",
    "name": "hasActiveOperations",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#hasActiveOperations",
    "access": "public",
    "description": " ",
    "lineNumber": 120,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 885,
    "kind": "method",
    "name": "hasFailedOperations",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#hasFailedOperations",
    "access": "public",
    "description": " ",
    "lineNumber": 124,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 886,
    "kind": "method",
    "name": "descriptionOfTimedOutOperations",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#descriptionOfTimedOutOperations",
    "access": "public",
    "description": " ",
    "lineNumber": 128,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 887,
    "kind": "method",
    "name": "descriptionOfFailedOperations",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#descriptionOfFailedOperations",
    "access": "public",
    "description": " ",
    "lineNumber": 137,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 888,
    "kind": "method",
    "name": "resetFailedOperations",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#resetFailedOperations",
    "access": "public",
    "description": " ",
    "lineNumber": 147,
    "params": [],
    "return": null
  },
  {
    "__docId__": 889,
    "kind": "method",
    "name": "activeOperations",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#activeOperations",
    "access": "private",
    "description": " ",
    "lineNumber": 151,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 890,
    "kind": "method",
    "name": "header",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#header",
    "access": "private",
    "description": " ",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "numberOfFailures",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 891,
    "kind": "method",
    "name": "set",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#set",
    "access": "private",
    "description": " ",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "CorrelationId"
        ],
        "spread": false,
        "optional": false,
        "name": "correlationId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AsyncOperationDetails"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 892,
    "kind": "method",
    "name": "get",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#get",
    "access": "private",
    "description": " ",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "CorrelationId"
        ],
        "spread": false,
        "optional": false,
        "name": "correlationId",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 893,
    "kind": "method",
    "name": "delete",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#delete",
    "access": "private",
    "description": " ",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "CorrelationId"
        ],
        "spread": false,
        "optional": false,
        "name": "correlationId",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 894,
    "kind": "method",
    "name": "asReference",
    "memberof": "src/stage/StageManager.ts~WIP",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/StageManager.ts~WIP#asReference",
    "access": "private",
    "description": " ",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "CorrelationId"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CorrelationId ",
        " undefined"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 895,
    "kind": "file",
    "name": "src/stage/WithStage.ts",
    "content": "import { Stage } from './Stage';\n\n/**\n * @desc Makes the {@link Stage} object setup in your test runner configuration visible\n * to test steps or test scenarios.\n *\n * When using Cucumber, the {@link Stage} is typically set up using the Cucumber World Constructor.\n * When using Jasmine, the {@link Stage} is typically set up in the `beforeEach` step.\n *\n * @see https://github.com/cucumber/cucumber-js/blob/v5.0.1/docs/support_files/api_reference.md\n * @see https://github.com/cucumber/cucumber-js/blob/v5.0.1/docs/support_files/step_definitions.md\n * @see https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n *\n * @example <caption>Usage with Cucumber.js</caption>\n * // features/support/configure_serenity.ts\n * import { WithStage } from '@serenity-js/core';\n * import { setWorldConstructor } from 'cucumber';\n *\n * setWorldConstructor(function (this: WithStage, { parameters }) {\n *   this.stage = serenity.callToStageFor(new SomeImplementationOfTheCastInterface());\n * });\n *\n * // features/step_definitions/some.steps.ts\n * import { WithStage } from '@serenity-js/cucumber';\n *\n * Given(/(.*?) is a registered customer/, function (this: WithStage, actorName: string) {\n *   return this.stage.actor(actorName).attemptsTo(\n *\n *   );\n * });\n *\n * @example <caption>Usage with Jasmine</caption>\n * // spec/some.spec.ts\n * import { serenity, WithStage } from '@serenity-js/core';\n *\n * describe('Using the Stage', () => {\n *   beforeEach(function (this: WithStage) {\n *     this.stage = serenity.callToStageFor(new SomeImplementationOfTheCastInterface());\n *   });\n *\n *   it('makes it easy to access the Actors', function(this: WithStage) {\n *     return this.stage.theActorCalled('Barry').attemptsTo(\n *       // tasks\n *     );\n *   })\n * });\n *\n * @deprecated Please use serenity.actor() and serenity.actorInTheSpotlight() instead\n */\nexport interface WithStage {\n    stage: Stage;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/WithStage.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 896,
    "kind": "class",
    "name": "WithStage",
    "memberof": "src/stage/WithStage.ts",
    "static": true,
    "longname": "src/stage/WithStage.ts~WithStage",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage",
    "importStyle": "{WithStage}",
    "description": "Makes the {@link Stage} object setup in your test runner configuration visible\nto test steps or test scenarios.\n\nWhen using Cucumber, the {@link Stage} is typically set up using the Cucumber World Constructor.\nWhen using Jasmine, the {@link Stage} is typically set up in the `beforeEach` step.",
    "examples": [
      "<caption>Usage with Cucumber.js</caption>\n// features/support/configure_serenity.ts\nimport { WithStage } from '@serenity-js/core';\nimport { setWorldConstructor } from 'cucumber';\n\nsetWorldConstructor(function (this: WithStage, { parameters }) {\n  this.stage = serenity.callToStageFor(new SomeImplementationOfTheCastInterface());\n});\n\n// features/step_definitions/some.steps.ts\nimport { WithStage } from '@serenity-js/cucumber';\n\nGiven(/(.*?) is a registered customer/, function (this: WithStage, actorName: string) {\n  return this.stage.actor(actorName).attemptsTo(\n\n  );\n});",
      "<caption>Usage with Jasmine</caption>\n// spec/some.spec.ts\nimport { serenity, WithStage } from '@serenity-js/core';\n\ndescribe('Using the Stage', () => {\n  beforeEach(function (this: WithStage) {\n    this.stage = serenity.callToStageFor(new SomeImplementationOfTheCastInterface());\n  });\n\n  it('makes it easy to access the Actors', function(this: WithStage) {\n    return this.stage.theActorCalled('Barry').attemptsTo(\n      // tasks\n    );\n  })\n});"
    ],
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/v5.0.1/docs/support_files/api_reference.md",
      "https://github.com/cucumber/cucumber-js/blob/v5.0.1/docs/support_files/step_definitions.md",
      "https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters"
    ],
    "lineNumber": 57,
    "deprecated": "Please use serenity.actor() and serenity.actorInTheSpotlight() instead",
    "interface": true
  },
  {
    "__docId__": 897,
    "kind": "member",
    "name": "stage",
    "memberof": "src/stage/WithStage.ts~WithStage",
    "static": false,
    "longname": "src/stage/WithStage.ts~WithStage#stage",
    "access": "public",
    "description": " ",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Stage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 898,
    "kind": "file",
    "name": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts",
    "content": "import { WriteFileOptions } from 'fs';\nimport { ensure, isGreaterThan, property } from 'tiny-types';\n\nimport {\n    ActivityRelatedArtifactArchived,\n    ActivityRelatedArtifactGenerated,\n    ArtifactArchived,\n    ArtifactGenerated,\n    AsyncOperationAttempted,\n    AsyncOperationCompleted,\n    AsyncOperationFailed,\n    DomainEvent,\n} from '../../../events';\nimport { FileSystem, Path } from '../../../io';\nimport { Artifact, ArtifactType, CorrelationId, Description, Name, Photo, TestReport } from '../../../model';\nimport { Stage } from '../../Stage';\nimport { StageCrewMember } from '../../StageCrewMember';\nimport { Hash } from './Hash';\n\n/**\n * @desc\n *  Stores any {@link Artifact}s emitted via {@link ArtifactGenerated} events on the {@link FileSystem}\n *\n * @example <caption>Registering ArtifactArchiver programmatically</caption>\n *  import { configure, StreamReporter } from '@serenity-js/core';\n *\n *  configure({\n *      crew: [\n *          ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n *      ],\n *  });\n *\n * @example <caption>Registering ArtifactArchiver using Protractor configuration</caption>\n *  // protractor.conf.js\n *  const { ArtifactArchiver } = require('@serenity-js/core');\n *\n *  exports.config = {\n *    framework:     'custom',\n *    frameworkPath: require.resolve('@serenity-js/protractor/adapter'),\n *\n *    serenity: {\n *      crew: [\n *        ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n *      ],\n *      // other Serenity/JS config\n *    },\n *\n *    // other Protractor config\n *  };\n *\n * @public\n * @implements {StageCrewMember}\n */\nexport class ArtifactArchiver implements StageCrewMember {\n\n    /**\n     * @desc\n     *  Instantiates an `ArtifactArchiver` storing artifacts in a given `destination`.\n     *  The `destination` directory will be created automatically and recursively if it doesn't exist.\n     *\n     * @param {string[]} destination\n     *\n     * @returns {StageCrewMember}\n     */\n    static storingArtifactsAt(...destination: string[]): StageCrewMember {\n        ensure('Path to destination directory', destination, property('length', isGreaterThan(0)));\n\n        const pathToDestination = destination.map(segment => new Path(segment)).reduce((acc, current) => acc.join(current));\n\n        return new ArtifactArchiver(new FileSystem(pathToDestination));\n    }\n\n    /**\n     * @param {FileSystem} fileSystem\n     * @param {Stage} [stage]\n     *  The stage this {@link StageCrewMember} should be assigned to\n     */\n    constructor(\n        private readonly fileSystem: FileSystem,\n        private readonly stage?: Stage,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.\n     *\n     * @see {@link StageCrewMember}\n     *\n     * @param {Stage} stage - An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to\n     * @returns {StageCrewMember} - A new instance of this {@link StageCrewMember}\n     */\n    assignedTo(stage: Stage): StageCrewMember {\n        return new ArtifactArchiver(this.fileSystem, stage);\n    }\n\n    /**\n     * @desc\n     *  Handles {@link DomainEvent} objects emitted by the {@link StageManager}.\n     *\n     * @see {@link StageCrewMember}\n     *\n     * @listens {ArtifactGenerated}\n     * @emits {ArtifactArchived}\n     *\n     * @param {DomainEvent} event\n     * @returns {void}\n     */\n    notifyOf(event: DomainEvent): void {\n\n        if (!(event instanceof ArtifactGenerated)) {\n            // ignore any other events\n            return void 0;\n        }\n\n        if (event.artifact instanceof Photo) {\n            const filename = this.fileNameFor('photo', event.name, event.artifact, 'png');\n\n            this.archive(\n                filename,\n                event.artifact.base64EncodedValue,\n                'base64',\n                this.archivisationAnnouncement(event, filename),\n            );\n        }\n\n        if (event.artifact instanceof TestReport) {\n            const filename = this.fileNameFor('scenario', event.name, event.artifact, 'json');\n\n            this.archive(\n                filename,\n                event.artifact.map(JSON.stringify),\n                'utf8',\n                this.archivisationAnnouncement(event, filename),\n            );\n        }\n    }\n\n    private fileNameFor(prefix: string, artifactName: Name, artifact: Artifact, extension: string): Path {\n        const hash = Hash.of(artifact.base64EncodedValue).short();\n\n        return Path.fromSanitisedString(\n            // Ensure that the file name is shorter than 250 chars, which is safe with all the filesystems\n            // note: we can't do that in the Path constructor as the Path can be used to join other paths,\n            // so restricting the length of the _path_ itself would not be correct.\n            `${ prefix.slice(0, 10) }-${ urlFriendly(artifactName.value).slice(0, 64) }-${ hash }.${ extension }`.replace(/-+/g, '-'),\n            // characters:     10    1         64                                      1    10   1    4                                 < 100\n        );\n    }\n\n    private archive(relativePath: Path, contents: string, encoding: WriteFileOptions, announce: (absolutePath: Path) => void): void {\n        const id = CorrelationId.create();\n\n        this.stage.announce(new AsyncOperationAttempted(\n            new Description(`[${ this.constructor.name }] Saving '${ relativePath.value }'...`),\n            id,\n        ));\n\n        this.fileSystem.store(relativePath, contents, encoding)\n            .then(absolutePath => {\n                announce(relativePath);\n\n                this.stage.announce(new AsyncOperationCompleted(\n                    new Description(`[${ this.constructor.name }] Saved '${ absolutePath.value }'`),\n                    id,\n                ));\n            })\n            .catch(error => {\n                this.stage.announce(new AsyncOperationFailed(error, id));\n            });\n    }\n\n    private archivisationAnnouncement(event: ArtifactGenerated | ActivityRelatedArtifactGenerated, relativePathToArtifact: Path) {\n        return (absolutePath: Path) => {\n            if (event instanceof ActivityRelatedArtifactGenerated) {\n                this.stage.announce(new ActivityRelatedArtifactArchived(\n                    event.sceneId,\n                    event.activityId,\n                    event.name,\n                    event.artifact.constructor as ArtifactType,\n                    relativePathToArtifact,\n                ));\n            } else if (event instanceof ArtifactGenerated) {\n                this.stage.announce(new ArtifactArchived(\n                    event.sceneId,\n                    event.name,\n                    event.artifact.constructor as ArtifactType,\n                    relativePathToArtifact,\n                ));\n            }\n        };\n    }\n}\n\n/**\n * @private\n * @param {string} name\n */\nfunction urlFriendly(name: string): string {\n    return name.toLocaleLowerCase()\n        .replace(/[^\\d.a-z-]/g, '-');\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/crew/artifact-archiver/ArtifactArchiver.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 899,
    "kind": "class",
    "name": "ArtifactArchiver",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts",
    "static": true,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage/crew/artifact-archiver",
    "importStyle": "{ArtifactArchiver}",
    "description": " Stores any {@link Artifact}s emitted via {@link ArtifactGenerated} events on the {@link FileSystem}",
    "examples": [
      "<caption>Registering ArtifactArchiver programmatically</caption>\n import { configure, StreamReporter } from '@serenity-js/core';\n\n configure({\n     crew: [\n         ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n     ],\n });",
      "<caption>Registering ArtifactArchiver using Protractor configuration</caption>\n // protractor.conf.js\n const { ArtifactArchiver } = require('@serenity-js/core');\n\n exports.config = {\n   framework:     'custom',\n   frameworkPath: require.resolve('@serenity-js/protractor/adapter'),\n\n   serenity: {\n     crew: [\n       ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n     ],\n     // other Serenity/JS config\n   },\n\n   // other Protractor config\n };"
    ],
    "lineNumber": 61,
    "interface": false,
    "implements": [
      "StageCrewMember"
    ]
  },
  {
    "__docId__": 900,
    "kind": "method",
    "name": "storingArtifactsAt",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver.storingArtifactsAt",
    "access": "public",
    "description": " Instantiates an `ArtifactArchiver` storing artifacts in a given `destination`.\n The `destination` directory will be created automatically and recursively if it doesn't exist.",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StageCrewMember}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 901,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "FileSystem"
        ],
        "spread": false,
        "optional": false,
        "name": "fileSystem",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": true,
        "name": "stage",
        "description": "The stage this {@link StageCrewMember} should be assigned to"
      }
    ]
  },
  {
    "__docId__": 902,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#assignedTo",
    "access": "public",
    "description": " Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.",
    "see": [
      "{@link StageCrewMember}"
    ],
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StageCrewMember} - A new instance of this {@link StageCrewMember}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": "A new instance of this {@link StageCrewMember}"
    }
  },
  {
    "__docId__": 903,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#notifyOf",
    "access": "public",
    "description": " Handles {@link DomainEvent} objects emitted by the {@link StageManager}.",
    "see": [
      "{@link StageCrewMember}"
    ],
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "emits": [
      {
        "types": [
          "ArtifactArchived"
        ],
        "description": ""
      }
    ],
    "listens": [
      {
        "types": [
          "ArtifactGenerated"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 904,
    "kind": "method",
    "name": "fileNameFor",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#fileNameFor",
    "access": "private",
    "description": " ",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Name"
        ],
        "spread": false,
        "optional": false,
        "name": "artifactName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Artifact"
        ],
        "spread": false,
        "optional": false,
        "name": "artifact",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "extension",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 905,
    "kind": "method",
    "name": "archive",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#archive",
    "access": "private",
    "description": " ",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativePath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "contents",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "WriteFileOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "announce",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 906,
    "kind": "method",
    "name": "archivisationAnnouncement",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver#archivisationAnnouncement",
    "access": "private",
    "description": " ",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "ArtifactGenerated ",
          " ActivityRelatedArtifactGenerated"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "relativePathToArtifact",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 907,
    "kind": "function",
    "name": "urlFriendly",
    "memberof": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/crew/artifact-archiver/ArtifactArchiver.ts~urlFriendly",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/core/src/stage/crew/artifact-archiver/ArtifactArchiver.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 908,
    "kind": "file",
    "name": "src/stage/crew/artifact-archiver/Hash.ts",
    "content": "import { createHash } from 'crypto';\nimport { ensure, isDefined, TinyType } from 'tiny-types';\n\n/**\n * @package\n */\nexport class Hash extends TinyType {\n    static of(value: string): Hash {\n        return new Hash(createHash('sha1').update(value).digest('hex'));\n    }\n\n    constructor(public readonly value: string) {\n        super();\n        ensure(this.constructor.name, value, isDefined());\n    }\n\n    long(): string {\n        return this.value;\n    }\n\n    short(): string {\n        return this.value.slice(0, 10);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/crew/artifact-archiver/Hash.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 909,
    "kind": "class",
    "name": "Hash",
    "memberof": "src/stage/crew/artifact-archiver/Hash.ts",
    "static": true,
    "longname": "src/stage/crew/artifact-archiver/Hash.ts~Hash",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/core/src/stage/crew/artifact-archiver/Hash.ts",
    "importStyle": "{Hash}",
    "description": "",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ],
    "ignore": true
  },
  {
    "__docId__": 910,
    "kind": "method",
    "name": "of",
    "memberof": "src/stage/crew/artifact-archiver/Hash.ts~Hash",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/crew/artifact-archiver/Hash.ts~Hash.of",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Hash"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 911,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/crew/artifact-archiver/Hash.ts~Hash",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/Hash.ts~Hash#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 912,
    "kind": "method",
    "name": "long",
    "memberof": "src/stage/crew/artifact-archiver/Hash.ts~Hash",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/Hash.ts~Hash#long",
    "access": "public",
    "description": " ",
    "lineNumber": 17,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 913,
    "kind": "method",
    "name": "short",
    "memberof": "src/stage/crew/artifact-archiver/Hash.ts~Hash",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/artifact-archiver/Hash.ts~Hash#short",
    "access": "public",
    "description": " ",
    "lineNumber": 21,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 914,
    "kind": "file",
    "name": "src/stage/crew/artifact-archiver/index.ts",
    "content": "export * from './ArtifactArchiver';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/crew/artifact-archiver/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 915,
    "kind": "file",
    "name": "src/stage/crew/index.ts",
    "content": "export * from './artifact-archiver';\nexport * from './stream-reporter';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/crew/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 916,
    "kind": "file",
    "name": "src/stage/crew/stream-reporter/StreamReporter.ts",
    "content": "import { Writable } from 'stream';\n\nimport { DomainEvent } from '../../../events';\nimport { Stage } from '../../Stage';\nimport { StageCrewMember } from '../../StageCrewMember';\n\n/**\n * @desc\n *  Serialises all the {@link DomainEvent} objects it receives and streams\n *  them as [ndjson](http://ndjson.org/) to the output stream.\n *\n * @example <caption>Writing DomainEvents to standard output</caption>\n *  import { configure, StreamReporter } from '@serenity-js/core';\n *\n *  configure({\n *      crew: [\n *          new StreamReporter(process.stdout)\n *      ],\n *  });\n *\n * @example <caption>Writing DomainEvents to a file</caption>\n *  import { configure, StreamReporter } from '@serenity-js/core';\n *  import fs = require('fs');\n *\n *  configure({\n *      crew: [\n *          new StreamReporter(fs.createWriteStream('./events.ndjson'))\n *      ],\n *  });\n *\n * @example <caption>Registering StreamReporter using Protractor configuration</caption>\n *  // protractor.conf.js\n *  const { StreamReporter } = require('@serenity-js/core');\n *\n *  exports.config = {\n *    framework:     'custom',\n *    frameworkPath: require.resolve('@serenity-js/protractor/adapter'),\n *\n *    serenity: {\n *      crew: [\n *        new StreamReporter(process.stdout),\n *      ],\n *      // other Serenity/JS config\n *    },\n *\n *    // other Protractor config\n *  };\n *\n * @implements {StageCrewMember}\n */\nexport class StreamReporter implements StageCrewMember {\n\n    /**\n     * @param {stream~Writable} output\n     *  A Writable stream that should receive the output\n     *\n     * @param {Stage} [stage]\n     *  The stage this {@link StageCrewMember} should be assigned to\n     */\n    constructor(\n        private readonly output: Writable = process.stdout,\n        private readonly stage?: Stage,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.\n     *\n     * @see {@link StageCrewMember}\n     *\n     * @param {Stage} stage - An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to\n     * @returns {StageCrewMember} - A new instance of this {@link StageCrewMember}\n     */\n    assignedTo(stage: Stage): StageCrewMember {\n        return new StreamReporter(this.output, stage);\n    }\n\n    /**\n     * @desc\n     *  Handles {@link DomainEvent} objects emitted by the {@link StageManager}.\n     *\n     * @see {@link StageCrewMember}\n     *\n     * @listens {DomainEvent}\n     *\n     * @param {DomainEvent} event\n     * @returns {void}\n     */\n    notifyOf(event: DomainEvent): void {\n        this.output.write(\n            JSON.stringify({ type: event.constructor.name, event: event.toJSON() }) + '\\n',\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/crew/stream-reporter/StreamReporter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 917,
    "kind": "class",
    "name": "StreamReporter",
    "memberof": "src/stage/crew/stream-reporter/StreamReporter.ts",
    "static": true,
    "longname": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/core/lib/stage/crew/stream-reporter",
    "importStyle": "{StreamReporter}",
    "description": " Serialises all the {@link DomainEvent} objects it receives and streams\n them as [ndjson](http://ndjson.org/) to the output stream.",
    "examples": [
      "<caption>Writing DomainEvents to standard output</caption>\n import { configure, StreamReporter } from '@serenity-js/core';\n\n configure({\n     crew: [\n         new StreamReporter(process.stdout)\n     ],\n });",
      "<caption>Writing DomainEvents to a file</caption>\n import { configure, StreamReporter } from '@serenity-js/core';\n import fs = require('fs');\n\n configure({\n     crew: [\n         new StreamReporter(fs.createWriteStream('./events.ndjson'))\n     ],\n });",
      "<caption>Registering StreamReporter using Protractor configuration</caption>\n // protractor.conf.js\n const { StreamReporter } = require('@serenity-js/core');\n\n exports.config = {\n   framework:     'custom',\n   frameworkPath: require.resolve('@serenity-js/protractor/adapter'),\n\n   serenity: {\n     crew: [\n       new StreamReporter(process.stdout),\n     ],\n     // other Serenity/JS config\n   },\n\n   // other Protractor config\n };"
    ],
    "lineNumber": 58,
    "interface": false,
    "implements": [
      "StageCrewMember"
    ]
  },
  {
    "__docId__": 918,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "Writable"
        ],
        "spread": false,
        "optional": false,
        "name": "output",
        "description": "A Writable stream that should receive the output"
      },
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": true,
        "name": "stage",
        "description": "The stage this {@link StageCrewMember} should be assigned to"
      }
    ]
  },
  {
    "__docId__": 919,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter#assignedTo",
    "access": "public",
    "description": " Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.",
    "see": [
      "{@link StageCrewMember}"
    ],
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StageCrewMember} - A new instance of this {@link StageCrewMember}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": "A new instance of this {@link StageCrewMember}"
    }
  },
  {
    "__docId__": 920,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter#notifyOf",
    "access": "public",
    "description": " Handles {@link DomainEvent} objects emitted by the {@link StageManager}.",
    "see": [
      "{@link StageCrewMember}"
    ],
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "listens": [
      {
        "types": [
          "DomainEvent"
        ],
        "description": ""
      }
    ]
  },
  {
    "__docId__": 921,
    "kind": "file",
    "name": "src/stage/crew/stream-reporter/index.ts",
    "content": "export * from './StreamReporter';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/crew/stream-reporter/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 922,
    "kind": "file",
    "name": "src/stage/index.ts",
    "content": "export * from './Cast';\nexport * from './Clock';\nexport * from './crew';\nexport * from './DressingRoom';\nexport * from './ListensToDomainEvents';\nexport * from './Stage';\nexport * from './StageCrewMember';\nexport * from './StageCrewMemberBuilder';\nexport * from './StageCrewMemberBuilderDependencies';\nexport * from './StageManager';\nexport * from './WithStage';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/src/stage/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# Serenity/JS\n\n[Serenity/JS](https://serenity-js.org) is a framework designed to make acceptance and regression testing\nof modern full-stack applications faster, more collaborative and easier to scale.\n\nVisit [serenity-js.org](https://serenity-js.org/) for the [latest tutorials](https://serenity-js.org/handbook/)\nand [API docs](https://serenity-js.org/modules/), and follow [@SerenityJS](https://twitter.com/SerenityJS) and [@JanMolak](https://twitter.com/JanMolak) on Twitter for project updates.\n\n### Learning Serenity/JS\n\nTo learn more about Serenity/JS, check out the video below, read the [tutorial](https://serenity-js.org/handbook/thinking-in-serenity-js/index.html), review the [examples](https://github.com/serenity-js/serenity-js/tree/master/examples), and create your own test suite with [Serenity/JS template projects](https://github.com/serenity-js).\n\nIf you have any questions, join us on [Serenity/JS Community Chat](https://gitter.im/serenity-js/Lobby).\n\n[![Full-Stack Acceptance Testing with Serenity/JS and the Screenplay Pattern](https://img.youtube.com/vi/djPMf-n93Rw/0.jpg)](https://www.youtube.com/watch?v=djPMf-n93Rw)\n\n## Serenity/JS Core\n\n[`@serenity-js/core`](https://serenity-js.org/modules/core/) is the heart of the [Serenity/JS](https://serenity-js.org) framework.\nIt enables you to configure the framework, manage actors, and provides basic building blocks\nto help you design high-quality acceptance tests.\n\n### Installation\n\nTo install this module, run the following command in your computer terminal:\n\n```\nnpm install --save-dev @serenity-js/core\n```\n",
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@serenity-js/core\",\n  \"version\": \"2.33.8\",\n  \"description\": \"Serenity/JS Screenplay, reporting engine and core interfaces.\",\n  \"author\": {\n    \"name\": \"Jan Molak\",\n    \"email\": \"jan.molak@smartcodeltd.co.uk\",\n    \"url\": \"https://janmolak.com\"\n  },\n  \"funding\": {\n    \"url\": \"https://github.com/sponsors/serenity-js\"\n  },\n  \"homepage\": \"https://serenity-js.org\",\n  \"license\": \"Apache-2.0\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"keywords\": [\n    \"bdd\",\n    \"tdd\",\n    \"test\",\n    \"testing\",\n    \"serenity\",\n    \"screenplay\"\n  ],\n  \"scripts\": {\n    \"clean\": \"rimraf .nyc_output lib target\",\n    \"lint\": \"eslint --ext ts --config ../../.eslintrc.js .\",\n    \"lint:fix\": \"npm run lint -- --fix\",\n    \"test\": \"nyc --report-dir ../../target/coverage/core mocha --config ../../.mocharc.yml 'spec/**/*.spec.*'\",\n    \"compile\": \"tsc --project tsconfig.json\",\n    \"site\": \"esdoc -c .esdoc.js\"\n  },\n  \"dependencies\": {\n    \"cuid\": \"^2.1.8\",\n    \"diff\": \"^5.0.0\",\n    \"error-stack-parser\": \"^2.0.7\",\n    \"fast-glob\": \"^3.2.11\",\n    \"filenamify\": \"^4.3.0\",\n    \"graceful-fs\": \"^4.2.10\",\n    \"moment\": \"^2.29.3\",\n    \"semver\": \"^7.3.7\",\n    \"stackframe\": \"^1.2.1\",\n    \"tiny-types\": \"^1.17.0\",\n    \"upath\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"@documentation/esdoc-template\": \"2.0.0\",\n    \"@types/chai\": \"^4.3.1\",\n    \"@types/cuid\": \"^1.3.1\",\n    \"@types/diff\": \"^5.0.2\",\n    \"@types/filenamify\": \"^2.0.2\",\n    \"@types/mocha\": \"^9.1.1\",\n    \"@types/semver\": \"^7.3.9\",\n    \"assertion-error-formatter\": \"^3.0.0\",\n    \"memfs\": \"^3.4.1\",\n    \"mocha\": \"^10.0.0\",\n    \"ts-node\": \"^10.7.0\",\n    \"typescript\": \"^4.6.4\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/serenity-js/serenity-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/serenity-js/serenity-js/issues\"\n  },\n  \"engines\": {\n    \"node\": \"^12 || ^14 || ^16\",\n    \"npm\": \"^6 || ^7 || ^8\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"src/**/*.d.ts\",\n      \"lib\",\n      \"spec\",\n      \"node_modules\"\n    ],\n    \"extension\": [\n      \".ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ],\n    \"reporter\": [\n      \"json\"\n    ],\n    \"cache\": true,\n    \"all\": true\n  }\n}\n",
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 923,
    "kind": "testFile",
    "name": "spec/Serenity.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport sinon = require('sinon');\nimport { ConfigurationError } from '../src';\nimport { ActivityFinished, ActivityStarts, DomainEvent, TestRunnerDetected } from '../src/events';\nimport { OutputStream } from '../src/io';\nimport { CorrelationId, Name } from '../src/model';\nimport { Actor, Interaction } from '../src/screenplay';\nimport { Serenity } from '../src/Serenity';\nimport { Cast, Clock, ListensToDomainEvents, Stage, StageCrewMember, StageCrewMemberBuilder } from '../src/stage';\nimport { StageCrewMemberBuilderDependencies } from '../src/stage/StageCrewMemberBuilderDependencies';\nimport { expect } from './expect';\n\n/** @test {Serenity} */\ndescribe('Serenity', () => {\n\n    describe('when constructing a Stage', () => {\n        it('connects it with a provided Cast', () => {\n\n            const prepareSpy = sinon.spy();\n\n            // no-op actors with no special Abilities\n            class Extras implements Cast {\n                prepare(actor: Actor): Actor {\n                    prepareSpy(actor);\n                    return actor;\n                }\n            }\n\n            const serenity = new Serenity(new Clock());\n\n            serenity.configure({\n                actors: new Extras(),\n            });\n\n            const Joe = serenity.theActorCalled('Joe');\n\n            expect(prepareSpy).to.have.been.calledOnce;\n            expect(prepareSpy.getCall(0).args[0]).to.equal(Joe);\n        });\n\n        it('connects it with provided StageCrewMembers', () => {\n\n            const stageCrewMember: StageCrewMember = {\n                assignedTo: sinon.spy(),\n                notifyOf(event: DomainEvent) { /* no-op */ }\n            }\n\n            const serenity = new Serenity(new Clock());\n\n            serenity.configure({\n                crew: [\n                    stageCrewMember\n                ]\n            });\n\n            expect(stageCrewMember.assignedTo).to.have.been.calledOnceWith(sinon.match.instanceOf(Stage));\n        });\n\n        it('injects dependencies into StageCrewMemberBuilders', () => {\n\n            const stageCrewMemberBuilder: StageCrewMemberBuilder = {\n                build: sinon.spy(),\n            };\n\n            const outputStream: OutputStream = {\n                write(content: string) {\n                    // no-op\n                }\n            }\n\n            const serenity = new Serenity(new Clock());\n\n            serenity.configure({\n                outputStream,\n                crew: [\n                    stageCrewMemberBuilder\n                ]\n            });\n\n            expect(stageCrewMemberBuilder.build).to.have.been.calledOnceWith(\n                sinon.match.has('stage', sinon.match.instanceOf(Stage))\n                    .and(\n                        sinon.match.has('outputStream', outputStream)\n                    )\n            );\n        });\n\n        it(`complains when a provided crew member doesn't implement StageCrewMember or StageCrewMemberBuilder interfaces`, () => {\n\n            const stageCrewMemberBuilder: StageCrewMemberBuilder = {\n                build(dependencies: StageCrewMemberBuilderDependencies): ListensToDomainEvents {\n                    return {\n                        notifyOf(event: DomainEvent): void {\n                            // no-op\n                        }\n                    };\n                }\n            };\n\n            const serenity = new Serenity(new Clock());\n\n            expect(() => {\n                serenity.configure({\n                    crew: [\n                        stageCrewMemberBuilder,\n                        undefined,\n                    ]\n                });\n            }).to.throw(ConfigurationError,\n                'Entries under `crew` should implement either StageCrewMember or StageCrewMemberBuilder interfaces, `undefined` found at index 1'\n            )\n        });\n    });\n\n    it(`enables propagation of DomainEvents triggered by Actors' Activities and StageCrewMembers`, () => {\n\n        class Extras implements Cast {\n            prepare(actor: Actor): Actor {\n                return actor;\n            }\n        }\n\n        const PerformSomeInteraction = () =>\n            Interaction.where(`#actor performs some interaction`, actor => {\n                return void 0;\n            });\n\n        const frozenClock = new Clock(() => new Date('1983-07-03'));\n        const serenity = new Serenity(frozenClock);\n        const listener = new Listener<ActivityStarts | ActivityFinished>();\n\n        serenity.configure({\n            actors: new Extras(),\n            crew: [ listener ],\n        });\n\n        return serenity.theActorCalled('Joe').attemptsTo(\n            PerformSomeInteraction(),\n        ).\n        then(() => serenity.waitForNextCue()).\n        then(() => {\n            expect(listener.events).to.have.lengthOf(2);\n\n            expect(listener.events[0]).to.be.instanceOf(ActivityStarts);\n            expect(listener.events[0].details.name.value).to.equal(`Joe performs some interaction`);\n\n            expect(listener.events[1]).to.be.instanceOf(ActivityFinished);\n            expect(listener.events[1].details.name.value).to.equal(`Joe performs some interaction`);\n        });\n    });\n\n    it('allows for external parties, such as test runner adapters, to announce DomainEvents', () => {\n\n        const frozenClock = new Clock(() => new Date('1983-07-03'));\n        const serenity = new Serenity(frozenClock);\n        const listener = new Listener<TestRunnerDetected>();\n\n        const testRunnerName = new Name('mocha');\n\n        serenity.configure({ crew: [ listener ] });\n\n        serenity.announce(new TestRunnerDetected(CorrelationId.create(), testRunnerName, serenity.currentTime()));\n\n        return serenity.waitForNextCue().\n            then(() => {\n                expect(listener.events).to.have.lengthOf(1);\n\n                expect(listener.events[0]).to.be.instanceOf(TestRunnerDetected);\n                expect(listener.events[0].name).to.equal(testRunnerName);\n            });\n    });\n\n    class Listener<Event_Type extends DomainEvent> implements StageCrewMember {\n        public readonly events: Event_Type[] = [];\n\n        constructor(private stage?: Stage) {\n        }\n\n        assignedTo(stage: Stage): StageCrewMember {\n            this.stage = stage;\n\n            return this;\n        }\n\n        notifyOf(event: Event_Type): void {\n            this.events.push(event);\n        }\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/Serenity.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 924,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/Serenity.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0",
    "access": null,
    "description": "Serenity",
    "lineNumber": 16,
    "testTargets": [
      "Serenity"
    ]
  },
  {
    "__docId__": 925,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "spec/Serenity.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0.describe1",
    "access": null,
    "description": "when constructing a Stage",
    "lineNumber": 18
  },
  {
    "__docId__": 926,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "spec/Serenity.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0.describe1.it2",
    "access": null,
    "description": "connects it with a provided Cast",
    "lineNumber": 19
  },
  {
    "__docId__": 927,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "spec/Serenity.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0.describe1.it3",
    "access": null,
    "description": "connects it with provided StageCrewMembers",
    "lineNumber": 63
  },
  {
    "__docId__": 928,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "spec/Serenity.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0.describe1.it4",
    "access": null,
    "description": "injects dependencies into StageCrewMemberBuilders",
    "lineNumber": 92
  },
  {
    "__docId__": 929,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "spec/Serenity.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0.describe1.it5",
    "access": null,
    "lineNumber": 132
  },
  {
    "__docId__": 930,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "spec/Serenity.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0.it6",
    "access": null,
    "lineNumber": 185
  },
  {
    "__docId__": 931,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "spec/Serenity.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/Serenity.spec.ts~describe0.it7",
    "access": null,
    "description": "allows for external parties, such as test runner adapters, to announce DomainEvents",
    "lineNumber": 242
  },
  {
    "__docId__": 932,
    "kind": "testFile",
    "name": "spec/errors/RuntimeError.spec.ts",
    "content": "import 'mocha';\n\nimport { RuntimeError } from '../../src/errors';\nimport { expect } from '../expect';\n\ndescribe('RuntimeError', () => {\n\n    describe('subclass', () => {\n\n        class CustomError extends RuntimeError {\n            constructor(message: string) {\n                super(CustomError, message);\n            }\n        }\n\n        let error: RuntimeError;\n        beforeEach(() => {\n            error = new CustomError('something happened');\n        });\n\n        /** @test {RuntimeError} */\n        it('is recognised as an instance of its type', () => {\n            expect(error).to.be.instanceOf(Error);\n            expect(error).to.be.instanceOf(RuntimeError);\n            expect(error).to.be.instanceOf(CustomError);\n        });\n\n        /** @test {RuntimeError} */\n        it('has a message', () => {\n            expect(error.message).to.equal('something happened');\n        });\n\n        /** @test {RuntimeError} */\n        it('retains the stacktrace', () => {\n            const frames = error.stack.split('\\n');\n\n            expect(frames[0]).to.equal('CustomError: something happened');\n            expect(frames[1]).to.contain(__filename);\n        });\n    });\n\n    describe('when propagating errors', () => {\n\n        class ApplicationError extends RuntimeError {\n            constructor(message: string, cause?: Error) {\n                super(ApplicationError, message, cause);\n            }\n        }\n\n        class IOError extends RuntimeError {\n            constructor(message: string, cause?: Error) {\n                super(IOError, message, cause);\n            }\n        }\n\n        /** @test {RuntimeError} */\n        it('includes the stack trace of the original errors', () => {\n\n            const fsError  = new Error('ENOENT: no such file or directory');\n            const ioError  = new IOError(`Directory not writable`, fsError);\n            const appError = new ApplicationError('Report could not be saved', ioError);\n\n            const significantFrames = appError.stack.split('\\n').filter(frame => ! frame.startsWith('    '));\n\n            expect(significantFrames).to.deep.equal([\n                'ApplicationError: Report could not be saved',\n                'Caused by: IOError: Directory not writable',\n                'Caused by: Error: ENOENT: no such file or directory',\n            ]);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/errors/RuntimeError.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 933,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "spec/errors/RuntimeError.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe8",
    "access": null,
    "description": "RuntimeError",
    "lineNumber": 6
  },
  {
    "__docId__": 934,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe8.describe9",
    "access": null,
    "description": "subclass",
    "lineNumber": 8
  },
  {
    "__docId__": 935,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe8.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe8.describe9.it10",
    "access": null,
    "description": "is recognised as an instance of its type",
    "lineNumber": 29,
    "testTargets": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 936,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe8.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe8.describe9.it11",
    "access": null,
    "description": "has a message",
    "lineNumber": 36,
    "testTargets": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 937,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe8.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe8.describe9.it12",
    "access": null,
    "description": "retains the stacktrace",
    "lineNumber": 41,
    "testTargets": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 938,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe8.describe13",
    "access": null,
    "description": "when propagating errors",
    "lineNumber": 49
  },
  {
    "__docId__": 939,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "spec/errors/RuntimeError.spec.ts~describe8.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "spec/errors/RuntimeError.spec.ts~describe8.describe13.it14",
    "access": null,
    "description": "includes the stack trace of the original errors",
    "lineNumber": 78,
    "testTargets": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 940,
    "kind": "testFile",
    "name": "spec/io/Config.spec.ts",
    "content": "import 'mocha';\n\nimport { Config } from '../../src/io';\nimport { expect } from '../expect';\n\n/** @test {Config} */\ndescribe('Config', () => {\n\n    describe('when wrapping a plain-old configuration object', () => {\n\n        const example = {\n            require: 'spec/file.ts',\n            empty: undefined,\n        }\n\n        it('enables access to its fields', () => {\n            const config = new Config(example);\n\n            expect(config.get('require')).to.equal(example.require);\n        });\n\n        it('tells if a given field exists, but is undefined', () => {\n            const config = new Config(example);\n\n            expect(config.has('empty')).to.equal(true);\n        });\n\n        it(`tells if a given field doesn't exist`, () => {\n            const config = new Config<any>(example);\n\n            expect(config.has('invalid')).to.equal(false);\n        });\n\n        it(`provides access to object's keys`, () => {\n            const config = new Config(example);\n\n            expect(config.keys()).to.deep.equal([ 'require', 'empty' ]);\n        });\n    });\n\n    describe('when transforming the values', () => {\n\n        it('transforms values using transformation functions provided for each field', () => {\n            const config = new Config({ file: 'name.ts', dir: 'projects' })\n                .where('file', value => value.replace('.ts', '.html'))\n                .where('dir', value => 'websites');\n\n            expect(config.get('file')).to.equal('name.html');\n            expect(config.get('dir')).to.equal('websites');\n        });\n\n        describe('conditionally', () => {\n\n            it('transforms a value when a condition is met', () => {\n                const config = new Config({ name: 'Alice'  })\n                    .whereIf(true, 'name', value => value.toUpperCase());\n\n                expect(config.get('name')).to.equal('ALICE');\n            });\n\n            it('does not transform the value when a condition is not met', () => {\n                const config = new Config({ name: 'Alice'  })\n                    .whereIf(false, 'name', value => value.toUpperCase());\n\n                expect(config.get('name')).to.equal('Alice');\n            });\n        });\n\n        describe('getAsList', () => {\n            describe('returns an empty list when the value', () => {\n\n                it('is undefined', () => {\n                    const config = new Config({ empty: undefined });\n\n                    expect(config.getAsList('empty')).to.deep.equal([]);\n                });\n\n                it('is null', () => {\n                    const config = new Config({ null: null });      // eslint-disable-line unicorn/no-null\n\n                    expect(config.getAsList('null')).to.deep.equal([]);\n                });\n\n                it(`does not exist`, () => {\n                    const config = new Config<any>({ });\n\n                    expect(config.getAsList('invalid')).to.deep.equal([]);\n                });\n            });\n\n            describe('returns a list when the value', () => {\n\n                it('is already a list', () => {\n                    const config = new Config({ numbers: [ 1, 2, 3 ] });\n\n                    expect(config.getAsList('numbers')).to.deep.equal([ 1, 2, 3 ]);\n                });\n\n                it('is not a list', () => {\n                    const config = new Config({ numbers: 1 });\n\n                    expect(config.getAsList('numbers')).to.deep.equal([ 1 ]);\n                });\n\n                it('respects the transformation function, if it is defined', () => {\n                    const config = new Config({ numbers: 1 })\n                        .where('numbers', value => value * 2);\n\n                    expect(config.getAsList('numbers')).to.deep.equal([ 2 ]);\n                });\n            });\n        });\n    });\n\n    describe('when extracting the configuration object', () => {\n\n        it('returns the value equal to the underlying config object, when no transformations are used', () => {\n\n            const config = new Config({ numbers: 1, names: ['Alice'] });\n\n            expect(config.object()).to.deep.equal({ numbers: 1, names: ['Alice'] });\n        });\n\n        it('applies any transformations', () => {\n\n            const config = new Config({ numbers: 1, names: ['Alice'] })\n                .where('numbers', value => value * 2)\n                .where('names', values => values.map(value => value.toUpperCase()));\n\n            expect(config.object()).to.deep.equal({ numbers: 2, names: ['ALICE'] });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/Config.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 941,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "spec/io/Config.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15",
    "access": null,
    "description": "Config",
    "lineNumber": 7,
    "testTargets": [
      "Config"
    ]
  },
  {
    "__docId__": 942,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "spec/io/Config.spec.ts~describe15",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe16",
    "access": null,
    "description": "when wrapping a plain-old configuration object",
    "lineNumber": 9
  },
  {
    "__docId__": 943,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "spec/io/Config.spec.ts~describe15.describe16",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe16.it17",
    "access": null,
    "description": "enables access to its fields",
    "lineNumber": 16
  },
  {
    "__docId__": 944,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "spec/io/Config.spec.ts~describe15.describe16",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe16.it18",
    "access": null,
    "description": "tells if a given field exists, but is undefined",
    "lineNumber": 22
  },
  {
    "__docId__": 945,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "spec/io/Config.spec.ts~describe15.describe16",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe16.it19",
    "access": null,
    "lineNumber": 28
  },
  {
    "__docId__": 946,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "spec/io/Config.spec.ts~describe15.describe16",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe16.it20",
    "access": null,
    "lineNumber": 34
  },
  {
    "__docId__": 947,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "spec/io/Config.spec.ts~describe15",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21",
    "access": null,
    "description": "when transforming the values",
    "lineNumber": 41
  },
  {
    "__docId__": 948,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.it22",
    "access": null,
    "description": "transforms values using transformation functions provided for each field",
    "lineNumber": 43
  },
  {
    "__docId__": 949,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe23",
    "access": null,
    "description": "conditionally",
    "lineNumber": 52
  },
  {
    "__docId__": 950,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21.describe23",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe23.it24",
    "access": null,
    "description": "transforms a value when a condition is met",
    "lineNumber": 54
  },
  {
    "__docId__": 951,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21.describe23",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe23.it25",
    "access": null,
    "description": "does not transform the value when a condition is not met",
    "lineNumber": 61
  },
  {
    "__docId__": 952,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe26",
    "access": null,
    "description": "getAsList",
    "lineNumber": 69
  },
  {
    "__docId__": 953,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21.describe26",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe27",
    "access": null,
    "description": "returns an empty list when the value",
    "lineNumber": 70
  },
  {
    "__docId__": 954,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe27",
    "testDepth": 4,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe27.it28",
    "access": null,
    "description": "is undefined",
    "lineNumber": 72
  },
  {
    "__docId__": 955,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe27",
    "testDepth": 4,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe27.it29",
    "access": null,
    "description": "is null",
    "lineNumber": 78
  },
  {
    "__docId__": 956,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe27",
    "testDepth": 4,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe27.it30",
    "access": null,
    "lineNumber": 84
  },
  {
    "__docId__": 957,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21.describe26",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe31",
    "access": null,
    "description": "returns a list when the value",
    "lineNumber": 91
  },
  {
    "__docId__": 958,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe31",
    "testDepth": 4,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe31.it32",
    "access": null,
    "description": "is already a list",
    "lineNumber": 93
  },
  {
    "__docId__": 959,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe31",
    "testDepth": 4,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe31.it33",
    "access": null,
    "description": "is not a list",
    "lineNumber": 99
  },
  {
    "__docId__": 960,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe31",
    "testDepth": 4,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe21.describe26.describe31.it34",
    "access": null,
    "description": "respects the transformation function, if it is defined",
    "lineNumber": 105
  },
  {
    "__docId__": 961,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "spec/io/Config.spec.ts~describe15",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe35",
    "access": null,
    "description": "when extracting the configuration object",
    "lineNumber": 115
  },
  {
    "__docId__": 962,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "spec/io/Config.spec.ts~describe15.describe35",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe35.it36",
    "access": null,
    "description": "returns the value equal to the underlying config object, when no transformations are used",
    "lineNumber": 117
  },
  {
    "__docId__": 963,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "spec/io/Config.spec.ts~describe15.describe35",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Config.spec.ts~describe15.describe35.it37",
    "access": null,
    "description": "applies any transformations",
    "lineNumber": 124
  },
  {
    "__docId__": 964,
    "kind": "testFile",
    "name": "spec/io/ErrorSerialiser.spec.ts",
    "content": "import 'mocha';\n\nimport { strictEqual } from 'assert';\nconst { format } = require('assertion-error-formatter');    // eslint-disable-line @typescript-eslint/no-var-requires\n\nimport { AssertionError } from '../../src/errors';\nimport { ErrorSerialiser, parse } from '../../src/io';\nimport { expect } from '../expect';\n\ndescribe ('ErrorSerialiser', () => {\n\n    describe('when serialising errors to JSON', () => {\n        /** @test {ErrorSerialiser} */\n        it('works with Error objects', () => {\n            const error = thrown(new Error(`Something happened`));\n\n            expect(ErrorSerialiser.serialise(error)).to.equal(JSON.stringify({\n                name:    'Error',\n                stack:   error.stack,\n                message: 'Something happened',\n            }));\n        });\n\n        /** @test {ErrorSerialiser} */\n        it('serialises all fields of custom objects that extend Error', () => {\n            const error = thrown(new AssertionError(`Expected false to equal true`, true, false));\n\n            const\n                serialised      = ErrorSerialiser.serialise(error),\n                deserialised    = parse(serialised);\n\n            expect(deserialised.name).to.equal('AssertionError');\n            expect(deserialised.message).to.equal('Expected false to equal true');\n            expect(deserialised.expected).to.equal(true);\n            expect(deserialised.actual).to.equal(false);\n            expect(deserialised.stack).to.equal(error.stack);\n        });\n\n        /** @test {ErrorSerialiser} */\n        it('serialises all fields of a Node.js AssertionError', () => {\n            const error = caught(() => strictEqual(true, false));\n\n            const\n                serialised      = ErrorSerialiser.serialise(error),\n                deserialised    = parse(serialised);\n\n            expect(deserialised.name).to.equal('AssertionError');\n            expect(deserialised.message).to.equal('Expected values to be strictly equal:\\n\\ntrue !== false\\n');\n            expect(deserialised.expected).to.equal(false);\n            expect(deserialised.actual).to.equal(true);\n            expect(deserialised.stack).to.equal(error.stack);\n        });\n    });\n\n    describe('when deserialising errors from JSON', () => {\n\n        /** @test {ErrorSerialiser} */\n        it('deserialises an Error', () => {\n            const stack = [\n                'Error: Something happened',\n                '    at /app/index.js:38:20',\n                '    at Generator.next (<anonymous>)',\n            ].join('\\n');\n\n            const error = ErrorSerialiser.deserialise(JSON.stringify({\n                name:    'Error',\n                message: 'Something happened',\n                stack,\n            }));\n\n            expect(error).to.be.instanceOf(Error);\n            expect(error.name).to.equal(`Error`);\n            expect(error.message).to.equal(`Something happened`);\n            expect(error.stack).to.equal(stack);\n        });\n\n        /** @test {ErrorSerialiser} */\n        it('deserialises a custom AssertionError to Serenity/JS AssertionError, including all its fields', () => {\n            const stack = [\n                'AssertionError: Expected false to equal true',\n                '    at /app/index.js:38:20',\n                '    at Generator.next (<anonymous>)',\n            ].join('\\n');\n\n            const error = ErrorSerialiser.deserialise(JSON.stringify({\n                name:    'AssertionError',\n                message: 'Expected false to equal true',\n                expected: true,\n                actual:   false,\n                stack,\n            })) as AssertionError;\n\n            expect(error).to.be.instanceOf(AssertionError);\n            expect(error.name).to.equal(`AssertionError`);\n            expect(error.message).to.equal(`Expected false to equal true`);\n            expect(error.expected).to.equal(true);\n            expect(error.actual).to.equal(false);\n            expect(error.stack).to.equal(stack);\n        });\n\n        /** @test {ErrorSerialiser} */\n        it('deserialises Node.js AssertionError as Serenity/JS AssertionError', () => {\n            const error = caught(() => strictEqual(true, false));\n\n            const deserialised = ErrorSerialiser.deserialise(ErrorSerialiser.serialise(error)) as AssertionError;\n\n            expect(deserialised).to.be.instanceOf(AssertionError);\n            expect(deserialised.name).to.equal(`AssertionError`);\n            expect(deserialised.message).to.match(/Expected.*strictly equal/);\n            expect(deserialised.expected).to.equal(false);\n            expect(deserialised.actual).to.equal(true);\n        });\n    });\n\n    describe('when deserialising errors from stack trace', () => {\n\n        /** @test {ErrorSerialiser} */\n        it('works with standard Error objects (Cucumber event protocol)', () => {\n            const stack = `Error: Something's wrong\\n    at World.<anonymous> (features/step_definitions/synchronous.steps.ts:9:15)`;\n\n            const error: Error = ErrorSerialiser.deserialiseFromStackTrace(stack);\n\n            expect(error).to.be.instanceOf(Error);\n            expect(error.name).to.equal(`Error`);\n            expect(error.message).to.equal(`Something's wrong`);\n            expect(error.stack).to.equal(stack);\n        });\n\n        /** @test {ErrorSerialiser} */\n        it('instantiates an Error object from a string (Cucumber event protocol)', () => {\n            const stack = `function has 2 arguments, should have 3 (if synchronous or returning a promise) or 4 (if accepting a callback)`;\n\n            const error: Error = ErrorSerialiser.deserialiseFromStackTrace(stack);\n\n            expect(error).to.be.instanceOf(Error);\n            expect(error.name).to.equal(`Error`);\n            expect(error.message).to.equal(`function has 2 arguments, should have 3 (if synchronous or returning a promise) or 4 (if accepting a callback)`);\n        });\n\n        /** @test {ErrorSerialiser} */\n        it('instantiates a Serenity/JS AssertionError from an AssertionError-like stack trace, as well as it can', () => {\n            const error = caught(() => strictEqual(true, false));\n\n            const deserialised = ErrorSerialiser.deserialiseFromStackTrace(error.stack) as AssertionError;\n\n            expect(deserialised).to.be.instanceOf(AssertionError);\n            expect(deserialised.name).to.equal(`AssertionError`);\n            expect(deserialised.message).to.match(/Expected.*strictly equal/);\n\n            // todo: we have no way of knowing either of those two fields from the stack trace alone\n            expect(deserialised.actual).to.equal(undefined);\n            expect(deserialised.expected).to.equal(undefined);\n        });\n    });\n\n    // Cucumber.js 7 Message Protocol emits pretty-printed stack traces - see https://github.com/cucumber/cucumber-js/issues/1453\n    describe(`when deserialising a stack trace decorated by Cucumber's assertion-error-formatter`, () => {\n\n        it('instantiates a standard Error', () => {\n\n            const error = thrown(new Error('Boom'));\n\n            const message = format(error);\n\n            const deserialised = ErrorSerialiser.deserialiseFromStackTrace(message);\n\n            expect(deserialised).to.be.instanceof(Error);\n            expect(deserialised.message).to.equal(error.message);\n            expect(deserialised.stack).to.equal(error.stack);\n        });\n\n        it('instantiates a Serenity/JS AssertionError based on Chai AssertionError, to the best of its ability', () => {\n\n            const error = caught(() => expect(true).to.equal(false));\n\n            const message = format(error);\n\n            const deserialised = ErrorSerialiser.deserialiseFromStackTrace(message) as AssertionError;\n\n            expect(deserialised).to.be.instanceof(AssertionError);\n            expect(deserialised.message).to.equal(`+ expected - actual\\n\\n    -true\\n    +false`);\n\n            // todo: we have no way of knowing either of those two fields from the stack trace alone\n            expect(deserialised.expected).to.equal(undefined);\n            expect(deserialised.actual).to.equal(undefined);\n        });\n\n        it('instantiates a Serenity/JS AssertionError based on Node.js AssertionError, to the best of its ability', () => {\n\n            const error = caught(() => strictEqual(false, true));\n\n            const message = format(error);\n\n            const deserialised = ErrorSerialiser.deserialiseFromStackTrace(message) as AssertionError;\n\n            expect(deserialised).to.be.instanceof(AssertionError);\n            expect(deserialised.message).to.equal(`[ERR_ASSERTION]: Expected values to be strictly equal:\\n\\nfalse !== true\\n\\n    + expected - actual\\n\\n    -false\\n    +true`);\n\n            // todo: we have no way of knowing either of those two fields from the stack trace alone\n            expect(deserialised.expected).to.equal(undefined);\n            expect(deserialised.actual).to.equal(undefined);\n        });\n\n        it('instantiates a Serenity/JS AssertionError, to the best of its ability', () => {\n\n            const error = caught(() => { throw new AssertionError('Expected true to equal false', true, false)}) as AssertionError;\n\n            const message = format(error);\n\n            const deserialised = ErrorSerialiser.deserialiseFromStackTrace(message) as AssertionError;\n\n            expect(deserialised).to.be.instanceof(AssertionError);\n            expect(deserialised.message).to.equal(`Expected true to equal false\\n    + expected - actual\\n\\n    -false\\n    +true`);\n\n            // todo: we have no way of knowing either of those two fields from the stack trace alone\n            expect(deserialised.expected).to.equal(undefined);\n            expect(deserialised.actual).to.equal(undefined);\n        });\n    });\n});\n\nfunction thrown<T>(throwable: T): T {\n    try {\n        throw throwable;\n    } catch (error) {\n        return error;\n    }\n}\n\nfunction caught(fn: () => void) {\n    try {\n        fn();\n    } catch (error) {\n        return error;\n    }\n}\n\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/ErrorSerialiser.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 965,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "spec/io/ErrorSerialiser.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38",
    "access": null,
    "description": "ErrorSerialiser",
    "lineNumber": 10
  },
  {
    "__docId__": 966,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe39",
    "access": null,
    "description": "when serialising errors to JSON",
    "lineNumber": 12
  },
  {
    "__docId__": 967,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe39.it40",
    "access": null,
    "description": "works with Error objects",
    "lineNumber": 14,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 968,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe39.it41",
    "access": null,
    "description": "serialises all fields of custom objects that extend Error",
    "lineNumber": 25,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 969,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe39.it42",
    "access": null,
    "description": "serialises all fields of a Node.js AssertionError",
    "lineNumber": 40,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 970,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe43",
    "access": null,
    "description": "when deserialising errors from JSON",
    "lineNumber": 55
  },
  {
    "__docId__": 971,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe43.it44",
    "access": null,
    "description": "deserialises an Error",
    "lineNumber": 58,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 972,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe43.it45",
    "access": null,
    "description": "deserialises a custom AssertionError to Serenity/JS AssertionError, including all its fields",
    "lineNumber": 78,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 973,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe43.it46",
    "access": null,
    "description": "deserialises Node.js AssertionError as Serenity/JS AssertionError",
    "lineNumber": 102,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 974,
    "kind": "test",
    "name": "describe47",
    "testId": 47,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe47",
    "access": null,
    "description": "when deserialising errors from stack trace",
    "lineNumber": 115
  },
  {
    "__docId__": 975,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe47.it48",
    "access": null,
    "description": "works with standard Error objects (Cucumber event protocol)",
    "lineNumber": 118,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 976,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe47.it49",
    "access": null,
    "description": "instantiates an Error object from a string (Cucumber event protocol)",
    "lineNumber": 130,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 977,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe47",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe47.it50",
    "access": null,
    "description": "instantiates a Serenity/JS AssertionError from an AssertionError-like stack trace, as well as it can",
    "lineNumber": 141,
    "testTargets": [
      "ErrorSerialiser"
    ]
  },
  {
    "__docId__": 978,
    "kind": "test",
    "name": "describe51",
    "testId": 51,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe51",
    "access": null,
    "lineNumber": 157
  },
  {
    "__docId__": 979,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe51",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe51.it52",
    "access": null,
    "description": "instantiates a standard Error",
    "lineNumber": 159
  },
  {
    "__docId__": 980,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe51",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe51.it53",
    "access": null,
    "description": "instantiates a Serenity/JS AssertionError based on Chai AssertionError, to the best of its ability",
    "lineNumber": 172
  },
  {
    "__docId__": 981,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe51",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe51.it54",
    "access": null,
    "description": "instantiates a Serenity/JS AssertionError based on Node.js AssertionError, to the best of its ability",
    "lineNumber": 188
  },
  {
    "__docId__": 982,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "spec/io/ErrorSerialiser.spec.ts~describe38.describe51",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ErrorSerialiser.spec.ts~describe38.describe51.it55",
    "access": null,
    "description": "instantiates a Serenity/JS AssertionError, to the best of its ability",
    "lineNumber": 204
  },
  {
    "__docId__": 983,
    "kind": "testFile",
    "name": "spec/io/FileFinder.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { FileFinder, Path } from '../../src/io';\nimport { expect } from '../expect';\n\n/** @test {FileFinder} */\ndescribe('FileFinder', () => {\n\n    const cwd = Path.from(__dirname, 'finder-examples');\n    let finder: FileFinder;\n\n    beforeEach(() => {\n        finder = new FileFinder(cwd);\n    });\n\n    given([\n        null,       // eslint-disable-line unicorn/no-null\n        undefined\n    ]).\n    it('returns an empty list when given an undefined pattern', (pattern: any) => {\n        expect(finder.filesMatching(pattern)).to.deep.equal([])\n    });\n\n    /** @test {FileFinder} */\n    it(`returns an empty list when the pattern provided doesn't match any files`, () => {\n        expect(finder.filesMatching('non-existent.txt')).to.deep.equal([])\n    });\n\n    /** @test {FileFinder} */\n    it('returns a list with an exact match', () => {\n        const matches = finder.filesMatching('file1.txt');\n\n        expect(matches).to.have.lengthOf(1);\n        expect(matches[0]).to.equal(cwd.join(Path.from('file1.txt')));\n    });\n\n    /** @test {FileFinder} */\n    it('returns a list with exact matches', () => {\n        const matches = finder.filesMatching([ 'file1.txt', 'file2.txt' ]);\n\n        expect(matches).to.have.lengthOf(2);\n        expect(matches[0]).to.equal(cwd.join(Path.from('file1.txt')));\n        expect(matches[1]).to.equal(cwd.join(Path.from('file2.txt')));\n    });\n\n    /** @test {FileFinder} */\n    it('supports glob patterns', () => {\n        const matches = finder.filesMatching([ 'file*.txt' ]);\n\n        expect(matches).to.have.lengthOf(2);\n        expect(matches[0]).to.equal(cwd.join(Path.from('file1.txt')));\n        expect(matches[1]).to.equal(cwd.join(Path.from('file2.txt')));\n    });\n\n    /** @test {FileFinder} */\n    it('supports globstar patterns', () => {\n        const matches = finder.filesMatching([ '**/file*.txt' ]);\n\n        expect(matches).to.have.lengthOf(4);\n        expect(matches[0]).to.equal(cwd.join(Path.from('file1.txt')));\n        expect(matches[1]).to.equal(cwd.join(Path.from('file2.txt')));\n        expect(matches[2]).to.equal(cwd.join(Path.from('nested/file3.txt')));\n        expect(matches[3]).to.equal(cwd.join(Path.from('nested/file4.txt')));\n    });\n})\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/FileFinder.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 984,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "spec/io/FileFinder.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/FileFinder.spec.ts~describe56",
    "access": null,
    "description": "FileFinder",
    "lineNumber": 9,
    "testTargets": [
      "FileFinder"
    ]
  },
  {
    "__docId__": 985,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "spec/io/FileFinder.spec.ts~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileFinder.spec.ts~describe56.it57",
    "access": null,
    "lineNumber": 27,
    "testTargets": [
      "FileFinder"
    ]
  },
  {
    "__docId__": 986,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "spec/io/FileFinder.spec.ts~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileFinder.spec.ts~describe56.it58",
    "access": null,
    "description": "returns a list with an exact match",
    "lineNumber": 32,
    "testTargets": [
      "FileFinder"
    ]
  },
  {
    "__docId__": 987,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "spec/io/FileFinder.spec.ts~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileFinder.spec.ts~describe56.it59",
    "access": null,
    "description": "returns a list with exact matches",
    "lineNumber": 40,
    "testTargets": [
      "FileFinder"
    ]
  },
  {
    "__docId__": 988,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "spec/io/FileFinder.spec.ts~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileFinder.spec.ts~describe56.it60",
    "access": null,
    "description": "supports glob patterns",
    "lineNumber": 49,
    "testTargets": [
      "FileFinder"
    ]
  },
  {
    "__docId__": 989,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "spec/io/FileFinder.spec.ts~describe56",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileFinder.spec.ts~describe56.it61",
    "access": null,
    "description": "supports globstar patterns",
    "lineNumber": 58,
    "testTargets": [
      "FileFinder"
    ]
  },
  {
    "__docId__": 990,
    "kind": "testFile",
    "name": "spec/io/FileSystem.spec.ts",
    "content": "import 'mocha';\n\nimport { FileSystem, Path } from '../../src/io';\nimport { expect } from '../expect';\nimport { FakeFS } from '../FakeFS';\n\n/** @test {FileSystem} */\ndescribe ('FileSystem', () => {\n\n    const\n        image        = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAAA1BMVEX/TQBcNTh/AAAAAXRSTlPM0jRW/QAAAApJREFUeJxjYgAAAAYAAzY3fKgAAAAASUVORK5CYII=',\n        imageBuffer  = Buffer.from(image, 'base64'),\n        originalJSON = { name: 'jan' },\n        processCWD   = new Path('/Users/jan/projects/serenityjs');\n\n    describe('when checking if a file exists', () => {\n        it('returns false when no file exists at path', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: FakeFS.Empty_Directory,\n                }),\n                out = new FileSystem(processCWD, fs);\n\n            expect(out.exists(new Path('outlet/some.json'))).to.equal(false);\n        });\n\n        it('returns true when a file exists at path', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: {\n                        'file.txt': 'content'\n                    },\n                }),\n                out = new FileSystem(processCWD, fs);\n\n            expect(out.exists(new Path('file.txt'))).to.equal(true);\n        });\n\n        it('returns true when a directory exists at path', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: {\n                        'mydir': FakeFS.Empty_Directory\n                    },\n                }),\n                out = new FileSystem(processCWD, fs);\n\n            expect(out.exists(new Path('mydir'))).to.equal(true);\n        });\n    });\n\n    describe ('when storing JSON files', () => {\n\n        it ('stores a JSON file in a desired location', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: FakeFS.Empty_Directory,\n                }),\n                out = new FileSystem(processCWD, fs);\n\n            return expect(out.store(new Path('outlet/some.json'), JSON.stringify(originalJSON))).to.be.fulfilled.then(absolutePath => {\n                expect(fs.existsSync(absolutePath.value)).to.equal(true);\n                expect(jsonFrom(fs.readFileSync(absolutePath.value))).to.eql(originalJSON);\n            });\n        });\n\n        it ('tells the absolute path to a JSON file once it is saved', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: FakeFS.Empty_Directory,\n                }),\n                out = new FileSystem(processCWD, fs),\n                destination = new Path('outlet/some.json');\n\n            return expect(out.store(destination, JSON.stringify(originalJSON))).to.be.fulfilled.\n                then(result => expect(result.equals(processCWD.resolve(destination))));\n        });\n\n        it (`complains when the file can't be written`, () => {\n            const fs = FakeFS.with(FakeFS.Empty_Directory);\n\n            (fs as any).writeFile = () => { // memfs doesn't support mocking error conditions or permissions\n                throw new Error('EACCES, permission denied');\n            };\n\n            const out = new FileSystem(new Path('/'), fs);\n\n            return expect(out.store(new Path('dir/file.json'), JSON.stringify(originalJSON)))\n                .to.be.eventually.rejectedWith('EACCES, permission denied');\n        });\n    });\n\n    describe ('when storing pictures', () => {\n\n        it ('stores a base64-encoded picture at a desired location', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: FakeFS.Empty_Directory,\n                }),\n                out = new FileSystem(processCWD, fs);\n\n            return expect(out.store(new Path('outlet/some.png'), imageBuffer)).to.be.fulfilled.then(absolutePath => {\n                expect(fs.existsSync(absolutePath.value)).to.equal(true);\n                expect(pictureAt(fs.readFileSync(absolutePath.value))).to.eql(image);\n            });\n        });\n\n        it ('tells the absolute path to a JSON file once it is saved', () => {\n            const\n                fs = FakeFS.with({\n                    [ processCWD.value ]: FakeFS.Empty_Directory,\n                }),\n                out = new FileSystem(processCWD, fs),\n                destination = new Path('outlet/some.png');\n\n            return expect(out.store(destination, imageBuffer)).to.be.fulfilled.then(absolutePath => {\n                const expected = processCWD.join(destination).value;\n                expect(absolutePath.value).to.match(new RegExp('([A-Z]:)?' + expected + '$'));\n            });\n        });\n    });\n\n    describe ('when removing', () => {\n\n        describe('individual files', () => {\n\n            it('removes the file', () => {\n                const\n                    fs = FakeFS.with({\n                        [processCWD.value]: {\n                            outlet: {\n                                subdir: {\n                                    'file-to-be-deleted.json': '{}',\n                                    'file-not-to-be-deleted.json': '{}',\n                                },\n                            },\n                        },\n                    }),\n                    out = new FileSystem(processCWD, fs);\n\n                return expect(out.remove(new Path('outlet/subdir/file-to-be-deleted.json'))).to.be.fulfilled.then(() => {\n\n                    expect(fs.existsSync(processCWD.join(new Path('outlet/subdir/file-to-be-deleted.json')).value)).to.equal(false);\n                    expect(fs.existsSync(processCWD.join(new Path('outlet/subdir/file-not-to-be-deleted.json')).value)).to.equal(true);\n                });\n            });\n\n            it(`doesn't complain if the file doesn't exist anymore`, () => {\n                const\n                    fs = FakeFS.with({\n                        [processCWD.value]: {\n                        },\n                    }),\n                    out = new FileSystem(processCWD, fs);\n\n                return expect(out.remove(new Path('non-existent.tmp'))).to.be.fulfilled;\n            });\n        });\n\n        describe('directories', () => {\n\n            it('removes the directory recursively', () => {\n                const\n                    fs = FakeFS.with({\n                        [processCWD.value]: {\n                            outlet: {\n                                subdir: {\n                                    'file-to-be-deleted.json': '{}',\n                                },\n                                another: {\n                                    'file-not-to-be-deleted.json': '{}',\n                                },\n                            },\n                        },\n                    }),\n                    out = new FileSystem(processCWD, fs);\n\n                return expect(out.remove(new Path('outlet/subdir'))).to.be.fulfilled.then(() => {\n\n                    expect(fs.existsSync(processCWD.join(new Path('outlet/subdir/file-to-be-deleted.json')).value)).to.equal(false);\n                    expect(fs.existsSync(processCWD.join(new Path('outlet/subdir')).value)).to.equal(false);\n                    expect(fs.existsSync(processCWD.join(new Path('outlet/another/file-not-to-be-deleted.json')).value)).to.equal(true);\n                });\n            });\n        });\n    });\n\n    describe('when generating temp file paths', () => {\n\n        const\n            fs = FakeFS.with({\n                '/var/tmp': { },\n            }),\n            os = { tmpdir: () => '/var/tmp' },\n            out = new FileSystem(processCWD, fs, os as any);\n\n        it('uses a randomly generated file name and .tmp suffix', () => {\n\n            expect(out.tempFilePath().value).to.match(/\\/var\\/tmp\\/[\\da-z]+\\.tmp/);\n        });\n\n        it('allows for the prefix to be overridden', () => {\n\n            expect(out.tempFilePath('serenity-').value).to.match(/\\/var\\/tmp\\/serenity-[\\da-z]+\\.tmp/);\n        });\n\n        it('allows for the suffix to be overridden', () => {\n\n            expect(out.tempFilePath('serenity-', '.out').value).to.match(/\\/var\\/tmp\\/serenity-[\\da-z]+\\.out/);\n        });\n    });\n});\n\nfunction jsonFrom(file: Buffer) {\n    return JSON.parse(file.toString('ascii'));\n}\n\nfunction pictureAt(file: Buffer) {\n    return Buffer.from(file).toString('base64');\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/FileSystem.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 991,
    "kind": "test",
    "name": "describe62",
    "testId": 62,
    "memberof": "spec/io/FileSystem.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62",
    "access": null,
    "description": "FileSystem",
    "lineNumber": 8,
    "testTargets": [
      "FileSystem"
    ]
  },
  {
    "__docId__": 992,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "spec/io/FileSystem.spec.ts~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe63",
    "access": null,
    "description": "when checking if a file exists",
    "lineNumber": 16
  },
  {
    "__docId__": 993,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe63.it64",
    "access": null,
    "description": "returns false when no file exists at path",
    "lineNumber": 17
  },
  {
    "__docId__": 994,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe63.it65",
    "access": null,
    "description": "returns true when a file exists at path",
    "lineNumber": 27
  },
  {
    "__docId__": 995,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe63.it66",
    "access": null,
    "description": "returns true when a directory exists at path",
    "lineNumber": 39
  },
  {
    "__docId__": 996,
    "kind": "test",
    "name": "describe67",
    "testId": 67,
    "memberof": "spec/io/FileSystem.spec.ts~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe67",
    "access": null,
    "description": "when storing JSON files",
    "lineNumber": 52
  },
  {
    "__docId__": 997,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe67.it68",
    "access": null,
    "description": "stores a JSON file in a desired location",
    "lineNumber": 54
  },
  {
    "__docId__": 998,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe67.it69",
    "access": null,
    "description": "tells the absolute path to a JSON file once it is saved",
    "lineNumber": 67
  },
  {
    "__docId__": 999,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe67.it70",
    "access": null,
    "lineNumber": 79
  },
  {
    "__docId__": 1000,
    "kind": "test",
    "name": "describe71",
    "testId": 71,
    "memberof": "spec/io/FileSystem.spec.ts~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe71",
    "access": null,
    "description": "when storing pictures",
    "lineNumber": 93
  },
  {
    "__docId__": 1001,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe71.it72",
    "access": null,
    "description": "stores a base64-encoded picture at a desired location",
    "lineNumber": 95
  },
  {
    "__docId__": 1002,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe71",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe71.it73",
    "access": null,
    "description": "tells the absolute path to a JSON file once it is saved",
    "lineNumber": 108
  },
  {
    "__docId__": 1003,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "spec/io/FileSystem.spec.ts~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe74",
    "access": null,
    "description": "when removing",
    "lineNumber": 123
  },
  {
    "__docId__": 1004,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe74",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe74.describe75",
    "access": null,
    "description": "individual files",
    "lineNumber": 125
  },
  {
    "__docId__": 1005,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe74.describe75",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe74.describe75.it76",
    "access": null,
    "description": "removes the file",
    "lineNumber": 127
  },
  {
    "__docId__": 1006,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe74.describe75",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe74.describe75.it77",
    "access": null,
    "lineNumber": 148
  },
  {
    "__docId__": 1007,
    "kind": "test",
    "name": "describe78",
    "testId": 78,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe74",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe74.describe78",
    "access": null,
    "description": "directories",
    "lineNumber": 160
  },
  {
    "__docId__": 1008,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe74.describe78",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe74.describe78.it79",
    "access": null,
    "description": "removes the directory recursively",
    "lineNumber": 162
  },
  {
    "__docId__": 1009,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "spec/io/FileSystem.spec.ts~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe80",
    "access": null,
    "description": "when generating temp file paths",
    "lineNumber": 188
  },
  {
    "__docId__": 1010,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe80.it81",
    "access": null,
    "description": "uses a randomly generated file name and .tmp suffix",
    "lineNumber": 197
  },
  {
    "__docId__": 1011,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe80.it82",
    "access": null,
    "description": "allows for the prefix to be overridden",
    "lineNumber": 202
  },
  {
    "__docId__": 1012,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "spec/io/FileSystem.spec.ts~describe62.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/FileSystem.spec.ts~describe62.describe80.it83",
    "access": null,
    "description": "allows for the suffix to be overridden",
    "lineNumber": 207
  },
  {
    "__docId__": 1013,
    "kind": "testFile",
    "name": "spec/io/FileSystemLocation.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\nimport { JSONObject } from 'tiny-types';\n\nimport { FileSystemLocation, Path } from '../../src/io';\nimport { expect } from '../expect';\n\n/** @test {FileSystemLocation} */\ndescribe ('FileSystemLocation', () => {\n\n    const path = new Path('/home/jan/file.json');\n\n    given(\n        { description: 'no line or column',                     location: new FileSystemLocation(path)          },\n        { description: 'line available',                        location: new FileSystemLocation(path, 10)      },\n        { description: 'line and column available available',   location: new FileSystemLocation(path, 10, 3)   },\n    ).\n    it('can be serialised and deserialised', ({ location }) => {\n        expect(FileSystemLocation.fromJSON(location.toJSON() as JSONObject))\n            .to.equal(location);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/FileSystemLocation.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1014,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "spec/io/FileSystemLocation.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/FileSystemLocation.spec.ts~describe84",
    "access": null,
    "description": "FileSystemLocation",
    "lineNumber": 10,
    "testTargets": [
      "FileSystemLocation"
    ]
  },
  {
    "__docId__": 1015,
    "kind": "testFile",
    "name": "spec/io/ModuleLoader.spec.ts",
    "content": "import 'mocha';\n\nimport path = require('path');\nimport { ModuleLoader, Version } from '../../src/io';\nimport { expect } from '../expect';\n\ndescribe('ModuleLoader', () => {\n\n    it('returns the version number of a given package', () => {\n        const loader = new ModuleLoader(__dirname);\n\n        const expectedVersion = require('../../package.json').version;  // eslint-disable-line @typescript-eslint/no-var-requires\n\n        expect(loader.versionOf('../../')).to.equal(new Version(expectedVersion));\n    });\n\n    it('returns the version of the npm-resolved package if the local package could not be found', () => {\n        const loader = new ModuleLoader(path.join(__dirname, 'non-existent', 'local', 'directory'));\n\n        const expectedVersion = require('tiny-types/package.json').version; // eslint-disable-line @typescript-eslint/no-var-requires\n\n        expect(loader.versionOf('tiny-types')).to.equal(new Version(expectedVersion));\n    });\n\n    it('complains if neither a local version or the npm-resolved version could be found', () => {\n        const loader = new ModuleLoader(__dirname);\n\n        expect(() => loader.versionOf('non-existent-module')).to.throw(Error, `Cannot find module 'non-existent-module/package.json'`);\n    });\n\n    describe('when checking if a given module is available to be required', () => {\n\n        it('returns true if the module is available', () => {\n            const loader = new ModuleLoader(__dirname);\n\n            expect(loader.hasAvailable('tiny-types')).to.equal(true);\n        });\n\n        it('returns false if the module is not available', () => {\n            const loader = new ModuleLoader(__dirname);\n\n            expect(loader.hasAvailable('non-existent-module')).to.equal(false);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/ModuleLoader.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1016,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "spec/io/ModuleLoader.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe85",
    "access": null,
    "description": "ModuleLoader",
    "lineNumber": 7
  },
  {
    "__docId__": 1017,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "spec/io/ModuleLoader.spec.ts~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe85.it86",
    "access": null,
    "description": "returns the version number of a given package",
    "lineNumber": 9
  },
  {
    "__docId__": 1018,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "spec/io/ModuleLoader.spec.ts~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe85.it87",
    "access": null,
    "description": "returns the version of the npm-resolved package if the local package could not be found",
    "lineNumber": 17
  },
  {
    "__docId__": 1019,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "spec/io/ModuleLoader.spec.ts~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe85.it88",
    "access": null,
    "description": "complains if neither a local version or the npm-resolved version could be found",
    "lineNumber": 25
  },
  {
    "__docId__": 1020,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "spec/io/ModuleLoader.spec.ts~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe85.describe89",
    "access": null,
    "description": "when checking if a given module is available to be required",
    "lineNumber": 31
  },
  {
    "__docId__": 1021,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "spec/io/ModuleLoader.spec.ts~describe85.describe89",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe85.describe89.it90",
    "access": null,
    "description": "returns true if the module is available",
    "lineNumber": 33
  },
  {
    "__docId__": 1022,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "spec/io/ModuleLoader.spec.ts~describe85.describe89",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/ModuleLoader.spec.ts~describe85.describe89.it91",
    "access": null,
    "description": "returns false if the module is not available",
    "lineNumber": 39
  },
  {
    "__docId__": 1023,
    "kind": "testFile",
    "name": "spec/io/Path.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { Path } from '../../src/io';\nimport { expect } from '../expect';\n\ndescribe ('Path', () => {\n\n    describe('when used across different operating systems', () => {\n        const linuxPath = new Path(`features/search/full-text.feature`),\n            windowsPath = new Path(`features\\\\search\\\\full-text.feature`);\n\n        /** @test {Path} */\n        it('produces the same result no matter what path it\\'s instantiated with', () => {\n            expect(linuxPath).to.equal(windowsPath);\n        });\n\n        /** @test {Path} */\n        it('exposes the normalised path string', () => {\n            expect(linuxPath.value).to.equal(windowsPath.value);\n            expect(linuxPath.value).to.equal(`features/search/full-text.feature`);\n        });\n\n        /** @test {Path} */\n        it('splits the same', () => {\n            expect(linuxPath.split()).to.deep.equal([\n                'features',\n                'search',\n                'full-text.feature',\n            ]);\n            expect(linuxPath.split()).to.deep.equal(windowsPath.split());\n        });\n    });\n\n    /** @test {Path} */\n    it('can be serialised and deserialised', () => {\n        const path = new Path('/home/jan/file.json');\n\n        expect(Path.fromJSON(path.toJSON() as string)).to.equal(path);\n    });\n\n    /** @test {Path} */\n    it('can join path components into a single path', () => {\n        const\n            p1 = new Path('/home/jan'),\n            p2 = new Path('file.json');\n\n        expect(p1.join(p2)).to.equal(new Path('/home/jan/file.json'));\n    });\n\n    given([\n        { path: Path.from('../home'),   expected: '../home' },\n        { path: Path.from('./home'),    expected: 'home'    },\n        { path: Path.from('home'),      expected: 'home'    },\n    ]).\n    it('can be instantiated from a path segment', ({ path, expected }) => {\n        expect(path.value).to.equal(expected);\n    });\n\n    /** @test {Path} */\n    it('can be instantiated from path segments', () => {\n        const path = Path.from('/home', '..', 'users', 'jan', 'file.json');\n\n        expect(path.value).to.equal('/users/jan/file.json');\n    });\n\n    /** @test {Path} */\n    it('can split an absolute path', () => {\n        const p = new Path('/home/jan/directory/file.json');\n\n        expect(p.split()).to.deep.equal([ 'home', 'jan', 'directory', 'file.json' ]);\n    });\n\n    /** @test {Path} */\n    it('can split a relative path', () => {\n        const p = new Path('directory/file.json');\n\n        expect(p.split()).to.deep.equal([ 'directory', 'file.json' ]);\n    });\n\n    /** @test {Path} */\n    it('can resolve two paths', () => {\n        const\n            p1 = new Path('/home/jan/documents'),\n            p2 = new Path('../projects');\n\n        expect(p1.resolve(p2).value).to.match(/([A-Z]:)?\\/home\\/jan\\/projects$/);\n    });\n\n    /** @test {Path} */\n    it('knows the root directory', () => {\n        expect(new Path('/home/jan/documents').root()).to.equal(new Path('/'));\n    });\n\n    /** @test {Path} */\n    it(`knows if it's absolute or relative`, () => {\n        expect(new Path('/home/jan/documents').isAbsolute()).to.equal(true);\n        expect(new Path('documents').isAbsolute()).to.equal(false);\n    });\n\n    given(\n        { description: 'file in a sub-directory', path: new Path('/home/jan/file.json'), expected: new Path('/home/jan') },\n        { description: 'sub-directory',           path: new Path('/home/jan'),           expected: new Path('/home') },\n        { description: 'root',                    path: new Path('/'),                   expected: new Path('/') },\n    ).\n    it('can tell the parent directory', ({ path, expected }) => {\n        expect(path.directory()).to.equal(expected);\n    });\n\n    given(\n        { description: 'file in a sub-directory', path: new Path('/home/jan/file.json'), expected: 'file.json' },\n        { description: 'sub-directory',           path: new Path('/home/jan'),           expected: 'jan' },\n        { description: 'root',                    path: new Path('/'),                   expected: '' },\n    ).\n    it('can tell the name of the directory in which the file lives', ({ path, expected }) => {\n        expect(path.basename()).to.equal(expected);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/Path.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1024,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "spec/io/Path.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92",
    "access": null,
    "description": "Path",
    "lineNumber": 8
  },
  {
    "__docId__": 1025,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "spec/io/Path.spec.ts~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.describe93",
    "access": null,
    "description": "when used across different operating systems",
    "lineNumber": 10
  },
  {
    "__docId__": 1026,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "spec/io/Path.spec.ts~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.describe93.it94",
    "access": null,
    "description": "produces the same result no matter what path it's instantiated with",
    "lineNumber": 15,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1027,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "spec/io/Path.spec.ts~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.describe93.it95",
    "access": null,
    "description": "exposes the normalised path string",
    "lineNumber": 20,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1028,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "spec/io/Path.spec.ts~describe92.describe93",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.describe93.it96",
    "access": null,
    "description": "splits the same",
    "lineNumber": 26,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1029,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "spec/io/Path.spec.ts~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.it97",
    "access": null,
    "description": "can be serialised and deserialised",
    "lineNumber": 37,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1030,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "spec/io/Path.spec.ts~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.it98",
    "access": null,
    "description": "can join path components into a single path",
    "lineNumber": 44,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1031,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "spec/io/Path.spec.ts~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.it99",
    "access": null,
    "description": "can be instantiated from path segments",
    "lineNumber": 62,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1032,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "spec/io/Path.spec.ts~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.it100",
    "access": null,
    "description": "can split an absolute path",
    "lineNumber": 69,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1033,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "spec/io/Path.spec.ts~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.it101",
    "access": null,
    "description": "can split a relative path",
    "lineNumber": 76,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1034,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "spec/io/Path.spec.ts~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.it102",
    "access": null,
    "description": "can resolve two paths",
    "lineNumber": 83,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1035,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "spec/io/Path.spec.ts~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.it103",
    "access": null,
    "description": "knows the root directory",
    "lineNumber": 92,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1036,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "spec/io/Path.spec.ts~describe92",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Path.spec.ts~describe92.it104",
    "access": null,
    "lineNumber": 97,
    "testTargets": [
      "Path"
    ]
  },
  {
    "__docId__": 1037,
    "kind": "testFile",
    "name": "spec/io/Version.spec.ts",
    "content": "import 'mocha';\n\nimport { Version } from '../../src/io';\nimport { expect } from '../expect';\n\ndescribe('Version', () => {\n\n    it('represents a comparable version number', () => {\n        expect(new Version('1.2.3').isAtLeast(new Version('1.0.0'))).to.equal(true);\n    });\n\n    it('grants access to the major version number', () => {\n        expect(new Version('1.2.3').major()).to.equal(1);\n    });\n\n    it('provides a sensible description', () => {\n        expect(new Version('1.2.3').toString()).to.equal('1.2.3');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/Version.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1038,
    "kind": "test",
    "name": "describe105",
    "testId": 105,
    "memberof": "spec/io/Version.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/Version.spec.ts~describe105",
    "access": null,
    "description": "Version",
    "lineNumber": 6
  },
  {
    "__docId__": 1039,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "spec/io/Version.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Version.spec.ts~describe105.it106",
    "access": null,
    "description": "represents a comparable version number",
    "lineNumber": 8
  },
  {
    "__docId__": 1040,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "spec/io/Version.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Version.spec.ts~describe105.it107",
    "access": null,
    "description": "grants access to the major version number",
    "lineNumber": 12
  },
  {
    "__docId__": 1041,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "spec/io/Version.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/Version.spec.ts~describe105.it108",
    "access": null,
    "description": "provides a sensible description",
    "lineNumber": 16
  },
  {
    "__docId__": 1042,
    "kind": "testFile",
    "name": "spec/io/commaSeparated.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { commaSeparated } from '../../src/io';\nimport { expect } from '../expect';\n\ndescribe('commaSeparated', () => {\n\n    it('returns an empty string for an empty list', () => {\n        expect(commaSeparated([])).to.equal('');\n    });\n\n    given([\n        { list: [ 'value' ], expected: 'value' }\n    ]).\n    it('returns a string representation of a singleton list', ({ list, expected }) => {\n        expect(commaSeparated(list)).to.equal(expected);\n    });\n\n    given([\n        { list: [ 'first', 'second' ], expected: 'first and second' }\n    ]).\n    it('joins the last two elements with an \"and\"', ({ list, expected }) => {\n        expect(commaSeparated(list)).to.equal(expected);\n    });\n\n    given([\n        { list: [ 'first', 'second', 'third', 'fourth' ], expected: 'first, second, third and fourth' }\n    ]).\n    it('joins other elements with a comma', ({ list, expected }) => {\n        expect(commaSeparated(list)).to.equal(expected);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/commaSeparated.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1043,
    "kind": "test",
    "name": "describe109",
    "testId": 109,
    "memberof": "spec/io/commaSeparated.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/commaSeparated.spec.ts~describe109",
    "access": null,
    "description": "commaSeparated",
    "lineNumber": 8
  },
  {
    "__docId__": 1044,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "spec/io/commaSeparated.spec.ts~describe109",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/commaSeparated.spec.ts~describe109.it110",
    "access": null,
    "description": "returns an empty string for an empty list",
    "lineNumber": 10
  },
  {
    "__docId__": 1045,
    "kind": "testFile",
    "name": "spec/io/formatted.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\nimport * as util from 'util';   // eslint-disable-line unicorn/import-style\n\nimport { formatted } from '../../src/io';\nimport { Question } from '../../src/screenplay';\nimport { expect } from '../expect';\n\n/** @test {formatted} */\ndescribe ('`formatted` tag function', () => {\n\n    const\n        p  = value => Promise.resolve(value),\n        q  = value => Question.about(`the meaning of life`, actor => value),\n        i  = value => ({ [util.inspect.custom]: () => value }),\n        ts = value => ({ toString: () => value });\n\n    class SomeAttribute {}\n\n    given(\n        { description: 'no parameters',             actual: formatted `Hello World!`,                           expected: 'Hello World!'                              },\n        { description: 'an undefined parameter',    actual: formatted `param: ${ undefined }`,                  expected: 'param: undefined'                          },\n        { description: 'a number parameter',        actual: formatted `Answer: ${ 42 }`,                        expected: 'Answer: 42'                                },\n        { description: 'a string parameter',        actual: formatted `Hello ${ 'World' }!`,                    expected: \"Hello 'World'!\"                            },\n        { description: 'an object parameter',       actual: formatted `${ { twitter: '@JanMolak'} }`,           expected: '{ \"twitter\": \"@JanMolak\" }'                },\n        { description: 'an empty array',            actual: formatted `${ [] }`,                                expected: '[ ]'                                       },\n        { description: 'an array parameter',        actual: formatted `${ [1, 2, '3'] }`,                       expected: \"[ 1, 2, '3' ]\"                             },\n        { description: 'an array of params',        actual: formatted `${ [ Promise.resolve(1), q('2') ] }`,    expected: '[ a Promise, the meaning of life ]'        },\n        { description: 'an object array parameter', actual: formatted `${ [{ name: 'Jan'}] }`,                  expected: '[ { \"name\": \"Jan\" } ]'                     },\n        { description: 'a Date parameter',          actual: formatted `${ new Date(818035920000) }`,      expected: '1995-12-04T00:12:00.000Z'                  },\n        { description: 'a promised parameter',      actual: formatted `${ p('something') }`,              expected: 'a Promise'                                 },\n        { description: 'a question',                actual: formatted `${ q('value') }`,                  expected: 'the meaning of life'                       },\n        { description: 'an inspectable object',     actual: formatted `${ i('result') }`,                 expected: 'result'                                    },\n        { description: 'an \"toStringable\" object',  actual: formatted `${ ts('result') }`,                expected: 'result'                                    },\n        { description: 'a function parameter',      actual: formatted `${ SomeAttribute }`,                     expected: 'SomeAttribute property'                    },\n    ).\n    it('produces a human-readable description when given a template with', ({ actual, expected }) => {\n        expect(actual).to.equal(expected);\n    });\n\n    /** @test {formatted} */\n    it('produces a human-readable description when given a template with multiple parameters', () => {\n        expect(formatted `Hello, ${ 'World' }! I've got ${ p('result') } for you!`)\n            .to.equal(\"Hello, 'World'! I've got a Promise for you!\");\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/formatted.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1046,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "spec/io/formatted.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/formatted.spec.ts~describe111",
    "access": null,
    "description": "`formatted` tag function",
    "lineNumber": 12,
    "testTargets": [
      "formatted"
    ]
  },
  {
    "__docId__": 1047,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "spec/io/formatted.spec.ts~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/formatted.spec.ts~describe111.it112",
    "access": null,
    "description": "produces a human-readable description when given a template with multiple parameters",
    "lineNumber": 51,
    "testTargets": [
      "formatted"
    ]
  },
  {
    "__docId__": 1048,
    "kind": "testFile",
    "name": "spec/io/json/cycle.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-zero-fractions,unicorn/prevent-abbreviations */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { parse, stringify } from '../../../src/io';\nimport { expect } from '../../expect';\n\ndescribe('cycle', () => {\n\n    describe('when used with primitives', () => {\n\n        describe('stringify', () => {\n\n            given([\n                { description: 'number',    value: 1.5          },\n                { description: 'string',    value: 'hi'         },\n                { description: 'boolean',   value: true         },\n                { description: 'null',      value: null         },\n                { description: 'undefined', value: void 0       },\n            ]).\n            it('behaves just like JSON.stringify', (value: any) => {\n                expect(stringify(value)).to.equal(JSON.stringify(value));\n            });\n        });\n\n        describe('parse', () => {\n\n            given([\n                { description: 'number',    value: '1.5',   expected: 1.5       },\n                { description: 'string',    value: '\"hi\"',  expected: 'hi'      },\n                { description: 'boolean',   value: 'true',  expected: true      },\n                { description: 'null',      value: 'null',  expected: null      },\n            ]).\n            it('behaves just like JSON.parse', ({  value, expected }) => {\n                expect(parse(value)).to.equal(JSON.parse(value));\n                expect(parse(value)).to.equal(expected);\n            });\n        });\n    });\n\n    describe('when used with acyclic objects', () => {\n\n        describe('stringify', () => {\n\n            given([\n                { description: 'empty object',  value: { }                               },\n                { description: 'simple object', value: { name: 'Jan' }                   },\n                { description: 'nested object', value: { l1: { l2: 'value'} }            },\n                { description: 'empty array',   value: []                                },\n                { description: 'simple array',  value: [ '1', 2, 3.0 ]                   },\n                { description: 'nested array',  value: [ [ '1' ], [['2']], '3' ]         },\n                { description: 'mixed',         value: [{ values: [1, { name: 'Jan' }]}] },\n            ]).\n            it('behaves just like JSON.stringify', (value: any) => {\n                expect(stringify(value)).to.equal(JSON.stringify(value));\n            });\n        });\n\n        describe('parse', () => {\n\n            given([\n                { description: 'empty object',  value: '{}',                                expected: { }                               },\n                { description: 'simple object', value: '{\"name\":\"Jan\"}',                    expected: { name: 'Jan'}                    },\n                { description: 'nested object', value: '{\"l1\":{\"l2\":\"value\"}}',             expected: { l1: { l2: 'value'} }            },\n                { description: 'empty array',   value: '[]',                                expected: []                                },\n                { description: 'simple array',  value: '[\"1\",2,3]',                         expected: [ '1', 2, 3.0 ]                   },\n                { description: 'nested array',  value: '[[\"1\"],[[\"2\"]],\"3\"]',               expected: [ [ '1' ], [['2']], '3' ]         },\n                { description: 'mixed',         value: '[{\"values\":[1,{\"name\":\"Jan\"}]}]',   expected: [{ values: [1, { name: 'Jan' }]}] },\n            ]).\n            it('behaves just like JSON.parse', ({  value, expected }) => {\n                expect(parse(value)).to.deep.equal(JSON.parse(value));\n                expect(parse(value)).to.deep.equal(expected);\n            });\n        });\n    });\n\n    describe('when used with cyclic objects', () => {\n\n        describe('JSON.stringify', () => {\n\n            it('should fail because of a circular reference in a round robin list', () => {\n                expect(() => JSON.stringify(roundRobin(2)))\n                    .to.throw(TypeError, 'Converting circular structure to JSON');\n            });\n\n            it('should fail because of a circular reference in simple nested object', () => {\n                expect(() => JSON.stringify(simpleNestedObject()))\n                    .to.throw(TypeError, 'Converting circular structure to JSON');\n            });\n\n            it('should fail because of a circular reference in complex nested object', () => {\n                expect(() => JSON.stringify(complexNestedObject()))\n                    .to.throw(TypeError, 'Converting circular structure to JSON');\n            });\n\n            it('should fail because of a cycles in object with parallel references', () => {\n                expect(() => JSON.stringify(objectWithParallelReferences()))\n                    .to.throw(TypeError, 'Converting circular structure to JSON');\n            });\n        });\n\n        describe('stringify', () => {\n            it('should serialise a round robin list data structure', () => {\n                expect(stringify(roundRobin(1)))\n                    .to.equal('[{\"prev\":{\"$ref\":\"$[0]\"}}]');\n            });\n\n            it('should serialise a simple nested object', () => {\n                expect(stringify(simpleNestedObject()))\n                    .to.equal('{\"property\":\"value\",\"self\":{\"$ref\":\"$\"}}');\n            });\n\n            it('should serialise a complex nested object', () => {\n                expect(stringify(complexNestedObject()))\n                    .to.equal('{\"property\":\"value\",\"another\":{\"property\":\"another value\",\"self\":{\"$ref\":\"$[\\\\\"another\\\\\"]\"}},\"self\":{\"$ref\":\"$\"}}');\n            });\n\n            it('should serialise an object with parallel references', () => {\n                expect(stringify(objectWithParallelReferences()))\n                    .to.equal('{\"property1\":{\"value\":42,\"sibling\":{\"$ref\":\"$[\\\\\"property1\\\\\"]\"}},\"property2\":{\"$ref\":\"$[\\\\\"property1\\\\\"]\"}}');\n            });\n        });\n\n        describe('parse', () => {\n\n            it('should deserialise a round robin list data structure', () => {\n                expect(parse(stringify(roundRobin(1))))\n                    .to.deep.equal(roundRobin(1));\n            });\n\n            it('should deserialise a simple nested object', () => {\n                expect(parse(stringify(simpleNestedObject())))\n                    .to.deep.equal(simpleNestedObject());\n            });\n\n            it('should deserialise a complex nested object', () => {\n                expect(parse(stringify(complexNestedObject())))\n                    .to.deep.equal(complexNestedObject());\n            });\n\n            it('should deserialise an object with parallel references', () => {\n                expect(parse(stringify(objectWithParallelReferences())))\n                    .to.deep.equal(objectWithParallelReferences());\n            });\n        });\n\n        function roundRobin(segments: number) {\n            if (segments <= 0) {\n                return [];\n            }\n\n            const list = [];\n            let prev = null;\n\n            for (let i = 0; i < segments; ++i) {\n                prev = list[i] = { prev }\n            }\n\n            list[0].prev = list[segments - 1];\n\n            return list;\n        }\n\n        function simpleNestedObject() {\n\n            const sample = {\n                property: 'value',\n                self: undefined,\n            };\n            sample.self = sample;\n\n            return sample;\n        }\n\n        function complexNestedObject() {\n\n            const sample = {\n                property: 'value',\n                another: {\n                    property: 'another value',\n                    self: undefined,\n                },\n                self: undefined,\n            };\n            sample.another.self = sample.another;\n            sample.self = sample;\n\n            return sample;\n        }\n\n        function objectWithParallelReferences() {\n\n            const property = {\n                value: 42,\n                sibling: undefined,\n            }\n\n            const sample = {\n                property1: property,\n                property2: property,\n            };\n\n            sample.property1.sibling = sample.property2;\n            sample.property2.sibling = sample.property1;\n\n            return sample;\n        }\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/json/cycle.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1049,
    "kind": "test",
    "name": "describe113",
    "testId": 113,
    "memberof": "spec/io/json/cycle.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113",
    "access": null,
    "description": "cycle",
    "lineNumber": 9
  },
  {
    "__docId__": 1050,
    "kind": "test",
    "name": "describe114",
    "testId": 114,
    "memberof": "spec/io/json/cycle.spec.ts~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe114",
    "access": null,
    "description": "when used with primitives",
    "lineNumber": 11
  },
  {
    "__docId__": 1051,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe114",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe114.describe115",
    "access": null,
    "description": "stringify",
    "lineNumber": 13
  },
  {
    "__docId__": 1052,
    "kind": "test",
    "name": "describe116",
    "testId": 116,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe114",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe114.describe116",
    "access": null,
    "description": "parse",
    "lineNumber": 27
  },
  {
    "__docId__": 1053,
    "kind": "test",
    "name": "describe117",
    "testId": 117,
    "memberof": "spec/io/json/cycle.spec.ts~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe117",
    "access": null,
    "description": "when used with acyclic objects",
    "lineNumber": 42
  },
  {
    "__docId__": 1054,
    "kind": "test",
    "name": "describe118",
    "testId": 118,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe117",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe117.describe118",
    "access": null,
    "description": "stringify",
    "lineNumber": 44
  },
  {
    "__docId__": 1055,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe117",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe117.describe119",
    "access": null,
    "description": "parse",
    "lineNumber": 60
  },
  {
    "__docId__": 1056,
    "kind": "test",
    "name": "describe120",
    "testId": 120,
    "memberof": "spec/io/json/cycle.spec.ts~describe113",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120",
    "access": null,
    "description": "when used with cyclic objects",
    "lineNumber": 78
  },
  {
    "__docId__": 1057,
    "kind": "test",
    "name": "describe121",
    "testId": 121,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe121",
    "access": null,
    "description": "JSON.stringify",
    "lineNumber": 80
  },
  {
    "__docId__": 1058,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe121",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe121.it122",
    "access": null,
    "description": "should fail because of a circular reference in a round robin list",
    "lineNumber": 82
  },
  {
    "__docId__": 1059,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe121",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe121.it123",
    "access": null,
    "description": "should fail because of a circular reference in simple nested object",
    "lineNumber": 87
  },
  {
    "__docId__": 1060,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe121",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe121.it124",
    "access": null,
    "description": "should fail because of a circular reference in complex nested object",
    "lineNumber": 92
  },
  {
    "__docId__": 1061,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe121",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe121.it125",
    "access": null,
    "description": "should fail because of a cycles in object with parallel references",
    "lineNumber": 97
  },
  {
    "__docId__": 1062,
    "kind": "test",
    "name": "describe126",
    "testId": 126,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe126",
    "access": null,
    "description": "stringify",
    "lineNumber": 103
  },
  {
    "__docId__": 1063,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe126",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe126.it127",
    "access": null,
    "description": "should serialise a round robin list data structure",
    "lineNumber": 104
  },
  {
    "__docId__": 1064,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe126",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe126.it128",
    "access": null,
    "description": "should serialise a simple nested object",
    "lineNumber": 109
  },
  {
    "__docId__": 1065,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe126",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe126.it129",
    "access": null,
    "description": "should serialise a complex nested object",
    "lineNumber": 114
  },
  {
    "__docId__": 1066,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe126",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe126.it130",
    "access": null,
    "description": "should serialise an object with parallel references",
    "lineNumber": 119
  },
  {
    "__docId__": 1067,
    "kind": "test",
    "name": "describe131",
    "testId": 131,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120",
    "testDepth": 2,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe131",
    "access": null,
    "description": "parse",
    "lineNumber": 125
  },
  {
    "__docId__": 1068,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe131",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe131.it132",
    "access": null,
    "description": "should deserialise a round robin list data structure",
    "lineNumber": 127
  },
  {
    "__docId__": 1069,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe131",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe131.it133",
    "access": null,
    "description": "should deserialise a simple nested object",
    "lineNumber": 132
  },
  {
    "__docId__": 1070,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe131",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe131.it134",
    "access": null,
    "description": "should deserialise a complex nested object",
    "lineNumber": 137
  },
  {
    "__docId__": 1071,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "spec/io/json/cycle.spec.ts~describe113.describe120.describe131",
    "testDepth": 3,
    "static": true,
    "longname": "spec/io/json/cycle.spec.ts~describe113.describe120.describe131.it135",
    "access": null,
    "description": "should deserialise an object with parallel references",
    "lineNumber": 142
  },
  {
    "__docId__": 1072,
    "kind": "testFile",
    "name": "spec/io/reflection/has.spec.ts",
    "content": "/* eslint-disable unicorn/no-null */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { has } from '../../../src/io';\nimport { expect } from '../../expect';\n\n/** @test {has} */\ndescribe('has', () => {\n\n    const looksLikeADuck = has({\n        name:   'string',\n        quack:  'function',\n    });\n\n    class Duck {\n        constructor(public readonly name) {\n        }\n        quack() {\n            return 'quack';\n        }\n    }\n\n    given([\n        { description: 'plain object',  example: { name: 'Daisy', quack: () => 'quack' }    },\n        { description: 'instance',      example: new Duck('Daisy')                          },\n    ]).\n    it('returns true when the candidate has the expected fields and methods', ({ example }) => {\n        expect(looksLikeADuck(example)).to.equal(true);\n    });\n\n    given([\n        { description: 'null',              example: null                                   },\n        { description: 'undefined',         example: undefined                              },\n        { description: 'empty object',      example: { }                                    },\n        { description: 'missing methods',   example: { name: 'Pluto' }                      },\n        { description: 'missing field',     example: { quack: () => 'quack' }               },\n        { description: 'wrong type',        example: { name: 'Donald', quack: 'quack'   }   },\n    ]).\n    it('returns false when the candidate does not meet the expectations', ({ example }) => {\n        expect(looksLikeADuck(example)).to.equal(false);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/reflection/has.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1073,
    "kind": "test",
    "name": "describe136",
    "testId": 136,
    "memberof": "spec/io/reflection/has.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/reflection/has.spec.ts~describe136",
    "access": null,
    "description": "has",
    "lineNumber": 10,
    "testTargets": [
      "has"
    ]
  },
  {
    "__docId__": 1074,
    "kind": "testFile",
    "name": "spec/io/trimmed.spec.ts",
    "content": "import 'mocha';\n\nimport { trimmed } from '../../src/io';\nimport { expect } from '../expect';\n\ndescribe ('`trimmed` tag function', () => {\n\n    /** @test {trimmed} */\n    it('trims the leading and trailing whitespace', () => {\n        expect(trimmed `  Hello world!  `).to.equal('Hello world!');\n    });\n\n    /** @test {trimmed} */\n    it('leaves the space between the lines if required', () => {\n        expect(trimmed `\n            | --------------------------------------------------------------------------------\n            | features/payments/checkout.feature\n            |\n            | Online Checkout: Paying with a default card\n            |\n            | ✓ Execution successful (10ms)\n        `).to.equal([\n            '--------------------------------------------------------------------------------',\n            'features/payments/checkout.feature',\n            '',\n            'Online Checkout: Paying with a default card',\n            '',\n            '✓ Execution successful (10ms)',\n            '',\n        ].join('\\n'));\n    });\n\n    /** @test {trimmed} */\n    it('trims padded multi-line string', () => {\n        expect(trimmed `\n            | const SomeInteraction = () =>\n            |     Interaction.where(\\`${ '#actor interacts with the system' }\\`, (actor: Actor) => {\n            |         // use actor's abilities to interact with the system under test\n            |     });\n        `).to.equal([\n            `const SomeInteraction = () =>`,\n            `    Interaction.where(\\`#actor interacts with the system\\`, (actor: Actor) => {`,\n            `        // use actor's abilities to interact with the system under test`,\n            `    });`,\n            ``,\n        ].join('\\n'));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/io/trimmed.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1075,
    "kind": "test",
    "name": "describe137",
    "testId": 137,
    "memberof": "spec/io/trimmed.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/io/trimmed.spec.ts~describe137",
    "access": null,
    "description": "`trimmed` tag function",
    "lineNumber": 6
  },
  {
    "__docId__": 1076,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "spec/io/trimmed.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/trimmed.spec.ts~describe137.it138",
    "access": null,
    "description": "trims the leading and trailing whitespace",
    "lineNumber": 9,
    "testTargets": [
      "trimmed"
    ]
  },
  {
    "__docId__": 1077,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "spec/io/trimmed.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/trimmed.spec.ts~describe137.it139",
    "access": null,
    "description": "leaves the space between the lines if required",
    "lineNumber": 14,
    "testTargets": [
      "trimmed"
    ]
  },
  {
    "__docId__": 1078,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "spec/io/trimmed.spec.ts~describe137",
    "testDepth": 1,
    "static": true,
    "longname": "spec/io/trimmed.spec.ts~describe137.it140",
    "access": null,
    "description": "trims padded multi-line string",
    "lineNumber": 34,
    "testTargets": [
      "trimmed"
    ]
  },
  {
    "__docId__": 1079,
    "kind": "testFile",
    "name": "spec/model/Artifact.spec.ts",
    "content": "import { Artifact, JSONData, Photo } from '../../src/model';\nimport { expect } from '../expect';\n\ndescribe ('Artifact', () => {\n    describe('Photo', () => {\n\n        const photo = Photo.fromBase64('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAAA1BMVEW01FWbeM52AAAACklEQVR4nGNiAAAABgADNjd8qAAAAABJRU5ErkJggg==');\n\n        /** @test {Photo#toJSON} */\n        it('can be serialised', () => {\n            const serialised = photo.toJSON();\n\n            expect(serialised.type).to.equal('Photo');\n            expect(serialised.base64EncodedValue).to.equal(photo.base64EncodedValue);\n        });\n\n        /**\n         * @test {Photo#toJSON}\n         * @test {Artifact.fromJSON}\n         */\n        it('can be de-serialised', () => {\n            const\n                serialised = photo.toJSON(),\n                deserialised = Artifact.fromJSON(serialised);\n\n            expect(deserialised).to.equal(photo);\n        });\n\n        /**\n         * @test {Photo#map}\n         * @test {Photo#base64EncodedValue}\n         */\n        it('allows for its value to be extracted as a Buffer', () => {\n            photo.map(value => expect(value).to.be.instanceOf(Buffer));\n            photo.map(value => expect(value.toString('base64')).to.equal(photo.base64EncodedValue));\n        });\n\n        /**\n         * @test {Photo.fromBuffer}\n         */\n        it('can be instantiated from a Buffer', () => {\n            expect(Photo.fromBuffer(Buffer.from(photo.base64EncodedValue, 'base64'))).to.equal(photo);\n        });\n    });\n\n    describe('JSONData', () => {\n\n        const json = JSONData.fromJSON({\n            key: ['v', 'a', 'l', 'u', 'e'],\n        });\n\n        /** @test {JSONData#toJSON} */\n        it('can be serialised', () => {\n            const serialised = json.toJSON();\n\n            expect(serialised.type).to.equal('JSONData');\n            expect(serialised.base64EncodedValue).to.equal(json.base64EncodedValue);\n        });\n\n        /**\n         * @test {JSONData#toJSON}\n         * @test {Artifact.fromJSON}\n         */\n        it('can be de-serialised', () => {\n            const\n                serialised = json.toJSON(),\n                deserialised = Artifact.fromJSON(serialised);\n\n            expect(deserialised).to.equal(json);\n        });\n\n        /**\n         * @test {JSONData#map}\n         * @test {JSONData#base64EncodedValue}\n         */\n        it('allows for its value to be extracted as a JSON value', () => {\n            json.map(value => expect(value).to.be.instanceOf(Object));\n            json.map(value => expect(value).to.deep.equal({\n                key: ['v', 'a', 'l', 'u', 'e'],\n            }));\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/model/Artifact.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1080,
    "kind": "test",
    "name": "describe141",
    "testId": 141,
    "memberof": "spec/model/Artifact.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe141",
    "access": null,
    "description": "Artifact",
    "lineNumber": 4
  },
  {
    "__docId__": 1081,
    "kind": "test",
    "name": "describe142",
    "testId": 142,
    "memberof": "spec/model/Artifact.spec.ts~describe141",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe141.describe142",
    "access": null,
    "description": "Photo",
    "lineNumber": 5
  },
  {
    "__docId__": 1082,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "spec/model/Artifact.spec.ts~describe141.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe141.describe142.it143",
    "access": null,
    "description": "can be serialised",
    "lineNumber": 10,
    "testTargets": [
      "Photo#toJSON"
    ]
  },
  {
    "__docId__": 1083,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "spec/model/Artifact.spec.ts~describe141.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe141.describe142.it144",
    "access": null,
    "description": "can be de-serialised",
    "lineNumber": 21,
    "testTargets": [
      "Photo#toJSON",
      "Artifact.fromJSON"
    ]
  },
  {
    "__docId__": 1084,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "spec/model/Artifact.spec.ts~describe141.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe141.describe142.it145",
    "access": null,
    "description": "allows for its value to be extracted as a Buffer",
    "lineNumber": 33,
    "testTargets": [
      "Photo#map",
      "Photo#base64EncodedValue"
    ]
  },
  {
    "__docId__": 1085,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "spec/model/Artifact.spec.ts~describe141.describe142",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe141.describe142.it146",
    "access": null,
    "description": "can be instantiated from a Buffer",
    "lineNumber": 41,
    "testTargets": [
      "Photo.fromBuffer"
    ]
  },
  {
    "__docId__": 1086,
    "kind": "test",
    "name": "describe147",
    "testId": 147,
    "memberof": "spec/model/Artifact.spec.ts~describe141",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe141.describe147",
    "access": null,
    "description": "JSONData",
    "lineNumber": 46
  },
  {
    "__docId__": 1087,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "spec/model/Artifact.spec.ts~describe141.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe141.describe147.it148",
    "access": null,
    "description": "can be serialised",
    "lineNumber": 53,
    "testTargets": [
      "JSONData#toJSON"
    ]
  },
  {
    "__docId__": 1088,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "spec/model/Artifact.spec.ts~describe141.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe141.describe147.it149",
    "access": null,
    "description": "can be de-serialised",
    "lineNumber": 64,
    "testTargets": [
      "JSONData#toJSON",
      "Artifact.fromJSON"
    ]
  },
  {
    "__docId__": 1089,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "spec/model/Artifact.spec.ts~describe141.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Artifact.spec.ts~describe141.describe147.it150",
    "access": null,
    "description": "allows for its value to be extracted as a JSON value",
    "lineNumber": 76,
    "testTargets": [
      "JSONData#map",
      "JSONData#base64EncodedValue"
    ]
  },
  {
    "__docId__": 1090,
    "kind": "testFile",
    "name": "spec/model/Duration.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { Duration } from '../../src/model';\nimport { expect } from '../expect';\n\n/** @test {Duration} */\ndescribe('Duration', () => {\n\n    describe('represents a duration of time that', () => {\n\n        given<Duration, number>(\n            [ Duration.ofMilliseconds(1),     1                               ],\n            [ Duration.ofSeconds(1),          1 * 1000                        ],\n            [ Duration.ofMinutes(1),          60 * 1 * 1000                   ],\n            [ Duration.ofHours(1),            60 * 60 * 1 * 1000              ],\n            [ Duration.ofDays(1),             24 * 60 * 60 * 1 * 1000         ],\n            [ Duration.ofYears(1),            365 * 24 * 60 * 60 * 1 * 1000   ],\n        ).\n        it('can be easily converted to milliseconds', (duration: Duration, expectedMilliseconds: number) => {\n            expect(duration.inMilliseconds()).to.equal(expectedMilliseconds);\n        });\n\n        given<Duration, string>(\n            [ Duration.ofMilliseconds(100),       '100ms'     ],\n            [ Duration.ofMilliseconds(2200),      '2s 200ms'  ],\n            [ Duration.ofMilliseconds(132000),    '2m 12s'    ],\n            [ Duration.ofMilliseconds(7921000),   '2h 12m 1s' ],\n            [ Duration.ofMilliseconds(190080000), '2d 4h 48m' ],\n        ).\n        it('can be presented in a human-friendly format', (duration: Duration, expected: string) => {\n            expect(duration.toString()).to.equal(expected);\n        });\n    });\n\n    describe('when performing computations', () => {\n        const\n            oneMinute   = Duration.ofMinutes(1),\n            tenSeconds  = Duration.ofSeconds(10);\n\n        it('allows for durations to be added', () => {\n\n            expect(oneMinute.plus(tenSeconds)).to.equal(Duration.ofSeconds(70));\n        });\n    });\n\n    describe('when comparing', () => {\n        const\n            oneMinute   = Duration.ofMinutes(1),\n            tenSeconds  = Duration.ofSeconds(10);\n\n        given([\n            { description: 'isGreaterThan (positive)',            result: oneMinute.isGreaterThan(tenSeconds),            expected: true  },\n            { description: 'isGreaterThan (negative)',            result: tenSeconds.isGreaterThan(oneMinute),            expected: false },\n            { description: 'isGreaterThanOrEqualTo(positive)',    result: oneMinute.isGreaterThanOrEqualTo(oneMinute),    expected: true  },\n            { description: 'isGreaterThanOrEqualTo(negative)',    result: tenSeconds.isGreaterThanOrEqualTo(oneMinute),   expected: false },\n            { description: 'isLessThan(positive)',                result: tenSeconds.isLessThan(oneMinute),               expected: true  },\n            { description: 'isLessThan(negative)',                result: oneMinute.isLessThan(tenSeconds),               expected: false },\n            { description: 'isLessThanOrEqualTo(positive)',       result: oneMinute.isLessThanOrEqualTo(oneMinute),       expected: true  },\n            { description: 'isLessThanOrEqualTo(negative)',       result: oneMinute.isLessThanOrEqualTo(tenSeconds),      expected: false },\n        ]).\n        it('allows for durations to be compared', ({ result, expected }) => {\n            expect(result).to.equal(expected);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/model/Duration.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1091,
    "kind": "test",
    "name": "describe151",
    "testId": 151,
    "memberof": "spec/model/Duration.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/Duration.spec.ts~describe151",
    "access": null,
    "description": "Duration",
    "lineNumber": 9,
    "testTargets": [
      "Duration"
    ]
  },
  {
    "__docId__": 1092,
    "kind": "test",
    "name": "describe152",
    "testId": 152,
    "memberof": "spec/model/Duration.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Duration.spec.ts~describe151.describe152",
    "access": null,
    "description": "represents a duration of time that",
    "lineNumber": 11
  },
  {
    "__docId__": 1093,
    "kind": "test",
    "name": "describe153",
    "testId": 153,
    "memberof": "spec/model/Duration.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Duration.spec.ts~describe151.describe153",
    "access": null,
    "description": "when performing computations",
    "lineNumber": 37
  },
  {
    "__docId__": 1094,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "spec/model/Duration.spec.ts~describe151.describe153",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Duration.spec.ts~describe151.describe153.it154",
    "access": null,
    "description": "allows for durations to be added",
    "lineNumber": 42
  },
  {
    "__docId__": 1095,
    "kind": "test",
    "name": "describe155",
    "testId": 155,
    "memberof": "spec/model/Duration.spec.ts~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Duration.spec.ts~describe151.describe155",
    "access": null,
    "description": "when comparing",
    "lineNumber": 48
  },
  {
    "__docId__": 1096,
    "kind": "testFile",
    "name": "spec/model/ScenarioParameters.spec.ts",
    "content": "import 'mocha';\n\nimport { Description, Name, ScenarioParameters } from '../../src/model';\nimport { expect } from '../expect';\n\ndescribe('ScenarioParameters', () => {\n\n    const\n        name = new Name('set of examples'),\n        desciption = new Description('description of the examples');\n\n    /** @test {ScenarioParameters} */\n    it('can be instantiated using a plain-old JavaScript object', () => {\n\n        const parameters = { Dev: 'jan-molak' };\n        const scenarioParameters = new ScenarioParameters(name, desciption, parameters);\n\n        expect(scenarioParameters.values).to.deep.equal(parameters);\n    });\n\n    /** @test {ScenarioParameters} */\n    it('can be serialised to JSON', () => {\n        const parameters = { Dev: 'jan-molak' };\n        const scenarioParameters = new ScenarioParameters(name, desciption, parameters);\n\n        expect(scenarioParameters.toJSON()).to.deep.equal({\n            name: name.toJSON(),\n            description: desciption.toJSON(),\n            values: parameters,\n        });\n    });\n\n    /** @test {ScenarioParameters} */\n    it('can be deserialised from JSON', () => {\n        const parameters = { Dev: 'jan-molak' };\n\n        expect(new ScenarioParameters(name, desciption, parameters))\n            .to.equal(ScenarioParameters.fromJSON({\n                name: name.toJSON(),\n                description: desciption.toJSON(),\n                values: parameters,\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/model/ScenarioParameters.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1097,
    "kind": "test",
    "name": "describe156",
    "testId": 156,
    "memberof": "spec/model/ScenarioParameters.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/ScenarioParameters.spec.ts~describe156",
    "access": null,
    "description": "ScenarioParameters",
    "lineNumber": 6
  },
  {
    "__docId__": 1098,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "spec/model/ScenarioParameters.spec.ts~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/ScenarioParameters.spec.ts~describe156.it157",
    "access": null,
    "description": "can be instantiated using a plain-old JavaScript object",
    "lineNumber": 13,
    "testTargets": [
      "ScenarioParameters"
    ]
  },
  {
    "__docId__": 1099,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "spec/model/ScenarioParameters.spec.ts~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/ScenarioParameters.spec.ts~describe156.it158",
    "access": null,
    "description": "can be serialised to JSON",
    "lineNumber": 22,
    "testTargets": [
      "ScenarioParameters"
    ]
  },
  {
    "__docId__": 1100,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "spec/model/ScenarioParameters.spec.ts~describe156",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/ScenarioParameters.spec.ts~describe156.it159",
    "access": null,
    "description": "can be deserialised from JSON",
    "lineNumber": 34,
    "testTargets": [
      "ScenarioParameters"
    ]
  },
  {
    "__docId__": 1101,
    "kind": "testFile",
    "name": "spec/model/Tag.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ArbitraryTag, BrowserTag, CapabilityTag, ContextTag, FeatureTag, IssueTag, ManualTag, Tag, Tags, ThemeTag } from '../../src/model';\nimport { expect } from '../expect';\n\n/**\n * @test {Tag}\n * @test {ArbitraryTag}\n * @test {BrowserTag}\n * @test {CapabilityTag}\n * @test {ContextTag}\n * @test {FeatureTag}\n */\ndescribe('Tag', () => {\n\n    given<string, Tag[]>(\n        [ '@manual',                    [ new ManualTag()                                  ] ],\n        [ '@issue:ABC-123',             [ new IssueTag('ABC-123')                          ] ],\n        [ '@issues:ABC-123',            [ new IssueTag('ABC-123')                          ] ],\n        [ '@issue:ABC-123,DEF-456',     [ new IssueTag('ABC-123'), new IssueTag('DEF-456') ] ],\n        [ '@issues:ABC-123,DEF-456',    [ new IssueTag('ABC-123'), new IssueTag('DEF-456') ] ],\n        [ '@regression',                [ new ArbitraryTag('regression')                   ] ],\n        [ '@known_issues',              [ new ArbitraryTag('known_issues')                 ] ],\n    ).\n    it('can be constructed from a string', (stringTag: string, expectedResults: Tag[]) => {\n        const results = Tags.from(stringTag);\n\n        expect(results).to.have.lengthOf(expectedResults.length);\n\n        results.forEach((result: Tag, i: number) => {\n            expect(result).to.equal(expectedResults[i]);\n        });\n    });\n\n    given([\n        new ArbitraryTag('wip'),\n        new BrowserTag('chrome', '80.0.3987.87'),\n        new CapabilityTag('checkout'),\n        new ContextTag('mac osx'),\n        new FeatureTag('testability'),\n        new IssueTag('abc-123'),\n        new ManualTag(),\n        new ThemeTag('sales'),\n    ]).\n    it('can be deserialised from a JSON object', (tag: Tag) => {\n        expect(Tag.fromJSON(tag.toJSON())).to.equal(tag);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/model/Tag.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1102,
    "kind": "test",
    "name": "describe160",
    "testId": 160,
    "memberof": "spec/model/Tag.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/Tag.spec.ts~describe160",
    "access": null,
    "description": "Tag",
    "lineNumber": 16,
    "testTargets": [
      "Tag",
      "ArbitraryTag",
      "BrowserTag",
      "CapabilityTag",
      "ContextTag",
      "FeatureTag"
    ]
  },
  {
    "__docId__": 1103,
    "kind": "testFile",
    "name": "spec/model/Timestamp.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { Duration, Timestamp } from '../../src/model';\nimport { expect } from '../expect';\n\n/** @test {Timestamp} */\ndescribe('Timestamp', () => {\n\n    const\n        current_time         = '01 May 2018 10:00 UTC-2',\n        current_time_ISO8601 = '2018-05-01T12:00:00.000Z',\n        now                  = new Timestamp(new Date(current_time));\n\n    describe('instantiation', () => {\n\n        /** @test {Timestamp} */\n        it('can be instantiated with an arbitrary Date', () => {\n            expect(() => new Timestamp(new Date())).to.not.throw;\n        });\n\n        /** @test {Timestamp} */\n        it('defaults to current time if no argument is provided', () => {\n            expect(() => new Timestamp()).to.not.throw;\n        });\n\n        given<any>(\n            {},\n            '01 May 2018 10:00 UTC-2',\n            0,\n        ).\n        it('complains if given an incorrect value as a constructor argument', (value: any) => {\n            expect(() => new Timestamp()).to.not.throw('Timestamp should be an instance of Date');\n        });\n    });\n\n    describe('serialisation', () => {\n\n        /** @test {Timestamp} */\n        it('is serialised to an ISO-8601-compliant string', () => {\n            expect(now.toJSON()).to.equal(current_time_ISO8601);\n        });\n\n        /** @test {Timestamp} */\n        it('can be deserialised from an ISO-8601-compliant string', () => {\n            expect(Timestamp.fromJSON(current_time_ISO8601).equals(now)).to.equal(true);\n        });\n\n        given<any>(\n            0,\n            '',\n            null,       // eslint-disable-line unicorn/no-null\n            undefined,\n            {},\n            [],\n        ).\n        it('complains if given an incorrect value to deserialise', (value: any) => {\n            expect(() => Timestamp.fromJSON(value)).to.throw('Timestamp should be an ISO-8601-compliant date');\n        });\n    });\n\n    describe('arithmetic', () => {\n\n        /** @test {Timestamp} */\n        it('allows for calculating a difference between two timestamps', () => {\n\n            const a_bit_later = Timestamp.fromJSON('2018-05-01T12:00:02.752Z');\n\n            expect(now.diff(a_bit_later).equals(Duration.ofMilliseconds(2752))).to.equal(true);\n            expect(a_bit_later.diff(now).equals(Duration.ofMilliseconds(2752))).to.equal(true);\n        });\n\n        /** @test {Timestamp} */\n        it('allows for computing another timestamp, relative to the original one', () => {\n\n            const\n                two_minutes = Duration.ofSeconds(120),\n                four_minutes = Duration.ofSeconds(240);\n\n            expect(now.plus(two_minutes)).to.equal(now.plus(four_minutes).less(two_minutes));\n        });\n    });\n\n    describe('conversion', () => {\n\n        /** @test {Timestamp} */\n        it('can be converted to a numeric unix timestamp', () => {\n            expect(now.toMillisecondTimestamp()).to.equal(Math.floor(now.value.getTime()));\n        });\n\n        /** @test {Timestamp} */\n        it('can be created from a numeric unix timestamp', () => {\n            expect(Timestamp.fromMillisecondTimestamp(Math.floor(now.value.getTime())).toMillisecondTimestamp())\n                .to.equal(now.toMillisecondTimestamp());\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/model/Timestamp.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1104,
    "kind": "test",
    "name": "describe161",
    "testId": 161,
    "memberof": "spec/model/Timestamp.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161",
    "access": null,
    "description": "Timestamp",
    "lineNumber": 9,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 1105,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "spec/model/Timestamp.spec.ts~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe162",
    "access": null,
    "description": "instantiation",
    "lineNumber": 16
  },
  {
    "__docId__": 1106,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "spec/model/Timestamp.spec.ts~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe162.it163",
    "access": null,
    "description": "can be instantiated with an arbitrary Date",
    "lineNumber": 19,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 1107,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "spec/model/Timestamp.spec.ts~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe162.it164",
    "access": null,
    "description": "defaults to current time if no argument is provided",
    "lineNumber": 24,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 1108,
    "kind": "test",
    "name": "describe165",
    "testId": 165,
    "memberof": "spec/model/Timestamp.spec.ts~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe165",
    "access": null,
    "description": "serialisation",
    "lineNumber": 38
  },
  {
    "__docId__": 1109,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "spec/model/Timestamp.spec.ts~describe161.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe165.it166",
    "access": null,
    "description": "is serialised to an ISO-8601-compliant string",
    "lineNumber": 41,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 1110,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "spec/model/Timestamp.spec.ts~describe161.describe165",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe165.it167",
    "access": null,
    "description": "can be deserialised from an ISO-8601-compliant string",
    "lineNumber": 46,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 1111,
    "kind": "test",
    "name": "describe168",
    "testId": 168,
    "memberof": "spec/model/Timestamp.spec.ts~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe168",
    "access": null,
    "description": "arithmetic",
    "lineNumber": 63
  },
  {
    "__docId__": 1112,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "spec/model/Timestamp.spec.ts~describe161.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe168.it169",
    "access": null,
    "description": "allows for calculating a difference between two timestamps",
    "lineNumber": 66,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 1113,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "spec/model/Timestamp.spec.ts~describe161.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe168.it170",
    "access": null,
    "description": "allows for computing another timestamp, relative to the original one",
    "lineNumber": 75,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 1114,
    "kind": "test",
    "name": "describe171",
    "testId": 171,
    "memberof": "spec/model/Timestamp.spec.ts~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe171",
    "access": null,
    "description": "conversion",
    "lineNumber": 85
  },
  {
    "__docId__": 1115,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "spec/model/Timestamp.spec.ts~describe161.describe171",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe171.it172",
    "access": null,
    "description": "can be converted to a numeric unix timestamp",
    "lineNumber": 88,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 1116,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "spec/model/Timestamp.spec.ts~describe161.describe171",
    "testDepth": 2,
    "static": true,
    "longname": "spec/model/Timestamp.spec.ts~describe161.describe171.it173",
    "access": null,
    "description": "can be created from a numeric unix timestamp",
    "lineNumber": 93,
    "testTargets": [
      "Timestamp"
    ]
  },
  {
    "__docId__": 1117,
    "kind": "testFile",
    "name": "spec/model/outcomes.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { ImplementationPendingError, TestCompromisedError } from '../../src/errors';\nimport {\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ExecutionIgnored,\n    ExecutionSkipped,\n    ExecutionSuccessful,\n    ImplementationPending,\n    Outcome,\n    ProblemIndication,\n} from '../../src/model';\nimport { expect } from '../expect';\n\n/** @test {Outcome} */\ndescribe('Outcome', () => {\n\n    /**\n     * @test {ExecutionSkipped}\n     * @test {ExecutionIgnored}\n     * @test {ImplementationPending}\n     * @test {ExecutionSuccessful}\n     */\n    describe('non-error outcome', () => {\n\n        given([\n            new ExecutionSkipped(),\n            new ExecutionSuccessful(),\n        ]).\n        it('can be serialised and deserialised', (outcome: Outcome) => {\n            const deserialised: any = Outcome.fromJSON(outcome.toJSON());\n\n            expect(deserialised).to.be.instanceOf(outcome.constructor);\n        });\n    });\n\n    /**\n     * @test {ExecutionCompromised}\n     * @test {ExecutionFailedWithError}\n     * @test {ExecutionFailedWithAssertionError}\n     */\n    describe('outcome indicating an error', () => {\n\n        given([\n            { outcome: new ExecutionCompromised(new TestCompromisedError('Database is down')), description: ExecutionCompromised.name },\n            { outcome: new ExecutionFailedWithError(new Error(`Something's wrong`)), description: ExecutionFailedWithError.name },\n            { outcome: new ExecutionFailedWithAssertionError(assertionError()), description: ExecutionFailedWithAssertionError.name },\n            { outcome: new ImplementationPending(new ImplementationPendingError('method missing')), description: ImplementationPending.name },\n            { outcome: new ExecutionIgnored(new Error('Test failed but will be retried')), description: ImplementationPending.name },\n        ]).\n        it('can be serialised and deserialised', ({ outcome }: { outcome: ProblemIndication }) => {\n            const deserialised: any = Outcome.fromJSON(outcome.toJSON());\n\n            expect(deserialised).to.be.instanceOf(outcome.constructor);\n\n            expect(deserialised.error.name).to.equal(outcome.error.constructor.name);\n            expect(deserialised.error.message).to.equal(outcome.error.message);\n            expect(deserialised.error.stack).to.equal(outcome.error.stack);\n        });\n    });\n\n    function assertionError() {\n        try {\n            expect(true).to.equal(false);\n        } catch (error) {\n            return error;\n        }\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/model/outcomes.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1118,
    "kind": "test",
    "name": "describe174",
    "testId": 174,
    "memberof": "spec/model/outcomes.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/model/outcomes.spec.ts~describe174",
    "access": null,
    "description": "Outcome",
    "lineNumber": 21,
    "testTargets": [
      "Outcome"
    ]
  },
  {
    "__docId__": 1119,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "spec/model/outcomes.spec.ts~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/outcomes.spec.ts~describe174.describe175",
    "access": null,
    "description": "non-error outcome",
    "lineNumber": 29,
    "testTargets": [
      "ExecutionSkipped",
      "ExecutionIgnored",
      "ImplementationPending",
      "ExecutionSuccessful"
    ]
  },
  {
    "__docId__": 1120,
    "kind": "test",
    "name": "describe176",
    "testId": 176,
    "memberof": "spec/model/outcomes.spec.ts~describe174",
    "testDepth": 1,
    "static": true,
    "longname": "spec/model/outcomes.spec.ts~describe174.describe176",
    "access": null,
    "description": "outcome indicating an error",
    "lineNumber": 47,
    "testTargets": [
      "ExecutionCompromised",
      "ExecutionFailedWithError",
      "ExecutionFailedWithAssertionError"
    ]
  },
  {
    "__docId__": 1121,
    "kind": "testFile",
    "name": "spec/screenplay/Interaction.spec.ts",
    "content": "import 'mocha';\n\nimport * as sinon from 'sinon';\n\nimport { ArtifactGenerated } from '../../src/events';\nimport { JSONData, Name } from '../../src/model';\nimport { Actor, Interaction } from '../../src/screenplay';\nimport { Stage, StageManager } from '../../src/stage';\nimport { Extras } from '../../src/stage/Extras';\nimport { expect } from '../expect';\n\ndescribe('Interaction', () => {\n\n    let stage: Stage,\n        Ivonne: Actor,\n        stageManager: sinon.SinonStubbedInstance<StageManager>;\n\n    beforeEach(() => {\n        stageManager = sinon.createStubInstance(StageManager);\n\n        stage = new Stage(\n            new Extras(),\n            stageManager as unknown as StageManager,\n        );\n        Ivonne = new Actor('Ivonne', stage);\n    });\n\n    describe('when defining an interaction', () => {\n\n        /** @test {Interaction} */\n        it('provides a convenient factory method for synchronous interactions', () => {\n            const spy = sinon.spy();\n\n            const InteractWithTheSystem = () => Interaction.where(`#actor interacts with the system`, (actor: Actor) => {\n                spy(actor);\n            });\n\n            return expect(Ivonne.attemptsTo(\n                InteractWithTheSystem(),\n            ))\n            .to.be.fulfilled\n            .then(() => {\n                expect(spy).to.have.been.calledWith(Ivonne);\n            });\n        });\n\n        /** @test {Interaction} */\n        it('provides a convenient factory method for asynchronous interactions', () => {\n            const spy = sinon.spy();\n\n            const InteractWithTheSystem = () => Interaction.where(`#actor interacts with the system`, (actor: Actor) => {\n                spy(actor);\n\n                return Promise.resolve();\n            });\n\n            return expect(Ivonne.attemptsTo(\n                InteractWithTheSystem(),\n            ))\n            .to.be.fulfilled\n            .then(() => {\n                expect(spy).to.have.been.calledWith(Ivonne);\n            });\n        });\n    });\n\n    describe('when handling errors', () => {\n        const error = new Error(`We're sorry, something happened`);\n\n        it('rejects the promise when the interaction function rejects a promise', () => {\n            const InteractWithTheSystem = () => Interaction.where(`#actor interacts with the system`, (actor: Actor) => Promise.reject(error));\n\n            return expect(Ivonne.attemptsTo(\n                InteractWithTheSystem(),\n            )).to.be.rejectedWith(error);\n        });\n\n        it('rejects the promise when the interaction function throws an error', () => {\n\n            const InteractWithTheSystem = () => Interaction.where(`#actor interacts with the system`, (actor: Actor) => { throw error; });\n\n            return expect(Ivonne.attemptsTo(\n                InteractWithTheSystem(),\n            )).to.be.rejectedWith(error);\n        });\n    });\n\n    /** @test {Interaction} */\n    it('can optionally emit an artifact to be attached to the report or stored', () => {\n        const\n            expectedArtifact = JSONData.fromJSON({ token: '123' }),\n            expectedArtifactName = new Name('Session Token');\n\n        const InteractWithTheSystem = () => Interaction.where(`#actor interacts with the system`, (actor: Actor) => {\n            actor.collect(expectedArtifact, expectedArtifactName);\n        });\n\n        return expect(Ivonne.attemptsTo(\n            InteractWithTheSystem(),\n        ))\n        .to.be.fulfilled\n        .then(() => {\n            const event = stageManager.notifyOf.args[1][0] as ArtifactGenerated;\n\n            expect(event.name).to.equal(expectedArtifactName);\n            expect(event.artifact).to.equal(expectedArtifact);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/Interaction.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1122,
    "kind": "test",
    "name": "describe177",
    "testId": 177,
    "memberof": "spec/screenplay/Interaction.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe177",
    "access": null,
    "description": "Interaction",
    "lineNumber": 12
  },
  {
    "__docId__": 1123,
    "kind": "test",
    "name": "describe178",
    "testId": 178,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe177",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe177.describe178",
    "access": null,
    "description": "when defining an interaction",
    "lineNumber": 28
  },
  {
    "__docId__": 1124,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe177.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe177.describe178.it179",
    "access": null,
    "description": "provides a convenient factory method for synchronous interactions",
    "lineNumber": 31,
    "testTargets": [
      "Interaction"
    ]
  },
  {
    "__docId__": 1125,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe177.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe177.describe178.it180",
    "access": null,
    "description": "provides a convenient factory method for asynchronous interactions",
    "lineNumber": 48,
    "testTargets": [
      "Interaction"
    ]
  },
  {
    "__docId__": 1126,
    "kind": "test",
    "name": "describe181",
    "testId": 181,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe177",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe177.describe181",
    "access": null,
    "description": "when handling errors",
    "lineNumber": 67
  },
  {
    "__docId__": 1127,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe177.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe177.describe181.it182",
    "access": null,
    "description": "rejects the promise when the interaction function rejects a promise",
    "lineNumber": 70
  },
  {
    "__docId__": 1128,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe177.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe177.describe181.it183",
    "access": null,
    "description": "rejects the promise when the interaction function throws an error",
    "lineNumber": 78
  },
  {
    "__docId__": 1129,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "spec/screenplay/Interaction.spec.ts~describe177",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Interaction.spec.ts~describe177.it184",
    "access": null,
    "description": "can optionally emit an artifact to be attached to the report or stored",
    "lineNumber": 89,
    "testTargets": [
      "Interaction"
    ]
  },
  {
    "__docId__": 1130,
    "kind": "testFile",
    "name": "spec/screenplay/Question.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../src';\nimport { Mappable } from '../../src/io';\nimport { Actor, Question, replace, toNumber, trim } from '../../src/screenplay';\nimport { expect } from '../expect';\n\n/** @test {Question} */\ndescribe('Question', () => {\n\n    describe('provides a convenient way to define a custom question that', () => {\n\n        /** @test {Question.about} */\n        it('returns a static value', () => {\n            const Name = () =>\n                Question.about('a name', (actor: Actor) => actor.name);\n\n            const answer = Name().answeredBy(actorCalled('Jacques'));\n\n            expect(answer).to.equal('Jacques');\n        });\n\n        /** @test {Question.about} */\n        it('returns a Promise of a value', () => {\n            const Name = () =>\n                Question.about('a name', (actor: Actor) => Promise.resolve(actor.name));\n\n            const answer = Name().answeredBy(actorCalled('Jill'));\n\n            return expect(answer).to.eventually.equal('Jill');\n        });\n\n        /** @test {Question.about} */\n        /** @test {Question#toString} */\n        it('has a description', () => {\n            const Name = () =>\n                Question.about('a name', (actor: Actor) => actor.name);\n\n            expect(Name().toString()).to.equal('a name');\n        });\n    });\n\n    /** @test {Question.about} */\n    /** @test {Question#describedAs} */\n    it('allows for a custom description to override the default one', () => {\n        const Name = () =>\n            Question.about('a name', (actor: Actor) => actor.name);\n\n        expect(Name().describedAs('first name').toString())\n            .to.equal('first name');\n    });\n\n    describe('when mapping the answer', () => {\n\n        /** @test {Question.about} */\n        /** @test {Question#map} */\n        it('works with a static value', () => {\n\n            const SomeResult = () =>\n                Question.about('result of some calculation', (actor: Actor) => ' 6.67%\\n');\n\n            const endResult = SomeResult()\n                .map(trim())\n                .map(replace('%', ''))\n                .map(toNumber())\n                .answeredBy(actorCalled('Jacques'))\n\n            return expect(endResult).to.eventually.equal(6.67);\n        });\n\n        /** @test {Question.about} */\n        /** @test {Question#map} */\n        it('works with a promise', () => {\n\n            const SomeResult = () =>\n                Question.about('result of some calculation', (actor: Actor) => Promise.resolve(' 6.67%\\n'));\n\n            const endResult = SomeResult()\n                .map(trim())\n                .map(replace('%', ''))\n                .map(toNumber())\n                .answeredBy(actorCalled('Jacques'))\n\n            return expect(endResult).to.eventually.equal(6.67);\n        });\n\n        /** @test {Question.about} */\n        /** @test {Question#map} */\n        it('works with a static list of values', () => {\n            const SomeResults = () =>\n                Question.about<string[]>('results of some calculation', (actor: Actor) => [\n                    ' 6.67%\\n',\n                    ' 3.34%\\n',\n                ]);\n\n            const endResult = SomeResults()\n                .map(trim())\n                .map(replace('%', ''))\n                .map(toNumber())\n                .answeredBy(actorCalled('Jacques'))\n\n            return expect(endResult).to.eventually.deep.equal([6.67, 3.34]);\n        });\n\n        /** @test {Question.about} */\n        /** @test {Question#map} */\n        it('works with a promised list', () => {\n            const SomeResults = () =>\n                Question.about<Promise<string[]>>('results of some calculation', (actor: Actor) => Promise.resolve([\n                    ' 6.67%\\n',\n                    ' 3.34%\\n',\n                ]));\n\n            const endResult = SomeResults()\n                .map(trim())\n                .map(replace('%', ''))\n                .map(toNumber())\n                .answeredBy(actorCalled('Jacques'))\n\n            return expect(endResult).to.eventually.deep.equal([6.67, 3.34]);\n        });\n\n        /** @test {Question.about} */\n        /** @test {Question#map} */\n        it('works with a mappable collection (Array, ElementArrayFinder, etc.)', () => {\n            const SomeResults = () =>\n                Question.about<Mappable<string>>('results of some calculation', (actor: Actor) => [\n                    ' 6.67%\\n',\n                    ' 3.34%\\n',\n                ]);\n\n            const endResult = SomeResults()\n                .map(trim())\n                .map(replace('%', ''))\n                .map(toNumber())\n                .answeredBy(actorCalled('Jacques'))\n\n            return expect(endResult).to.eventually.deep.equal([6.67, 3.34]);\n        });\n    });\n\n    given([\n        { isAQuestion: false, value: null                                           },\n        { isAQuestion: false, value: false                                          },\n        { isAQuestion: false, value: void 0                                         },\n        { isAQuestion: false, value: ''                                             },\n        { isAQuestion: false, value: {}                                             },\n        { isAQuestion: false, value: 42                                             },\n        { isAQuestion: false, value: () => void 0                                   },\n        { isAQuestion: true,  value: Question.about('something', actor => void 0)   },\n    ]).\n    it('recognises if something is a question', ({ value, isAQuestion }) => {\n        expect(Question.isAQuestion(value)).to.equal(isAQuestion);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/Question.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1131,
    "kind": "test",
    "name": "describe185",
    "testId": 185,
    "memberof": "spec/screenplay/Question.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185",
    "access": null,
    "description": "Question",
    "lineNumber": 12,
    "testTargets": [
      "Question"
    ]
  },
  {
    "__docId__": 1132,
    "kind": "test",
    "name": "describe186",
    "testId": 186,
    "memberof": "spec/screenplay/Question.spec.ts~describe185",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.describe186",
    "access": null,
    "description": "provides a convenient way to define a custom question that",
    "lineNumber": 14
  },
  {
    "__docId__": 1133,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "spec/screenplay/Question.spec.ts~describe185.describe186",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.describe186.it187",
    "access": null,
    "description": "returns a static value",
    "lineNumber": 17,
    "testTargets": [
      "Question.about"
    ]
  },
  {
    "__docId__": 1134,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "spec/screenplay/Question.spec.ts~describe185.describe186",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.describe186.it188",
    "access": null,
    "description": "returns a Promise of a value",
    "lineNumber": 27,
    "testTargets": [
      "Question.about"
    ]
  },
  {
    "__docId__": 1135,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "spec/screenplay/Question.spec.ts~describe185.describe186",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.describe186.it189",
    "access": null,
    "description": "has a description",
    "lineNumber": 38,
    "testTargets": [
      "Question#toString"
    ]
  },
  {
    "__docId__": 1136,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "spec/screenplay/Question.spec.ts~describe185",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.it190",
    "access": null,
    "description": "allows for a custom description to override the default one",
    "lineNumber": 48,
    "testTargets": [
      "Question#describedAs"
    ]
  },
  {
    "__docId__": 1137,
    "kind": "test",
    "name": "describe191",
    "testId": 191,
    "memberof": "spec/screenplay/Question.spec.ts~describe185",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.describe191",
    "access": null,
    "description": "when mapping the answer",
    "lineNumber": 56
  },
  {
    "__docId__": 1138,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "spec/screenplay/Question.spec.ts~describe185.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.describe191.it192",
    "access": null,
    "description": "works with a static value",
    "lineNumber": 60,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1139,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "spec/screenplay/Question.spec.ts~describe185.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.describe191.it193",
    "access": null,
    "description": "works with a promise",
    "lineNumber": 76,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1140,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "spec/screenplay/Question.spec.ts~describe185.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.describe191.it194",
    "access": null,
    "description": "works with a static list of values",
    "lineNumber": 92,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1141,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "spec/screenplay/Question.spec.ts~describe185.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.describe191.it195",
    "access": null,
    "description": "works with a promised list",
    "lineNumber": 110,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1142,
    "kind": "test",
    "name": "it196",
    "testId": 196,
    "memberof": "spec/screenplay/Question.spec.ts~describe185.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/Question.spec.ts~describe185.describe191.it196",
    "access": null,
    "description": "works with a mappable collection (Array, ElementArrayFinder, etc.)",
    "lineNumber": 128,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1143,
    "kind": "testFile",
    "name": "spec/screenplay/Task.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport * as sinon from 'sinon';\n\nimport { ImplementationPendingError } from '../../src/errors';\nimport { CorrelationId } from '../../src/model';\nimport { Actor, Interaction, Task } from '../../src/screenplay';\nimport { Stage } from '../../src/stage';\nimport { expect } from '../expect';\n\ndescribe('Task', () => {\n\n    let stage: sinon.SinonStubbedInstance<Stage>;\n\n    beforeEach(() => {\n        stage = sinon.createStubInstance(Stage);\n\n        const\n            sceneId = new CorrelationId('some-scene-id'),\n            activityId = new CorrelationId('some-activity-id');\n\n        stage.currentSceneId.returns(sceneId);\n        stage.assignNewActivityId.returns(activityId);\n        stage.currentActivityId.returns(activityId);\n    });\n\n    const\n        Nock    = () => Interaction.where(`#actor places an arrow on the bow`, actor => void 0),\n        Draw    = () => Interaction.where(`#actor pulls back the bow string`, actor => void 0),\n        Loose   = () => Interaction.where(`#actor releases an arrow from the bow`, actor => void 0);\n\n    const ShootAnArrow = () => Task.where(`#actor shoots an arrow`,\n        Nock(),\n        Draw(),\n        Loose(),\n    );\n\n    /** @test {Task} */\n    it('provides a convenient factory method for defining tasks', () => {\n\n        const Lara = new Actor('Lara', stage as unknown as Stage);\n\n        return expect(Lara.attemptsTo(ShootAnArrow())).to.be.fulfilled;\n    });\n\n    /** @test {Task} */\n    it('provides a way to describe a collection of activities', () => {\n        expect(ShootAnArrow().toString()).to.equal(`#actor shoots an arrow`);\n    });\n\n    /** @test {Task} */\n    it('generates a pending task if no activities are provided', () => {\n\n        const Lara = new Actor('Lara', stage as unknown as Stage);\n\n        const ClimbAMountain = () => Task.where(`#actor climbs a mountain`);\n\n        return expect(Lara.attemptsTo(ClimbAMountain()))\n            .to.be.rejectedWith(ImplementationPendingError, `A task where \"#actor climbs a mountain\" has not been implemented yet`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/Task.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1144,
    "kind": "test",
    "name": "describe197",
    "testId": 197,
    "memberof": "spec/screenplay/Task.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/Task.spec.ts~describe197",
    "access": null,
    "description": "Task",
    "lineNumber": 12
  },
  {
    "__docId__": 1145,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "spec/screenplay/Task.spec.ts~describe197",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Task.spec.ts~describe197.it198",
    "access": null,
    "description": "provides a convenient factory method for defining tasks",
    "lineNumber": 40,
    "testTargets": [
      "Task"
    ]
  },
  {
    "__docId__": 1146,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "spec/screenplay/Task.spec.ts~describe197",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Task.spec.ts~describe197.it199",
    "access": null,
    "description": "provides a way to describe a collection of activities",
    "lineNumber": 48,
    "testTargets": [
      "Task"
    ]
  },
  {
    "__docId__": 1147,
    "kind": "test",
    "name": "it200",
    "testId": 200,
    "memberof": "spec/screenplay/Task.spec.ts~describe197",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/Task.spec.ts~describe197.it200",
    "access": null,
    "description": "generates a pending task if no activities are provided",
    "lineNumber": 53,
    "testTargets": [
      "Task"
    ]
  },
  {
    "__docId__": 1148,
    "kind": "testFile",
    "name": "spec/screenplay/abilities/TakeNotes.spec.ts",
    "content": "import 'mocha';\n\nimport { actorCalled, engage, LogicError, serenity } from '../../../src';\nimport { SceneFinished, SceneFinishes, SceneStarts } from '../../../src/events';\nimport { FileSystemLocation, Path } from '../../../src/io';\nimport { Category, CorrelationId, ExecutionSuccessful, Name, ScenarioDetails } from '../../../src/model';\nimport { Actor, Note, Question, TakeNote, TakeNotes } from '../../../src/screenplay';\nimport { Cast } from '../../../src/stage';\nimport { expect } from '../../expect';\nimport { EnsureSame } from '../EnsureSame';\n\n/** @test {TakeNotes} */\ndescribe('TakeNotes', () => {\n\n    class Actors implements Cast {\n        prepare(actor: Actor): Actor {\n            switch (actor.name) {\n                case 'Alice':\n                case 'Bob':\n                    return actor.whoCan(\n                        TakeNotes.usingASharedNotepad(),\n                    );\n                case 'Emma':    // eslint-disable-line unicorn/no-useless-switch-case\n                case 'Wendy':   // eslint-disable-line unicorn/no-useless-switch-case\n                default:\n                    return actor.whoCan(\n                        TakeNotes.usingAnEmptyNotepad()\n                    );\n            }\n        }\n    }\n\n    const drinks = {\n        'Alice': 'Apple Juice',\n        'Bob': 'Beer',\n        'Emma': 'Earl Grey tea',\n        'Wendy': 'Water',\n    }\n\n    const AFavouriteDrink = () =>\n        Question.about<string>(`a favourite drink`, (actor: Actor) => drinks[actor.name]);\n\n    const sceneId = new CorrelationId(`some scene id`); // the actual value doesn't matter since discarding abilities is not scene id-dependent\n\n    before(() => engage(new Actors()));\n\n    /** @test {TakeNotes.usingAnEmptyNotepad} */\n    describe('usingAnEmptyNotepad', () => {\n\n        beforeEach(async () => {\n            serenity.announce(new SceneStarts(sceneId, scenarioDetails));\n        });\n\n        afterEach(async () => {\n            serenity.announce(new SceneFinishes(sceneId, scenarioDetails, new ExecutionSuccessful()));\n            serenity.announce(new SceneFinished(sceneId, scenarioDetails, new ExecutionSuccessful()));\n        });\n\n        /**\n         * @test {TakeNotes.usingAnEmptyNotepad}\n         * @test {Note}\n         * @test {TakeNote}\n         */\n        it('enables the actor to take note of an answer to a given question and recall it later', () =>\n            actorCalled('Emma').attemptsTo(\n                TakeNote.of(AFavouriteDrink()),\n                EnsureSame(Note.of(AFavouriteDrink()), drinks.Emma),\n            ));\n\n        /**\n         * @test {TakeNotes.usingAnEmptyNotepad}\n         * @test {Note}\n         * @test {TakeNote}\n         */\n        it('enables the actor to take note of an answer to a given question under a custom name', () =>\n            actorCalled('Emma').attemptsTo(\n                TakeNote.of(AFavouriteDrink()).as('favourite drink'),\n                EnsureSame(Note.of<string>('favourite drink'), drinks.Emma),\n            ));\n\n        /**\n         * @test {TakeNotes.usingAnEmptyNotepad}\n         * @test {Note}\n         * @test {TakeNote}\n         */\n        it(`ensures that actors have their own notepads and don't share notes`, async () => {\n            await actorCalled('Emma').attemptsTo(\n                TakeNote.of(AFavouriteDrink())\n            );\n\n            await actorCalled('Wendy').attemptsTo(\n                TakeNote.of(AFavouriteDrink()),\n            );\n\n            await actorCalled('Emma').attemptsTo(\n                EnsureSame(Note.of(AFavouriteDrink()), drinks.Emma),\n            );\n\n            await actorCalled('Wendy').attemptsTo(\n                EnsureSame(Note.of(AFavouriteDrink()), drinks.Wendy),\n            );\n        });\n\n        /**\n         * @test {TakeNotes.usingAnEmptyNotepad}\n         * @test {Note}\n         * @test {TakeNote}\n         */\n        it(`ensures the notepad is cleared between test scenarios`, async () => {\n\n            await actorCalled('Emma').attemptsTo(\n                TakeNote.of(AFavouriteDrink())\n            );\n\n            serenity.announce(new SceneFinishes(sceneId, scenarioDetails, new ExecutionSuccessful()))\n            serenity.announce(new SceneFinished(sceneId, scenarioDetails, new ExecutionSuccessful()))\n\n            await serenity.waitForNextCue()\n\n            serenity.announce(new SceneStarts(sceneId, scenarioDetails))\n\n            return expect(actorCalled('Emma').attemptsTo(\n                EnsureSame(Note.of(AFavouriteDrink()), drinks.Alice),\n            )).to.be.rejectedWith(LogicError, `The answer to \"a favourite drink\" has never been recorded`);\n        });\n    });\n\n    /** @test {TakeNotes.usingASharedNotepad} */\n    describe('usingASharedNotepad', () => {\n\n        /**\n         * @test {TakeNotes.usingASharedNotepad}\n         * @test {Note}\n         * @test {TakeNote}\n         */\n        it('enables the actor to take note of an answer to a given question and recall it later', () =>\n            actorCalled('Alice').attemptsTo(\n                TakeNote.of(AFavouriteDrink()),\n                EnsureSame(Note.of(AFavouriteDrink()), drinks.Alice),\n            ));\n\n        /**\n         * @test {TakeNotes.usingASharedNotepad}\n         * @test {Note}\n         * @test {TakeNote}\n         */\n        it(`ensures that actors can share their notes`, async () => {\n            await actorCalled('Alice').attemptsTo(\n                TakeNote.of(AFavouriteDrink()),\n            );\n\n            await actorCalled('Bob').attemptsTo(\n                EnsureSame(Note.of(AFavouriteDrink()), drinks.Alice),\n            );\n        });\n\n        /**\n         * @test {TakeNotes.usingASharedNotepad}\n         * @test {Note}\n         * @test {TakeNote}\n         */\n        it(`ensures the notepad is shared between test scenarios`, async () => {\n            await actorCalled('Alice').attemptsTo(\n                TakeNote.of(AFavouriteDrink()),\n            );\n\n            serenity.announce(new SceneFinishes(sceneId, scenarioDetails, new ExecutionSuccessful()));\n            serenity.announce(new SceneFinished(sceneId, scenarioDetails, new ExecutionSuccessful()));\n            await serenity.waitForNextCue();\n\n            serenity.announce(new SceneStarts(sceneId, scenarioDetails))\n\n            return expect(actorCalled('Alice').attemptsTo(\n                EnsureSame(Note.of(AFavouriteDrink()), drinks.Alice),\n            )).to.be.fulfilled;\n        });\n    });\n\n    const scenarioDetails = new ScenarioDetails(\n        new Name('ensures the notepad is cleared between test scenarios'),\n        new Category('TakeNotes'),\n        new FileSystemLocation(new Path('TakeNotes.spec.ts'))\n    );\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/abilities/TakeNotes.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1149,
    "kind": "test",
    "name": "describe201",
    "testId": 201,
    "memberof": "spec/screenplay/abilities/TakeNotes.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201",
    "access": null,
    "description": "TakeNotes",
    "lineNumber": 13,
    "testTargets": [
      "TakeNotes"
    ]
  },
  {
    "__docId__": 1150,
    "kind": "test",
    "name": "describe202",
    "testId": 202,
    "memberof": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe202",
    "access": null,
    "description": "usingAnEmptyNotepad",
    "lineNumber": 68,
    "testTargets": [
      "TakeNotes.usingAnEmptyNotepad"
    ]
  },
  {
    "__docId__": 1151,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe202.it203",
    "access": null,
    "description": "enables the actor to take note of an answer to a given question and recall it later",
    "lineNumber": 84,
    "testTargets": [
      "TakeNotes.usingAnEmptyNotepad",
      "Note",
      "TakeNote"
    ]
  },
  {
    "__docId__": 1152,
    "kind": "test",
    "name": "it204",
    "testId": 204,
    "memberof": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe202.it204",
    "access": null,
    "description": "enables the actor to take note of an answer to a given question under a custom name",
    "lineNumber": 95,
    "testTargets": [
      "TakeNotes.usingAnEmptyNotepad",
      "Note",
      "TakeNote"
    ]
  },
  {
    "__docId__": 1153,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe202.it205",
    "access": null,
    "lineNumber": 106,
    "testTargets": [
      "TakeNotes.usingAnEmptyNotepad",
      "Note",
      "TakeNote"
    ]
  },
  {
    "__docId__": 1154,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe202.it206",
    "access": null,
    "lineNumber": 129,
    "testTargets": [
      "TakeNotes.usingAnEmptyNotepad",
      "Note",
      "TakeNote"
    ]
  },
  {
    "__docId__": 1155,
    "kind": "test",
    "name": "describe207",
    "testId": 207,
    "memberof": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe207",
    "access": null,
    "description": "usingASharedNotepad",
    "lineNumber": 149,
    "testTargets": [
      "TakeNotes.usingASharedNotepad"
    ]
  },
  {
    "__docId__": 1156,
    "kind": "test",
    "name": "it208",
    "testId": 208,
    "memberof": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe207.it208",
    "access": null,
    "description": "enables the actor to take note of an answer to a given question and recall it later",
    "lineNumber": 156,
    "testTargets": [
      "TakeNotes.usingASharedNotepad",
      "Note",
      "TakeNote"
    ]
  },
  {
    "__docId__": 1157,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe207.it209",
    "access": null,
    "lineNumber": 167,
    "testTargets": [
      "TakeNotes.usingASharedNotepad",
      "Note",
      "TakeNote"
    ]
  },
  {
    "__docId__": 1158,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe207",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/abilities/TakeNotes.spec.ts~describe201.describe207.it210",
    "access": null,
    "lineNumber": 182,
    "testTargets": [
      "TakeNotes.usingASharedNotepad",
      "Note",
      "TakeNote"
    ]
  },
  {
    "__docId__": 1159,
    "kind": "testFile",
    "name": "spec/screenplay/actor.spec.ts",
    "content": "import 'mocha';\n\nimport * as sinon from 'sinon';\n\nimport { ConfigurationError, TestCompromisedError } from '../../src/errors';\nimport { InteractionFinished, InteractionStarts } from '../../src/events';\nimport { CorrelationId, ExecutionSuccessful, Name, Timestamp } from '../../src/model';\nimport { Ability, Actor, Initialisable, See } from '../../src/screenplay';\nimport { Stage } from '../../src/stage';\nimport { expect } from '../expect';\nimport { AcousticGuitar, Chords, Guitar, MusicSheets, NumberOfGuitarStringsLeft, PlayAChord, PlayAGuitar, PlayASong } from './example-implementation';\n\nconst equals = (expected: number) => (actual: PromiseLike<number>) => expect(actual).to.equal(expected);\n\ndescribe('Actor', () => {\n\n    const\n        sceneId = new CorrelationId('some-scene-id'),\n        activityId = new CorrelationId('some-activity-id');\n\n    let\n        guitar: sinon.SinonStubbedInstance<Guitar>,\n        stage: sinon.SinonStubbedInstance<Stage>;\n\n    beforeEach(() => {\n        guitar = sinon.createStubInstance(AcousticGuitar);\n        stage = sinon.createStubInstance(Stage);\n\n        stage.assignNewActivityId.returns(activityId);\n        stage.currentSceneId.returns(sceneId);\n        stage.currentActivityId.returns(activityId);\n    });\n\n    function actor(name: string) {\n        return new Actor(name, stage as unknown as Stage);\n    }\n\n    /** @test {Actor} */\n    it('can be identified by their name', () => {\n\n        expect(actor('Chris').name).to.equal('Chris');\n    });\n\n    /** @test {Actor} */\n    it('provides a developer-friendly toString', () => {\n        class DoCoolThings implements Ability {\n        }\n\n        expect(actor('Chris').toString()).to.equal('Actor(name=Chris, abilities=[])');\n\n        expect(actor('Chris').whoCan(new DoCoolThings()).toString()).to.equal('Actor(name=Chris, abilities=[DoCoolThings])');\n    });\n\n    /** @test {Actor} */\n    it('has Abilities allowing them to perform Activities and interact with a given interface of the system under test', () =>\n\n        actor('Chris').whoCan(PlayAGuitar.suchAs(guitar)).attemptsTo(\n            PlayAChord.of(Chords.AMajor),\n        ).\n        then(() => {\n            expect(guitar.play).to.have.been.calledWith(Chords.AMajor);\n        }));\n\n    /** @test {Actor} */\n    it('performs composite Tasks recursively to accomplish their Business Goals', () =>\n\n        actor('Chris').whoCan(PlayAGuitar.suchAs(guitar)).attemptsTo(\n            PlayASong.from(MusicSheets.Wild_Thing),\n        ).\n        then(() => {\n            expect(guitar.play.getCall(0)).to.have.been.calledWith(Chords.AMajor);\n            expect(guitar.play.getCall(1)).to.have.been.calledWith(Chords.DMajor);\n            expect(guitar.play.getCall(2)).to.have.been.calledWith(Chords.EMajor);\n        }));\n\n    describe('asks Questions about the state of the system', () => {\n        /** @test {Actor} */\n        it('fulfills the promise should the question be answered as expected', () => {\n            guitar.availableStrings.returns(Promise.resolve(['E2', 'A2', 'D3', 'G3', 'B3', 'E4' ]));\n\n            return expect(actor('Chris').whoCan(PlayAGuitar.suchAs(guitar)).attemptsTo(\n                PlayASong.from(MusicSheets.Wild_Thing),\n                See.if(NumberOfGuitarStringsLeft(), equals(6)),\n            )).to.be.fulfilled;\n        });\n\n        /** @test {Actor} */\n        it('rejects the promise should the answer differ from what was expected', () => {\n            const oneStringMissing = ['E2', 'A2', 'D3', 'G3', 'B3' ];\n            guitar.availableStrings.returns(Promise.resolve(oneStringMissing));\n\n            return expect(actor('Chris').whoCan(PlayAGuitar.suchAs(guitar)).attemptsTo(\n                PlayASong.from(MusicSheets.Wild_Thing),\n                See.if(NumberOfGuitarStringsLeft(), equals(6)),\n            )).to.be.rejectedWith('expected 5 to equal 6');\n        });\n    });\n\n    describe('when using abilities', () => {\n\n        /** @test {Actor} */\n        it('admits if it does not have the Ability necessary to accomplish a given Interaction', () =>\n\n            expect(actor('Ben').attemptsTo(\n                PlayAChord.of(Chords.AMajor),\n            )).to.be.eventually.rejectedWith(ConfigurationError, `Ben can't PlayAGuitar yet. Did you give them the ability to do so?`));\n\n        /** @test {Actor} */\n        it('complains if given the same ability twice', () => {\n\n            expect(() =>\n                actor('Ben').whoCan(PlayAGuitar.suchAs(guitar), PlayAGuitar.suchAs(guitar))\n            ).to.throw(ConfigurationError, `Ben already has an ability to PlayAGuitar, so you don't need to give it to them again.`);\n        });\n\n        describe('that have to be initialised', () => {\n\n            class UseDatabase implements Initialisable, Ability {\n                public callsToInitialise = 0;\n                private connection;\n\n                initialise(): Promise<void> | void {\n                    this.connection = 'some connection';\n\n                    this.callsToInitialise++;\n                }\n\n                isInitialised(): boolean {\n                    return !! this.connection;\n                }\n            }\n\n            class UseBrokenDatabase implements Initialisable, Ability {\n                initialise(): Promise<void> | void {\n                    throw new Error('DB server is down, please cheer it up');\n                }\n\n                isInitialised(): boolean {\n                    return false;\n                }\n            }\n\n            /** @test {Actor} */\n            it('initialises them upon the first call to attemptsTo', async () => {\n\n                const useDatabase = new UseDatabase();\n\n                await actor('Dibillo').whoCan(useDatabase).attemptsTo(/* */);\n\n                expect(useDatabase.isInitialised()).to.equal(true);\n            });\n\n            /** @test {Actor} */\n            it(`initialises them only if they haven't been initialised before`, async () => {\n\n                const useDatabase = new UseDatabase();\n\n                await actor('Dibillo').whoCan(useDatabase).attemptsTo(/* */);\n                await actor('Dibillo').whoCan(useDatabase).attemptsTo(/* */);\n                await actor('Dibillo').whoCan(useDatabase).attemptsTo(/* */);\n\n                expect(useDatabase.callsToInitialise).to.equal(1);\n            });\n\n            /** @test {Actor} */\n            it(`complains if the ability could not be initialised`, () => {\n\n                return expect(actor('Dibillo').whoCan(new UseBrokenDatabase()).attemptsTo(/* */))\n                    .to.be.rejectedWith(TestCompromisedError, `Dibillo couldn't initialise the ability to UseBrokenDatabase`)\n                    .then(error => {\n                        expect(error.cause.message).to.equal('DB server is down, please cheer it up')\n                    });\n            });\n        });\n    });\n\n    describe('DomainEvent handling', () => {\n\n        let Bob: Actor;\n        const now = new Timestamp(new Date('2018-06-10T22:57:07.112Z'));\n        const activityName = new Name('Bob plays the chord of A');\n\n        beforeEach(() => {\n            stage = sinon.createStubInstance(Stage);\n            stage.currentTime.returns(now);\n\n            stage.currentSceneId.returns(sceneId);\n            stage.assignNewActivityId.returns(activityId);\n            stage.currentActivityId.returns(activityId);\n\n            Bob = new Actor('Bob', stage as unknown as Stage);\n        });\n\n        describe('announces events about the activities it performs', () => {\n\n            /** @test {Actor} */\n            it('notifies when an activity begins and ends', () => Bob.whoCan(PlayAGuitar.suchAs(guitar)).attemptsTo(\n                PlayAChord.of(Chords.AMajor),\n            ).then(() => {\n                expect(stage.announce).to.have.callCount(2);\n\n                const\n                    firstEvent = stage.announce.getCall(0).args[0],\n                    secondEvent = stage.announce.getCall(1).args[0];\n\n                expect(firstEvent).to.be.instanceOf(InteractionStarts);\n                expect(firstEvent).to.have.property('details').property('name').equal(activityName);\n                expect(firstEvent).to.have.property('timestamp').equal(now);\n\n                expect(secondEvent).to.be.instanceOf(InteractionFinished);\n                expect(secondEvent).to.have.property('details').property('name').equal(activityName);\n                expect(secondEvent).to.have.property('outcome').equal(new ExecutionSuccessful());\n                expect(secondEvent).to.have.property('timestamp').equal(now);\n            }));\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/actor.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1160,
    "kind": "test",
    "name": "describe211",
    "testId": 211,
    "memberof": "spec/screenplay/actor.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211",
    "access": null,
    "description": "Actor",
    "lineNumber": 15
  },
  {
    "__docId__": 1161,
    "kind": "test",
    "name": "it212",
    "testId": 212,
    "memberof": "spec/screenplay/actor.spec.ts~describe211",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.it212",
    "access": null,
    "description": "can be identified by their name",
    "lineNumber": 48,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1162,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "spec/screenplay/actor.spec.ts~describe211",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.it213",
    "access": null,
    "description": "provides a developer-friendly toString",
    "lineNumber": 54,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1163,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "spec/screenplay/actor.spec.ts~describe211",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.it214",
    "access": null,
    "description": "has Abilities allowing them to perform Activities and interact with a given interface of the system under test",
    "lineNumber": 71,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1164,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "spec/screenplay/actor.spec.ts~describe211",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.it215",
    "access": null,
    "description": "performs composite Tasks recursively to accomplish their Business Goals",
    "lineNumber": 81,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1165,
    "kind": "test",
    "name": "describe216",
    "testId": 216,
    "memberof": "spec/screenplay/actor.spec.ts~describe211",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe216",
    "access": null,
    "description": "asks Questions about the state of the system",
    "lineNumber": 92
  },
  {
    "__docId__": 1166,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "spec/screenplay/actor.spec.ts~describe211.describe216",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe216.it217",
    "access": null,
    "description": "fulfills the promise should the question be answered as expected",
    "lineNumber": 94,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1167,
    "kind": "test",
    "name": "it218",
    "testId": 218,
    "memberof": "spec/screenplay/actor.spec.ts~describe211.describe216",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe216.it218",
    "access": null,
    "description": "rejects the promise should the answer differ from what was expected",
    "lineNumber": 104,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1168,
    "kind": "test",
    "name": "describe219",
    "testId": 219,
    "memberof": "spec/screenplay/actor.spec.ts~describe211",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe219",
    "access": null,
    "description": "when using abilities",
    "lineNumber": 115
  },
  {
    "__docId__": 1169,
    "kind": "test",
    "name": "it220",
    "testId": 220,
    "memberof": "spec/screenplay/actor.spec.ts~describe211.describe219",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe219.it220",
    "access": null,
    "description": "admits if it does not have the Ability necessary to accomplish a given Interaction",
    "lineNumber": 118,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1170,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "spec/screenplay/actor.spec.ts~describe211.describe219",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe219.it221",
    "access": null,
    "description": "complains if given the same ability twice",
    "lineNumber": 125,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1171,
    "kind": "test",
    "name": "describe222",
    "testId": 222,
    "memberof": "spec/screenplay/actor.spec.ts~describe211.describe219",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe219.describe222",
    "access": null,
    "description": "that have to be initialised",
    "lineNumber": 132
  },
  {
    "__docId__": 1172,
    "kind": "test",
    "name": "it223",
    "testId": 223,
    "memberof": "spec/screenplay/actor.spec.ts~describe211.describe219.describe222",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe219.describe222.it223",
    "access": null,
    "description": "initialises them upon the first call to attemptsTo",
    "lineNumber": 236,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1173,
    "kind": "test",
    "name": "it224",
    "testId": 224,
    "memberof": "spec/screenplay/actor.spec.ts~describe211.describe219.describe222",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe219.describe222.it224",
    "access": null,
    "lineNumber": 246,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1174,
    "kind": "test",
    "name": "it225",
    "testId": 225,
    "memberof": "spec/screenplay/actor.spec.ts~describe211.describe219.describe222",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe219.describe222.it225",
    "access": null,
    "lineNumber": 258,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1175,
    "kind": "test",
    "name": "describe226",
    "testId": 226,
    "memberof": "spec/screenplay/actor.spec.ts~describe211",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe226",
    "access": null,
    "description": "DomainEvent handling",
    "lineNumber": 269
  },
  {
    "__docId__": 1176,
    "kind": "test",
    "name": "describe227",
    "testId": 227,
    "memberof": "spec/screenplay/actor.spec.ts~describe211.describe226",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe226.describe227",
    "access": null,
    "description": "announces events about the activities it performs",
    "lineNumber": 286
  },
  {
    "__docId__": 1177,
    "kind": "test",
    "name": "it228",
    "testId": 228,
    "memberof": "spec/screenplay/actor.spec.ts~describe211.describe226.describe227",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/actor.spec.ts~describe211.describe226.describe227.it228",
    "access": null,
    "description": "notifies when an activity begins and ends",
    "lineNumber": 289,
    "testTargets": [
      "Actor"
    ]
  },
  {
    "__docId__": 1178,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/See.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport { AssertionError } from 'chai';\n\nimport sinon = require('sinon');\nimport { Actor, Question, See } from '../../../src/screenplay';\nimport { Stage } from '../../../src/stage';\nimport { expect } from '../../expect';\n\ndescribe('Interactions', () => {\n\n    describe('See', () => {\n\n        const stage = sinon.createStubInstance(Stage);\n\n        describe('when used with async questions', () => {\n            const SomeAsyncResult = () => Question.about<Promise<string>>('some async result', actor => Promise.resolve('some value'));\n\n            /** @test {See} */\n            it('allows the actor to verify a condition', () => {\n                const actor = new Actor('James', stage as unknown as Stage);\n\n                const promise = See.if(SomeAsyncResult(), r => expect(r).to.equal('some value')).performAs(actor);\n\n                return expect(promise).to.be.eventually.fulfilled;\n            });\n\n            /** @test {See} */\n            it('rejects the promise if the condition is not met', () => {\n                const actor = new Actor('James', stage as unknown as Stage);\n\n                const promise = See.if(SomeAsyncResult(), r => expect(r).to.equal('other value')).performAs(actor);\n\n                return expect(promise).to.be.eventually.rejectedWith(AssertionError, `expected 'some value' to equal 'other value'`);\n            });\n        });\n\n        describe('when used with sync questions', () => {\n            const SomeSyncResult = () => Question.about<string>('some async result', actor => 'some value');\n\n            /** @test {See} */\n            it('allows the actor to verify a condition', () => {\n                const actor = new Actor('James', stage as unknown as Stage);\n\n                const promise = See.if(SomeSyncResult(), r => expect(r).to.equal('some value')).performAs(actor);\n\n                return expect(promise).to.be.eventually.fulfilled;\n            });\n\n            /** @test {See} */\n            it('rejects the promise if the condition is not met', () => {\n                const actor = new Actor('James', stage as unknown as Stage);\n\n                const promise = See.if(SomeSyncResult(), r => expect(r).to.equal('other value')).performAs(actor);\n\n                return expect(promise).to.be.eventually.rejectedWith(AssertionError, `expected 'some value' to equal 'other value'`);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/interactions/See.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1179,
    "kind": "test",
    "name": "describe229",
    "testId": 229,
    "memberof": "spec/screenplay/interactions/See.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe229",
    "access": null,
    "description": "Interactions",
    "lineNumber": 11
  },
  {
    "__docId__": 1180,
    "kind": "test",
    "name": "describe230",
    "testId": 230,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe229",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe229.describe230",
    "access": null,
    "description": "See",
    "lineNumber": 13
  },
  {
    "__docId__": 1181,
    "kind": "test",
    "name": "describe231",
    "testId": 231,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe229.describe230",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe229.describe230.describe231",
    "access": null,
    "description": "when used with async questions",
    "lineNumber": 17
  },
  {
    "__docId__": 1182,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe229.describe230.describe231",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe229.describe230.describe231.it232",
    "access": null,
    "description": "allows the actor to verify a condition",
    "lineNumber": 21,
    "testTargets": [
      "See"
    ]
  },
  {
    "__docId__": 1183,
    "kind": "test",
    "name": "it233",
    "testId": 233,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe229.describe230.describe231",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe229.describe230.describe231.it233",
    "access": null,
    "description": "rejects the promise if the condition is not met",
    "lineNumber": 30,
    "testTargets": [
      "See"
    ]
  },
  {
    "__docId__": 1184,
    "kind": "test",
    "name": "describe234",
    "testId": 234,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe229.describe230",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe229.describe230.describe234",
    "access": null,
    "description": "when used with sync questions",
    "lineNumber": 39
  },
  {
    "__docId__": 1185,
    "kind": "test",
    "name": "it235",
    "testId": 235,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe229.describe230.describe234",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe229.describe230.describe234.it235",
    "access": null,
    "description": "allows the actor to verify a condition",
    "lineNumber": 43,
    "testTargets": [
      "See"
    ]
  },
  {
    "__docId__": 1186,
    "kind": "test",
    "name": "it236",
    "testId": 236,
    "memberof": "spec/screenplay/interactions/See.spec.ts~describe229.describe230.describe234",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/interactions/See.spec.ts~describe229.describe230.describe234.it236",
    "access": null,
    "description": "rejects the promise if the condition is not met",
    "lineNumber": 52,
    "testTargets": [
      "See"
    ]
  },
  {
    "__docId__": 1187,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Check.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport * as sinon from 'sinon';\n\nimport { actorCalled, Check, Interaction } from '../../../src';\nimport { expect } from '../../expect';\nimport { isIdenticalTo } from '../../isIdenticalTo';\n\n/** @test {Check} */\ndescribe('Check', () => {\n\n    const Call = (fn: () => void) =>\n        Interaction.where(`#actor calls a function`, actor => fn());\n\n    let spy: sinon.SinonSpy;\n    beforeEach(() => spy = sinon.spy());\n\n    describe('(if branch)', () => {\n\n        /** @test {Check.whether} */\n        /** @test {Check#andIfSo} */\n        it('makes the actor execute the activities when the expectation is met', () =>\n            expect(actorCalled('Enrique').attemptsTo(\n                Check.whether('Hello World', isIdenticalTo('Hello World'))\n                    .andIfSo(\n                        Call(() => spy(true)),\n                        Call(() => spy(true)),\n                    ),\n            )).to.be.fulfilled.\n            then(() => {\n                expect(spy).to.have.been.calledWith(true).callCount(2);\n            }),\n        );\n\n        /** @test {Check.whether} */\n        /** @test {Check#andIfSo} */\n        it('makes the actor ignore the activities when the expectation is not met', () =>\n            expect(actorCalled('Enrique').attemptsTo(\n                Check.whether('Hello World', isIdenticalTo('¡Hola'))\n                    .andIfSo(\n                        Call(() => spy(true)),\n                    ),\n            )).to.be.fulfilled.\n            then(() => {\n                expect(spy).to.not.have.been.called;\n            }),\n        );\n    });\n\n    describe('(if/else branches)', () => {\n        /** @test {Check.whether} */\n        /** @test {Check#andIfSo} */\n        /** @test {Check#otherwise} */\n        it('makes the actor execute the activities when the expectation is met', () =>\n            expect(actorCalled('Enrique').attemptsTo(\n                Check.whether('Hello World', isIdenticalTo('Hello World'))\n                    .andIfSo(\n                        Call(() => spy(true)),\n                    )\n                    .otherwise(\n                        Call(() => spy(false)),\n                    ),\n            )).to.be.fulfilled.\n            then(() => {\n                expect(spy).to.have.been.calledWith(true).callCount(1);\n            }),\n        );\n\n        /** @test {Check.whether} */\n        /** @test {Check#andIfSo} */\n        /** @test {Check#otherwise} */\n        it('makes the actor execute the alternative activities when the expectation is not met', () =>\n            expect(actorCalled('Enrique').attemptsTo(\n                Check.whether('Hello World', isIdenticalTo('¡Hola'))\n                    .andIfSo(\n                        Call(() => spy(true)),\n                    )\n                    .otherwise(\n                        Call(() => spy(false)),\n                    ),\n            )).to.be.fulfilled.\n            then(() => {\n                expect(spy).to.have.been.calledWith(false).callCount(1);\n            }),\n        );\n    });\n\n    describe('reporting', () => {\n\n        /** @test {Check.whether} */\n        /** @test {Check#whether} */\n        it('provides a description of the check', () => {\n            expect(Check.whether(4, isIdenticalTo(7)).andIfSo().toString()).to.equal(`#actor checks whether 4 does have value identical to 7`);\n        });\n\n        /** @test {Check.whether} */\n        /** @test {Check#whether} */\n        it('provides a description of the check while correctly cleaning the output from new line characters', () => {\n            expect(Check.whether({ person: { name: 'Jan' }}, isIdenticalTo({\n                person: {\n                    name: 'Jan',\n                },\n            })).andIfSo().toString()).to.equal(`#actor checks whether { \"person\": { \"name\": \"Jan\" } } does have value identical to { \"person\": { \"name\": \"Jan\" } }`);\n        });\n    })\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/Check.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1188,
    "kind": "test",
    "name": "describe237",
    "testId": 237,
    "memberof": "spec/screenplay/questions/Check.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Check.spec.ts~describe237",
    "access": null,
    "description": "Check",
    "lineNumber": 11,
    "testTargets": [
      "Check"
    ]
  },
  {
    "__docId__": 1189,
    "kind": "test",
    "name": "describe238",
    "testId": 238,
    "memberof": "spec/screenplay/questions/Check.spec.ts~describe237",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Check.spec.ts~describe237.describe238",
    "access": null,
    "description": "(if branch)",
    "lineNumber": 19
  },
  {
    "__docId__": 1190,
    "kind": "test",
    "name": "it239",
    "testId": 239,
    "memberof": "spec/screenplay/questions/Check.spec.ts~describe237.describe238",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Check.spec.ts~describe237.describe238.it239",
    "access": null,
    "description": "makes the actor execute the activities when the expectation is met",
    "lineNumber": 23,
    "testTargets": [
      "Check#andIfSo"
    ]
  },
  {
    "__docId__": 1191,
    "kind": "test",
    "name": "it240",
    "testId": 240,
    "memberof": "spec/screenplay/questions/Check.spec.ts~describe237.describe238",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Check.spec.ts~describe237.describe238.it240",
    "access": null,
    "description": "makes the actor ignore the activities when the expectation is not met",
    "lineNumber": 38,
    "testTargets": [
      "Check#andIfSo"
    ]
  },
  {
    "__docId__": 1192,
    "kind": "test",
    "name": "describe241",
    "testId": 241,
    "memberof": "spec/screenplay/questions/Check.spec.ts~describe237",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Check.spec.ts~describe237.describe241",
    "access": null,
    "description": "(if/else branches)",
    "lineNumber": 51
  },
  {
    "__docId__": 1193,
    "kind": "test",
    "name": "it242",
    "testId": 242,
    "memberof": "spec/screenplay/questions/Check.spec.ts~describe237.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Check.spec.ts~describe237.describe241.it242",
    "access": null,
    "description": "makes the actor execute the activities when the expectation is met",
    "lineNumber": 55,
    "testTargets": [
      "Check#otherwise"
    ]
  },
  {
    "__docId__": 1194,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "spec/screenplay/questions/Check.spec.ts~describe237.describe241",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Check.spec.ts~describe237.describe241.it243",
    "access": null,
    "description": "makes the actor execute the alternative activities when the expectation is not met",
    "lineNumber": 73,
    "testTargets": [
      "Check#otherwise"
    ]
  },
  {
    "__docId__": 1195,
    "kind": "test",
    "name": "describe244",
    "testId": 244,
    "memberof": "spec/screenplay/questions/Check.spec.ts~describe237",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Check.spec.ts~describe237.describe244",
    "access": null,
    "description": "reporting",
    "lineNumber": 89
  },
  {
    "__docId__": 1196,
    "kind": "test",
    "name": "it245",
    "testId": 245,
    "memberof": "spec/screenplay/questions/Check.spec.ts~describe237.describe244",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Check.spec.ts~describe237.describe244.it245",
    "access": null,
    "description": "provides a description of the check",
    "lineNumber": 93,
    "testTargets": [
      "Check#whether"
    ]
  },
  {
    "__docId__": 1197,
    "kind": "test",
    "name": "it246",
    "testId": 246,
    "memberof": "spec/screenplay/questions/Check.spec.ts~describe237.describe244",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Check.spec.ts~describe237.describe244.it246",
    "access": null,
    "description": "provides a description of the check while correctly cleaning the output from new line characters",
    "lineNumber": 99,
    "testTargets": [
      "Check#whether"
    ]
  },
  {
    "__docId__": 1198,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Expectation.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled, Expectation, ExpectationMet, ExpectationNotMet, Question } from '../../../src';\nimport { expect } from '../../expect';\nimport { isIdenticalTo } from '../../isIdenticalTo';\n\n/** @test {Expectation} */\ndescribe('Expectation', () => {\n\n    const Ellie = actorCalled('Ellie');\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    const q = <T>(value: T) =>\n        Question.about(`some value`, actor => value);\n\n    /** @test {Expectation.thatActualShould} */\n    describe('thatActualShould()', () => {\n\n        const value = 42;\n\n        describe('provides a way to easily create custom expectation that', () => {\n\n            const examples = [{\n                description:    'number',\n                expected:       value,\n                message:        `have value identical to ${ value }`\n            }, {\n                description:    'Question<number>',\n                expected:       q(value),\n                message:        `have value identical to some value`\n            }, {\n                description:    'Promise<number>',\n                expected:       p(value),\n                message:        `have value identical to a Promise`\n            }, {\n                description:    'Question<Promise<number>>',\n                expected:       q(p(value)),\n                message:        `have value identical to some value`\n            }];\n\n            given(examples).\n            it('resolves to ExpectationMet when the expectation is met', ({ expected, message }) => {\n\n                return expect(\n                    isIdenticalTo(expected).answeredBy(Ellie)(value)\n                ).to.be.fulfilled.then(outcome => {\n                    expect(outcome).to.be.instanceOf(ExpectationMet);\n                    expect(outcome.message).to.equal(message);\n                    expect(outcome.expected).to.equal(value);\n                    expect(outcome.actual).to.equal(value);\n                })\n            });\n\n            given(examples).\n            it('resolves with ExpectationNotMet when the expectation is not met', ({ expected, message }) => {\n\n                return expect(\n                    isIdenticalTo(expected).answeredBy(Ellie)(value)\n                ).to.be.fulfilled.then(outcome => {\n                    expect(outcome).to.be.instanceOf(ExpectationMet);\n                    expect(outcome.message).to.equal(message);\n                    expect(outcome.expected).to.equal(value);\n                    expect(outcome.actual).to.equal(value);\n                })\n            });\n        });\n    });\n\n    /** @test {Expectation.to} */\n    describe('to()', () => {\n\n        const value = 42;\n\n        const isTheSameAs = <T>(expected: T) =>\n            Expectation.to<T>(`have value same as ${ expected }`)\n                .soThatActual(isIdenticalTo(expected));\n\n        describe('provides a way to alias and compose expectations', () => {\n\n            it('resolves to ExpectationMet when the expectation is met and the message alias', () => {\n\n                return expect(\n                    isTheSameAs(value).answeredBy(Ellie)(value)\n                ).to.be.fulfilled.then(outcome => {\n                    expect(outcome).to.be.instanceOf(ExpectationMet);\n                    expect(outcome.message).to.equal(`have value same as 42`);\n                    expect(outcome.expected).to.equal(value);\n                    expect(outcome.actual).to.equal(value);\n                })\n            });\n\n            it('resolves with ExpectationNotMet when the expectation is not met and the original message for any unmet expectations', () => {\n\n                return expect(\n                    isTheSameAs('hello').answeredBy(Ellie)('world')\n                ).to.be.fulfilled.then(outcome => {\n                    expect(outcome).to.be.instanceOf(ExpectationNotMet);\n                    expect(outcome.message).to.equal(`have value identical to 'hello'`);\n                    expect(outcome.expected).to.equal('hello');\n                    expect(outcome.actual).to.equal('world');\n                })\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/Expectation.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1199,
    "kind": "test",
    "name": "describe247",
    "testId": 247,
    "memberof": "spec/screenplay/questions/Expectation.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Expectation.spec.ts~describe247",
    "access": null,
    "description": "Expectation",
    "lineNumber": 11,
    "testTargets": [
      "Expectation"
    ]
  },
  {
    "__docId__": 1200,
    "kind": "test",
    "name": "describe248",
    "testId": 248,
    "memberof": "spec/screenplay/questions/Expectation.spec.ts~describe247",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Expectation.spec.ts~describe247.describe248",
    "access": null,
    "description": "thatActualShould()",
    "lineNumber": 22,
    "testTargets": [
      "Expectation.thatActualShould"
    ]
  },
  {
    "__docId__": 1201,
    "kind": "test",
    "name": "describe249",
    "testId": 249,
    "memberof": "spec/screenplay/questions/Expectation.spec.ts~describe247.describe248",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Expectation.spec.ts~describe247.describe248.describe249",
    "access": null,
    "description": "provides a way to easily create custom expectation that",
    "lineNumber": 26
  },
  {
    "__docId__": 1202,
    "kind": "test",
    "name": "describe250",
    "testId": 250,
    "memberof": "spec/screenplay/questions/Expectation.spec.ts~describe247",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Expectation.spec.ts~describe247.describe250",
    "access": null,
    "description": "to()",
    "lineNumber": 75,
    "testTargets": [
      "Expectation.to"
    ]
  },
  {
    "__docId__": 1203,
    "kind": "test",
    "name": "describe251",
    "testId": 251,
    "memberof": "spec/screenplay/questions/Expectation.spec.ts~describe247.describe250",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Expectation.spec.ts~describe247.describe250.describe251",
    "access": null,
    "description": "provides a way to alias and compose expectations",
    "lineNumber": 83
  },
  {
    "__docId__": 1204,
    "kind": "test",
    "name": "it252",
    "testId": 252,
    "memberof": "spec/screenplay/questions/Expectation.spec.ts~describe247.describe250.describe251",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Expectation.spec.ts~describe247.describe250.describe251.it252",
    "access": null,
    "description": "resolves to ExpectationMet when the expectation is met and the message alias",
    "lineNumber": 85
  },
  {
    "__docId__": 1205,
    "kind": "test",
    "name": "it253",
    "testId": 253,
    "memberof": "spec/screenplay/questions/Expectation.spec.ts~describe247.describe250.describe251",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Expectation.spec.ts~describe247.describe250.describe251.it253",
    "access": null,
    "description": "resolves with ExpectationNotMet when the expectation is not met and the original message for any unmet expectations",
    "lineNumber": 97
  },
  {
    "__docId__": 1206,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Note.spec.ts",
    "content": "import 'mocha';\n\nimport * as sinon from 'sinon';\n\nimport { LogicError } from '../../../src/errors';\nimport { CorrelationId } from '../../../src/model';\nimport { Ability, Actor, Log, Note, Question, TakeNote, TakeNotes } from '../../../src/screenplay';\nimport { Stage } from '../../../src/stage';\nimport { expect } from '../../expect';\nimport { EnsureSame } from '../EnsureSame';\n\ndescribe('Note', () => {\n    const\n        expectedHobby = 'DYI',\n        NameOfAHobby = () => Question.about(`the name of a hobby`, someActor => Promise.resolve(expectedHobby));\n\n    const\n        sceneId = new CorrelationId('some-scene-id'),\n        activityId = new CorrelationId('some-activity-id');\n\n    let stage: sinon.SinonStubbedInstance<Stage>;\n\n    beforeEach(() => {\n        stage = sinon.createStubInstance(Stage);\n\n        stage.currentSceneId.returns(sceneId);\n        stage.assignNewActivityId.returns(activityId);\n        stage.currentActivityId.returns(activityId);\n    });\n\n    /**\n     * @test {TakeNotes}\n     * @test {Note}\n     */\n    it('enables the actor to recall the answer to a given question', () =>\n        actorWhoCan(TakeNotes.usingAnEmptyNotepad()).attemptsTo(\n            TakeNote.of(NameOfAHobby()),\n            EnsureSame(Note.of(NameOfAHobby()), 'DYI'),\n        ));\n\n    /**\n     * @test {TakeNotes}\n     * @test {Note}\n     */\n    it('enables the actor to recall the answer on a given subject', () =>\n        actorWhoCan(TakeNotes.usingAnEmptyNotepad()).attemptsTo(\n            TakeNote.of(NameOfAHobby()).as('custom subject'),\n            EnsureSame(Note.of('custom subject'), 'DYI'),\n        ));\n\n    /**\n     * @test {TakeNotes}\n     * @test {Note}\n     */\n    it('complains if no answer to a given question has ever been remembered', () =>\n        expect(actorWhoCan(TakeNotes.usingAnEmptyNotepad()).attemptsTo(\n            Log.the(Note.of(NameOfAHobby())),\n        )).to.be.rejectedWith(LogicError, 'The answer to \"the name of a hobby\" has never been recorded'));\n\n    /**\n     * @test {TakeNotes}\n     * @test {Note}\n     */\n    it('complains if no answer on a given subject has ever been remembered', () =>\n        expect(actorWhoCan(TakeNotes.usingAnEmptyNotepad()).attemptsTo(\n            Log.the(Note.of('some subject')),\n        )).to.be.rejectedWith(LogicError, 'The answer to \"some subject\" has never been recorded'));\n\n    function actorWhoCan(...abilities: Ability[]): Actor {\n        return new Actor('Noah', stage as unknown as Stage)\n            .whoCan(...abilities);\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/Note.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1207,
    "kind": "test",
    "name": "describe254",
    "testId": 254,
    "memberof": "spec/screenplay/questions/Note.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Note.spec.ts~describe254",
    "access": null,
    "description": "Note",
    "lineNumber": 12
  },
  {
    "__docId__": 1208,
    "kind": "test",
    "name": "it255",
    "testId": 255,
    "memberof": "spec/screenplay/questions/Note.spec.ts~describe254",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Note.spec.ts~describe254.it255",
    "access": null,
    "description": "enables the actor to recall the answer to a given question",
    "lineNumber": 35,
    "testTargets": [
      "TakeNotes",
      "Note"
    ]
  },
  {
    "__docId__": 1209,
    "kind": "test",
    "name": "it256",
    "testId": 256,
    "memberof": "spec/screenplay/questions/Note.spec.ts~describe254",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Note.spec.ts~describe254.it256",
    "access": null,
    "description": "enables the actor to recall the answer on a given subject",
    "lineNumber": 45,
    "testTargets": [
      "TakeNotes",
      "Note"
    ]
  },
  {
    "__docId__": 1210,
    "kind": "test",
    "name": "it257",
    "testId": 257,
    "memberof": "spec/screenplay/questions/Note.spec.ts~describe254",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Note.spec.ts~describe254.it257",
    "access": null,
    "description": "complains if no answer to a given question has ever been remembered",
    "lineNumber": 55,
    "testTargets": [
      "TakeNotes",
      "Note"
    ]
  },
  {
    "__docId__": 1211,
    "kind": "test",
    "name": "it258",
    "testId": 258,
    "memberof": "spec/screenplay/questions/Note.spec.ts~describe254",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Note.spec.ts~describe254.it258",
    "access": null,
    "description": "complains if no answer on a given subject has ever been remembered",
    "lineNumber": 64,
    "testTargets": [
      "TakeNotes",
      "Note"
    ]
  },
  {
    "__docId__": 1212,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Property.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled, Answerable, List, MetaQuestion, Property, Question } from '../../../src';\nimport { expect } from '../../expect';\nimport { isIdenticalTo } from '../../isIdenticalTo';\n\n/** @test {Property} */\ndescribe('Property', () => {\n\n    const Peter = actorCalled('Peter');\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    const q = <T>(description: string, value: T) =>\n        Question.about(description, actor => value);\n\n    interface Credentials {\n        username: string;\n        token: string;\n    }\n\n    interface TestAccount {\n        role: string;\n        environments: string[];\n        credentials: Credentials;\n    }\n\n    const adminAccount: TestAccount = {\n        role: 'admin',\n        environments: [ 'dev', 'sit', 'prod' ],\n        credentials: {\n            username: 'admin@example.com',\n            token: 'some-token',\n        }\n    };\n\n    const userAccount: TestAccount = {\n        role: 'user',\n        environments: [ 'dev', 'sit', 'prod' ],\n        credentials: {\n            username: 'user@example.com',\n            token: 'some-token',\n        }\n    };\n\n    const examples = [{\n        description:    'TestAccount',\n        answerable:     adminAccount,\n    }, {\n        description:    'Question<TestAccount>',\n        answerable:     q('test account', adminAccount),\n    }, {\n        description:    'Promise<TestAccount>',\n        answerable:     p(adminAccount),\n    }, {\n        description:    'Question<Promise<TestAccount>>',\n        answerable:     q('test account', p(adminAccount)),\n    }];\n\n    /** @test {Property.of} */\n    describe('when wrapping an Answerable<object>', () => {\n\n        given(examples).\n        it('retrieves a first-level property', ({ answerable }: { answerable: Answerable<TestAccount> }) => {\n\n            const question: Question<Promise<string>> = Property.of(answerable).role;\n\n            return expect(question.answeredBy(Peter)).to.eventually.equal(adminAccount.role);\n        });\n\n        given(examples).\n        it('retrieves an object', ({ answerable }: { answerable: Answerable<TestAccount> }) => {\n\n            const question: Question<Promise<Credentials>> = Property.of(answerable).credentials;\n\n            return expect(question.answeredBy(Peter)).to.eventually.deep.equal(adminAccount.credentials);\n        });\n\n        given(examples).\n        it('retrieves a second-level property', ({ answerable }: { answerable: Answerable<TestAccount> }) => {\n\n            const question: Question<Promise<string>> = Property.of(answerable).credentials.username;\n\n            return expect(question.answeredBy(Peter)).to.eventually.equal(adminAccount.credentials.username);\n        });\n\n        given(examples).\n        it('retrieves an item from an array', ({ answerable }: { answerable: Answerable<TestAccount> }) => {\n\n            const question: Question<Promise<string>> = Property.of(answerable).environments[1];\n\n            return expect(question.answeredBy(Peter)).to.eventually.equal('sit');\n        });\n\n        given(examples).\n        it('retrieves an array', ({ answerable }: { answerable: Answerable<TestAccount> }) => {\n\n            const question: Question<Promise<string[]>> = Property.of(answerable).environments;\n\n            return expect(question.answeredBy(Peter)).to.eventually.deep.equal([ 'dev', 'sit', 'prod' ]);\n        });\n\n        it(`provides a human-friendly description of the property it's wrapping`, () => {\n            const question = q('test accounts', [ adminAccount, userAccount ]);\n\n            const description = Property.of(question)[0].credentials.username.toString();\n\n            expect(description).to.equal(`property '[0].credentials.username' of test accounts`);\n        });\n\n        describe('complains when the property', () => {\n\n            it(`doesn't exist`, () => {\n                const testAccountsWithMissingData: Question<TestAccount[]> = q('test accounts', [\n                    {\n                        role: '',\n                        credentials: { },   // username and token missing\n                        environments: []\n                    } as unknown as TestAccount\n                ]);\n\n                const question: Question<Promise<string>> = Property.of(testAccountsWithMissingData)[0].credentials.username;\n\n                return expect(question.answeredBy(Peter)).to.be.rejectedWith(Error, `property '[0].credentials.username' of test accounts doesn't exist`);\n            });\n\n            it(`path segment doesn't exist`, () => {\n                const testAccountsWithMissingData: Question<TestAccount[]> = q('test accounts', [\n                    {\n                        role: '',\n                        // missing credentials\n                        environments: []\n                    } as unknown as TestAccount\n                ]);\n\n                const question: Question<Promise<string>> = Property.of(testAccountsWithMissingData)[0].credentials.username;\n\n                return expect(question.answeredBy(Peter)).to.be.rejectedWith(Error, `property '[0].credentials' of test accounts doesn't exist`);\n            });\n        });\n    });\n\n    /** @test {Property.at} */\n    describe('when generating MetaQuestions', () => {\n\n        given(examples).\n        it('retrieves a first-level property', ({ answerable }: { answerable: Answerable<TestAccount> }) => {\n\n            const question: Question<Promise<string>> & MetaQuestion<Answerable<TestAccount>, Promise<string>> = Property.at<TestAccount>().role;\n\n            return expect(question.of(answerable).answeredBy(Peter)).to.eventually.equal('admin');\n        });\n\n        given(examples).\n        it('retrieves a second-level property', ({ answerable }: { answerable: Answerable<TestAccount> }) => {\n\n            const question: Question<Promise<string>> & MetaQuestion<Answerable<TestAccount>, Promise<string>> = Property.at<TestAccount>().credentials.username;\n\n            return expect(question.of(answerable).answeredBy(Peter)).to.eventually.equal('admin@example.com');\n        });\n\n        given(examples).\n        it('retrieves an item from an array', ({ answerable }: { answerable: Answerable<TestAccount> }) => {\n\n            const question: Question<Promise<string>> & MetaQuestion<Answerable<TestAccount>, Promise<string>> = Property.at<TestAccount>().environments[1];\n\n            return expect(question.of(answerable).answeredBy(Peter)).to.eventually.equal('sit');\n        });\n\n        given(examples).\n        it('retrieves an array', ({ answerable }: { answerable: Answerable<TestAccount> }) => {\n\n            const question: Question<Promise<string[]>> & MetaQuestion<Answerable<TestAccount>, Promise<string[]>> = Property.at<TestAccount>().environments;\n\n            return expect(question.of(answerable).answeredBy(Peter)).to.eventually.deep.equal([ 'dev', 'sit', 'prod' ]);\n        });\n\n        it(`provides a human-friendly description of the property it's wrapping`, () => {\n            const question = q('test accounts', [ adminAccount, userAccount ]);\n\n            const description = Property.at<TestAccount[]>()[0].credentials.username.of(question).toString();\n\n            expect(description).to.equal(`property '[0].credentials.username' of test accounts`);\n        });\n\n        describe('complains when the property', () => {\n\n            it(`doesn't exist`, () => {\n                const testAccountsWithMissingData: Question<TestAccount[]> = q('test accounts', [\n                    {\n                        role: '',\n                        credentials: { },   // username and token missing\n                        environments: []\n                    } as unknown as TestAccount\n                ]);\n\n                const question: Question<Promise<string>> & MetaQuestion<Answerable<TestAccount[]>, Promise<string>> = Property.at<TestAccount[]>()[0].credentials.username;\n\n                return expect(question.of(testAccountsWithMissingData).answeredBy(Peter)).to.be.rejectedWith(Error, `property '[0].credentials.username' of test accounts doesn't exist`);\n            });\n\n            it(`path segment doesn't exist`, () => {\n                const testAccountsWithMissingData: Question<TestAccount[]> = q('test accounts', [\n                    {\n                        role: '',\n                        // missing credentials\n                        environments: []\n                    } as unknown as TestAccount\n                ]);\n\n                const question: Question<Promise<string>> & MetaQuestion<Answerable<TestAccount[]>, Promise<string>> = Property.at<TestAccount[]>()[0].credentials.username;\n\n                return expect(question.of(testAccountsWithMissingData).answeredBy(Peter)).to.be.rejectedWith(Error, `property '[0].credentials' of test accounts doesn't exist`);\n            });\n        });\n    });\n\n    /**\n     * @test {Property.of}\n     * @test {Property.at}\n     * @test {Property}\n     * @test {List}\n     */\n    it('helps to filter lists of objects', () => {\n        const accounts = q('test account', [ adminAccount, userAccount ]);\n\n        const found = List.of(accounts)\n            .where(Property.at<TestAccount>().role, isIdenticalTo('user'))\n            .first()\n\n        const username = Property.of(found).credentials.username;\n\n        return expect(username.answeredBy(Peter)).to.eventually.equal('user@example.com');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/Property.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1213,
    "kind": "test",
    "name": "describe259",
    "testId": 259,
    "memberof": "spec/screenplay/questions/Property.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259",
    "access": null,
    "description": "Property",
    "lineNumber": 11,
    "testTargets": [
      "Property"
    ]
  },
  {
    "__docId__": 1214,
    "kind": "test",
    "name": "describe260",
    "testId": 260,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.describe260",
    "access": null,
    "description": "when wrapping an Answerable<object>",
    "lineNumber": 134,
    "testTargets": [
      "Property.of"
    ]
  },
  {
    "__docId__": 1215,
    "kind": "test",
    "name": "it261",
    "testId": 261,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259.describe260",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.describe260.it261",
    "access": null,
    "lineNumber": 231
  },
  {
    "__docId__": 1216,
    "kind": "test",
    "name": "describe262",
    "testId": 262,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259.describe260",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.describe260.describe262",
    "access": null,
    "description": "complains when the property",
    "lineNumber": 239
  },
  {
    "__docId__": 1217,
    "kind": "test",
    "name": "it263",
    "testId": 263,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259.describe260.describe262",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.describe260.describe262.it263",
    "access": null,
    "lineNumber": 241
  },
  {
    "__docId__": 1218,
    "kind": "test",
    "name": "it264",
    "testId": 264,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259.describe260.describe262",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.describe260.describe262.it264",
    "access": null,
    "lineNumber": 255
  },
  {
    "__docId__": 1219,
    "kind": "test",
    "name": "describe265",
    "testId": 265,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.describe265",
    "access": null,
    "description": "when generating MetaQuestions",
    "lineNumber": 272,
    "testTargets": [
      "Property.at"
    ]
  },
  {
    "__docId__": 1220,
    "kind": "test",
    "name": "it266",
    "testId": 266,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259.describe265",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.describe265.it266",
    "access": null,
    "lineNumber": 350
  },
  {
    "__docId__": 1221,
    "kind": "test",
    "name": "describe267",
    "testId": 267,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259.describe265",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.describe265.describe267",
    "access": null,
    "description": "complains when the property",
    "lineNumber": 358
  },
  {
    "__docId__": 1222,
    "kind": "test",
    "name": "it268",
    "testId": 268,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259.describe265.describe267",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.describe265.describe267.it268",
    "access": null,
    "lineNumber": 360
  },
  {
    "__docId__": 1223,
    "kind": "test",
    "name": "it269",
    "testId": 269,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259.describe265.describe267",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.describe265.describe267.it269",
    "access": null,
    "lineNumber": 374
  },
  {
    "__docId__": 1224,
    "kind": "test",
    "name": "it270",
    "testId": 270,
    "memberof": "spec/screenplay/questions/Property.spec.ts~describe259",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Property.spec.ts~describe259.it270",
    "access": null,
    "description": "helps to filter lists of objects",
    "lineNumber": 396,
    "testTargets": [
      "Property.of",
      "Property.at",
      "Property",
      "List"
    ]
  },
  {
    "__docId__": 1225,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Transform.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\nimport * as sinon from 'sinon';\n\nimport { Actor, Answerable, Question, Transform } from '../../../src/screenplay';\nimport { Stage } from '../../../src/stage';\nimport { expect } from '../../expect';\n\n/** @test {TransformAnswer} */\ndescribe('TransformAnswer', () => {\n\n    const stage = sinon.createStubInstance(Stage);\n\n    const expectedAnswer = {\n        headers: { header: 'value' },\n        body: 'some content',\n    };\n\n    type EA = typeof expectedAnswer;\n\n    const actor = new Actor('Bumblebee', stage as unknown as Stage);\n\n    given([\n        expectedAnswer,\n        p(expectedAnswer),\n        q(expectedAnswer),\n        q(p(expectedAnswer)),\n    ]).\n    it('transforms an answer to Answerable<T> to another type', (answerable: Answerable<EA>) =>\n        expect(\n            Transform.the(answerable, complexObject => complexObject.headers.header).answeredBy(actor),\n        ).to.eventually.equal(expectedAnswer.headers.header)\n    );\n\n    it('transforms answers to Array<Answerable<T>> to another type', () =>\n        expect(\n            Transform.the(\n                [ q(p(expectedAnswer)), q(expectedAnswer), expectedAnswer],\n                (ea1: EA, ea2: EA, ea3: EA) => ea1.headers.header + ea2.body + Object.keys(ea3).length,\n            ).answeredBy(actor),\n        ).to.eventually.equal(expectedAnswer.headers.header + expectedAnswer.body + Object.keys(expectedAnswer).length)\n    );\n\n    it('transforms answers to questions of different types to another type', () =>\n        expect(\n            Transform.the(\n                [ q('the answer to life the universe and everything'), q(p(42)) ],\n                (a1: string, a2: number) => `${ a1 } is ${ a2 }`,\n            ).answeredBy(actor),\n        ).to.eventually.equal(`the answer to life the universe and everything is 42`)\n    );\n\n    it('provides a sensible default description', () => {\n        expect(Transform.the(expectedAnswer, _ => _).toString()).to.equal('a transformed answer');\n    });\n\n    it('allows for the default description to be changed', () => {\n        expect(Transform.the(expectedAnswer, _ => _).as('a better description').toString()).to.equal('a better description');\n    });\n\n    function q<T>(value: T): Question<T> {\n        return Question.about(`something`, someActor => value);\n    }\n\n    function p<T>(value: T) {\n        return Promise.resolve(value);\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/Transform.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1226,
    "kind": "test",
    "name": "describe271",
    "testId": 271,
    "memberof": "spec/screenplay/questions/Transform.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Transform.spec.ts~describe271",
    "access": null,
    "description": "TransformAnswer",
    "lineNumber": 12,
    "testTargets": [
      "TransformAnswer"
    ]
  },
  {
    "__docId__": 1227,
    "kind": "test",
    "name": "it272",
    "testId": 272,
    "memberof": "spec/screenplay/questions/Transform.spec.ts~describe271",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Transform.spec.ts~describe271.it272",
    "access": null,
    "description": "transforms answers to Array<Answerable<T>> to another type",
    "lineNumber": 44
  },
  {
    "__docId__": 1228,
    "kind": "test",
    "name": "it273",
    "testId": 273,
    "memberof": "spec/screenplay/questions/Transform.spec.ts~describe271",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Transform.spec.ts~describe271.it273",
    "access": null,
    "description": "transforms answers to questions of different types to another type",
    "lineNumber": 53
  },
  {
    "__docId__": 1229,
    "kind": "test",
    "name": "it274",
    "testId": 274,
    "memberof": "spec/screenplay/questions/Transform.spec.ts~describe271",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Transform.spec.ts~describe271.it274",
    "access": null,
    "description": "provides a sensible default description",
    "lineNumber": 62
  },
  {
    "__docId__": 1230,
    "kind": "test",
    "name": "it275",
    "testId": 275,
    "memberof": "spec/screenplay/questions/Transform.spec.ts~describe271",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Transform.spec.ts~describe271.it275",
    "access": null,
    "description": "allows for the default description to be changed",
    "lineNumber": 66
  },
  {
    "__docId__": 1231,
    "kind": "testFile",
    "name": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled, Answerable, Question } from '../../../../src';\nimport { formatted } from '../../../../src/io';\nimport { ArrayListAdapter } from '../../../../src/screenplay/questions/lists';\nimport { expect } from '../../../expect';\n\n/** @test {ArrayListAdapter} */\ndescribe('ArrayListAdapter', () => {\n\n    const Ariana = actorCalled('Ariana');\n\n    const q = <T>(description: string, value: T) =>\n        Question.about<T>(description, actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    const array = [ 'first', 'second', 'third' ];\n\n    const invalidExamples = [\n        ...answerables('null', null),\n        ...answerables('undefined', undefined),\n        ...answerables('number', 0),\n        ...answerables('string', 'string'),\n        ...answerables('boolean', true),\n        ...answerables('object', { }),\n    ];\n\n    function answerables<T>(type: string, value: T): Array<{ description: string, collectionDescription: string, answerable: Answerable<T> }> {\n        return [{\n            description:            type,\n            answerable:             value,\n        }, {\n            description:            `Question<${ type }>`,\n            answerable:             q(type, value),\n        }, {\n            description:            `Promise<${ type }>`,\n            answerable:             p(value),\n        }, {\n            description:            `Question<Promise<${ type }>>`,\n            answerable:             q(type, p(value)),\n        } ].map(entry => ({\n            ...entry,\n            collectionDescription:  formatted`${ entry.answerable }`,\n        }))\n    }\n\n    given(answerables('array', array)).\n    it('provides a sensible description', ({ answerable }) =>\n        expect(new ArrayListAdapter(answerable).toString())\n            .to.equal(formatted`${ answerable }`)\n    );\n\n    /** @test {ArrayListAdapter#count} */\n    describe('count()', () => {\n\n        given(invalidExamples).\n        it('complains when instantiated with a non-array', ({ answerable }) =>\n            expect(new ArrayListAdapter(answerable).count(Ariana))\n                .to.be.rejectedWith(Error, 'ArrayListAdapter constructor parameter should be an array')\n        );\n\n        given(answerables('array', array)).\n        it('returns the number of items in the underlying array', ({ answerable }) =>\n            expect(new ArrayListAdapter(answerable).count(Ariana))\n                .to.eventually.equal(array.length)\n        );\n    });\n\n    /** @test {ArrayListAdapter#items} */\n    describe('items()', () => {\n\n        given(invalidExamples).\n        it('complains when instantiated with a non-array', ({ answerable }) =>\n            expect(new ArrayListAdapter(answerable).items(Ariana))\n                .to.be.rejectedWith(Error, 'ArrayListAdapter constructor parameter should be an array')\n        );\n\n        given(answerables('array', array)).\n        it('returns the underlying array', ({ answerable }) =>\n            expect(new ArrayListAdapter(answerable).items(Ariana))\n                .to.eventually.deep.equal(array)\n        );\n    });\n\n    /** @test {ArrayListAdapter#first} */\n    describe('first()', () => {\n\n        given(invalidExamples).\n        it('complains when instantiated with a non-array', ({ answerable }) =>\n            expect(new ArrayListAdapter(answerable).first(Ariana))\n                .to.be.rejectedWith(Error, 'ArrayListAdapter constructor parameter should be an array')\n        );\n\n        given(answerables('array', array)).\n        it('returns the first item from the underlying array', ({ answerable }) =>\n            expect(new ArrayListAdapter(answerable).first(Ariana))\n                .to.eventually.deep.equal(array[0])\n        );\n\n        describe(`complains if the item doesn't exist`, () => {\n            it(`(array)`, () =>\n                expect(new ArrayListAdapter([]).first(Ariana))\n                    .to.be.rejectedWith(Error, `[ ] is empty`)\n            );\n\n            it(`(Question<array>)`, () =>\n                expect(new ArrayListAdapter(q('some collection', [])).first(Ariana))\n                    .to.be.rejectedWith(Error, `some collection [ ] is empty`)\n            );\n\n            it(`(Promise<array>)`, () =>\n                expect(new ArrayListAdapter(p([])).first(Ariana))\n                    .to.be.rejectedWith(Error, `a Promise [ ] is empty`)\n            );\n\n            it(`(Question<Promise<array>>)`, () =>\n                expect(new ArrayListAdapter(q('some collection', p([]))).first(Ariana))\n                    .to.be.rejectedWith(Error, `some collection [ ] is empty`)\n            );\n        });\n    });\n\n    /** @test {ArrayListAdapter#last} */\n    describe('last()', () => {\n\n        given(invalidExamples).\n        it('complains when instantiated with a non-array', ({ answerable }) =>\n            expect(new ArrayListAdapter(answerable).last(Ariana))\n                .to.be.rejectedWith(Error, 'ArrayListAdapter constructor parameter should be an array')\n        );\n\n        given(answerables('array', array)).\n        it('returns the first item from the underlying array', ({ answerable }) =>\n            expect(new ArrayListAdapter(answerable).last(Ariana))\n                .to.eventually.deep.equal(array[array.length - 1])\n        );\n\n        describe(`complains if the item doesn't exist`, () => {\n            it(`(array)`, () =>\n                expect(new ArrayListAdapter([]).last(Ariana))\n                    .to.be.rejectedWith(Error, `[ ] is empty`)\n            );\n\n            it(`(Question<array>)`, () =>\n                expect(new ArrayListAdapter(q('some collection', [])).last(Ariana))\n                    .to.be.rejectedWith(Error, `some collection [ ] is empty`)\n            );\n\n            it(`(Promise<array>)`, () =>\n                expect(new ArrayListAdapter(p([])).last(Ariana))\n                    .to.be.rejectedWith(Error, `a Promise [ ] is empty`)\n            );\n\n            it(`(Question<Promise<array>>)`, () =>\n                expect(new ArrayListAdapter(q('some collection', p([]))).last(Ariana))\n                    .to.be.rejectedWith(Error, `some collection [ ] is empty`)\n            );\n        });\n    });\n\n    /** @test {ArrayListAdapter#get} */\n    describe('get(index)', () => {\n\n        given(invalidExamples).\n        it('complains when instantiated with a non-array', ({ answerable }) =>\n            expect(new ArrayListAdapter(answerable).get(Ariana, 1))\n                .to.be.rejectedWith(Error, 'ArrayListAdapter constructor parameter should be an array')\n        );\n\n        given(answerables('array', array)).\n        it('returns the required item from the underlying array', ({ answerable }) =>\n            expect(new ArrayListAdapter(answerable).get(Ariana, 1))\n                .to.eventually.deep.equal(array[1])\n        );\n\n        describe(`complains if the item doesn't exist at a given index`, () => {\n            const example = ['first', 'second'];\n\n            it(`(array)`, () =>\n                expect(new ArrayListAdapter(example).get(Ariana, 42))\n                    .to.be.rejectedWith(Error, `[ 'first', 'second' ] has no item at index 42`)\n            );\n\n            it(`(Question<array>)`, () =>\n                expect(new ArrayListAdapter(q('some collection', example)).get(Ariana, 42))\n                    .to.be.rejectedWith(Error, `some collection [ 'first', 'second' ] has no item at index 42`)\n            );\n\n            it(`(Promise<array>)`, () =>\n                expect(new ArrayListAdapter(p(example)).get(Ariana, 42))\n                    .to.be.rejectedWith(Error, `a Promise [ 'first', 'second' ] has no item at index 42`)\n            );\n\n            it(`(Question<Promise<array>>)`, () =>\n                expect(new ArrayListAdapter(q('some collection', p(example))).get(Ariana, 42))\n                    .to.be.rejectedWith(Error, `some collection [ 'first', 'second' ] has no item at index 42`)\n            );\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/lists/ArrayListAdapter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1232,
    "kind": "test",
    "name": "describe276",
    "testId": 276,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276",
    "access": null,
    "description": "ArrayListAdapter",
    "lineNumber": 12,
    "testTargets": [
      "ArrayListAdapter"
    ]
  },
  {
    "__docId__": 1233,
    "kind": "test",
    "name": "describe277",
    "testId": 277,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe277",
    "access": null,
    "description": "count()",
    "lineNumber": 105,
    "testTargets": [
      "ArrayListAdapter#count"
    ]
  },
  {
    "__docId__": 1234,
    "kind": "test",
    "name": "describe278",
    "testId": 278,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe278",
    "access": null,
    "description": "items()",
    "lineNumber": 121,
    "testTargets": [
      "ArrayListAdapter#items"
    ]
  },
  {
    "__docId__": 1235,
    "kind": "test",
    "name": "describe279",
    "testId": 279,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279",
    "access": null,
    "description": "first()",
    "lineNumber": 137,
    "testTargets": [
      "ArrayListAdapter#first"
    ]
  },
  {
    "__docId__": 1236,
    "kind": "test",
    "name": "describe280",
    "testId": 280,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279.describe280",
    "access": null,
    "lineNumber": 151
  },
  {
    "__docId__": 1237,
    "kind": "test",
    "name": "it281",
    "testId": 281,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279.describe280",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279.describe280.it281",
    "access": null,
    "lineNumber": 152
  },
  {
    "__docId__": 1238,
    "kind": "test",
    "name": "it282",
    "testId": 282,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279.describe280",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279.describe280.it282",
    "access": null,
    "lineNumber": 157
  },
  {
    "__docId__": 1239,
    "kind": "test",
    "name": "it283",
    "testId": 283,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279.describe280",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279.describe280.it283",
    "access": null,
    "lineNumber": 162
  },
  {
    "__docId__": 1240,
    "kind": "test",
    "name": "it284",
    "testId": 284,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279.describe280",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe279.describe280.it284",
    "access": null,
    "lineNumber": 167
  },
  {
    "__docId__": 1241,
    "kind": "test",
    "name": "describe285",
    "testId": 285,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285",
    "access": null,
    "description": "last()",
    "lineNumber": 175,
    "testTargets": [
      "ArrayListAdapter#last"
    ]
  },
  {
    "__docId__": 1242,
    "kind": "test",
    "name": "describe286",
    "testId": 286,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285.describe286",
    "access": null,
    "lineNumber": 189
  },
  {
    "__docId__": 1243,
    "kind": "test",
    "name": "it287",
    "testId": 287,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285.describe286",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285.describe286.it287",
    "access": null,
    "lineNumber": 190
  },
  {
    "__docId__": 1244,
    "kind": "test",
    "name": "it288",
    "testId": 288,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285.describe286",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285.describe286.it288",
    "access": null,
    "lineNumber": 195
  },
  {
    "__docId__": 1245,
    "kind": "test",
    "name": "it289",
    "testId": 289,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285.describe286",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285.describe286.it289",
    "access": null,
    "lineNumber": 200
  },
  {
    "__docId__": 1246,
    "kind": "test",
    "name": "it290",
    "testId": 290,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285.describe286",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe285.describe286.it290",
    "access": null,
    "lineNumber": 205
  },
  {
    "__docId__": 1247,
    "kind": "test",
    "name": "describe291",
    "testId": 291,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291",
    "access": null,
    "description": "get(index)",
    "lineNumber": 213,
    "testTargets": [
      "ArrayListAdapter#get"
    ]
  },
  {
    "__docId__": 1248,
    "kind": "test",
    "name": "describe292",
    "testId": 292,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291.describe292",
    "access": null,
    "lineNumber": 227
  },
  {
    "__docId__": 1249,
    "kind": "test",
    "name": "it293",
    "testId": 293,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291.describe292",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291.describe292.it293",
    "access": null,
    "lineNumber": 230
  },
  {
    "__docId__": 1250,
    "kind": "test",
    "name": "it294",
    "testId": 294,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291.describe292",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291.describe292.it294",
    "access": null,
    "lineNumber": 235
  },
  {
    "__docId__": 1251,
    "kind": "test",
    "name": "it295",
    "testId": 295,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291.describe292",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291.describe292.it295",
    "access": null,
    "lineNumber": 240
  },
  {
    "__docId__": 1252,
    "kind": "test",
    "name": "it296",
    "testId": 296,
    "memberof": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291.describe292",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/ArrayListAdapter.spec.ts~describe276.describe291.describe292.it296",
    "access": null,
    "lineNumber": 245
  },
  {
    "__docId__": 1253,
    "kind": "testFile",
    "name": "spec/screenplay/questions/lists/List.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled, Answerable, AnswersQuestions, Expectation, List, Question, UsesAbilities } from '../../../../src';\nimport { formatted } from '../../../../src/io';\nimport { expect } from '../../../expect';\nimport { isIdenticalTo } from '../../../isIdenticalTo';\n\n/** @test {List} */\ndescribe('List', () => {\n\n    const Lisa = actorCalled('Lisa');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some string collection', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    const isGreaterThan = (expected: number) =>\n        Expectation.thatActualShould('have value greater than', expected)\n            .soThat((actualValue: number, expectedValue: number) => actualValue > expectedValue);\n\n    /** @test {List#of} */\n    describe('when wrapping an Array', () => {\n\n        const collection = [ 'first', 'second', 'third' ];\n\n        const examples = [ {\n            description:            'string[]',\n            answerable:             collection,\n            collectionDescription:  `[ 'first', 'second', 'third' ]`,\n        }, {\n            description:            'Question<string[]>',\n            answerable:             q(collection),\n            collectionDescription:  `some string collection`,\n        }, {\n            description:            'Promise<string[]>',\n            answerable:             p(collection),\n            collectionDescription:  `a Promise`,\n        }, {\n            description:            'Question<Promise<string[]>>',\n            answerable:             q(p(collection)),\n            collectionDescription:  `some string collection`,\n        }];\n\n        given(examples).\n        it('returns the number of items', ({ answerable }: { answerable: Answerable<string[]> }) =>\n            expect(List.of(answerable).count().answeredBy(Lisa))\n                .to.eventually.equal(3)\n        );\n\n        given(examples).\n        it('returns the underlying collection', ({ answerable }: { answerable: Answerable<string[]> }) =>\n            expect(List.of(answerable).answeredBy(Lisa))\n                .to.eventually.deep.equal(collection)\n        );\n\n        given(examples).\n        it('returns the first item from the collection', ({ answerable }: { answerable: Answerable<string[]> }) =>\n            expect(List.of(answerable).first().answeredBy(Lisa))\n                .to.eventually.deep.equal(collection[0])\n        );\n\n        given(examples).\n        it('returns the last item from the collection', ({ answerable }: { answerable: Answerable<string[]> }) =>\n            expect(List.of(answerable).last().answeredBy(Lisa))\n                .to.eventually.deep.equal(collection[collection.length - 1])\n        );\n\n        given(examples).\n        it('returns the nth item from the collection', ({ answerable }: { answerable: Answerable<string[]> }) =>\n            expect(List.of(answerable).get(1).answeredBy(Lisa))\n                .to.eventually.deep.equal(collection[1])\n        );\n\n        /** @test {List#toString} */\n        describe('provides a sensible description when it', () => {\n\n            given(examples).\n            it('returns the number of items', ({ answerable, collectionDescription }: { answerable: Answerable<string[]>, collectionDescription: string }) =>\n                expect(List.of(answerable).count().toString())\n                    .to.equal(`the number of ${ collectionDescription }`)\n            );\n\n            given(examples).\n            it('returns the underlying collection', ({ answerable, collectionDescription }: { answerable: Answerable<string[]>, collectionDescription: string }) =>\n                expect(List.of(answerable).toString())\n                    .to.equal(collectionDescription)\n            );\n\n            given(examples).\n            it('returns the first item from the collection', ({ answerable, collectionDescription }: { answerable: Answerable<string[]>, collectionDescription: string }) =>\n                expect(List.of(answerable).first().toString())\n                    .to.equal(`the first of ${ collectionDescription }`)\n            );\n\n            given(examples).\n            it('returns the last item from the collection', ({ answerable, collectionDescription }: { answerable: Answerable<string[]>, collectionDescription: string }) =>\n                expect(List.of(answerable).last().toString())\n                    .to.equal(`the last of ${ collectionDescription }`)\n            );\n\n            given(examples).\n            it('returns the nth item from the collection', ({ answerable, collectionDescription }: { answerable: Answerable<string[]>, collectionDescription: string }) =>\n                expect(List.of(answerable).get(1).toString())\n                    .to.equal(`the 2nd of ${ collectionDescription }`)\n            );\n\n            given([\n                { description: '1st',    index: 0 },\n                { description: '2nd',    index: 1 },\n                { description: '3rd',    index: 2 },\n                { description: '4th',    index: 3 },\n                { description: '5th',    index: 4 },\n                { description: '10th',   index: 9 },\n                { description: '11th',   index: 10 },\n                { description: '20th',   index: 19 },\n                { description: '42nd',   index: 41 },\n                { description: '115th',  index: 114 },\n                { description: '1522nd', index: 1521 },\n            ]).\n            it('returns the nth item', ({ description, index }) => {\n                expect(List.of(examples[1].answerable).get(index).toString())\n                    .to.equal(`the ${ description } of some string collection`);\n            });\n        });\n\n        /** @test {List#where} */\n        describe('and using filters', () => {\n            interface Person {\n                name: string;\n                age: number;\n                pets: number;\n            }\n\n            const\n                alice   = { name: 'Alice',  age: 27, pets: 3 },\n                bob     = { name: 'Bob',    age: 42, pets: 1 },\n                cindy   = { name: 'Cindy',  age: 55, pets: 3 };\n\n            const people = [ alice, bob, cindy ];\n\n            class Name extends Question<Promise<string>> {\n                static of(person: Answerable<Person>): Question<Promise<string>> {\n                    return new Name(person);\n                }\n\n                constructor(private readonly person: Answerable<Person>) {\n                    super(formatted `the name of ${ person }`);\n                }\n\n                answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n                    return actor.answer(this.person)\n                        .then(person => person.name);\n                }\n            }\n\n            const PropertyCalled = <K extends keyof Person>(name: K) => ({\n                of: (person: Answerable<Person>) =>\n                    Question.about(formatted `${ name } of ${ person }`, actor => {\n                        return actor.answer(person).then(answer => answer[name]);\n                    }),\n                toString() {\n                    return `property \"${ name }\"`;\n                }\n            });\n\n            /** @test {List#of} */\n            it('lets you narrow down the list of items to those that match the filter', async () => {\n                const found = await List.of(people)\n                    .where(Name, isIdenticalTo('Bob'))\n                    .first()\n                    .answeredBy(Lisa);\n\n                expect(found).to.deep.equal(bob);\n            });\n\n            /** @test {List#of} */\n            it('lets you narrow down the list of items to those that match the filter', async () => {\n                const found = await List.of(people)\n                    .where(Name, isIdenticalTo('Bob'))\n                    .first()\n                    .answeredBy(Lisa);\n\n                expect(found).to.deep.equal(bob);\n            });\n\n            /** @test {List#of} */\n            it('lets you narrow down the list of items to those that match several filters', async () => {\n                const found = await List.of(people)\n                    .where(PropertyCalled('pets'), isIdenticalTo(3))\n                    .where(PropertyCalled('age'), isGreaterThan(30))\n                    .first()\n                    .answeredBy(Lisa);\n\n                expect(found).to.deep.equal(cindy);\n            });\n\n            /** @test {List#of} */\n            it('describes the filters applied', () => {\n                const People = () =>\n                    Question.about('people', actor => people);\n\n                const items = List.of(People())\n                    .where(PropertyCalled('pets'), isIdenticalTo(3))\n                    .where(PropertyCalled('age'), isGreaterThan(30))\n                    .first();\n\n                expect(items.toString())\n                    .to.equal('the first of people where property \"pets\" does have value identical to 3 and property \"age\" does have value greater than 30')\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/lists/List.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1254,
    "kind": "test",
    "name": "describe297",
    "testId": 297,
    "memberof": "spec/screenplay/questions/lists/List.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/lists/List.spec.ts~describe297",
    "access": null,
    "description": "List",
    "lineNumber": 12,
    "testTargets": [
      "List"
    ]
  },
  {
    "__docId__": 1255,
    "kind": "test",
    "name": "describe298",
    "testId": 298,
    "memberof": "spec/screenplay/questions/lists/List.spec.ts~describe297",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298",
    "access": null,
    "description": "when wrapping an Array",
    "lineNumber": 27,
    "testTargets": [
      "List#of"
    ]
  },
  {
    "__docId__": 1256,
    "kind": "test",
    "name": "describe299",
    "testId": 299,
    "memberof": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298.describe299",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 135,
    "testTargets": [
      "List#toString"
    ]
  },
  {
    "__docId__": 1257,
    "kind": "test",
    "name": "describe300",
    "testId": 300,
    "memberof": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298.describe300",
    "access": null,
    "description": "and using filters",
    "lineNumber": 297,
    "testTargets": [
      "List#where"
    ]
  },
  {
    "__docId__": 1258,
    "kind": "test",
    "name": "it301",
    "testId": 301,
    "memberof": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298.describe300",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298.describe300.it301",
    "access": null,
    "description": "lets you narrow down the list of items to those that match the filter",
    "lineNumber": 421,
    "testTargets": [
      "List#of"
    ]
  },
  {
    "__docId__": 1259,
    "kind": "test",
    "name": "it302",
    "testId": 302,
    "memberof": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298.describe300",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298.describe300.it302",
    "access": null,
    "description": "lets you narrow down the list of items to those that match the filter",
    "lineNumber": 431,
    "testTargets": [
      "List#of"
    ]
  },
  {
    "__docId__": 1260,
    "kind": "test",
    "name": "it303",
    "testId": 303,
    "memberof": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298.describe300",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298.describe300.it303",
    "access": null,
    "description": "lets you narrow down the list of items to those that match several filters",
    "lineNumber": 441,
    "testTargets": [
      "List#of"
    ]
  },
  {
    "__docId__": 1261,
    "kind": "test",
    "name": "it304",
    "testId": 304,
    "memberof": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298.describe300",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/lists/List.spec.ts~describe297.describe298.describe300.it304",
    "access": null,
    "description": "describes the filters applied",
    "lineNumber": 452,
    "testTargets": [
      "List#of"
    ]
  },
  {
    "__docId__": 1262,
    "kind": "testFile",
    "name": "spec/screenplay/questions/mappings/string/append.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../../../../src';\nimport { append, Question } from '../../../../../src/screenplay';\nimport { expect } from '../../../../expect';\n\n/** @test {append} */\n/** @test {Question#map} */\ndescribe('append', () => {\n\n    const quentin = actorCalled('Quentin');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some value', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    given([\n        { value: null,              expected: 'The value to be mapped should be defined'    },\n        { value: undefined,         expected: 'The value to be mapped should be defined'    },\n        { value: 1,                 expected: 'The value to be mapped should be a string'   },\n        { value: { },               expected: 'The value to be mapped should be a string'   },\n        { value: [null],            expected: 'The value to be mapped should be defined'    },\n        { value: [undefined],       expected: 'The value to be mapped should be defined'    },\n        { value: [1],               expected: 'The value to be mapped should be a string'   },\n        { value: [{ }],             expected: 'The value to be mapped should be a string'   },\n        { value: p(null),           expected: 'The value to be mapped should be defined'    },\n        { value: p(undefined),      expected: 'The value to be mapped should be defined'    },\n        { value: p(1),              expected: 'The value to be mapped should be a string'   },\n        { value: p({ }),            expected: 'The value to be mapped should be a string'   },\n        { value: p([ null ]),       expected: 'The value to be mapped should be defined'    },\n        { value: p([ undefined ]),  expected: 'The value to be mapped should be defined'    },\n        { value: p([ 1 ]),          expected: 'The value to be mapped should be a string'   },\n        { value: p([ { } ]),        expected: 'The value to be mapped should be a string'   },\n    ]).\n    it('complains if the original answer is of a wrong type at runtime', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(append('other value'))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    /** @test {append} */\n    it('allows for a string to be appended to the original answer', () => {\n\n        const result = q('Hello')\n            .map(append('!'))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('Hello!');\n    });\n\n    /** @test {append} */\n    it('allows for a Promise<string> to be appended to the original answer', () => {\n\n        const result = q('Hello')\n            .map(append(p('!')))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('Hello!');\n    });\n\n    /** @test {append} */\n    it('allows for a Question<string> to be appended to the original answer', () => {\n\n        const result = q('Hello')\n            .map(append(q('!')))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('Hello!');\n    });\n\n    /** @test {append} */\n    it('allows for a Question<Promise<string>> to be appended to the original answer', () => {\n\n        const result = q('Hello')\n            .map(append(q(p('!'))))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('Hello!');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/mappings/string/append.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1263,
    "kind": "test",
    "name": "describe305",
    "testId": 305,
    "memberof": "spec/screenplay/questions/mappings/string/append.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/append.spec.ts~describe305",
    "access": null,
    "description": "append",
    "lineNumber": 12,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1264,
    "kind": "test",
    "name": "it306",
    "testId": 306,
    "memberof": "spec/screenplay/questions/mappings/string/append.spec.ts~describe305",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/append.spec.ts~describe305.it306",
    "access": null,
    "description": "allows for a string to be appended to the original answer",
    "lineNumber": 49,
    "testTargets": [
      "append"
    ]
  },
  {
    "__docId__": 1265,
    "kind": "test",
    "name": "it307",
    "testId": 307,
    "memberof": "spec/screenplay/questions/mappings/string/append.spec.ts~describe305",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/append.spec.ts~describe305.it307",
    "access": null,
    "description": "allows for a Promise<string> to be appended to the original answer",
    "lineNumber": 59,
    "testTargets": [
      "append"
    ]
  },
  {
    "__docId__": 1266,
    "kind": "test",
    "name": "it308",
    "testId": 308,
    "memberof": "spec/screenplay/questions/mappings/string/append.spec.ts~describe305",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/append.spec.ts~describe305.it308",
    "access": null,
    "description": "allows for a Question<string> to be appended to the original answer",
    "lineNumber": 69,
    "testTargets": [
      "append"
    ]
  },
  {
    "__docId__": 1267,
    "kind": "test",
    "name": "it309",
    "testId": 309,
    "memberof": "spec/screenplay/questions/mappings/string/append.spec.ts~describe305",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/append.spec.ts~describe305.it309",
    "access": null,
    "description": "allows for a Question<Promise<string>> to be appended to the original answer",
    "lineNumber": 79,
    "testTargets": [
      "append"
    ]
  },
  {
    "__docId__": 1268,
    "kind": "testFile",
    "name": "spec/screenplay/questions/mappings/string/normalize.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../../../../src';\nimport { normalize, Question } from '../../../../../src/screenplay';\nimport { expect } from '../../../../expect';\n\n/** @test {normalize} */\n/** @test {Question#map} */\ndescribe('normalize', () => {\n\n    const quentin = actorCalled('Quentin');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some value', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    /**\n     * U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE\n     * U+0323: COMBINING DOT BELOW\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n     */\n    const initialString = '\\u1E9B\\u0323';\n\n    given([\n        { value: null,              expected: 'The value to be mapped should be defined'    },\n        { value: undefined,         expected: 'The value to be mapped should be defined'    },\n        { value: 1,                 expected: 'The value to be mapped should be a string'   },\n        { value: { },               expected: 'The value to be mapped should be a string'   },\n        { value: [null],            expected: 'The value to be mapped should be defined'    },\n        { value: [undefined],       expected: 'The value to be mapped should be defined'    },\n        { value: [1],               expected: 'The value to be mapped should be a string'   },\n        { value: [{ }],             expected: 'The value to be mapped should be a string'   },\n        { value: p(null),           expected: 'The value to be mapped should be defined'    },\n        { value: p(undefined),      expected: 'The value to be mapped should be defined'    },\n        { value: p(1),              expected: 'The value to be mapped should be a string'   },\n        { value: p({ }),            expected: 'The value to be mapped should be a string'   },\n        { value: p([ null ]),       expected: 'The value to be mapped should be defined'    },\n        { value: p([ undefined ]),  expected: 'The value to be mapped should be defined'    },\n        { value: p([ 1 ]),          expected: 'The value to be mapped should be a string'   },\n        { value: p([ { } ]),        expected: 'The value to be mapped should be a string'   },\n    ]).\n    it('complains if the original answer is of a wrong type at runtime', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(normalize('other value'))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        undefined,\n        p(undefined),\n        q(undefined),\n        q(p(undefined)),\n    ]).\n    it('uses Canonical Decomposition, followed by Canonical Composition (NFC) form by default', form => {\n\n        const result = q(initialString)\n            .map(normalize(form))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('\\u1E9B\\u0323');\n    });\n\n    given([\n        'NFC',\n        p('NFC'),\n        q('NFC'),\n        q(p('NFC')),\n    ]).\n    it('supports Canonical Decomposition, followed by Canonical Composition (NFC) form', form => {\n\n        const result = q(initialString)\n            .map(normalize(form))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('\\u1E9B\\u0323');\n    });\n\n    given([\n        'NFD',\n        p('NFD'),\n        q('NFD'),\n        q(p('NFD')),\n    ]).\n    it('supports Canonical Decomposition (NFD) form', form => {\n\n        const result = q(initialString)\n            .map(normalize(form))\n            .answeredBy(quentin);\n\n        // U+017F: latin small letter long s\n        // U+0323: combining dot below\n        // U+0307: combining dot above\n        return expect(result).to.eventually.equal('\\u017F\\u0323\\u0307');\n    });\n\n    given([\n        'NFKC',\n        p('NFKC'),\n        q('NFKC'),\n        q(p('NFKC')),\n    ]).\n    it('supports Compatibility Decomposition, followed by Canonical Composition (NFKC) form', form => {\n\n        const result = q(initialString)\n            .map(normalize(form))\n            .answeredBy(quentin);\n\n        // U+1E69: latin small letter s with dot below and dot above\n        return expect(result).to.eventually.equal('\\u1E69');\n    });\n\n    given([\n        'NFKD',\n        p('NFKD'),\n        q('NFKD'),\n        q(p('NFKD')),\n    ]).\n    it('supports Compatibility Decomposition (NFKD) form', form => {\n\n        const result = q(initialString)\n            .map(normalize(form))\n            .answeredBy(quentin);\n\n        // U+0073: latin small letter s\n        // U+0323: combining dot below\n        // U+0307: combining dot above\n        return expect(result).to.eventually.equal('\\u0073\\u0323\\u0307');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/mappings/string/normalize.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1269,
    "kind": "test",
    "name": "describe310",
    "testId": 310,
    "memberof": "spec/screenplay/questions/mappings/string/normalize.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/normalize.spec.ts~describe310",
    "access": null,
    "description": "normalize",
    "lineNumber": 12,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1270,
    "kind": "testFile",
    "name": "spec/screenplay/questions/mappings/string/replace.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../../../../src';\nimport { Question,replace } from '../../../../../src/screenplay';\nimport { expect } from '../../../../expect';\n\n/** @test {replace} */\n/** @test {Question#map} */\ndescribe('replace', () => {\n\n    const quentin = actorCalled('Quentin');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some value', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    given([\n        { value: null,              expected: 'The value to be mapped should be defined'  },\n        { value: undefined,         expected: 'The value to be mapped should be defined'  },\n        { value: 1,                 expected: 'The value to be mapped should be a string' },\n        { value: { },               expected: 'The value to be mapped should be a string' },\n        { value: [null],            expected: 'The value to be mapped should be defined'  },\n        { value: [undefined],       expected: 'The value to be mapped should be defined'  },\n        { value: [1],               expected: 'The value to be mapped should be a string' },\n        { value: [{ }],             expected: 'The value to be mapped should be a string' },\n        { value: p(null),           expected: 'The value to be mapped should be defined'  },\n        { value: p(undefined),      expected: 'The value to be mapped should be defined'  },\n        { value: p(1),              expected: 'The value to be mapped should be a string' },\n        { value: p({ }),            expected: 'The value to be mapped should be a string' },\n        { value: p([ null ]),       expected: 'The value to be mapped should be defined'  },\n        { value: p([ undefined ]),  expected: 'The value to be mapped should be defined'  },\n        { value: p([ 1 ]),          expected: 'The value to be mapped should be a string' },\n        { value: p([ { } ]),        expected: 'The value to be mapped should be a string' },\n    ]).\n    it('complains if the original answer is of a wrong type at runtime', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(replace('pattern', 'replacement'))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        {  pattern: 'Hello',        replacement: 'Hi'       },\n        {  pattern: p('Hello'),     replacement: 'Hi'       },\n        {  pattern: q('Hello'),     replacement: 'Hi'       },\n        {  pattern: q(p('Hello')),  replacement: 'Hi'       },\n        {  pattern: 'Hello',        replacement: p('Hi')    },\n        {  pattern: 'Hello',        replacement: q('Hi')    },\n        {  pattern: 'Hello',        replacement: q(p('Hi')) },\n    ]).\n    it('allows for a string to be replaced with another string', ({ pattern, replacement }) => {\n\n        const result = q('Hello World!')\n            .map(replace(pattern, replacement))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('Hi World!');\n    });\n\n    given([\n        {  pattern: /(H|h)ello/,        replacement: '$1i'       },\n        {  pattern: p(/(H|h)ello/),     replacement: '$1i'       },\n        {  pattern: q(/(H|h)ello/),     replacement: '$1i'       },\n        {  pattern: q(p(/(H|h)ello/)),  replacement: '$1i'       },\n        {  pattern: /(H|h)ello/,        replacement: p('$1i')    },\n        {  pattern: /(H|h)ello/,        replacement: q('$1i')    },\n        {  pattern: /(H|h)ello/,        replacement: q(p('$1i')) },\n    ]).\n    it('allows for a RegEx pattern to be replaced with a string', ({ pattern, replacement }) => {\n\n        const result = q('Hello World!')\n            .map(replace(pattern, replacement))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('Hi World!');\n    });\n\n    given([\n        {  pattern: /[A-Z]/g,        replacement: _ => _.toLowerCase()       },\n        {  pattern: p(/[A-Z]/g),     replacement: _ => _.toLowerCase()       },\n        {  pattern: q(/[A-Z]/g),     replacement: _ => _.toLowerCase()       },\n        {  pattern: q(p(/[A-Z]/g)),  replacement: _ => _.toLowerCase()       },\n        {  pattern: /[A-Z]/g,        replacement: p(_ => _.toLowerCase())    },\n        {  pattern: /[A-Z]/g,        replacement: q(_ => _.toLowerCase())    },\n        {  pattern: /[A-Z]/g,        replacement: q(p(_ => _.toLowerCase())) },\n    ]).\n    it('allows for a pattern to be replaced with a replacement function', ({ pattern, replacement }) => {\n\n        const result = q('Hello World!')\n            .map(replace(pattern, replacement))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('hello world!');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/mappings/string/replace.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1271,
    "kind": "test",
    "name": "describe311",
    "testId": 311,
    "memberof": "spec/screenplay/questions/mappings/string/replace.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/replace.spec.ts~describe311",
    "access": null,
    "description": "replace",
    "lineNumber": 12,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1272,
    "kind": "testFile",
    "name": "spec/screenplay/questions/mappings/string/slice.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../../../../src';\nimport { Question,slice } from '../../../../../src/screenplay';\nimport { expect } from '../../../../expect';\n\n/** @test {slice} */\n/** @test {Question#map} */\ndescribe('slice', () => {\n\n    const quentin = actorCalled('Quentin');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some value', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    given([\n        { value: null,              expected: 'The value to be mapped should be defined'    },\n        { value: undefined,         expected: 'The value to be mapped should be defined'    },\n        { value: 1,                 expected: 'The value to be mapped should be a string'   },\n        { value: { },               expected: 'The value to be mapped should be a string'   },\n        { value: [null],            expected: 'The value to be mapped should be defined'    },\n        { value: [undefined],       expected: 'The value to be mapped should be defined'    },\n        { value: [1],               expected: 'The value to be mapped should be a string'   },\n        { value: [{ }],             expected: 'The value to be mapped should be a string'   },\n        { value: p(null),           expected: 'The value to be mapped should be defined'    },\n        { value: p(undefined),      expected: 'The value to be mapped should be defined'    },\n        { value: p(1),              expected: 'The value to be mapped should be a string'   },\n        { value: p({ }),            expected: 'The value to be mapped should be a string'   },\n        { value: p([ null ]),       expected: 'The value to be mapped should be defined'    },\n        { value: p([ undefined ]),  expected: 'The value to be mapped should be defined'    },\n        { value: p([ 1 ]),          expected: 'The value to be mapped should be a string'   },\n        { value: p([ { } ]),        expected: 'The value to be mapped should be a string'   },\n    ]).\n    it('complains if the original answer is of a wrong type at runtime', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(slice(0, 1))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        { value: Number.NaN,        expected: 'startIndex should be an integer' },\n        { value: null,              expected: 'startIndex should be defined'    },\n        { value: undefined,         expected: 'startIndex should be defined'    },\n        { value: '',                expected: 'startIndex should be an integer' },\n        { value: { },               expected: 'startIndex should be an integer' },\n        { value: p(Number.NaN),     expected: 'startIndex should be an integer' },\n        { value: p(null),           expected: 'startIndex should be defined'    },\n        { value: p(undefined),      expected: 'startIndex should be defined'    },\n        { value: p(''),             expected: 'startIndex should be an integer' },\n        { value: p({ }),            expected: 'startIndex should be an integer' },\n        { value: q(Number.NaN),     expected: 'startIndex should be an integer' },\n        { value: q(null),           expected: 'startIndex should be defined'    },\n        { value: q(undefined),      expected: 'startIndex should be defined'    },\n        { value: q(''),             expected: 'startIndex should be an integer' },\n        { value: q({ }),            expected: 'startIndex should be an integer' },\n        { value: q(p(Number.NaN)),  expected: 'startIndex should be an integer' },\n        { value: q(p(null)),        expected: 'startIndex should be defined'    },\n        { value: q(p(undefined)),   expected: 'startIndex should be defined'    },\n        { value: q(p('')),          expected: 'startIndex should be an integer' },\n        { value: q(p({ })),         expected: 'startIndex should be an integer' },\n    ]).\n    it('complains if startIndex is invalid at runtime', ({ value, expected }) => {\n        const result = q('Hello World!')\n            .map(slice(value, 1))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        { value: Number.NaN,        expected: 'endIndex should be an integer'   },\n        { value: null,              expected: 'endIndex should be an integer'   },\n        { value: '',                expected: 'endIndex should be an integer'   },\n        { value: { },               expected: 'endIndex should be an integer'   },\n        { value: p(Number.NaN),     expected: 'endIndex should be an integer'   },\n        { value: p(null),           expected: 'endIndex should be an integer'   },\n        { value: p(''),             expected: 'endIndex should be an integer'   },\n        { value: p({ }),            expected: 'endIndex should be an integer'   },\n        { value: q(Number.NaN),     expected: 'endIndex should be an integer'   },\n        { value: q(null),           expected: 'endIndex should be an integer'   },\n        { value: q(''),             expected: 'endIndex should be an integer'   },\n        { value: q({ }),            expected: 'endIndex should be an integer'   },\n        { value: q(p(Number.NaN)),  expected: 'endIndex should be an integer'   },\n        { value: q(p(null)),        expected: 'endIndex should be an integer'   },\n        { value: q(p('')),          expected: 'endIndex should be an integer'   },\n        { value: q(p({ })),         expected: 'endIndex should be an integer'   },\n    ]).\n    it('complains if endIndex is invalid at runtime', ({ value, expected }) => {\n        const result = q('Hello World!')\n            .map(slice(0, value))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        { value: undefined       },\n        { value: p(undefined)    },\n    ]).\n    it('extracts the part of the string from `startIndex` to the end of the string if `endIndex` is not defined', ({ value}) => {\n        const result = q('Hello World!')\n            .map(slice(6, value))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('World!');\n    });\n\n    /** @test {slice} */\n    it('extracts the part of the string from `startIndex` to `endIndex`', () => {\n        const result = q('Hello World!')\n            .map(slice(6, -1))\n            .answeredBy(quentin);\n\n        return expect(result).to.eventually.equal('World');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/mappings/string/slice.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1273,
    "kind": "test",
    "name": "describe312",
    "testId": 312,
    "memberof": "spec/screenplay/questions/mappings/string/slice.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/slice.spec.ts~describe312",
    "access": null,
    "description": "slice",
    "lineNumber": 12,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1274,
    "kind": "test",
    "name": "it313",
    "testId": 313,
    "memberof": "spec/screenplay/questions/mappings/string/slice.spec.ts~describe312",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/slice.spec.ts~describe312.it313",
    "access": null,
    "description": "extracts the part of the string from `startIndex` to `endIndex`",
    "lineNumber": 117,
    "testTargets": [
      "slice"
    ]
  },
  {
    "__docId__": 1275,
    "kind": "testFile",
    "name": "spec/screenplay/questions/mappings/string/split.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../../../../src';\nimport { Question,split } from '../../../../../src/screenplay';\nimport { expect } from '../../../../expect';\n\n/** @test {split} */\n/** @test {Question#map} */\ndescribe('split', () => {\n\n    const quentin = actorCalled('Quentin');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some value', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    given([\n        { value: null,              expected: 'The value to be mapped should be defined'    },\n        { value: undefined,         expected: 'The value to be mapped should be defined'    },\n        { value: 1,                 expected: 'The value to be mapped should be a string'   },\n        { value: { },               expected: 'The value to be mapped should be a string'   },\n        { value: [null],            expected: 'The value to be mapped should be defined'    },\n        { value: [undefined],       expected: 'The value to be mapped should be defined'    },\n        { value: [1],               expected: 'The value to be mapped should be a string'   },\n        { value: [{ }],             expected: 'The value to be mapped should be a string'   },\n        { value: p(null),           expected: 'The value to be mapped should be defined'    },\n        { value: p(undefined),      expected: 'The value to be mapped should be defined'    },\n        { value: p(1),              expected: 'The value to be mapped should be a string'   },\n        { value: p({ }),            expected: 'The value to be mapped should be a string'   },\n        { value: p([ null ]),       expected: 'The value to be mapped should be defined'    },\n        { value: p([ undefined ]),  expected: 'The value to be mapped should be defined'    },\n        { value: p([ 1 ]),          expected: 'The value to be mapped should be a string'   },\n        { value: p([ { } ]),        expected: 'The value to be mapped should be a string'   },\n    ]).\n    it('complains if the original answer is of a wrong type at runtime', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(split(','))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    /**\n     * When the empty string (\"\") is used as a separator,\n     * the string is not split by user-perceived characters (grapheme clusters)\n     * or unicode characters (codepoints), but by UTF-16 codeunits.\n     *\n     * So to avoid mistakes, split() will complain if you give it an empty string.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\n     */\n    given([\n        { value: '',            expected: 'The separator should not be blank' },\n        { value: p(''),         expected: 'The separator should not be blank' },\n    ]).\n    it('complains if provided with an empty separator', ({ value, expected }) => {\n        const result = q(value)\n            .map(split(''))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        { value: 'John,Smith,Dock Road',        expected: ['John', 'Smith', 'Dock Road' ] },\n        { value: p('John,Smith,Dock Road'),     expected: ['John', 'Smith', 'Dock Road' ] },\n    ]).\n    it('divides a string into an ordered list of substrings', ({ value, expected }) => {\n        const result = q(value)\n            .map(split(','))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.eventually.deep.equal(expected);\n    });\n\n    /** @test {split} */\n    it('can limit the number of substrings returned', () => {\n        const result = q('John,Smith,Dock Road')\n            .map(split(',', 2))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.eventually.deep.equal(['John', 'Smith']);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/mappings/string/split.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1276,
    "kind": "test",
    "name": "describe314",
    "testId": 314,
    "memberof": "spec/screenplay/questions/mappings/string/split.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/split.spec.ts~describe314",
    "access": null,
    "description": "split",
    "lineNumber": 12,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1277,
    "kind": "test",
    "name": "it315",
    "testId": 315,
    "memberof": "spec/screenplay/questions/mappings/string/split.spec.ts~describe314",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/split.spec.ts~describe314.it315",
    "access": null,
    "description": "can limit the number of substrings returned",
    "lineNumber": 82,
    "testTargets": [
      "split"
    ]
  },
  {
    "__docId__": 1278,
    "kind": "testFile",
    "name": "spec/screenplay/questions/mappings/string/toLocaleLowerCase.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../../../../src';\nimport { Question,toLocaleLowerCase } from '../../../../../src/screenplay';\nimport { expect } from '../../../../expect';\n\n/** @test {toLocaleLowerCase} */\n/** @test {Question#map} */\ndescribe('toLocaleLowerCase', () => {\n\n    const quentin = actorCalled('Quentin');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some value', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    given([\n        { value: null,              expected: 'The value to be mapped should be defined'    },\n        { value: undefined,         expected: 'The value to be mapped should be defined'    },\n        { value: 1,                 expected: 'The value to be mapped should be a string'   },\n        { value: { },               expected: 'The value to be mapped should be a string'   },\n        { value: [null],            expected: 'The value to be mapped should be defined'    },\n        { value: [undefined],       expected: 'The value to be mapped should be defined'    },\n        { value: [1],               expected: 'The value to be mapped should be a string'   },\n        { value: [{ }],             expected: 'The value to be mapped should be a string'   },\n        { value: p(null),           expected: 'The value to be mapped should be defined'    },\n        { value: p(undefined),      expected: 'The value to be mapped should be defined'    },\n        { value: p(1),              expected: 'The value to be mapped should be a string'   },\n        { value: p({ }),            expected: 'The value to be mapped should be a string'   },\n        { value: p([ null ]),       expected: 'The value to be mapped should be defined'    },\n        { value: p([ undefined ]),  expected: 'The value to be mapped should be defined'    },\n        { value: p([ 1 ]),          expected: 'The value to be mapped should be a string'   },\n        { value: p([ { } ]),        expected: 'The value to be mapped should be a string'   },\n    ]).\n    it('complains if the original answer is of a wrong type at runtime', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(toLocaleLowerCase())\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        { value: 'I',          expected: 'ı' },\n        { value: p('I'),       expected: 'ı' },\n        { value: q('I'),       expected: 'ı' },\n        { value: q(p('I')),    expected: 'ı' },\n    ]).\n    it('converts the string to lower case, according to any locale-specific case mappings', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(toLocaleLowerCase('tr'))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.eventually.equal(expected);\n    });\n\n    given([\n        { value: 'tr'       },\n        { value: p('tr')    },\n        { value: q('tr')    },\n        { value: q(p('tr')) },\n    ]).\n    it('allows for a list of locales to be provided', ({ value }) => {\n        const result = q('I')\n            .map(toLocaleLowerCase(value))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.eventually.equal('ı');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/mappings/string/toLocaleLowerCase.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1279,
    "kind": "test",
    "name": "describe316",
    "testId": 316,
    "memberof": "spec/screenplay/questions/mappings/string/toLocaleLowerCase.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/toLocaleLowerCase.spec.ts~describe316",
    "access": null,
    "description": "toLocaleLowerCase",
    "lineNumber": 12,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1280,
    "kind": "testFile",
    "name": "spec/screenplay/questions/mappings/string/toLocaleUpperCase.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../../../../src';\nimport { Question, toLocaleUpperCase } from '../../../../../src/screenplay';\nimport { expect } from '../../../../expect';\n\n/** @test {toLocaleUpperCase} */\n/** @test {Question#map} */\ndescribe('toLocaleUpperCase', () => {\n\n    const quentin = actorCalled('Quentin');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some value', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    given([\n        { value: null,              expected: 'The value to be mapped should be defined'    },\n        { value: undefined,         expected: 'The value to be mapped should be defined'    },\n        { value: 1,                 expected: 'The value to be mapped should be a string'   },\n        { value: { },               expected: 'The value to be mapped should be a string'   },\n        { value: [null],            expected: 'The value to be mapped should be defined'    },\n        { value: [undefined],       expected: 'The value to be mapped should be defined'    },\n        { value: [1],               expected: 'The value to be mapped should be a string'   },\n        { value: [{ }],             expected: 'The value to be mapped should be a string'   },\n        { value: p(null),           expected: 'The value to be mapped should be defined'    },\n        { value: p(undefined),      expected: 'The value to be mapped should be defined'    },\n        { value: p(1),              expected: 'The value to be mapped should be a string'   },\n        { value: p({ }),            expected: 'The value to be mapped should be a string'   },\n        { value: p([ null ]),       expected: 'The value to be mapped should be defined'    },\n        { value: p([ undefined ]),  expected: 'The value to be mapped should be defined'    },\n        { value: p([ 1 ]),          expected: 'The value to be mapped should be a string'   },\n        { value: p([ { } ]),        expected: 'The value to be mapped should be a string'   },\n    ]).\n    it('complains if the original answer is of a wrong type at runtime', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(toLocaleUpperCase())\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        { value: 'ı',          expected: 'I' },\n        { value: p('ı'),       expected: 'I' },\n        { value: q('ı'),       expected: 'I' },\n        { value: q(p('ı')),    expected: 'I' },\n    ]).\n    it('converts the string to upper case, according to any locale-specific case mappings', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(toLocaleUpperCase('tr'))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.eventually.equal(expected);\n    });\n\n    given([\n        { value: 'tr'       },\n        { value: p('tr')    },\n        { value: q('tr')    },\n        { value: q(p('tr')) },\n    ]).\n    it('allows for a list of locales to be provided', ({ value }) => {\n        const result = q('ı')\n            .map(toLocaleUpperCase(value))\n            .answeredBy(quentin);\n\n        return expect(result).to.be.eventually.equal('I');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/mappings/string/toLocaleUpperCase.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1281,
    "kind": "test",
    "name": "describe317",
    "testId": 317,
    "memberof": "spec/screenplay/questions/mappings/string/toLocaleUpperCase.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/toLocaleUpperCase.spec.ts~describe317",
    "access": null,
    "description": "toLocaleUpperCase",
    "lineNumber": 12,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1282,
    "kind": "testFile",
    "name": "spec/screenplay/questions/mappings/string/toLowerCase.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../../../../src';\nimport { Question,toLowerCase } from '../../../../../src/screenplay';\nimport { expect } from '../../../../expect';\n\n/** @test {toLowerCase} */\n/** @test {Question#map} */\ndescribe('toLowerCase', () => {\n\n    const quentin = actorCalled('Quentin');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some value', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    given([\n        { value: null,              expected: 'The value to be mapped should be defined'    },\n        { value: undefined,         expected: 'The value to be mapped should be defined'    },\n        { value: 1,                 expected: 'The value to be mapped should be a string'   },\n        { value: { },               expected: 'The value to be mapped should be a string'   },\n        { value: [null],            expected: 'The value to be mapped should be defined'    },\n        { value: [undefined],       expected: 'The value to be mapped should be defined'    },\n        { value: [1],               expected: 'The value to be mapped should be a string'   },\n        { value: [{ }],             expected: 'The value to be mapped should be a string'   },\n        { value: p(null),           expected: 'The value to be mapped should be defined'    },\n        { value: p(undefined),      expected: 'The value to be mapped should be defined'    },\n        { value: p(1),              expected: 'The value to be mapped should be a string'   },\n        { value: p({ }),            expected: 'The value to be mapped should be a string'   },\n        { value: p([ null ]),       expected: 'The value to be mapped should be defined'    },\n        { value: p([ undefined ]),  expected: 'The value to be mapped should be defined'    },\n        { value: p([ 1 ]),          expected: 'The value to be mapped should be a string'   },\n        { value: p([ { } ]),        expected: 'The value to be mapped should be a string'   },\n    ]).\n    it('complains if the original answer is of a wrong type at runtime', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(toLowerCase())\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        { value: 'HeLlO!'       },\n        { value: p('HeLlO!')    },\n    ]).\n    it('converts the string to lower case', ({ value }) => {\n        const result = q(value)\n            .map(toLowerCase())\n            .answeredBy(quentin);\n\n        return expect(result).to.be.eventually.equal('hello!');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/mappings/string/toLowerCase.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1283,
    "kind": "test",
    "name": "describe318",
    "testId": 318,
    "memberof": "spec/screenplay/questions/mappings/string/toLowerCase.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/toLowerCase.spec.ts~describe318",
    "access": null,
    "description": "toLowerCase",
    "lineNumber": 12,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1284,
    "kind": "testFile",
    "name": "spec/screenplay/questions/mappings/string/toUpperCase.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../../../../src';\nimport { Question,toUpperCase } from '../../../../../src/screenplay';\nimport { expect } from '../../../../expect';\n\n/** @test {toUpperCase} */\n/** @test {Question#map} */\ndescribe('toUpperCase', () => {\n\n    const quentin = actorCalled('Quentin');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some value', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    given([\n        { value: null,              expected: 'The value to be mapped should be defined'    },\n        { value: undefined,         expected: 'The value to be mapped should be defined'    },\n        { value: 1,                 expected: 'The value to be mapped should be a string'   },\n        { value: { },               expected: 'The value to be mapped should be a string'   },\n        { value: [null],            expected: 'The value to be mapped should be defined'    },\n        { value: [undefined],       expected: 'The value to be mapped should be defined'    },\n        { value: [1],               expected: 'The value to be mapped should be a string'   },\n        { value: [{ }],             expected: 'The value to be mapped should be a string'   },\n        { value: p(null),           expected: 'The value to be mapped should be defined'    },\n        { value: p(undefined),      expected: 'The value to be mapped should be defined'    },\n        { value: p(1),              expected: 'The value to be mapped should be a string'   },\n        { value: p({ }),            expected: 'The value to be mapped should be a string'   },\n        { value: p([ null ]),       expected: 'The value to be mapped should be defined'    },\n        { value: p([ undefined ]),  expected: 'The value to be mapped should be defined'    },\n        { value: p([ 1 ]),          expected: 'The value to be mapped should be a string'   },\n        { value: p([ { } ]),        expected: 'The value to be mapped should be a string'   },\n    ]).\n    it('complains if the original answer is of a wrong type at runtime', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(toUpperCase())\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        { value: 'HeLlO!'       },\n        { value: p('HeLlO!')    },\n    ]).\n    it('converts the string to lower case', ({ value }) => {\n        const result = q(value)\n            .map(toUpperCase())\n            .answeredBy(quentin);\n\n        return expect(result).to.be.eventually.equal('HELLO!');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/mappings/string/toUpperCase.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1285,
    "kind": "test",
    "name": "describe319",
    "testId": 319,
    "memberof": "spec/screenplay/questions/mappings/string/toUpperCase.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/toUpperCase.spec.ts~describe319",
    "access": null,
    "description": "toUpperCase",
    "lineNumber": 12,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1286,
    "kind": "testFile",
    "name": "spec/screenplay/questions/mappings/string/trim.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping,unicorn/no-null,unicorn/no-useless-undefined */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { actorCalled } from '../../../../../src';\nimport { Question,trim } from '../../../../../src/screenplay';\nimport { expect } from '../../../../expect';\n\n/** @test {trim} */\n/** @test {Question#map} */\ndescribe('trim', () => {\n\n    const quentin = actorCalled('Quentin');\n\n    const q = <T>(value: T) =>\n        Question.about<T>('some value', actor => value);\n\n    const p = <T>(value: T) =>\n        Promise.resolve(value);\n\n    given([\n        { value: null,              expected: 'The value to be mapped should be defined'    },\n        { value: undefined,         expected: 'The value to be mapped should be defined'    },\n        { value: 1,                 expected: 'The value to be mapped should be a string'   },\n        { value: { },               expected: 'The value to be mapped should be a string'   },\n        { value: [null],            expected: 'The value to be mapped should be defined'    },\n        { value: [undefined],       expected: 'The value to be mapped should be defined'    },\n        { value: [1],               expected: 'The value to be mapped should be a string'   },\n        { value: [{ }],             expected: 'The value to be mapped should be a string'   },\n        { value: p(null),           expected: 'The value to be mapped should be defined'    },\n        { value: p(undefined),      expected: 'The value to be mapped should be defined'    },\n        { value: p(1),              expected: 'The value to be mapped should be a string'   },\n        { value: p({ }),            expected: 'The value to be mapped should be a string'   },\n        { value: p([ null ]),       expected: 'The value to be mapped should be defined'    },\n        { value: p([ undefined ]),  expected: 'The value to be mapped should be defined'    },\n        { value: p([ 1 ]),          expected: 'The value to be mapped should be a string'   },\n        { value: p([ { } ]),        expected: 'The value to be mapped should be a string'   },\n    ]).\n    it('complains if the original answer is of a wrong type at runtime', ({ value, expected }) => {\n        const result = q<any>(value)\n            .map(trim())\n            .answeredBy(quentin);\n\n        return expect(result).to.be.rejectedWith(expected);\n    });\n\n    given([\n        { value: '  hello  '     },\n        { value: '\\nhello\\n'     },\n        { value: '\\r\\nhello\\r\\n' },\n        { value: '\\thello\\t'     },\n    ]).\n    it('removes any whitespace characters from both ends of a string', ({ value }) => {\n        const result = q(value)\n            .map(trim())\n            .answeredBy(quentin);\n\n        return expect(result).to.be.eventually.equal('hello');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/mappings/string/trim.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1287,
    "kind": "test",
    "name": "describe320",
    "testId": 320,
    "memberof": "spec/screenplay/questions/mappings/string/trim.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/mappings/string/trim.spec.ts~describe320",
    "access": null,
    "description": "trim",
    "lineNumber": 12,
    "testTargets": [
      "Question#map"
    ]
  },
  {
    "__docId__": 1288,
    "kind": "testFile",
    "name": "spec/screenplay/questions/q.spec.ts",
    "content": "import 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { q, Question, Serenity } from '../../../src';\nimport { Actor } from '../../../src/screenplay';\nimport { Cast } from '../../../src/stage';\nimport { expect } from '../../expect';\n\n/** @test {q} */\ndescribe('q', () => {\n\n    let serenity: Serenity,\n        Quentin: Actor;\n\n    class Actors implements Cast {\n        prepare(actor: Actor): Actor {\n            return actor;\n        }\n    }\n\n    beforeEach(() => {\n        serenity = new Serenity();\n\n        serenity.configure({\n            crew: [ ],\n            actors: new Actors(),\n        });\n\n        Quentin = serenity.theActorCalled('Quentin');\n    });\n\n    /** @test {q} */\n    it('returns the original string value if no parameters are provided', () => {\n        const question = q`some value`;\n\n        return expect(Quentin.answer(question)).to.eventually.equal('some value');\n    });\n\n    given([\n        { description: 'string',                    value: 'World' },\n        { description: 'Promise<string>',           value: Promise.resolve('World') },\n        { description: 'Question<string>',          value: Question.about('name', actor => 'World') },\n        { description: 'Question<Promise<string>>', value: Question.about('name', actor => Promise.resolve('World')) },\n    ]).\n    it('should inject an answer to an Answerable<string> into the template', ({ value }) => {\n        const question = q `Hello ${ value }!`;\n\n        return expect(Quentin.answer(question)).to.eventually.equal('Hello World!')\n    });\n\n    given([\n        { description: 'number',                    value: 42 },\n        { description: 'Promise<number>',           value: Promise.resolve(42) },\n        { description: 'Question<number>',          value: Question.about('value', actor => 42) },\n        { description: 'Question<Promise<number>>', value: Question.about('value', actor => Promise.resolve(42)) },\n    ]).\n    it('should inject an answer to an Answerable<number> into the template', ({ value }) => {\n        const question = q `The answer is: ${ value }!`;\n\n        return expect(Quentin.answer(question)).to.eventually.equal('The answer is: 42!')\n    });\n\n    it(`should inject answers to multiple Answerables into the template`, () => {\n        const\n            baseUrl = Question.about('url', actor => 'http://127.0.0.1:8000'),\n            itemId  = Question.about('itemId', actor => 5);\n\n        const question = q `${ baseUrl }/api/items/${ itemId }`;\n\n        return expect(Quentin.answer(question)).to.eventually.equal('http://127.0.0.1:8000/api/items/5');\n    });\n\n    /** @test {q} */\n    it('provides a sensible description of the question being asked', () => {\n        const question = q `/products/${ 1 }/attributes/${ Promise.resolve(2) }`;\n\n        return expect(question.toString()).to.equal('/products/{}/attributes/{}')\n    });\n\n    /** @test {q} */\n    it('can have the default description overridden', () => {\n        const question = q `/products/${ 1 }/attributes/${ Promise.resolve(2) }`.describedAs('/products/:productId/attributes/:attributeId');\n\n        return expect(question.toString()).to.equal('/products/:productId/attributes/:attributeId')\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/questions/q.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1289,
    "kind": "test",
    "name": "describe321",
    "testId": 321,
    "memberof": "spec/screenplay/questions/q.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/q.spec.ts~describe321",
    "access": null,
    "description": "q",
    "lineNumber": 11,
    "testTargets": [
      "q"
    ]
  },
  {
    "__docId__": 1290,
    "kind": "test",
    "name": "it322",
    "testId": 322,
    "memberof": "spec/screenplay/questions/q.spec.ts~describe321",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/q.spec.ts~describe321.it322",
    "access": null,
    "description": "returns the original string value if no parameters are provided",
    "lineNumber": 54,
    "testTargets": [
      "q"
    ]
  },
  {
    "__docId__": 1291,
    "kind": "test",
    "name": "it323",
    "testId": 323,
    "memberof": "spec/screenplay/questions/q.spec.ts~describe321",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/q.spec.ts~describe321.it323",
    "access": null,
    "lineNumber": 84
  },
  {
    "__docId__": 1292,
    "kind": "test",
    "name": "it324",
    "testId": 324,
    "memberof": "spec/screenplay/questions/q.spec.ts~describe321",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/q.spec.ts~describe321.it324",
    "access": null,
    "description": "provides a sensible description of the question being asked",
    "lineNumber": 95,
    "testTargets": [
      "q"
    ]
  },
  {
    "__docId__": 1293,
    "kind": "test",
    "name": "it325",
    "testId": 325,
    "memberof": "spec/screenplay/questions/q.spec.ts~describe321",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/q.spec.ts~describe321.it325",
    "access": null,
    "description": "can have the default description overridden",
    "lineNumber": 102,
    "testTargets": [
      "q"
    ]
  },
  {
    "__docId__": 1294,
    "kind": "testFile",
    "name": "spec/screenplay/tasks/Loop.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport { given } from 'mocha-testdata';\n\nimport { Serenity } from '../../../src';\nimport { TaskFinished, TaskStarts } from '../../../src/events';\nimport { Actor, Question } from '../../../src/screenplay';\nimport { Loop } from '../../../src/screenplay/tasks';\nimport { Cast } from '../../../src/stage';\nimport { expect } from '../../expect';\nimport { Recorder } from '../../Recorder';\nimport { Spy } from './Spy';\n\n/** @test {Loop} */\ndescribe('Loop', () => {\n\n    let serenity: Serenity,\n        recorder: Recorder;\n\n    class Actors implements Cast {\n        prepare(actor: Actor): Actor {\n            return actor;\n        }\n    }\n\n    beforeEach(() => {\n        serenity = new Serenity();\n        recorder = new Recorder();\n\n        serenity.configure({\n            crew: [ recorder ],\n            actors: new Actors(),\n        });\n    });\n\n    afterEach(() => Spy.reset());\n\n    const\n        personA     = { name: 'Alice' },\n        personB     = { name: 'Bob' },\n        personC     = { name: 'Celine' },\n        listOfPeople      = [ personA, personB, personC ],\n        emptyList   = [],\n        p           = <T>(value: T): Promise<T> => Promise.resolve(value),\n        q           = <T>(value: T): Question<T> => Question.about('a list of people', actor => value);\n\n    given([\n        { description: 'static list',               list: listOfPeople         },\n        { description: 'Promise<list>',             list: p(listOfPeople)      },\n        { description: 'Question<list>',            list: q(listOfPeople)      },\n        { description: 'Question<Promise<list>>',   list: q(p(listOfPeople))   },\n    ]).\n    it(`iterates over a list`, ({ list }) =>\n        serenity.theActorCalled('Looper Joe').attemptsTo(\n            Loop.over(list).to(Spy.on(Loop.item(), Loop.index()))\n        ).then(() => {\n            expect(Spy.call(0)).to.deep.equal([ personA, 0 ]);\n            expect(Spy.call(1)).to.deep.equal([ personB, 1 ]);\n            expect(Spy.call(2)).to.deep.equal([ personC, 2 ]);\n        }));\n\n    given([\n        { description: 'static list',               list: emptyList         },\n        { description: 'Promise<list>',             list: p(emptyList)      },\n        { description: 'Question<list>',            list: q(emptyList)      },\n        { description: 'Question<Promise<list>>',   list: q(p(emptyList))   },\n    ]).\n    it(`doesn't iterate over an empty list`, ({ list }) =>\n        serenity.theActorCalled('Looper Joe').attemptsTo(\n            Loop.over(list).to(Spy.on(Loop.item()))\n        ).then(() => {\n            expect(Spy.calls()).to.equal(0);\n        }));\n\n    it(`reports the loop even when there are no activities to perform`, () =>\n        serenity.theActorCalled('Looper Joe').attemptsTo(\n            Loop.over(q(listOfPeople)).to(/* do nothing */)\n        ).then(() => {\n            expect(recorder.events).to.have.lengthOf(2);\n\n            const taskStarts = recorder.events[0] as TaskStarts;\n            expect(taskStarts).to.be.instanceOf(TaskStarts);\n            expect(taskStarts.details.name.value).to.equal('Looper Joe loops over a list of people');\n\n            const taskFinished = recorder.events[1] as TaskFinished;\n            expect(taskFinished).to.be.instanceOf(TaskFinished);\n            expect(taskFinished.details.name.value).to.equal('Looper Joe loops over a list of people');\n        }));\n\n    given([\n        { description: 'empty list',                list: emptyList,            expected: '#actor loops over a list of 0 items' },\n        { description: 'singleton list',            list: ['apple'],            expected: '#actor loops over a list of 1 item' },\n        { description: 'static list',               list: listOfPeople,         expected: '#actor loops over a list of 3 items' },\n        { description: 'Promise<list>',             list: p(listOfPeople),      expected: '#actor loops over a Promise' },\n        { description: 'Question<list>',            list: q(listOfPeople),      expected: '#actor loops over a list of people' },\n        { description: 'Question<Promise<list>>',   list: q(p(listOfPeople)),   expected: '#actor loops over a list of people' },\n    ]).\n    it(`provides a sensible description of the task being performed`, ({ list, expected }) => {\n        expect(Loop.over(list).to().toString())\n            .to.equal(expected);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/screenplay/tasks/Loop.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1295,
    "kind": "test",
    "name": "describe326",
    "testId": 326,
    "memberof": "spec/screenplay/tasks/Loop.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/tasks/Loop.spec.ts~describe326",
    "access": null,
    "description": "Loop",
    "lineNumber": 16,
    "testTargets": [
      "Loop"
    ]
  },
  {
    "__docId__": 1296,
    "kind": "test",
    "name": "it327",
    "testId": 327,
    "memberof": "spec/screenplay/tasks/Loop.spec.ts~describe326",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/tasks/Loop.spec.ts~describe326.it327",
    "access": null,
    "lineNumber": 96
  },
  {
    "__docId__": 1297,
    "kind": "testFile",
    "name": "spec/stage/Stage.spec.ts",
    "content": "import 'mocha';\n\nimport * as sinon from 'sinon';\n\nimport { ConfigurationError, LogicError } from '../../src/errors';\nimport { SceneFinished, SceneFinishes, SceneStarts, TestRunFinished, TestRunFinishes } from '../../src/events';\nimport { FileSystemLocation, Path } from '../../src/io';\nimport { Category, CorrelationId, Duration, ExecutionSuccessful, Name, ScenarioDetails } from '../../src/model';\nimport { Ability, Actor, Discardable } from '../../src/screenplay';\nimport { Cast, Clock, Stage, StageManager } from '../../src/stage';\nimport { expect } from '../expect';\n\ndescribe('Stage', () => {\n\n    class Extras implements Cast {\n        prepare(actor: Actor): Actor {\n            return actor;\n        }\n    }\n\n    const stageManager = sinon.createStubInstance(StageManager);\n\n    /**\n     * @test {Stage#actor}\n     * @test {Stage#theActorCalled}\n     */\n    it('provides both the more verbose and more concise way of accessing the actors', () => {\n        const\n            name   = 'Alice',\n            actors = new Extras(),\n            stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n        expect(stage.actor(name)).to.equal(stage.theActorCalled(name));\n    });\n\n    describe('when instantiating actors', () => {\n\n        /** @test {Stage#actor} */\n        it('instantiates a new actor when their name is called for the first time', () => {\n            const\n                name   = 'Alice',\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            sinon.spy(actors, 'prepare');\n\n            const actor = stage.actor(name);\n\n            expect((actors.prepare as any).getCall(0).args[0].name).to.equal(name);\n            expect(actor.name).to.equal('Alice');\n        });\n\n        /** @test {Stage#actor} */\n        it('returns an existing actor if it has already been instantiated before', () => {\n            const\n                name   = 'Alice',\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            sinon.spy(actors, 'prepare');\n\n            const a1 = stage.actor(name);\n            const a2 = stage.actor(name);\n\n            expect((actors.prepare as any).getCall(0).args[0].name).to.equal(name);\n            expect(actors.prepare).to.have.been.calledOnce;\n\n            expect(a1).to.equal(a2);\n        });\n    });\n\n    describe('when referencing a recently retrieved actor', () => {\n\n        /** @test {Stage#actor} */\n        it('retrieves the current actor, if there is any', () => {\n            const\n                name   = 'Alice',\n                stage  = new Stage(new Extras(), stageManager as unknown as StageManager);\n\n            const a1 = stage.actor(name);\n            const a2 = stage.theActorInTheSpotlight();\n\n            expect(a2).to.equal(a1);\n        });\n\n        /**\n         * @test {Stage#theActorInTheSpotlight}\n         * @test {Stage#theActorInTheSpotlight}\n         */\n        it('provides both the more verbose and more concise way of accessing the actors in the spotlight', () => {\n            const\n                name   = 'Alice',\n                stage  = new Stage(new Extras(), stageManager as unknown as StageManager);\n\n            const a1 = stage.actor(name);\n            const a2 = stage.theActorCalled(name);\n            const a3 = stage.theActorInTheSpotlight();\n\n            expect(a1).to.equal(a2);\n            expect(a1).to.equal(a3);\n        });\n\n        /**\n         * @test {Stage#theActorInTheSpotlight}\n         * @test {Stage#theActorInTheSpotlight}\n         */\n        it(`complains if you try to access the actor in the spotlight, but there isn't any yet`, () => {\n            const\n                stage  = new Stage(new Extras(), stageManager as unknown as StageManager);\n\n            expect(\n                () => stage.theActorInTheSpotlight(),\n            ).to.throw(LogicError, `There is no actor in the spotlight yet. Make sure you instantiate one with stage.actor(actorName) before calling this method.`);\n        });\n    });\n\n    describe('when instantiating and dismissing the actors', () => {\n\n        class SomeAbilityThatNeedsDiscarding implements Discardable, Ability {\n            discard(): Promise<void> | void {\n                return Promise.resolve();\n            }\n        }\n\n        class Spies implements Cast {\n            public readonly calls: Actor[] = [];\n\n            prepare(actor: Actor): Actor {\n                this.calls.push(actor);\n\n                sinon.spy(actor, 'dismiss');\n\n                return actor.whoCan(new SomeAbilityThatNeedsDiscarding());\n            }\n        }\n\n        const\n            sceneId = new CorrelationId('example scene'),\n            anotherSceneId = new CorrelationId('another example scene'),\n            scenario = new ScenarioDetails(\n                new Name('Paying with a default card'),\n                new Category('Online Checkout'),\n                new FileSystemLocation(\n                    new Path('payments/checkout.feature'),\n                ),\n            );\n\n        let manager: StageManager;\n\n        beforeEach(() => {\n            manager = new StageManager(Duration.ofMilliseconds(100), new Clock());\n        });\n\n        describe('performing a single scene', () => {\n            it('dismisses actors instantiated after SceneStarts when SceneFinished', async () => {\n                const stage = new Stage(new Spies(), manager);\n\n                stage.announce(new SceneStarts(sceneId, scenario));\n\n                const actor = stage.actor('Bob');\n\n                stage.announce(new SceneFinishes(sceneId, scenario, new ExecutionSuccessful()));\n\n                expect(actor.dismiss).to.have.been.calledOnce;\n\n                stage.announce(new SceneFinished(sceneId, scenario, new ExecutionSuccessful()));\n\n                stage.announce(new TestRunFinishes());\n                stage.announce(new TestRunFinished());\n\n                await stage.waitForNextCue()\n\n                // make sure it's not called again\n                expect(actor.dismiss).to.have.been.calledOnce;\n            });\n\n            it('re-instantiates actors dismissed when the SceneFinished', async () => {\n                const actors = new Spies();\n\n                const stage = new Stage(actors, manager);\n\n                stage.announce(new SceneStarts(sceneId, scenario));\n                stage.actor('Bob');\n                stage.announce(new SceneFinishes(sceneId, scenario, new ExecutionSuccessful()));\n                stage.announce(new SceneFinished(sceneId, scenario, new ExecutionSuccessful()));\n\n                await stage.waitForNextCue();\n\n                stage.announce(new SceneStarts(anotherSceneId, scenario));\n                stage.actor('Bob');\n                stage.announce(new SceneFinishes(anotherSceneId, scenario, new ExecutionSuccessful()));\n                stage.announce(new SceneFinished(anotherSceneId, scenario, new ExecutionSuccessful()));\n\n                await stage.waitForNextCue();\n\n                stage.announce(new TestRunFinishes());\n                stage.announce(new TestRunFinished());\n\n                await stage.waitForNextCue();\n\n                expect(actors.calls).to.have.lengthOf(2);\n            });\n        });\n\n        describe('performing across multiple scenes', () => {\n\n            it('dismisses actors instantiated before SceneStarts when TestRunFinishes', async () => {\n                const stage = new Stage(new Spies(), manager);\n\n                const actor = stage.actor('Bob');\n\n                stage.announce(new SceneStarts(sceneId, scenario));\n                stage.announce(new SceneFinishes(sceneId, scenario, new ExecutionSuccessful()));\n\n                expect(actor.dismiss).to.have.not.been.called;\n\n                stage.announce(new SceneFinished(sceneId, scenario, new ExecutionSuccessful()));\n\n                stage.announce(new TestRunFinishes());\n                stage.announce(new TestRunFinished());\n\n                await stage.waitForNextCue()\n\n                // make sure it's called\n                expect(actor.dismiss).to.have.been.calledOnce;\n            });\n\n            it('retains instances of actors instantiated before the SceneStarts', async () => {\n                const actors = new Spies();\n\n                const stage = new Stage(actors, manager);\n\n                stage.actor('Bob');\n\n                stage.announce(new SceneStarts(sceneId, scenario));\n                stage.actor('Bob');\n                stage.announce(new SceneFinished(sceneId, scenario, new ExecutionSuccessful()));\n\n                await stage.waitForNextCue();\n\n                stage.announce(new SceneStarts(anotherSceneId, scenario));\n                stage.actor('Bob');\n                stage.announce(new SceneFinished(anotherSceneId, scenario, new ExecutionSuccessful()));\n\n                await stage.waitForNextCue();\n\n                stage.announce(new TestRunFinishes());\n                stage.announce(new TestRunFinished());\n\n                await stage.waitForNextCue();\n\n                expect(actors.calls).to.have.lengthOf(1);\n            });\n        });\n    });\n\n    describe('when correlating activities', () => {\n\n        it('assigns sceneIds', () => {\n            const\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            const assigned = stage.assignNewSceneId();\n            const retrieved = stage.currentSceneId();\n\n            expect(assigned).to.equal(retrieved);\n        });\n\n        it('returns a default sceneId when activities are performed outside of a test runner', () => {\n            const\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            const retrieved = stage.currentSceneId();\n\n            expect(retrieved.value).to.equal('unknown');\n        });\n\n        it('assigns activityIds', () => {\n            const\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            const assigned = stage.assignNewActivityId();\n            const retrieved = stage.currentActivityId();\n\n            expect(assigned).to.equal(retrieved);\n        });\n\n        it('complains if an activityId is attempted to be retrieved before is has been assigned', () => {\n            const\n                actors = new Extras(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            expect(() => stage.currentActivityId()).to.throw(LogicError, 'No activity is being performed. Did you call assignNewActivityId before invoking currentActivityId?');\n        });\n    });\n\n    describe('when an error occurs', () => {\n\n        it('complains when instantiated with no Cast', () => {\n            expect(() => {\n                const stage_ = new Stage(undefined, stageManager as unknown as StageManager);\n            }).to.throw(Error, 'Cast should be defined');\n        });\n\n        it('complains when instantiated with no StageManager', () => {\n            expect(() => {\n                const stage_ = new Stage(new Extras(), undefined);\n            }).to.throw(Error, 'StageManager should be defined');\n        });\n\n        /** @test {Stage#actor} */\n        it('complains if the Cast does not provide a way to instantiate a given actor', () => {\n            const\n                name   = 'Alice',\n                actors: Cast = {\n                    prepare: (actor: Actor) => undefined,   // eslint-disable-line unicorn/no-useless-undefined\n                },\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            expect(() => {\n                stage.actor(name);\n            }).to.throw(ConfigurationError, `Instead of a new instance of actor \"${ name }\", Cast returned undefined`);\n        });\n\n        /** @test {Stage#actor} */\n        it('complains if the Cast does not provide a way to prepare a given actor and mentions the type of the Cast, when available', () => {\n            class AwesomeActors implements Cast {\n                prepare(actor: Actor): Actor {\n                    return undefined;\n                }\n            }\n\n            const\n                name   = 'Alice',\n                actors = new AwesomeActors(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            expect(() => {\n                stage.actor(name);\n            }).to.throw(ConfigurationError, `Instead of a new instance of actor \"${ name }\", AwesomeActors returned undefined`);\n        });\n\n        /** @test {Stage#actor} */\n        it('complains if the Cast throws an error during actor instantiation', () => {\n            const\n                name   = 'Alice',\n                actors: Cast = {\n                    prepare: (actor: Actor) => { throw new Error(`I'm not working today`); },\n                },\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            expect(() => {\n                stage.actor(name);\n            }).to.throw(ConfigurationError, `Cast encountered a problem when preparing actor \"${ name }\" for stage`);\n        });\n\n        /** @test {Stage#actor} */\n        it('complains if the Cast throws an error during actor instantiation and mentions the type of the Cast, when available', () => {\n            class MoodyActors implements Cast {\n                prepare(actor: Actor): Actor {\n                    throw new Error(`I'm not working today`);\n                }\n            }\n\n            const\n                name   = 'Alice',\n                actors = new MoodyActors(),\n                stage  = new Stage(actors, stageManager as unknown as StageManager);\n\n            expect(() => {\n                stage.actor(name);\n            }).to.throw(ConfigurationError, `MoodyActors encountered a problem when preparing actor \"${ name }\" for stage`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/stage/Stage.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1298,
    "kind": "test",
    "name": "describe328",
    "testId": 328,
    "memberof": "spec/stage/Stage.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328",
    "access": null,
    "description": "Stage",
    "lineNumber": 13
  },
  {
    "__docId__": 1299,
    "kind": "test",
    "name": "it329",
    "testId": 329,
    "memberof": "spec/stage/Stage.spec.ts~describe328",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.it329",
    "access": null,
    "description": "provides both the more verbose and more concise way of accessing the actors",
    "lineNumber": 47,
    "testTargets": [
      "Stage#actor",
      "Stage#theActorCalled"
    ]
  },
  {
    "__docId__": 1300,
    "kind": "test",
    "name": "describe330",
    "testId": 330,
    "memberof": "spec/stage/Stage.spec.ts~describe328",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe330",
    "access": null,
    "description": "when instantiating actors",
    "lineNumber": 56
  },
  {
    "__docId__": 1301,
    "kind": "test",
    "name": "it331",
    "testId": 331,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe330",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe330.it331",
    "access": null,
    "description": "instantiates a new actor when their name is called for the first time",
    "lineNumber": 59,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 1302,
    "kind": "test",
    "name": "it332",
    "testId": 332,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe330",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe330.it332",
    "access": null,
    "description": "returns an existing actor if it has already been instantiated before",
    "lineNumber": 74,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 1303,
    "kind": "test",
    "name": "describe333",
    "testId": 333,
    "memberof": "spec/stage/Stage.spec.ts~describe328",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe333",
    "access": null,
    "description": "when referencing a recently retrieved actor",
    "lineNumber": 92
  },
  {
    "__docId__": 1304,
    "kind": "test",
    "name": "it334",
    "testId": 334,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe333",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe333.it334",
    "access": null,
    "description": "retrieves the current actor, if there is any",
    "lineNumber": 95,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 1305,
    "kind": "test",
    "name": "it335",
    "testId": 335,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe333",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe333.it335",
    "access": null,
    "description": "provides both the more verbose and more concise way of accessing the actors in the spotlight",
    "lineNumber": 110,
    "testTargets": [
      "Stage#theActorInTheSpotlight",
      "Stage#theActorInTheSpotlight"
    ]
  },
  {
    "__docId__": 1306,
    "kind": "test",
    "name": "it336",
    "testId": 336,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe333",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe333.it336",
    "access": null,
    "lineNumber": 127,
    "testTargets": [
      "Stage#theActorInTheSpotlight",
      "Stage#theActorInTheSpotlight"
    ]
  },
  {
    "__docId__": 1307,
    "kind": "test",
    "name": "describe337",
    "testId": 337,
    "memberof": "spec/stage/Stage.spec.ts~describe328",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe337",
    "access": null,
    "description": "when instantiating and dismissing the actors",
    "lineNumber": 137
  },
  {
    "__docId__": 1308,
    "kind": "test",
    "name": "describe338",
    "testId": 338,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe337.describe338",
    "access": null,
    "description": "performing a single scene",
    "lineNumber": 223
  },
  {
    "__docId__": 1309,
    "kind": "test",
    "name": "it339",
    "testId": 339,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe337.describe338",
    "testDepth": 3,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe337.describe338.it339",
    "access": null,
    "description": "dismisses actors instantiated after SceneStarts when SceneFinished",
    "lineNumber": 224
  },
  {
    "__docId__": 1310,
    "kind": "test",
    "name": "it340",
    "testId": 340,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe337.describe338",
    "testDepth": 3,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe337.describe338.it340",
    "access": null,
    "description": "re-instantiates actors dismissed when the SceneFinished",
    "lineNumber": 246
  },
  {
    "__docId__": 1311,
    "kind": "test",
    "name": "describe341",
    "testId": 341,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe337.describe341",
    "access": null,
    "description": "performing across multiple scenes",
    "lineNumber": 274
  },
  {
    "__docId__": 1312,
    "kind": "test",
    "name": "it342",
    "testId": 342,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe337.describe341",
    "testDepth": 3,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe337.describe341.it342",
    "access": null,
    "description": "dismisses actors instantiated before SceneStarts when TestRunFinishes",
    "lineNumber": 276
  },
  {
    "__docId__": 1313,
    "kind": "test",
    "name": "it343",
    "testId": 343,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe337.describe341",
    "testDepth": 3,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe337.describe341.it343",
    "access": null,
    "description": "retains instances of actors instantiated before the SceneStarts",
    "lineNumber": 297
  },
  {
    "__docId__": 1314,
    "kind": "test",
    "name": "describe344",
    "testId": 344,
    "memberof": "spec/stage/Stage.spec.ts~describe328",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe344",
    "access": null,
    "description": "when correlating activities",
    "lineNumber": 326
  },
  {
    "__docId__": 1315,
    "kind": "test",
    "name": "it345",
    "testId": 345,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe344",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe344.it345",
    "access": null,
    "description": "assigns sceneIds",
    "lineNumber": 328
  },
  {
    "__docId__": 1316,
    "kind": "test",
    "name": "it346",
    "testId": 346,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe344",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe344.it346",
    "access": null,
    "description": "returns a default sceneId when activities are performed outside of a test runner",
    "lineNumber": 339
  },
  {
    "__docId__": 1317,
    "kind": "test",
    "name": "it347",
    "testId": 347,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe344",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe344.it347",
    "access": null,
    "description": "assigns activityIds",
    "lineNumber": 349
  },
  {
    "__docId__": 1318,
    "kind": "test",
    "name": "it348",
    "testId": 348,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe344",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe344.it348",
    "access": null,
    "description": "complains if an activityId is attempted to be retrieved before is has been assigned",
    "lineNumber": 360
  },
  {
    "__docId__": 1319,
    "kind": "test",
    "name": "describe349",
    "testId": 349,
    "memberof": "spec/stage/Stage.spec.ts~describe328",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe349",
    "access": null,
    "description": "when an error occurs",
    "lineNumber": 369
  },
  {
    "__docId__": 1320,
    "kind": "test",
    "name": "it350",
    "testId": 350,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe349",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe349.it350",
    "access": null,
    "description": "complains when instantiated with no Cast",
    "lineNumber": 371
  },
  {
    "__docId__": 1321,
    "kind": "test",
    "name": "it351",
    "testId": 351,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe349",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe349.it351",
    "access": null,
    "description": "complains when instantiated with no StageManager",
    "lineNumber": 377
  },
  {
    "__docId__": 1322,
    "kind": "test",
    "name": "it352",
    "testId": 352,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe349",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe349.it352",
    "access": null,
    "description": "complains if the Cast does not provide a way to instantiate a given actor",
    "lineNumber": 384,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 1323,
    "kind": "test",
    "name": "it353",
    "testId": 353,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe349",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe349.it353",
    "access": null,
    "description": "complains if the Cast does not provide a way to prepare a given actor and mentions the type of the Cast, when available",
    "lineNumber": 398,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 1324,
    "kind": "test",
    "name": "it354",
    "testId": 354,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe349",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe349.it354",
    "access": null,
    "description": "complains if the Cast throws an error during actor instantiation",
    "lineNumber": 436,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 1325,
    "kind": "test",
    "name": "it355",
    "testId": 355,
    "memberof": "spec/stage/Stage.spec.ts~describe328.describe349",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/Stage.spec.ts~describe328.describe349.it355",
    "access": null,
    "description": "complains if the Cast throws an error during actor instantiation and mentions the type of the Cast, when available",
    "lineNumber": 450,
    "testTargets": [
      "Stage#actor"
    ]
  },
  {
    "__docId__": 1326,
    "kind": "testFile",
    "name": "spec/stage/StageManager.spec.ts",
    "content": "import 'mocha';\n\nimport { AsyncOperationAttempted, AsyncOperationCompleted, AsyncOperationFailed, DomainEvent } from '../../src/events';\nimport { CorrelationId, Description, Duration } from '../../src/model';\nimport { Clock, StageManager } from '../../src/stage';\nimport { expect } from '../expect';\nimport { Recorder } from '../Recorder';\n\ndescribe('StageManager', () => {\n\n    class TestEvent extends DomainEvent {\n        constructor() {\n            super();\n        }\n    }\n\n    const testEvent = new TestEvent();\n\n    /** @test {StageManager} */\n    it('broadcasts the domain event it receives to all the registered subscribers', () => {\n\n        const stageManager = new StageManager(Duration.ofMilliseconds(250), new Clock());\n        const crewMember1 = new Recorder();\n        const crewMember2 = new Recorder();\n\n        stageManager.register(crewMember1, crewMember2);\n\n        stageManager.notifyOf(testEvent);\n\n        expect(crewMember1.events).to.have.lengthOf(1);\n        expect(crewMember1.events[0]).to.be.instanceOf(TestEvent);\n        expect(crewMember2.events).to.have.lengthOf(1);\n        expect(crewMember2.events[0]).to.be.instanceOf(TestEvent);\n    });\n\n    /**\n     * @test {StageManager}\n     * @test {AsyncOperationAttempted}\n     * @test {AsyncOperationCompleted}\n     */\n    it('keeps track of the work in progress', () => {\n\n        const stageManager = new StageManager(Duration.ofMilliseconds(250), new Clock());\n\n        const id = CorrelationId.create();\n\n        stageManager.notifyOf(new AsyncOperationAttempted(\n            new Description('Saving a file...'),\n            id,\n        ));\n        stageManager.notifyOf(new AsyncOperationCompleted(\n            new Description('File saved'),\n            id,\n        ));\n\n        return expect(stageManager.waitForNextCue()).to.be.fulfilled;\n    });\n\n    /**\n     * @test {StageManager}\n     * @test {AsyncOperationAttempted}\n     */\n    it('provides details should the work in progress fail to complete', () => {\n\n        const timeout       = Duration.ofMilliseconds(50);\n        const stageManager = new StageManager(timeout, new Clock());\n\n        stageManager.notifyOf(new AsyncOperationAttempted(\n            new Description('[Service 1] Starting...'),\n            CorrelationId.create(),\n        ));\n\n        stageManager.notifyOf(new AsyncOperationAttempted(\n            new Description('[Service 2] Starting...'),\n            CorrelationId.create(),\n        ));\n\n        return expect(stageManager.waitForNextCue()).to.be.rejected.then(error => {\n            const lines = error.message.split('\\n');\n\n            expect(lines, `message: \\n${ error.message }`).to.have.lengthOf(3);\n            expect(lines[0]).to.equal('2 async operations have failed to complete within a 50ms cue timeout:');\n            expect(lines[1], error.message).to.match(/^\\d+ms.*?- \\[Service 1] Starting...$/);\n            expect(lines[2], error.message).to.match(/^\\d+ms.*?- \\[Service 2] Starting...$/);\n        });\n    });\n\n    /**\n     * @test {StageManager}\n     * @test {AsyncOperationAttempted}\n     * @test {AsyncOperationFailed}\n     */\n    it('provides details should the work in progress fail with an error', () => {\n\n        const timeout       = Duration.ofMilliseconds(100);\n        const stageManager  = new StageManager(timeout, new Clock());\n        const correlationId = CorrelationId.create();\n\n        stageManager.notifyOf(new AsyncOperationAttempted(\n            new Description('[Service 1] Starting...'),\n            correlationId,\n        ));\n\n        stageManager.notifyOf(new AsyncOperationFailed(\n            new Error('Something happened'),\n            correlationId,\n        ));\n\n        return expect(stageManager.waitForNextCue()).to.be.rejected.then(error => {\n            const lines = error.message.split('\\n');\n\n            expect(lines[0]).to.equal('1 async operation has failed to complete:');\n            expect(lines[1]).to.equal('[Service 1] Starting... - Error: Something happened');\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/stage/StageManager.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1327,
    "kind": "test",
    "name": "describe356",
    "testId": 356,
    "memberof": "spec/stage/StageManager.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/StageManager.spec.ts~describe356",
    "access": null,
    "description": "StageManager",
    "lineNumber": 9
  },
  {
    "__docId__": 1328,
    "kind": "test",
    "name": "it357",
    "testId": 357,
    "memberof": "spec/stage/StageManager.spec.ts~describe356",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/StageManager.spec.ts~describe356.it357",
    "access": null,
    "description": "broadcasts the domain event it receives to all the registered subscribers",
    "lineNumber": 27,
    "testTargets": [
      "StageManager"
    ]
  },
  {
    "__docId__": 1329,
    "kind": "test",
    "name": "it358",
    "testId": 358,
    "memberof": "spec/stage/StageManager.spec.ts~describe356",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/StageManager.spec.ts~describe356.it358",
    "access": null,
    "description": "keeps track of the work in progress",
    "lineNumber": 48,
    "testTargets": [
      "StageManager",
      "AsyncOperationAttempted",
      "AsyncOperationCompleted"
    ]
  },
  {
    "__docId__": 1330,
    "kind": "test",
    "name": "it359",
    "testId": 359,
    "memberof": "spec/stage/StageManager.spec.ts~describe356",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/StageManager.spec.ts~describe356.it359",
    "access": null,
    "description": "provides details should the work in progress fail to complete",
    "lineNumber": 70,
    "testTargets": [
      "StageManager",
      "AsyncOperationAttempted"
    ]
  },
  {
    "__docId__": 1331,
    "kind": "test",
    "name": "it360",
    "testId": 360,
    "memberof": "spec/stage/StageManager.spec.ts~describe356",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/StageManager.spec.ts~describe356.it360",
    "access": null,
    "description": "provides details should the work in progress fail with an error",
    "lineNumber": 100,
    "testTargets": [
      "StageManager",
      "AsyncOperationAttempted",
      "AsyncOperationFailed"
    ]
  },
  {
    "__docId__": 1332,
    "kind": "testFile",
    "name": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts",
    "content": "import 'mocha';\n\nimport * as sinon from 'sinon';\n\nimport { Actor, StageCrewMember } from '../../../../src';\nimport { ArtifactArchived, ArtifactGenerated, DomainEvent } from '../../../../src/events';\nimport { FileSystem, Path } from '../../../../src/io';\nimport { CorrelationId, Duration, JSONData, Name, TestReport } from '../../../../src/model';\nimport { ArtifactArchiver, Cast, Clock, Stage, StageManager } from '../../../../src/stage';\nimport { expect } from '../../../expect';\nimport { photo } from '../samples';\n\n/** @test {ArtifactArchiver} */\ndescribe('ArtifactArchiver', () => {\n\n    const\n        json = { key: 'value' },\n        jsonValueShortHash = '64cdd772d3',\n        photoShortHash = '6808b2e9fe',\n        sceneId = new CorrelationId('a-scene');\n\n    let stage:          Stage,\n        fs:             sinon.SinonStubbedInstance<FileSystem>,\n        archiver:       StageCrewMember;\n\n    class Extras implements Cast {\n        prepare(actor: Actor): Actor {\n            return actor;\n        }\n    }\n\n    beforeEach(() => {\n        fs = sinon.createStubInstance(FileSystem);\n        fs.store.callsFake((path: Path, contents: any) => Promise.resolve(path));\n    });\n\n    describe('stores the artifacts generated by other stage crew members', () => {\n\n        beforeEach(() => {\n            stage = new Stage(new Extras(), new StageManager(Duration.ofMilliseconds(250), new Clock()));\n\n            archiver = new ArtifactArchiver(fs as any, stage);\n            stage.assign(archiver);\n        });\n\n        const\n            jsonArtifactName = new Name('Scenario Name'),\n            expectedJsonFileName = 'scenario-name',\n            pngArtifactName  = new Name('PNG Artifact name'),\n            expectedPngFileName = 'png-artifact-name';\n\n        /**\n         * @test {ArtifactArchiver}\n         * @test {ArtifactGenerated}\n         */\n        it('notifies the StageManager when an artifact is saved so that the promise of a stage cue can be fulfilled', () => {\n            stage.announce(new ArtifactGenerated(\n                sceneId,\n                jsonArtifactName,\n                JSONData.fromJSON(json),\n            ));\n\n            return expect(stage.waitForNextCue()).to.be.fulfilled;\n        });\n\n        /**\n         * @test {ArtifactArchiver}\n         * @test {ArtifactGenerated}\n         */\n        it('notifies the StageManager when an artifact cannot be saved so that the promise of a stage cue can be rejected', () => {\n            fs.store.returns(Promise.reject(new Error('Something happened')));\n\n            stage.announce(new ArtifactGenerated(\n                sceneId,\n                pngArtifactName,\n                photo,\n            ));\n\n            return expect(stage.waitForNextCue()).to.be.rejected;\n        });\n\n        /**\n         * @test {ArtifactArchiver}\n         * @test {ArtifactGenerated}\n         */\n        it('correctly saves the test report to a unique file', () => {\n            stage.announce(new ArtifactGenerated(\n                sceneId,\n                jsonArtifactName,\n                TestReport.fromJSON(json),\n            ));\n\n            return stage.waitForNextCue().then(() => {\n                expect(fs.store).to.have.been.calledWith(\n                    new Path(`scenario-${ expectedJsonFileName }-${ jsonValueShortHash }.json`),\n                    JSON.stringify(json),\n                );\n            });\n        });\n\n        /**\n         * @test {ArtifactArchiver}\n         * @test {ArtifactGenerated}\n         */\n        it('correctly saves PNG content to a file', () => {\n            stage.announce(new ArtifactGenerated(\n                sceneId,\n                pngArtifactName,\n                photo,\n            ));\n\n            return stage.waitForNextCue().then(() => {\n                expect(fs.store).to.have.been.calledWith(\n                    new Path(`photo-${ expectedPngFileName }-${ photoShortHash }.png`),\n                    photo.base64EncodedValue,\n                    'base64',\n                );\n            });\n        });\n\n        /**\n         * @test {ArtifactArchiver}\n         * @test {ArtifactGenerated}\n         *\n         * @see https://github.com/serenity-js/serenity-js/issues/634\n         */\n        it(`ensures that the generate file name doesn't contain special characters`, () => {\n            const emittedEventName = 'linux-chrome-87-0.4280.88-jasmine-navigates-to-https://www.bounteous.com/#sr=g&m=o&cp=or&ct=-tmc&st=(opu%20qspwjefe)&ts=1402322447';\n            const expectedFileName = `photo-linux-chrome-87-0.4280.88-jasmine-navigates-to-https-www.bount-${ photoShortHash }.png`;\n\n            stage.announce(new ArtifactGenerated(\n                sceneId,\n                new Name(emittedEventName),\n                photo,\n            ));\n\n            return stage.waitForNextCue().then(() => {\n                expect(fs.store).to.have.been.calledWith(\n                    new Path(expectedFileName),\n                    photo.base64EncodedValue,\n                    'base64',\n                );\n            });\n        });\n    });\n\n    describe(`when it encounters events it's not interested in`, () => {\n\n        class SomeEvent extends DomainEvent {\n            constructor() {\n                super();\n            }\n        }\n\n        const someEvent = new SomeEvent();\n\n        /**\n         * @test {ArtifactArchiver}\n         */\n        it('ignores them', () => {\n            const stageManager = sinon.createStubInstance(StageManager);\n\n            fs           = sinon.createStubInstance(FileSystem);\n            stage        = new Stage(new Extras(), stageManager as unknown as StageManager);\n\n            archiver     = new ArtifactArchiver(fs as any, stage);\n            stage.assign(archiver);\n\n            archiver.notifyOf(\n                someEvent,\n            );\n\n            expect(stageManager.notifyOf).to.not.have.been.called;\n            expect(fs.store).to.not.have.been.called;\n        });\n    });\n\n    /**\n     * @test {ArtifactArchiver}\n     * @test {ArtifactGenerated}\n     * @test {ArtifactArchived}\n     */\n    it('notifies the StageManager when the artifact is correctly archived', () => {\n\n        const stageManager = new StageManager(Duration.ofMilliseconds(250), new Clock());\n\n        stage = new Stage(new Extras(), stageManager);\n\n        archiver = new ArtifactArchiver(fs as any, stage);\n        stage.assign(archiver);\n\n        const notifyOf = sinon.spy(stageManager, 'notifyOf');\n\n        stageManager.notifyOf(new ArtifactGenerated(\n            sceneId,\n            new Name('Some Report Name'),\n            TestReport.fromJSON(json),\n        ));\n\n        return expect(stageManager.waitForNextCue()).to.be.fulfilled.then(() => {\n\n            const archived: ArtifactArchived = notifyOf.getCall(2).lastArg;\n\n            expect(archived).to.be.instanceOf(ArtifactArchived);\n            expect(archived.sceneId).to.equal(sceneId);\n            expect(archived.name).to.equal(new Name('Some Report Name'));\n            expect(archived.type).to.equal(TestReport);\n            expect(archived.path).to.equal(new Path(`scenario-some-report-name-${ jsonValueShortHash }.json`));\n        });\n    });\n\n    describe('when instantiated using a factory method', () => {\n        it('joins the path segments provided so that the developer doesn\\'t need to worry about cross-OS compatibility of the path', () => {\n            archiver = ArtifactArchiver.storingArtifactsAt(process.cwd(), 'target', 'site/serenity');\n\n            expect((archiver as any).fileSystem.root).to.equal(new Path(process.cwd()).join(new Path('target/site/serenity')));\n        });\n\n        it('complains if the destination is not provided', () => {\n            expect(() => ArtifactArchiver.storingArtifactsAt()).to.throw(Error, `Path to destination directory should have a property \"length\" that is greater than 0`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1333,
    "kind": "test",
    "name": "describe361",
    "testId": 361,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361",
    "access": null,
    "description": "ArtifactArchiver",
    "lineNumber": 14,
    "testTargets": [
      "ArtifactArchiver"
    ]
  },
  {
    "__docId__": 1334,
    "kind": "test",
    "name": "describe362",
    "testId": 362,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362",
    "access": null,
    "description": "stores the artifacts generated by other stage crew members",
    "lineNumber": 57
  },
  {
    "__docId__": 1335,
    "kind": "test",
    "name": "it363",
    "testId": 363,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362.it363",
    "access": null,
    "description": "notifies the StageManager when an artifact is saved so that the promise of a stage cue can be fulfilled",
    "lineNumber": 76,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated"
    ]
  },
  {
    "__docId__": 1336,
    "kind": "test",
    "name": "it364",
    "testId": 364,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362.it364",
    "access": null,
    "description": "notifies the StageManager when an artifact cannot be saved so that the promise of a stage cue can be rejected",
    "lineNumber": 90,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated"
    ]
  },
  {
    "__docId__": 1337,
    "kind": "test",
    "name": "it365",
    "testId": 365,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362.it365",
    "access": null,
    "description": "correctly saves the test report to a unique file",
    "lineNumber": 106,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated"
    ]
  },
  {
    "__docId__": 1338,
    "kind": "test",
    "name": "it366",
    "testId": 366,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362.it366",
    "access": null,
    "description": "correctly saves PNG content to a file",
    "lineNumber": 125,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated"
    ]
  },
  {
    "__docId__": 1339,
    "kind": "test",
    "name": "it367",
    "testId": 367,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe362.it367",
    "access": null,
    "see": [
      "https://github.com/serenity-js/serenity-js/issues/634"
    ],
    "lineNumber": 147,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated"
    ]
  },
  {
    "__docId__": 1340,
    "kind": "test",
    "name": "describe368",
    "testId": 368,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe368",
    "access": null,
    "lineNumber": 167
  },
  {
    "__docId__": 1341,
    "kind": "test",
    "name": "it369",
    "testId": 369,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe368",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe368.it369",
    "access": null,
    "description": "ignores them",
    "lineNumber": 187,
    "testTargets": [
      "ArtifactArchiver"
    ]
  },
  {
    "__docId__": 1342,
    "kind": "test",
    "name": "it370",
    "testId": 370,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.it370",
    "access": null,
    "description": "notifies the StageManager when the artifact is correctly archived",
    "lineNumber": 210,
    "testTargets": [
      "ArtifactArchiver",
      "ArtifactGenerated",
      "ArtifactArchived"
    ]
  },
  {
    "__docId__": 1343,
    "kind": "test",
    "name": "describe371",
    "testId": 371,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe371",
    "access": null,
    "description": "when instantiated using a factory method",
    "lineNumber": 239
  },
  {
    "__docId__": 1344,
    "kind": "test",
    "name": "it372",
    "testId": 372,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe371",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe371.it372",
    "access": null,
    "description": "joins the path segments provided so that the developer doesn't need to worry about cross-OS compatibility of the path",
    "lineNumber": 240
  },
  {
    "__docId__": 1345,
    "kind": "test",
    "name": "it373",
    "testId": 373,
    "memberof": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe371",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/artifact-archiver/ArtifactArchiver.spec.ts~describe361.describe371.it373",
    "access": null,
    "description": "complains if the destination is not provided",
    "lineNumber": 246
  },
  {
    "__docId__": 1346,
    "kind": "testFile",
    "name": "spec/stage/crew/stream-reporter/StreamReporter.spec.ts",
    "content": "import 'mocha';\n\nimport * as sinon from 'sinon';\nimport { Writable } from 'stream';\n\nimport { Actor, Cast, Clock, Duration, Stage, StageManager, StreamReporter } from '../../../../src';\nimport { TestRunFinished } from '../../../../src/events';\nimport { Timestamp } from '../../../../src/model';\nimport { expect } from '../../../expect';\n\n/** @test {StreamReporter} */\ndescribe('StreamReporter', () => {\n\n    let stage:          Stage,\n        output:         sinon.SinonStubbedInstance<Writable>;\n\n    class Extras implements Cast {\n        prepare(actor: Actor): Actor {\n            return actor;\n        }\n    }\n\n    beforeEach(() => {\n        stage = new Stage(\n            new Extras(),\n            new StageManager(Duration.ofSeconds(2), new Clock()),\n        );\n\n        output = sinon.createStubInstance(Writable);\n    });\n\n    /** @test {StreamReporter} */\n    it('prints the events it receives to output stream', () => {\n        const reporter = new StreamReporter(output as unknown as Writable, stage);\n        stage.assign(reporter);\n\n        stage.announce(new TestRunFinished(Timestamp.fromJSON('2021-01-13T18:00:00Z')));\n\n        expect(output.write).to.have.been.calledWith(\n            `{\"type\":\"TestRunFinished\",\"event\":\"2021-01-13T18:00:00.000Z\"}\\n`\n        );\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/core/spec/stage/crew/stream-reporter/StreamReporter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1347,
    "kind": "test",
    "name": "describe374",
    "testId": 374,
    "memberof": "spec/stage/crew/stream-reporter/StreamReporter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/stream-reporter/StreamReporter.spec.ts~describe374",
    "access": null,
    "description": "StreamReporter",
    "lineNumber": 12,
    "testTargets": [
      "StreamReporter"
    ]
  },
  {
    "__docId__": 1348,
    "kind": "test",
    "name": "it375",
    "testId": 375,
    "memberof": "spec/stage/crew/stream-reporter/StreamReporter.spec.ts~describe374",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/stream-reporter/StreamReporter.spec.ts~describe374.it375",
    "access": null,
    "description": "prints the events it receives to output stream",
    "lineNumber": 53,
    "testTargets": [
      "StreamReporter"
    ]
  }
]