[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "AxiosError",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L85",
    "longname": "AxiosError",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "AxiosInstance",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L130",
    "longname": "AxiosInstance",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "AxiosRequestConfig",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L44",
    "longname": "AxiosRequestConfig",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "AxiosPromise",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L94",
    "longname": "AxiosPromise",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "AxiosResponse",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L76",
    "longname": "AxiosResponse",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "longname": "Proxy",
    "memberof": "src/.imports-from-mdn.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "ProtractorConfig",
    "externalLink": "https://github.com/angular/protractor/blob/master/lib/config.ts",
    "longname": "protractor~ProtractorConfig",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "Runner",
    "externalLink": "https://github.com/angular/protractor/blob/master/lib/runner.ts",
    "longname": "protractor~Runner",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "ElementArrayFinder",
    "externalLink": "https://www.protractortest.org/#/api?view=ElementArrayFinder",
    "longname": "ElementArrayFinder",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "ElementFinder",
    "externalLink": "https://www.protractortest.org/#/api?view=ElementFinder",
    "longname": "ElementFinder",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "ProtractorBrowser",
    "externalLink": "https://www.protractortest.org/#/api?view=ProtractorBrowser",
    "longname": "ProtractorBrowser",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "Actions",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/input_exports_Actions.html",
    "longname": "selenium-webdriver~Actions",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "AlertPromise",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_AlertPromise.html",
    "longname": "selenium-webdriver~AlertPromise",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "By",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/by_exports_By.html",
    "longname": "selenium-webdriver~By",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "Capabilities",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_Capabilities.html",
    "longname": "selenium-webdriver~Capabilities",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "Key",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_Key.html",
    "longname": "selenium-webdriver~Key",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Navigation",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_Navigation.html",
    "longname": "selenium-webdriver~Navigation",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "Options",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/ie_exports_Options.html",
    "longname": "selenium-webdriver~Options",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "WebElement",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_WebElement.html",
    "longname": "selenium-webdriver~WebElement",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "Ensure",
    "externalLink": "/modules/assertions/class/src/Ensure.ts~Ensure.html",
    "longname": "@serenity-js/assertions~Ensure",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "and",
    "externalLink": "/modules/assertions/function/index.html#static-function-and",
    "longname": "@serenity-js/assertions/lib/expectations~and",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "contain",
    "externalLink": "/modules/assertions/function/index.html#static-function-contain",
    "longname": "@serenity-js/assertions/lib/expectations~contain",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "containAtLeastOneItemThat",
    "externalLink": "/modules/assertions/function/index.html#static-function-containAtLeastOneItemThat",
    "longname": "@serenity-js/assertions/lib/expectations~containAtLeastOneItemThat",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "containItemsWhereEachItem",
    "externalLink": "/modules/assertions/function/index.html#static-function-containItemsWhereEachItem",
    "longname": "@serenity-js/assertions/lib/expectations~containItemsWhereEachItem",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "endsWith",
    "externalLink": "/modules/assertions/function/index.html#static-function-endsWith",
    "longname": "@serenity-js/assertions/lib/expectations~endsWith",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "equals",
    "externalLink": "/modules/assertions/function/index.html#static-function-equals",
    "longname": "@serenity-js/assertions/lib/expectations~equals",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "includes",
    "externalLink": "/modules/assertions/function/index.html#static-function-includes",
    "longname": "@serenity-js/assertions/lib/expectations~includes",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "isAfter",
    "externalLink": "/modules/assertions/function/index.html#static-function-isAfter",
    "longname": "@serenity-js/assertions/lib/expectations~isAfter",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "isBefore",
    "externalLink": "/modules/assertions/function/index.html#static-function-isBefore",
    "longname": "@serenity-js/assertions/lib/expectations~isBefore",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "isFalse",
    "externalLink": "/modules/assertions/function/index.html#static-function-isFalse",
    "longname": "@serenity-js/assertions/lib/expectations~isFalse",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "isGreaterThan",
    "externalLink": "/modules/assertions/function/index.html#static-function-isGreaterThan",
    "longname": "@serenity-js/assertions/lib/expectations~isGreaterThan",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "isLessThan",
    "externalLink": "/modules/assertions/function/index.html#static-function-isLessThan",
    "longname": "@serenity-js/assertions/lib/expectations~isLessThan",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "isTrue",
    "externalLink": "/modules/assertions/function/index.html#static-function-isTrue",
    "longname": "@serenity-js/assertions/lib/expectations~isTrue",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "matches",
    "externalLink": "/modules/assertions/function/index.html#static-function-matches",
    "longname": "@serenity-js/assertions/lib/expectations~matches",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "not",
    "externalLink": "/modules/assertions/function/index.html#static-function-not",
    "longname": "@serenity-js/assertions/lib/expectations~not",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "or",
    "externalLink": "/modules/assertions/function/index.html#static-function-or",
    "longname": "@serenity-js/assertions/lib/expectations~or",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "property",
    "externalLink": "/modules/assertions/function/index.html#static-function-property",
    "longname": "@serenity-js/assertions/lib/expectations~property",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "startsWith",
    "externalLink": "/modules/assertions/function/index.html#static-function-startsWith",
    "longname": "@serenity-js/assertions/lib/expectations~startsWith",
    "memberof": "src/.imports-from-serenity-js-assertions.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "ConsoleReporter",
    "externalLink": "/modules/console/class/src/stage/crew/console-reporter/ConsoleReporter.ts~ConsoleReporter.html",
    "longname": "@serenity-js/console-reporter/lib/stage/crew/console-reporter~ConsoleReporter",
    "memberof": "src/.imports-from-serenity-js-console-reporter.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "Printer",
    "externalLink": "/modules/console/class/src/stage/crew/console-reporter/Printer.ts~Printer.html",
    "longname": "@serenity-js/console-reporter/lib/stage/crew/console-reporter~Printer",
    "memberof": "src/.imports-from-serenity-js-console-reporter.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "TerminalTheme",
    "externalLink": "/modules/console/class/src/stage/crew/console-reporter/themes/TerminalTheme.ts~TerminalTheme.html",
    "longname": "@serenity-js/console-reporter/lib/stage/crew/console-reporter/themes~TerminalTheme",
    "memberof": "src/.imports-from-serenity-js-console-reporter.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "ThemeForColourTerminals",
    "externalLink": "/modules/console/class/src/stage/crew/console-reporter/themes/ThemeForColourTerminals.ts~ThemeForColourTerminals.html",
    "longname": "@serenity-js/console-reporter/lib/stage/crew/console-reporter/themes~ThemeForColourTerminals",
    "memberof": "src/.imports-from-serenity-js-console-reporter.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "name": "ThemeForDarkTerminals",
    "externalLink": "/modules/console/class/src/stage/crew/console-reporter/themes/ThemeForDarkTerminals.ts~ThemeForDarkTerminals.html",
    "longname": "@serenity-js/console-reporter/lib/stage/crew/console-reporter/themes~ThemeForDarkTerminals",
    "memberof": "src/.imports-from-serenity-js-console-reporter.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "ThemeForLightTerminals",
    "externalLink": "/modules/console/class/src/stage/crew/console-reporter/themes/ThemeForLightTerminals.ts~ThemeForLightTerminals.html",
    "longname": "@serenity-js/console-reporter/lib/stage/crew/console-reporter/themes~ThemeForLightTerminals",
    "memberof": "src/.imports-from-serenity-js-console-reporter.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "ThemeForMonochromaticTerminals",
    "externalLink": "/modules/console/class/src/stage/crew/console-reporter/themes/ThemeForMonochromaticTerminals.ts~ThemeForMonochromaticTerminals.html",
    "longname": "@serenity-js/console-reporter/lib/stage/crew/console-reporter/themes~ThemeForMonochromaticTerminals",
    "memberof": "src/.imports-from-serenity-js-console-reporter.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 52,
    "kind": "external",
    "name": "Serenity",
    "externalLink": "/modules/core/class/src/Serenity.ts~Serenity.html",
    "longname": "@serenity-js/core~Serenity",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 53,
    "kind": "external",
    "name": "SerenityConfig",
    "externalLink": "/modules/core/class/src/SerenityConfig.ts~SerenityConfig.html",
    "longname": "@serenity-js/core~SerenityConfig",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 54,
    "kind": "external",
    "name": "AssertionError",
    "externalLink": "/modules/core/class/src/errors/AssertionError.ts~AssertionError.html",
    "longname": "@serenity-js/core/lib/errors~AssertionError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 55,
    "kind": "external",
    "name": "ConfigurationError",
    "externalLink": "/modules/core/class/src/errors/ConfigurationError.ts~ConfigurationError.html",
    "longname": "@serenity-js/core/lib/errors~ConfigurationError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 56,
    "kind": "external",
    "name": "ImplementationPendingError",
    "externalLink": "/modules/core/class/src/errors/ImplementationPendingError.ts~ImplementationPendingError.html",
    "longname": "@serenity-js/core/lib/errors~ImplementationPendingError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 57,
    "kind": "external",
    "name": "LogicError",
    "externalLink": "/modules/core/class/src/errors/LogicError.ts~LogicError.html",
    "longname": "@serenity-js/core/lib/errors~LogicError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 58,
    "kind": "external",
    "name": "RuntimeError",
    "externalLink": "/modules/core/class/src/errors/RuntimeError.ts~RuntimeError.html",
    "longname": "@serenity-js/core/lib/errors~RuntimeError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 59,
    "kind": "external",
    "name": "TestCompromisedError",
    "externalLink": "/modules/core/class/src/errors/TestCompromisedError.ts~TestCompromisedError.html",
    "longname": "@serenity-js/core/lib/errors~TestCompromisedError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "UnknownError",
    "externalLink": "/modules/core/class/src/errors/UnknownError.ts~UnknownError.html",
    "longname": "@serenity-js/core/lib/errors~UnknownError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "ActivityFinished",
    "externalLink": "/modules/core/class/src/events/ActivityFinished.ts~ActivityFinished.html",
    "longname": "@serenity-js/core/lib/events~ActivityFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "ActivityRelatedArtifactArchived",
    "externalLink": "/modules/core/class/src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived.html",
    "longname": "@serenity-js/core/lib/events~ActivityRelatedArtifactArchived",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "ActivityRelatedArtifactGenerated",
    "externalLink": "/modules/core/class/src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated.html",
    "longname": "@serenity-js/core/lib/events~ActivityRelatedArtifactGenerated",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "ActivityStarts",
    "externalLink": "/modules/core/class/src/events/ActivityStarts.ts~ActivityStarts.html",
    "longname": "@serenity-js/core/lib/events~ActivityStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "ArtifactArchived",
    "externalLink": "/modules/core/class/src/events/ArtifactArchived.ts~ArtifactArchived.html",
    "longname": "@serenity-js/core/lib/events~ArtifactArchived",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "name": "ArtifactGenerated",
    "externalLink": "/modules/core/class/src/events/ArtifactGenerated.ts~ArtifactGenerated.html",
    "longname": "@serenity-js/core/lib/events~ArtifactGenerated",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "AsyncOperationAttempted",
    "externalLink": "/modules/core/class/src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationAttempted",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "AsyncOperationCompleted",
    "externalLink": "/modules/core/class/src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationCompleted",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "AsyncOperationFailed",
    "externalLink": "/modules/core/class/src/events/AsyncOperationFailed.ts~AsyncOperationFailed.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationFailed",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "BusinessRuleDetected",
    "externalLink": "/modules/core/class/src/events/BusinessRuleDetected.ts~BusinessRuleDetected.html",
    "longname": "@serenity-js/core/lib/events~BusinessRuleDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "DomainEvent",
    "externalLink": "/modules/core/class/src/events/DomainEvent.ts~DomainEvent.html",
    "longname": "@serenity-js/core/lib/events~DomainEvent",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "FeatureNarrativeDetected",
    "externalLink": "/modules/core/class/src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected.html",
    "longname": "@serenity-js/core/lib/events~FeatureNarrativeDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "InteractionFinished",
    "externalLink": "/modules/core/class/src/events/InteractionFinished.ts~InteractionFinished.html",
    "longname": "@serenity-js/core/lib/events~InteractionFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "InteractionStarts",
    "externalLink": "/modules/core/class/src/events/InteractionStarts.ts~InteractionStarts.html",
    "longname": "@serenity-js/core/lib/events~InteractionStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "name": "RetryableSceneDetected",
    "externalLink": "/modules/core/class/src/events/RetryableSceneDetected.ts~RetryableSceneDetected.html",
    "longname": "@serenity-js/core/lib/events~RetryableSceneDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "SceneBackgroundDetected",
    "externalLink": "/modules/core/class/src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneBackgroundDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "SceneDescriptionDetected",
    "externalLink": "/modules/core/class/src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneDescriptionDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "name": "SceneFinished",
    "externalLink": "/modules/core/class/src/events/SceneFinished.ts~SceneFinished.html",
    "longname": "@serenity-js/core/lib/events~SceneFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "SceneFinishes",
    "externalLink": "/modules/core/class/src/events/SceneFinishes.ts~SceneFinishes.html",
    "longname": "@serenity-js/core/lib/events~SceneFinishes",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "name": "SceneParametersDetected",
    "externalLink": "/modules/core/class/src/events/SceneParametersDetected.ts~SceneParametersDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneParametersDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "SceneSequenceDetected",
    "externalLink": "/modules/core/class/src/events/SceneSequenceDetected.ts~SceneSequenceDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneSequenceDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "SceneStarts",
    "externalLink": "/modules/core/class/src/events/SceneStarts.ts~SceneStarts.html",
    "longname": "@serenity-js/core/lib/events~SceneStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "SceneTagged",
    "externalLink": "/modules/core/class/src/events/SceneTagged.ts~SceneTagged.html",
    "longname": "@serenity-js/core/lib/events~SceneTagged",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "SceneTemplateDetected",
    "externalLink": "/modules/core/class/src/events/SceneTemplateDetected.ts~SceneTemplateDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneTemplateDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "TaskFinished",
    "externalLink": "/modules/core/class/src/events/TaskFinished.ts~TaskFinished.html",
    "longname": "@serenity-js/core/lib/events~TaskFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "TaskStarts",
    "externalLink": "/modules/core/class/src/events/TaskStarts.ts~TaskStarts.html",
    "longname": "@serenity-js/core/lib/events~TaskStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "TestRunFinished",
    "externalLink": "/modules/core/class/src/events/TestRunFinished.ts~TestRunFinished.html",
    "longname": "@serenity-js/core/lib/events~TestRunFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "TestRunFinishes",
    "externalLink": "/modules/core/class/src/events/TestRunFinishes.ts~TestRunFinishes.html",
    "longname": "@serenity-js/core/lib/events~TestRunFinishes",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "TestRunStarts",
    "externalLink": "/modules/core/class/src/events/TestRunStarts.ts~TestRunStarts.html",
    "longname": "@serenity-js/core/lib/events~TestRunStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "TestRunnerDetected",
    "externalLink": "/modules/core/class/src/events/TestRunnerDetected.ts~TestRunnerDetected.html",
    "longname": "@serenity-js/core/lib/events~TestRunnerDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "TestSuiteFinished",
    "externalLink": "/modules/core/class/src/events/TestSuiteFinished.ts~TestSuiteFinished.html",
    "longname": "@serenity-js/core/lib/events~TestSuiteFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "TestSuiteStarts",
    "externalLink": "/modules/core/class/src/events/TestSuiteStarts.ts~TestSuiteStarts.html",
    "longname": "@serenity-js/core/lib/events~TestSuiteStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "name": "serenity",
    "externalLink": "/modules/core/variable/src/instance.ts~serenity.html",
    "longname": "@serenity-js/core~serenity",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "name": "configure",
    "externalLink": "/modules/core/function/index.html#static-function-configure",
    "longname": "@serenity-js/core~configure",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "name": "engage",
    "externalLink": "/modules/core/function/index.html#static-function-engage",
    "longname": "@serenity-js/core~engage",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "name": "actorCalled",
    "externalLink": "/modules/core/function/index.html#static-function-actorCalled",
    "longname": "@serenity-js/core~actorCalled",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "name": "actorInTheSpotlight",
    "externalLink": "/modules/core/function/index.html#static-function-actorInTheSpotlight",
    "longname": "@serenity-js/core~actorInTheSpotlight",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "name": "AssertionReportDiffer",
    "externalLink": "/modules/core/class/src/io/AssertionReportDiffer.ts~AssertionReportDiffer.html",
    "longname": "@serenity-js/core/lib/io~AssertionReportDiffer",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "Config",
    "externalLink": "/modules/core/class/src/io/Config.ts~Config.html",
    "longname": "@serenity-js/core/lib/io~Config",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "SerialisedError",
    "externalLink": "/modules/core/class/src/io/ErrorSerialiser.ts~SerialisedError.html",
    "longname": "@serenity-js/core/lib/io~SerialisedError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "name": "ErrorSerialiser",
    "externalLink": "/modules/core/class/src/io/ErrorSerialiser.ts~ErrorSerialiser.html",
    "longname": "@serenity-js/core/lib/io~ErrorSerialiser",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "FileFinder",
    "externalLink": "/modules/core/class/src/io/FileFinder.ts~FileFinder.html",
    "longname": "@serenity-js/core/lib/io~FileFinder",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "FileSystem",
    "externalLink": "/modules/core/class/src/io/FileSystem.ts~FileSystem.html",
    "longname": "@serenity-js/core/lib/io~FileSystem",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "FileSystemLocation",
    "externalLink": "/modules/core/class/src/io/FileSystemLocation.ts~FileSystemLocation.html",
    "longname": "@serenity-js/core/lib/io~FileSystemLocation",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "ModuleLoader",
    "externalLink": "/modules/core/class/src/io/ModuleLoader.ts~ModuleLoader.html",
    "longname": "@serenity-js/core/lib/io~ModuleLoader",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "name": "OutputStream",
    "externalLink": "/modules/core/class/src/io/OutputStream.ts~OutputStream.html",
    "longname": "@serenity-js/core/lib/io~OutputStream",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "name": "Path",
    "externalLink": "/modules/core/class/src/io/Path.ts~Path.html",
    "longname": "@serenity-js/core/lib/io~Path",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "TestRunnerAdapter",
    "externalLink": "/modules/core/class/src/io/TestRunnerAdapter.ts~TestRunnerAdapter.html",
    "longname": "@serenity-js/core/lib/io~TestRunnerAdapter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "Version",
    "externalLink": "/modules/core/class/src/io/Version.ts~Version.html",
    "longname": "@serenity-js/core/lib/io~Version",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "Mappable",
    "externalLink": "/modules/core/class/src/io/collections/mappable.ts~Mappable.html",
    "longname": "@serenity-js/core/lib/io/collections~Mappable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "isMappable",
    "externalLink": "/modules/core/function/index.html#static-function-isMappable",
    "longname": "@serenity-js/core/lib/io/collections~isMappable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "Reducible",
    "externalLink": "/modules/core/class/src/io/collections/reducible.ts~Reducible.html",
    "longname": "@serenity-js/core/lib/io/collections~Reducible",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "commaSeparated",
    "externalLink": "/modules/core/function/index.html#static-function-commaSeparated",
    "longname": "@serenity-js/core/lib/io~commaSeparated",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "formatted",
    "externalLink": "/modules/core/function/index.html#static-function-formatted",
    "longname": "@serenity-js/core/lib/io~formatted",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "inspected",
    "externalLink": "/modules/core/function/index.html#static-function-inspected",
    "longname": "@serenity-js/core/lib/io~inspected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "name": "stringify",
    "externalLink": "/modules/core/function/index.html#static-function-stringify",
    "longname": "@serenity-js/core/lib/io/json~stringify",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "name": "parse",
    "externalLink": "/modules/core/function/index.html#static-function-parse",
    "longname": "@serenity-js/core/lib/io/json~parse",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "name": "has",
    "externalLink": "/modules/core/function/index.html#static-function-has",
    "longname": "@serenity-js/core/lib/io/reflection~has",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "name": "trimmed",
    "externalLink": "/modules/core/function/index.html#static-function-trimmed",
    "longname": "@serenity-js/core/lib/io~trimmed",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "name": "ActivityDetails",
    "externalLink": "/modules/core/class/src/model/ActivityDetails.ts~ActivityDetails.html",
    "longname": "@serenity-js/core/lib/model~ActivityDetails",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "name": "Artifact",
    "externalLink": "/modules/core/class/src/model/Artifact.ts~Artifact.html",
    "longname": "@serenity-js/core/lib/model~Artifact",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "name": "BusinessRule",
    "externalLink": "/modules/core/class/src/model/BusinessRule.ts~BusinessRule.html",
    "longname": "@serenity-js/core/lib/model~BusinessRule",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "name": "Category",
    "externalLink": "/modules/core/class/src/model/Category.ts~Category.html",
    "longname": "@serenity-js/core/lib/model~Category",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "name": "CorrelationId",
    "externalLink": "/modules/core/class/src/model/CorrelationId.ts~CorrelationId.html",
    "longname": "@serenity-js/core/lib/model~CorrelationId",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "name": "Description",
    "externalLink": "/modules/core/class/src/model/Description.ts~Description.html",
    "longname": "@serenity-js/core/lib/model~Description",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "name": "Duration",
    "externalLink": "/modules/core/class/src/model/Duration.ts~Duration.html",
    "longname": "@serenity-js/core/lib/model~Duration",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "name": "Name",
    "externalLink": "/modules/core/class/src/model/Name.ts~Name.html",
    "longname": "@serenity-js/core/lib/model~Name",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "name": "ScenarioDetails",
    "externalLink": "/modules/core/class/src/model/ScenarioDetails.ts~ScenarioDetails.html",
    "longname": "@serenity-js/core/lib/model~ScenarioDetails",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "name": "ScenarioParameters",
    "externalLink": "/modules/core/class/src/model/ScenarioParameters.ts~ScenarioParameters.html",
    "longname": "@serenity-js/core/lib/model~ScenarioParameters",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "name": "TestSuiteDetails",
    "externalLink": "/modules/core/class/src/model/TestSuiteDetails.ts~TestSuiteDetails.html",
    "longname": "@serenity-js/core/lib/model~TestSuiteDetails",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "name": "Timestamp",
    "externalLink": "/modules/core/class/src/model/Timestamp.ts~Timestamp.html",
    "longname": "@serenity-js/core/lib/model~Timestamp",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "name": "AssertionReport",
    "externalLink": "/modules/core/class/src/model/artifacts/AssertionReport.ts~AssertionReport.html",
    "longname": "@serenity-js/core/lib/model/artifacts~AssertionReport",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "name": "RequestAndResponse",
    "externalLink": "/modules/core/class/src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse.html",
    "longname": "@serenity-js/core/lib/model/artifacts~RequestAndResponse",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "name": "HTTPRequestResponse",
    "externalLink": "/modules/core/class/src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse.html",
    "longname": "@serenity-js/core/lib/model/artifacts~HTTPRequestResponse",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "name": "JSONData",
    "externalLink": "/modules/core/class/src/model/artifacts/JSONData.ts~JSONData.html",
    "longname": "@serenity-js/core/lib/model/artifacts~JSONData",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "name": "LogEntry",
    "externalLink": "/modules/core/class/src/model/artifacts/LogEntry.ts~LogEntry.html",
    "longname": "@serenity-js/core/lib/model/artifacts~LogEntry",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "name": "Photo",
    "externalLink": "/modules/core/class/src/model/artifacts/Photo.ts~Photo.html",
    "longname": "@serenity-js/core/lib/model/artifacts~Photo",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "name": "TestReport",
    "externalLink": "/modules/core/class/src/model/artifacts/TestReport.ts~TestReport.html",
    "longname": "@serenity-js/core/lib/model/artifacts~TestReport",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "name": "TextData",
    "externalLink": "/modules/core/class/src/model/artifacts/TextData.ts~TextData.html",
    "longname": "@serenity-js/core/lib/model/artifacts~TextData",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "name": "SerialisedOutcome",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~SerialisedOutcome.html",
    "longname": "@serenity-js/core/lib/model~SerialisedOutcome",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "name": "Outcome",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~Outcome.html",
    "longname": "@serenity-js/core/lib/model~Outcome",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "name": "ProblemIndication",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ProblemIndication.html",
    "longname": "@serenity-js/core/lib/model~ProblemIndication",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "name": "ExecutionCompromised",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionCompromised.html",
    "longname": "@serenity-js/core/lib/model~ExecutionCompromised",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "name": "ExecutionFailedWithError",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionFailedWithError.html",
    "longname": "@serenity-js/core/lib/model~ExecutionFailedWithError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "name": "ExecutionFailedWithAssertionError",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionFailedWithAssertionError.html",
    "longname": "@serenity-js/core/lib/model~ExecutionFailedWithAssertionError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "name": "ImplementationPending",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ImplementationPending.html",
    "longname": "@serenity-js/core/lib/model~ImplementationPending",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "name": "ExecutionIgnored",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionIgnored.html",
    "longname": "@serenity-js/core/lib/model~ExecutionIgnored",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 148,
    "kind": "external",
    "name": "ExecutionSkipped",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionSkipped.html",
    "longname": "@serenity-js/core/lib/model~ExecutionSkipped",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 149,
    "kind": "external",
    "name": "ExecutionSuccessful",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionSuccessful.html",
    "longname": "@serenity-js/core/lib/model~ExecutionSuccessful",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "name": "ArbitraryTag",
    "externalLink": "/modules/core/class/src/model/tags/ArbitraryTag.ts~ArbitraryTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ArbitraryTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 151,
    "kind": "external",
    "name": "BrowserTag",
    "externalLink": "/modules/core/class/src/model/tags/BrowserTag.ts~BrowserTag.html",
    "longname": "@serenity-js/core/lib/model/tags~BrowserTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 152,
    "kind": "external",
    "name": "CapabilityTag",
    "externalLink": "/modules/core/class/src/model/tags/CapabilityTag.ts~CapabilityTag.html",
    "longname": "@serenity-js/core/lib/model/tags~CapabilityTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 153,
    "kind": "external",
    "name": "ContextTag",
    "externalLink": "/modules/core/class/src/model/tags/ContextTag.ts~ContextTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ContextTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "name": "ExecutionRetriedTag",
    "externalLink": "/modules/core/class/src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ExecutionRetriedTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "name": "FeatureTag",
    "externalLink": "/modules/core/class/src/model/tags/FeatureTag.ts~FeatureTag.html",
    "longname": "@serenity-js/core/lib/model/tags~FeatureTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "name": "IssueTag",
    "externalLink": "/modules/core/class/src/model/tags/IssueTag.ts~IssueTag.html",
    "longname": "@serenity-js/core/lib/model/tags~IssueTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "name": "ManualTag",
    "externalLink": "/modules/core/class/src/model/tags/ManualTag.ts~ManualTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ManualTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "name": "PlatformTag",
    "externalLink": "/modules/core/class/src/model/tags/PlatformTag.ts~PlatformTag.html",
    "longname": "@serenity-js/core/lib/model/tags~PlatformTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "name": "Tag",
    "externalLink": "/modules/core/class/src/model/tags/Tag.ts~Tag.html",
    "longname": "@serenity-js/core/lib/model/tags~Tag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "name": "ThemeTag",
    "externalLink": "/modules/core/class/src/model/tags/ThemeTag.ts~ThemeTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ThemeTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "name": "Ability",
    "externalLink": "/modules/core/class/src/screenplay/Ability.ts~Ability.html",
    "longname": "@serenity-js/core/lib/screenplay~Ability",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "name": "AbilityType",
    "externalLink": "/modules/core/class/src/screenplay/AbilityType.ts~AbilityType.html",
    "longname": "@serenity-js/core/lib/screenplay~AbilityType",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "name": "Activity",
    "externalLink": "/modules/core/class/src/screenplay/Activity.ts~Activity.html",
    "longname": "@serenity-js/core/lib/screenplay~Activity",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 164,
    "kind": "external",
    "name": "Interaction",
    "externalLink": "/modules/core/class/src/screenplay/Interaction.ts~Interaction.html",
    "longname": "@serenity-js/core/lib/screenplay~Interaction",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "name": "Question",
    "externalLink": "/modules/core/class/src/screenplay/Question.ts~Question.html",
    "longname": "@serenity-js/core/lib/screenplay~Question",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "name": "Task",
    "externalLink": "/modules/core/class/src/screenplay/Task.ts~Task.html",
    "longname": "@serenity-js/core/lib/screenplay~Task",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 167,
    "kind": "external",
    "name": "Discardable",
    "externalLink": "/modules/core/class/src/screenplay/abilities/Discardable.ts~Discardable.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~Discardable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "name": "Initialisable",
    "externalLink": "/modules/core/class/src/screenplay/abilities/Initialisable.ts~Initialisable.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~Initialisable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 169,
    "kind": "external",
    "name": "TakeNotes",
    "externalLink": "/modules/core/class/src/screenplay/abilities/TakeNotes.ts~TakeNotes.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~TakeNotes",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "name": "Actor",
    "externalLink": "/modules/core/class/src/screenplay/actor/Actor.ts~Actor.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~Actor",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 171,
    "kind": "external",
    "name": "AnswersQuestions",
    "externalLink": "/modules/core/class/src/screenplay/actor/AnswersQuestions.ts~AnswersQuestions.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~AnswersQuestions",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "name": "CanHaveAbilities",
    "externalLink": "/modules/core/class/src/screenplay/actor/CanHaveAbilities.ts~CanHaveAbilities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~CanHaveAbilities",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "external",
    "name": "CollectsArtifacts",
    "externalLink": "/modules/core/class/src/screenplay/actor/CollectsArtifacts.ts~CollectsArtifacts.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~CollectsArtifacts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 174,
    "kind": "external",
    "name": "PerformsActivities",
    "externalLink": "/modules/core/class/src/screenplay/actor/PerformsActivities.ts~PerformsActivities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~PerformsActivities",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 175,
    "kind": "external",
    "name": "UsesAbilities",
    "externalLink": "/modules/core/class/src/screenplay/actor/UsesAbilities.ts~UsesAbilities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~UsesAbilities",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 176,
    "kind": "external",
    "name": "Log",
    "externalLink": "/modules/core/class/src/screenplay/interactions/Log.ts~Log.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~Log",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 177,
    "kind": "external",
    "name": "See",
    "externalLink": "/modules/core/class/src/screenplay/interactions/See.ts~See.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~See",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 178,
    "kind": "external",
    "name": "TakeNote",
    "externalLink": "/modules/core/class/src/screenplay/interactions/TakeNote.ts~TakeNote.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~TakeNote",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 179,
    "kind": "external",
    "name": "Check",
    "externalLink": "/modules/core/class/src/screenplay/questions/Check.ts~Check.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Check",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 180,
    "kind": "external",
    "name": "Expectation",
    "externalLink": "/modules/core/class/src/screenplay/questions/Expectation.ts~Expectation.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Expectation",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 181,
    "kind": "external",
    "name": "List",
    "externalLink": "/modules/core/class/src/screenplay/questions/List.ts~List.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~List",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "external",
    "name": "MetaQuestion",
    "externalLink": "/modules/core/class/src/screenplay/questions/MetaQuestion.ts~MetaQuestion.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~MetaQuestion",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 183,
    "kind": "external",
    "name": "Note",
    "externalLink": "/modules/core/class/src/screenplay/questions/Note.ts~Note.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Note",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 184,
    "kind": "external",
    "name": "Property",
    "externalLink": "/modules/core/class/src/screenplay/questions/Property.ts~Property.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Property",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 185,
    "kind": "external",
    "name": "Transform",
    "externalLink": "/modules/core/class/src/screenplay/questions/Transform.ts~Transform.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Transform",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 186,
    "kind": "external",
    "name": "ExpectationMet",
    "externalLink": "/modules/core/class/src/screenplay/questions/expectations/ExpectationMet.ts~ExpectationMet.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/expectations~ExpectationMet",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 187,
    "kind": "external",
    "name": "ExpectationNotMet",
    "externalLink": "/modules/core/class/src/screenplay/questions/expectations/ExpectationNotMet.ts~ExpectationNotMet.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/expectations~ExpectationNotMet",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 188,
    "kind": "external",
    "name": "ExpectationOutcome",
    "externalLink": "/modules/core/class/src/screenplay/questions/expectations/ExpectationOutcome.ts~ExpectationOutcome.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/expectations~ExpectationOutcome",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 189,
    "kind": "external",
    "name": "ArrayListAdapter",
    "externalLink": "/modules/core/class/src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/lists~ArrayListAdapter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 190,
    "kind": "external",
    "name": "ListAdapter",
    "externalLink": "/modules/core/class/src/screenplay/questions/lists/ListAdapter.ts~ListAdapter.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/lists~ListAdapter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 191,
    "kind": "external",
    "name": "append",
    "externalLink": "/modules/core/function/index.html#static-function-append",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~append",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 192,
    "kind": "external",
    "name": "normalize",
    "externalLink": "/modules/core/function/index.html#static-function-normalize",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~normalize",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 193,
    "kind": "external",
    "name": "replace",
    "externalLink": "/modules/core/function/index.html#static-function-replace",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~replace",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 194,
    "kind": "external",
    "name": "slice",
    "externalLink": "/modules/core/function/index.html#static-function-slice",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~slice",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 195,
    "kind": "external",
    "name": "split",
    "externalLink": "/modules/core/function/index.html#static-function-split",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~split",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "external",
    "name": "toLocaleLowerCase",
    "externalLink": "/modules/core/function/index.html#static-function-toLocaleLowerCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toLocaleLowerCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 197,
    "kind": "external",
    "name": "toLocaleUpperCase",
    "externalLink": "/modules/core/function/index.html#static-function-toLocaleUpperCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toLocaleUpperCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 198,
    "kind": "external",
    "name": "toLowerCase",
    "externalLink": "/modules/core/function/index.html#static-function-toLowerCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toLowerCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 199,
    "kind": "external",
    "name": "toNumber",
    "externalLink": "/modules/core/function/index.html#static-function-toNumber",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toNumber",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 200,
    "kind": "external",
    "name": "toUpperCase",
    "externalLink": "/modules/core/function/index.html#static-function-toUpperCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toUpperCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 201,
    "kind": "external",
    "name": "trim",
    "externalLink": "/modules/core/function/index.html#static-function-trim",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~trim",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 202,
    "kind": "external",
    "name": "q",
    "externalLink": "/modules/core/function/index.html#static-function-q",
    "longname": "@serenity-js/core/lib/screenplay/questions~q",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "name": "Loop",
    "externalLink": "/modules/core/class/src/screenplay/tasks/Loop.ts~Loop.html",
    "longname": "@serenity-js/core/lib/screenplay/tasks~Loop",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 204,
    "kind": "external",
    "name": "Cast",
    "externalLink": "/modules/core/class/src/stage/Cast.ts~Cast.html",
    "longname": "@serenity-js/core/lib/stage~Cast",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "name": "Clock",
    "externalLink": "/modules/core/class/src/stage/Clock.ts~Clock.html",
    "longname": "@serenity-js/core/lib/stage~Clock",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "name": "DressingRoom",
    "externalLink": "/modules/core/class/src/stage/DressingRoom.ts~DressingRoom.html",
    "longname": "@serenity-js/core/lib/stage~DressingRoom",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "name": "ListensToDomainEvents",
    "externalLink": "/modules/core/class/src/stage/ListensToDomainEvents.ts~ListensToDomainEvents.html",
    "longname": "@serenity-js/core/lib/stage~ListensToDomainEvents",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "external",
    "name": "Stage",
    "externalLink": "/modules/core/class/src/stage/Stage.ts~Stage.html",
    "longname": "@serenity-js/core/lib/stage~Stage",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 209,
    "kind": "external",
    "name": "StageCrewMember",
    "externalLink": "/modules/core/class/src/stage/StageCrewMember.ts~StageCrewMember.html",
    "longname": "@serenity-js/core/lib/stage~StageCrewMember",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 210,
    "kind": "external",
    "name": "StageCrewMemberBuilder",
    "externalLink": "/modules/core/class/src/stage/StageCrewMemberBuilder.ts~StageCrewMemberBuilder.html",
    "longname": "@serenity-js/core/lib/stage~StageCrewMemberBuilder",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 211,
    "kind": "external",
    "name": "StageCrewMemberBuilderDependencies",
    "externalLink": "/modules/core/class/src/stage/StageCrewMemberBuilderDependencies.ts~StageCrewMemberBuilderDependencies.html",
    "longname": "@serenity-js/core/lib/stage~StageCrewMemberBuilderDependencies",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 212,
    "kind": "external",
    "name": "StageManager",
    "externalLink": "/modules/core/class/src/stage/StageManager.ts~StageManager.html",
    "longname": "@serenity-js/core/lib/stage~StageManager",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 213,
    "kind": "external",
    "name": "WithStage",
    "externalLink": "/modules/core/class/src/stage/WithStage.ts~WithStage.html",
    "longname": "@serenity-js/core/lib/stage~WithStage",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 214,
    "kind": "external",
    "name": "ArtifactArchiver",
    "externalLink": "/modules/core/class/src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver.html",
    "longname": "@serenity-js/core/lib/stage/crew/artifact-archiver~ArtifactArchiver",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 215,
    "kind": "external",
    "name": "StreamReporter",
    "externalLink": "/modules/core/class/src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter.html",
    "longname": "@serenity-js/core/lib/stage/crew/stream-reporter~StreamReporter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 217,
    "kind": "external",
    "name": "CucumberCLIAdapter",
    "externalLink": "/modules/cucumber/class/src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter.html",
    "longname": "@serenity-js/cucumber/lib/cli~CucumberCLIAdapter",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 218,
    "kind": "external",
    "name": "CucumberConfig",
    "externalLink": "/modules/cucumber/class/src/cli/CucumberConfig.ts~CucumberConfig.html",
    "longname": "@serenity-js/cucumber/lib/cli~CucumberConfig",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 219,
    "kind": "external",
    "name": "CucumberFormat",
    "externalLink": "/modules/cucumber/class/src/cli/CucumberFormat.ts~CucumberFormat.html",
    "longname": "@serenity-js/cucumber/lib/cli~CucumberFormat",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 220,
    "kind": "external",
    "name": "AmbiguousStepDefinitionError",
    "externalLink": "/modules/cucumber/class/src/errors/AmbiguousStepDefinitionError.ts~AmbiguousStepDefinitionError.html",
    "longname": "@serenity-js/cucumber/lib/errors~AmbiguousStepDefinitionError",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "name": "createListener",
    "externalLink": "/modules/cucumber/function/index.html#static-function-createListener",
    "longname": "@serenity-js/cucumber/lib/listeners/legacy~createListener",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "name": "createListener",
    "externalLink": "/modules/cucumber/function/index.html#static-function-createListener",
    "longname": "@serenity-js/cucumber/lib/listeners/messages~createListener",
    "memberof": "src/.imports-from-serenity-js-cucumber.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 224,
    "kind": "external",
    "name": "SerenityReporterForJasmine",
    "externalLink": "/modules/jasmine/class/src/SerenityReporterForJasmine.ts~SerenityReporterForJasmine.html",
    "longname": "@serenity-js/jasmine~SerenityReporterForJasmine",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 225,
    "kind": "external",
    "name": "JasmineAdapter",
    "externalLink": "/modules/jasmine/class/src/adapter/JasmineAdapter.ts~JasmineAdapter.html",
    "longname": "@serenity-js/jasmine/lib/adapter~JasmineAdapter",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 226,
    "kind": "external",
    "name": "JasmineConfig",
    "externalLink": "/modules/jasmine/class/src/adapter/JasmineConfig.ts~JasmineConfig.html",
    "longname": "@serenity-js/jasmine/lib/adapter~JasmineConfig",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 227,
    "kind": "external",
    "name": "bootstrap",
    "externalLink": "/modules/jasmine/function/index.html#static-function-bootstrap",
    "longname": "@serenity-js/jasmine~bootstrap",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 228,
    "kind": "external",
    "name": "JasmineReporter",
    "externalLink": "/modules/jasmine/class/src/jasmine/JasmineReporter.ts~JasmineReporter.html",
    "longname": "@serenity-js/jasmine/lib/jasmine~JasmineReporter",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 229,
    "kind": "external",
    "name": "monkeyPatched",
    "externalLink": "/modules/jasmine/function/index.html#static-function-monkeyPatched",
    "longname": "@serenity-js/jasmine~monkeyPatched",
    "memberof": "src/.imports-from-serenity-js-jasmine.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "name": "MochaAdapter",
    "externalLink": "/modules/mocha/class/src/adapter/MochaAdapter.ts~MochaAdapter.html",
    "longname": "@serenity-js/mocha/lib/adapter~MochaAdapter",
    "memberof": "src/.imports-from-serenity-js-mocha.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "name": "MochaConfig",
    "externalLink": "/modules/mocha/class/src/adapter/MochaConfig.ts~MochaConfig.html",
    "longname": "@serenity-js/mocha/lib/adapter~MochaConfig",
    "memberof": "src/.imports-from-serenity-js-mocha.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "name": "DeleteRequest",
    "externalLink": "/modules/rest/class/src/model/DeleteRequest.ts~DeleteRequest.html",
    "longname": "@serenity-js/rest/lib/model~DeleteRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "name": "GetRequest",
    "externalLink": "/modules/rest/class/src/model/GetRequest.ts~GetRequest.html",
    "longname": "@serenity-js/rest/lib/model~GetRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "name": "HTTPRequest",
    "externalLink": "/modules/rest/class/src/model/HTTPRequest.ts~HTTPRequest.html",
    "longname": "@serenity-js/rest/lib/model~HTTPRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "external",
    "name": "HeadRequest",
    "externalLink": "/modules/rest/class/src/model/HeadRequest.ts~HeadRequest.html",
    "longname": "@serenity-js/rest/lib/model~HeadRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 238,
    "kind": "external",
    "name": "OptionsRequest",
    "externalLink": "/modules/rest/class/src/model/OptionsRequest.ts~OptionsRequest.html",
    "longname": "@serenity-js/rest/lib/model~OptionsRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 239,
    "kind": "external",
    "name": "PatchRequest",
    "externalLink": "/modules/rest/class/src/model/PatchRequest.ts~PatchRequest.html",
    "longname": "@serenity-js/rest/lib/model~PatchRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 240,
    "kind": "external",
    "name": "PostRequest",
    "externalLink": "/modules/rest/class/src/model/PostRequest.ts~PostRequest.html",
    "longname": "@serenity-js/rest/lib/model~PostRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 241,
    "kind": "external",
    "name": "PutRequest",
    "externalLink": "/modules/rest/class/src/model/PutRequest.ts~PutRequest.html",
    "longname": "@serenity-js/rest/lib/model~PutRequest",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 242,
    "kind": "external",
    "name": "CallAnApi",
    "externalLink": "/modules/rest/class/src/screenplay/abilities/CallAnApi.ts~CallAnApi.html",
    "longname": "@serenity-js/rest/lib/screenplay/abilities~CallAnApi",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 243,
    "kind": "external",
    "name": "ChangeApiConfig",
    "externalLink": "/modules/rest/class/src/screenplay/interactions/ChangeApiConfig.ts~ChangeApiConfig.html",
    "longname": "@serenity-js/rest/lib/screenplay/interactions~ChangeApiConfig",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 244,
    "kind": "external",
    "name": "ChangeApiUrl",
    "externalLink": "/modules/rest/class/src/screenplay/interactions/ChangeApiUrl.ts~ChangeApiUrl.html",
    "longname": "@serenity-js/rest/lib/screenplay/interactions~ChangeApiUrl",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "name": "Send",
    "externalLink": "/modules/rest/class/src/screenplay/interactions/Send.ts~Send.html",
    "longname": "@serenity-js/rest/lib/screenplay/interactions~Send",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "name": "LastResponse",
    "externalLink": "/modules/rest/class/src/screenplay/questions/LastResponse.ts~LastResponse.html",
    "longname": "@serenity-js/rest/lib/screenplay/questions~LastResponse",
    "memberof": "src/.imports-from-serenity-js-rest.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 248,
    "kind": "external",
    "name": "JSONObject",
    "externalLink": "https://jan-molak.github.io/tiny-types/file/src/types/json.ts.html",
    "longname": "tiny-types~JSONObject",
    "memberof": "src/.imports-from-tiny-types.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 249,
    "kind": "external",
    "name": "TinyType",
    "externalLink": "https://jan-molak.github.io/tiny-types/class/src/TinyType.ts~TinyType.html",
    "longname": "tiny-types~TinyType",
    "memberof": "src/.imports-from-tiny-types.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 251,
    "kind": "external",
    "name": "ElementArray",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/types.ts",
    "longname": "@wdio/types~ElementArray",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 252,
    "kind": "external",
    "name": "Browser",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/types.ts",
    "longname": "@wdio/types~Browser",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/types.ts",
    "longname": "@wdio/types~Element",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "name": "Options.TestRunner",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-types/src/Options.ts",
    "longname": "@wdio/types~Options.TestRunner",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "file",
    "name": "src/adapter/TestRunnerLoader.ts",
    "content": "import { ConfigurationError } from '@serenity-js/core';\nimport { Config, FileFinder, FileSystem, ModuleLoader, Path, TestRunnerAdapter } from '@serenity-js/core/lib/io';\nimport { WebdriverIO } from '@wdio/types/build/Options';\n\nimport { WebdriverIOConfig } from './WebdriverIOConfig';\n\n/**\n * @package\n */\nexport class TestRunnerLoader {\n    private readonly fileSystem: FileSystem;\n    private readonly finder: FileFinder;\n\n    constructor(\n        private readonly loader: ModuleLoader,\n        private readonly cwd: Path,\n        private readonly cid: string,\n    ) {\n        this.fileSystem = new FileSystem(cwd);\n        this.finder     = new FileFinder(cwd);\n    }\n\n    runnerAdapterFor(config: WebdriverIOConfig): TestRunnerAdapter {\n        switch (config?.serenity?.runner) {\n            case 'cucumber':\n                return this.cucumberAdapter(config?.cucumberOpts);\n\n            case 'jasmine':\n                return this.jasmineAdapter(config?.jasmineOpts);\n\n            case 'mocha':\n            case undefined:\n                return this.mochaAdapter(config?.mochaOpts);\n\n            default:\n                throw new ConfigurationError(`\"${ config?.serenity?.runner }\" is not a supported test runner. Please use \"mocha\", \"jasmine\", or \"cucumber\"`);\n        }\n    }\n\n    private cucumberAdapter(cucumberOptions?: WebdriverIO.CucumberOpts): TestRunnerAdapter {\n        const { CucumberCLIAdapter, CucumberFormat, StandardOutput, TempFileOutput } = this.loader.require('@serenity-js/cucumber/lib/cli');\n\n        delete cucumberOptions?.timeout;   // todo: support setting a timeout via config?\n        delete cucumberOptions?.parallel;  // WebdriverIO handles that already\n\n        const cleanedCucumberOptions = new Config(cucumberOptions)\n            .where('require', requires =>\n                this.finder.filesMatching(requires).map(p => p.value)\n            )\n            .where('format', values =>\n                [].concat(values).map(value => {\n                    const format = new CucumberFormat(value);\n\n                    if (format.output === '') {\n                        return format.value;\n                    }\n\n                    const basename = Path.from(format.output).basename();\n                    const filenameParts = basename.split('.');\n\n                    if (filenameParts[0] === basename) {\n                        return `${ format.formatter }:${ format.output }.${ this.cid }`;\n                    }\n\n                    filenameParts.splice(-1, 0, `${ this.cid }`);\n\n                    return `${ format.formatter }:${ format.output.replace(basename, filenameParts.join('.')) }`;\n                })\n            ).object();\n\n        // check if we need to free up stdout for any native reporters\n        const output = cleanedCucumberOptions?.format?.some(format => new CucumberFormat(format).output === '')\n            ? new TempFileOutput(this.fileSystem)\n            : new StandardOutput();\n\n        return new CucumberCLIAdapter(cleanedCucumberOptions, this.loader, this.fileSystem, output);\n    }\n\n    private jasmineAdapter(jasmineOptions: WebdriverIO.JasmineOpts): TestRunnerAdapter {\n        const { JasmineAdapter } = this.loader.require('@serenity-js/jasmine/lib/adapter')\n        return new JasmineAdapter(jasmineOptions, this.loader);\n    }\n\n    private mochaAdapter(mochaOptions: WebdriverIO.MochaOpts): TestRunnerAdapter {\n        const { MochaAdapter } = this.loader.require('@serenity-js/mocha/lib/adapter')\n        return new MochaAdapter(mochaOptions, this.loader);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/TestRunnerLoader.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "class",
    "name": "TestRunnerLoader",
    "memberof": "src/adapter/TestRunnerLoader.ts",
    "static": true,
    "longname": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/adapter/TestRunnerLoader.ts",
    "importStyle": "{TestRunnerLoader}",
    "description": "",
    "lineNumber": 17,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "fileSystem",
    "memberof": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader",
    "static": false,
    "longname": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader#fileSystem",
    "access": "private",
    "description": " ",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "FileSystem"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "finder",
    "memberof": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader",
    "static": false,
    "longname": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader#finder",
    "access": "private",
    "description": " ",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "FileFinder"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "runnerAdapterFor",
    "memberof": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader#runnerAdapterFor",
    "access": "public",
    "description": " ",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "WebdriverIOConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "cucumberAdapter",
    "memberof": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader#cucumberAdapter",
    "access": "private",
    "description": " ",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "cucumberOptions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "jasmineAdapter",
    "memberof": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader#jasmineAdapter",
    "access": "private",
    "description": " ",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "jasmineOptions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "mochaAdapter",
    "memberof": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/TestRunnerLoader.ts~TestRunnerLoader#mochaAdapter",
    "access": "private",
    "description": " ",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "mochaOptions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "src/adapter/WebdriverIOConfig.ts",
    "content": "import { SerenityConfig } from '@serenity-js/core';\nimport type { Options } from '@wdio/types';\n\n/**\n * @desc\n *  [WebdriverIO configuration object](https://webdriver.io/docs/configurationfile/)\n *  with Serenity/JS-specific additions.\n *\n * @see {@link @serenity-js/cucumber/lib/cli~CucumberConfig}\n * @see {@link @serenity-js/jasmine/lib/adapter~JasmineConfig}\n * @see {@link @serenity-js/mocha/lib/adapter~MochaConfig}\n *\n * @see https://webdriver.io/docs/configurationfile/\n * @see {@link @wdio/types~Options.TestRunner}\n *\n * @public\n *\n * @extends {@wdio/types~Options.TestRunner}\n *\n * @example <caption>WebdriverIO with Serenity/JS and Cucumber</caption>\n *\n *  import { ConsoleReporter } from '@serenity-js/console-reporter';\n *  import { ArtifactArchiver } from '@serenity-js/core';\n *  import { SerenityBDDReporter } from '@serenity-js/serenity-bdd';\n *  import { WebdriverIOConfig } from '@serenity-js/webdriverio';\n *\n *  export const config: WebdriverIOConfig = {\n *\n *    framework: '@serenity-js/webdriverio',\n *\n *    serenity: {\n *        runner: 'cucumber',\n *        crew: [\n *            ConsoleReporter.forDarkTerminals(),\n *            new SerenityBDDReporter(),\n *            ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n *        ]\n *    },\n *\n *    cucumberOpts: {\n *        // ...\n *    },\n *\n *    specs: [\n *        './features/*.feature',\n *    ],\n * };\n *\n * @example <caption>WebdriverIO with Serenity/JS and Mocha</caption>\n *\n *  import { ConsoleReporter } from '@serenity-js/console-reporter';\n *  import { ArtifactArchiver } from '@serenity-js/core';\n *  import { SerenityBDDReporter } from '@serenity-js/serenity-bdd';\n *  import { WebdriverIOConfig } from '@serenity-js/webdriverio';\n *\n *  export const config: WebdriverIOConfig = {\n *\n *    framework: '@serenity-js/webdriverio',\n *\n *    serenity: {\n *        runner: 'mocha',\n *        crew: [\n *            ConsoleReporter.forDarkTerminals(),\n *            new SerenityBDDReporter(),\n *            ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n *        ]\n *    },\n *\n *    mochaOpts: {\n *        // ...\n *    },\n *\n *    specs: [\n *        './spec/*.spec.*',\n *    ],\n * };\n *\n * @example <caption>WebdriverIO with Serenity/JS and Jasmine</caption>\n *\n *  import { ConsoleReporter } from '@serenity-js/console-reporter';\n *  import { ArtifactArchiver } from '@serenity-js/core';\n *  import { SerenityBDDReporter } from '@serenity-js/serenity-bdd';\n *  import { WebdriverIOConfig } from '@serenity-js/webdriverio';\n *\n *  export const config: WebdriverIOConfig = {\n *\n *    framework: '@serenity-js/webdriverio',\n *\n *    serenity: {\n *        runner: 'jasmine',\n *        crew: [\n *            ConsoleReporter.forDarkTerminals(),\n *            new SerenityBDDReporter(),\n *            ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n *        ]\n *    },\n *\n *    jasmineOpts: {\n *        // ...\n *    },\n *\n *    specs: [\n *        './spec/*.spec.*',\n *    ],\n * };\n */\nexport interface WebdriverIOConfig extends Options.Testrunner {\n\n    /**\n     * @desc\n     *  Serenity/JS configuration with an additional `runner` entry\n     *  allowing to specify the test runner, such as `cucumber`, `mocha`, or `jasmine`.\n     *\n     * @see {@link @serenity-js/cucumber/lib/cli~CucumberConfig}\n     * @see {@link @serenity-js/jasmine/lib/adapter~JasmineConfig}\n     * @see {@link @serenity-js/mocha/lib/adapter~MochaConfig}\n     *\n     * @type {@serenity-js/core~SerenityConfig}\n     * @public\n     */\n    serenity?: SerenityConfig & { runner?: string };\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/WebdriverIOConfig.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "WebdriverIOConfig",
    "memberof": "src/adapter/WebdriverIOConfig.ts",
    "static": true,
    "longname": "src/adapter/WebdriverIOConfig.ts~WebdriverIOConfig",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/adapter",
    "importStyle": "{WebdriverIOConfig}",
    "description": " [WebdriverIO configuration object](https://webdriver.io/docs/configurationfile/)\n with Serenity/JS-specific additions.",
    "examples": [
      "<caption>WebdriverIO with Serenity/JS and Cucumber</caption>\n\n import { ConsoleReporter } from '@serenity-js/console-reporter';\n import { ArtifactArchiver } from '@serenity-js/core';\n import { SerenityBDDReporter } from '@serenity-js/serenity-bdd';\n import { WebdriverIOConfig } from '@serenity-js/webdriverio';\n\n export const config: WebdriverIOConfig = {\n\n   framework: '@serenity-js/webdriverio',\n\n   serenity: {\n       runner: 'cucumber',\n       crew: [\n           ConsoleReporter.forDarkTerminals(),\n           new SerenityBDDReporter(),\n           ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n       ]\n   },\n\n   cucumberOpts: {\n       // ...\n   },\n\n   specs: [\n       './features/*.feature',\n   ],\n};",
      "<caption>WebdriverIO with Serenity/JS and Mocha</caption>\n\n import { ConsoleReporter } from '@serenity-js/console-reporter';\n import { ArtifactArchiver } from '@serenity-js/core';\n import { SerenityBDDReporter } from '@serenity-js/serenity-bdd';\n import { WebdriverIOConfig } from '@serenity-js/webdriverio';\n\n export const config: WebdriverIOConfig = {\n\n   framework: '@serenity-js/webdriverio',\n\n   serenity: {\n       runner: 'mocha',\n       crew: [\n           ConsoleReporter.forDarkTerminals(),\n           new SerenityBDDReporter(),\n           ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n       ]\n   },\n\n   mochaOpts: {\n       // ...\n   },\n\n   specs: [\n       './spec/*.spec.*',\n   ],\n};",
      "<caption>WebdriverIO with Serenity/JS and Jasmine</caption>\n\n import { ConsoleReporter } from '@serenity-js/console-reporter';\n import { ArtifactArchiver } from '@serenity-js/core';\n import { SerenityBDDReporter } from '@serenity-js/serenity-bdd';\n import { WebdriverIOConfig } from '@serenity-js/webdriverio';\n\n export const config: WebdriverIOConfig = {\n\n   framework: '@serenity-js/webdriverio',\n\n   serenity: {\n       runner: 'jasmine',\n       crew: [\n           ConsoleReporter.forDarkTerminals(),\n           new SerenityBDDReporter(),\n           ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),\n       ]\n   },\n\n   jasmineOpts: {\n       // ...\n   },\n\n   specs: [\n       './spec/*.spec.*',\n   ],\n};"
    ],
    "see": [
      "{@link @serenity-js/cucumber/lib/cli~CucumberConfig}",
      "{@link @serenity-js/jasmine/lib/adapter~JasmineConfig}",
      "{@link @serenity-js/mocha/lib/adapter~MochaConfig}",
      "https://webdriver.io/docs/configurationfile/",
      "{@link @wdio/types~Options.TestRunner}"
    ],
    "lineNumber": 114,
    "interface": true,
    "extends": [
      "Options.TestRunner"
    ]
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "serenity",
    "memberof": "src/adapter/WebdriverIOConfig.ts~WebdriverIOConfig",
    "static": false,
    "longname": "src/adapter/WebdriverIOConfig.ts~WebdriverIOConfig#serenity",
    "access": "public",
    "description": " Serenity/JS configuration with an additional `runner` entry\n allowing to specify the test runner, such as `cucumber`, `mocha`, or `jasmine`.",
    "see": [
      "{@link @serenity-js/cucumber/lib/cli~CucumberConfig}",
      "{@link @serenity-js/jasmine/lib/adapter~JasmineConfig}",
      "{@link @serenity-js/mocha/lib/adapter~MochaConfig}"
    ],
    "lineNumber": 139,
    "type": {
      "nullable": null,
      "types": [
        "SerenityConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "src/adapter/WebdriverIOFrameworkAdapter.ts",
    "content": "import { ArtifactArchiver, Serenity } from '@serenity-js/core';\nimport { ModuleLoader, Path, TestRunnerAdapter } from '@serenity-js/core/lib/io';\nimport type { Capabilities } from '@wdio/types';\nimport type { EventEmitter } from 'events';\nimport { isPlainObject } from 'is-plain-object';\n\nimport { BrowserCapabilitiesReporter, InitialisesReporters, OutputStreamBuffer, ProvidesWriteStream } from './reporter';\nimport { OutputStreamBufferPrinter } from './reporter/OutputStreamBufferPrinter';\nimport { TestRunnerLoader } from './TestRunnerLoader';\nimport { WebdriverIOConfig } from './WebdriverIOConfig';\nimport { WebdriverIONotifier } from './WebdriverIONotifier';\nimport deepmerge = require('deepmerge');\n\n/**\n * @package\n */\nexport class WebdriverIOFrameworkAdapter {\n\n    private adapter: TestRunnerAdapter;\n    private notifier: WebdriverIONotifier;\n\n    constructor(\n        private readonly serenity: Serenity,\n        private readonly loader: ModuleLoader,\n        private readonly cwd: Path,\n        private readonly cid: string,\n        webdriverIOConfig: WebdriverIOConfig,\n        private readonly specs: string[],\n        private readonly capabilities: Capabilities.RemoteCapability,\n        reporter: EventEmitter & ProvidesWriteStream & InitialisesReporters\n    ) {\n        const config = deepmerge<WebdriverIOConfig>(this.defaultConfig(), webdriverIOConfig, {\n            isMergeableObject: isPlainObject,\n        });\n\n        this.adapter = new TestRunnerLoader(this.loader, this.cwd, this.cid)\n            .runnerAdapterFor(config);\n\n        // This is the only (hacky) way to register a fake reporter programmatically (as of @wdio/reporter 7.4.2)\n        //  - https://github.com/webdriverio/webdriverio/blob/365fb0ad79fcf4471f21f23e18afa6818986dbdb/packages/wdio-runner/src/index.ts#L147-L181\n        //  - https://github.com/webdriverio/webdriverio/blob/365fb0ad79fcf4471f21f23e18afa6818986dbdb/packages/wdio-runner/src/reporter.ts#L24\n        (reporter as any)._reporters.push(reporter.initReporter([\n            BrowserCapabilitiesReporter, { serenity: this.serenity },\n        ]));\n\n        this.notifier = new WebdriverIONotifier(\n            reporter,\n            this.adapter.successThreshold(),\n            cid,\n            this.specs,\n        );\n\n        const outputStreamBuffer = new OutputStreamBuffer(\n            `[${this.cid}]`,\n        );\n\n        const outputStreamBufferPrinter = new OutputStreamBufferPrinter(\n            outputStreamBuffer,\n            reporter.getWriteStreamObject('@serenity-js/webdriverio')\n        );\n\n        this.serenity.configure({\n            outputStream:   outputStreamBuffer,\n            cueTimeout:     config.serenity.cueTimeout,\n            actors:         config.serenity.actors,\n            crew: [\n                ...config.serenity.crew,\n                this.notifier,\n                outputStreamBufferPrinter,\n            ]\n        });\n    }\n\n    async init(): Promise<WebdriverIOFrameworkAdapter> {\n\n        await this.adapter.load(this.specs);\n\n        return this;\n    }\n\n    hasTests(): boolean {\n        return this.adapter.scenarioCount() > 0;\n    }\n\n    run(): Promise<number> {\n        return this.adapter.run().then(() =>\n            this.notifier.failureCount()\n        );\n    }\n\n    private defaultConfig(): Partial<WebdriverIOConfig> {\n        return {\n            serenity: {\n                crew: [\n                    ArtifactArchiver.storingArtifactsAt(this.cwd.value, 'target/site/serenity'),\n                ]\n            }\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/WebdriverIOFrameworkAdapter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "class",
    "name": "WebdriverIOFrameworkAdapter",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapter.ts",
    "static": true,
    "longname": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/adapter/WebdriverIOFrameworkAdapter.ts",
    "importStyle": "{WebdriverIOFrameworkAdapter}",
    "description": "",
    "lineNumber": 24,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "adapter",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter",
    "static": false,
    "longname": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter#adapter",
    "access": "private",
    "description": " ",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "TestRunnerAdapter"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "notifier",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter",
    "static": false,
    "longname": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter#notifier",
    "access": "private",
    "description": " ",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "WebdriverIONotifier"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 273,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "init",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter#init",
    "access": "public",
    "description": " ",
    "lineNumber": 74,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "hasTests",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter#hasTests",
    "access": "public",
    "description": " ",
    "lineNumber": 81,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "run",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter#run",
    "access": "public",
    "description": " ",
    "lineNumber": 85,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "defaultConfig",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIOFrameworkAdapter.ts~WebdriverIOFrameworkAdapter#defaultConfig",
    "access": "private",
    "description": " ",
    "lineNumber": 91,
    "return": {
      "nullable": null,
      "types": [
        "Partial"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "src/adapter/WebdriverIOFrameworkAdapterFactory.ts",
    "content": "import { Serenity } from '@serenity-js/core';\nimport { ModuleLoader, Path } from '@serenity-js/core/lib/io';\nimport type { Capabilities } from '@wdio/types';\nimport type { EventEmitter } from 'events';\n\nimport { InitialisesReporters, ProvidesWriteStream } from './reporter';\nimport { WebdriverIOConfig } from './WebdriverIOConfig';\nimport { WebdriverIOFrameworkAdapter } from './WebdriverIOFrameworkAdapter';\n\n/**\n * @package\n */\nexport class WebdriverIOFrameworkAdapterFactory {\n    constructor(\n        private readonly serenity: Serenity,\n        private readonly loader: ModuleLoader,\n        private readonly cwd: Path,\n    ) {\n    }\n\n    public init(\n        cid: string,\n        config: WebdriverIOConfig,\n        specs: string[],\n        capabilities: Capabilities.RemoteCapability,\n        reporter: EventEmitter & ProvidesWriteStream & InitialisesReporters\n    ): Promise<WebdriverIOFrameworkAdapter> {\n        return new WebdriverIOFrameworkAdapter(\n            this.serenity,\n            this.loader,\n            this.cwd,\n            cid,\n            config,\n            specs,\n            capabilities,\n            reporter,\n        ).init()\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/WebdriverIOFrameworkAdapterFactory.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "class",
    "name": "WebdriverIOFrameworkAdapterFactory",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapterFactory.ts",
    "static": true,
    "longname": "src/adapter/WebdriverIOFrameworkAdapterFactory.ts~WebdriverIOFrameworkAdapterFactory",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/adapter/WebdriverIOFrameworkAdapterFactory.ts",
    "importStyle": "{WebdriverIOFrameworkAdapterFactory}",
    "description": "",
    "lineNumber": 20,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 282,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapterFactory.ts~WebdriverIOFrameworkAdapterFactory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIOFrameworkAdapterFactory.ts~WebdriverIOFrameworkAdapterFactory#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "init",
    "memberof": "src/adapter/WebdriverIOFrameworkAdapterFactory.ts~WebdriverIOFrameworkAdapterFactory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIOFrameworkAdapterFactory.ts~WebdriverIOFrameworkAdapterFactory#init",
    "access": "public",
    "description": " ",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "WebdriverIOConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "specs",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "EventEmitter & ProvidesWriteStream & InitialisesReporters"
        ],
        "spread": false,
        "optional": false,
        "name": "reporter",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 284,
    "kind": "file",
    "name": "src/adapter/WebdriverIONotifier.ts",
    "content": "import { LogicError, Stage, StageCrewMember } from '@serenity-js/core';\nimport { DomainEvent, SceneFinished, SceneStarts, TestSuiteFinished, TestSuiteStarts } from '@serenity-js/core/lib/events';\nimport {\n    CorrelationId,\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ExecutionIgnored,\n    ExecutionSkipped,\n    ImplementationPending,\n    Outcome,\n    ProblemIndication,\n    TestSuiteDetails,\n} from '@serenity-js/core/lib/model';\nimport { Suite } from '@wdio/reporter/build/stats/suite';\nimport { Test } from '@wdio/reporter/build/stats/test';\nimport type { EventEmitter } from 'events';\nimport { match } from 'tiny-types';\n\n/**\n * @package\n */\nexport class WebdriverIONotifier implements StageCrewMember {\n\n    private readonly events = new EventLog();\n    private readonly suites: TestSuiteDetails[] = [];\n\n    constructor(\n        private readonly reporter: EventEmitter,\n        private readonly successThreshold: Outcome | { Code: number },\n        private readonly cid: string,\n        private readonly specs: string[],\n        private failures: number = 0,\n        private stage?: Stage,\n    ) {\n    }\n\n    assignedTo(stage: Stage): StageCrewMember {\n        this.stage = stage;\n        return this;\n    }\n\n    notifyOf(event: DomainEvent): void {\n        return match<DomainEvent, void>(event)\n            .when(TestSuiteStarts,          WebdriverIONotifier.prototype.onTestSuiteStarts.bind(this))\n            .when(TestSuiteFinished,        WebdriverIONotifier.prototype.onTestSuiteFinished.bind(this))\n            .when(SceneStarts,              WebdriverIONotifier.prototype.onSceneStarts.bind(this))\n            .when(SceneFinished,            WebdriverIONotifier.prototype.onSceneFinished.bind(this))\n            .else(() => void 0);\n    }\n\n    failureCount(): number {\n        return this.failures;\n    }\n\n    private onTestSuiteStarts(started: TestSuiteStarts) {\n        this.events.record(started.details.correlationId, started);\n        this.reporter.emit('suite:start', this.suiteStartEventFrom(started));\n\n        this.suites.push(started.details);\n    }\n\n    private onTestSuiteFinished(finished: TestSuiteFinished) {\n        this.suites.pop();\n\n        const started = this.events.getByCorrelationId<TestSuiteStarts>(finished.details.correlationId);\n        this.reporter.emit('suite:end', this.suiteEndEventFrom(started, finished));\n    }\n\n    private suiteStartEventFrom(started: TestSuiteStarts): Suite {\n        return {\n            type:       'suite:start',\n            uid:        started.details.correlationId.value,\n            cid:        this.cid,\n            title:      started.details.name.value,\n            fullTitle:  this.suiteNamesConcatenatedWith(started.details.name.value),\n            parent:     this.parentSuiteName(),\n            file:       started.details.location.path.value,\n            specs:      this.specs,\n            pending:    false,\n        }\n    }\n\n    private suiteNamesConcatenatedWith(name: string): string {\n        return this.suites.map(suite => suite.name.value).concat(name).join(' ');\n    }\n\n    private suiteEndEventFrom(started: TestSuiteStarts, finished: TestSuiteFinished): Suite {\n        return {\n            ...this.suiteStartEventFrom(started),\n            type:       'suite:end',\n            duration:   finished.timestamp.diff(started.timestamp).inMilliseconds()\n        }\n    }\n\n    private onSceneStarts(started: SceneStarts) {\n        const test = this.testStartEventFrom(started);\n\n        this.events.record(started.sceneId, started);\n\n        this.reporter.emit(test.type, test);\n    }\n\n    private onSceneFinished(finished: SceneFinished) {\n\n        if (finished.outcome.isWorseThan(this.successThreshold)) {\n            this.failures++;\n        }\n\n        const started     = this.events.getByCorrelationId<SceneStarts>(finished.sceneId);\n\n        if (this.willBeRetried(finished.outcome)) {\n            const testResult  = this.testEndEventFrom(started, finished);\n\n            const type = 'test:retry';\n\n            this.reporter.emit(type, {\n                ...testResult,\n                type,\n                error:  this.errorFrom(finished.outcome),\n            });\n\n        } else {\n\n            const testResult  = this.testResultEventFrom(started, finished);\n            this.reporter.emit(testResult.type, testResult);\n\n            const testEnd     = this.testEndEventFrom(started, finished);\n            this.reporter.emit(testEnd.type, testEnd);\n        }\n    }\n\n    private willBeRetried(outcome: Outcome): outcome is ExecutionIgnored {\n        return outcome instanceof ExecutionIgnored;\n    }\n\n    private testStartEventFrom(started: SceneStarts): Test {\n        const title = started.details.name.value\n            .replace(new RegExp(`^.*?(${ this.parentSuiteName() })`), '')\n            .trim();\n\n        return {\n            type:       'test:start',\n            title,\n            fullTitle:  this.suiteNamesConcatenatedWith(title),\n            parent:     this.parentSuiteName(),\n            file:       started.details.location.path.value,\n            pending:    false,\n            cid:        this.cid,\n            uid:        started.sceneId.value,\n            specs:      this.specs,\n        }\n    }\n\n    private parentSuiteName() {\n        return this.suites[this.suites.length - 1]?.name.value || '';\n    }\n\n    private testEndEventFrom(started: SceneStarts, finished: SceneFinished): Test {\n        const duration = finished.timestamp.diff(started.timestamp).inMilliseconds();\n        return {\n            ...this.testStartEventFrom(started),\n            type: 'test:end',\n            duration\n        };\n    }\n\n    private testResultEventFrom(started: SceneStarts, finished: SceneFinished): Test {\n        const test = this.testEndEventFrom(started, finished)\n\n        const unlessSuccessful = (outcome: Outcome, type: Test['type']) =>\n            ! outcome.isWorseThan(this.successThreshold) && (outcome instanceof ProblemIndication)\n                ? 'test:pass'\n                : type;\n\n        return match<Outcome, Test>(finished.outcome)\n            .when(ExecutionCompromised, (outcome: ExecutionCompromised) => ({\n                ...test,\n                type:   unlessSuccessful(outcome, 'test:fail'),\n                error:  this.errorFrom(outcome),\n            }))\n            .when(ExecutionFailedWithError, (outcome: ExecutionFailedWithError) => ({\n                ...test,\n                type:   unlessSuccessful(outcome, 'test:fail'),\n                error:  this.errorFrom(outcome),\n            }))\n            .when(ExecutionFailedWithAssertionError, (outcome: ExecutionFailedWithAssertionError) => ({\n                ...test,\n                type:   unlessSuccessful(outcome, 'test:fail'),\n                error:  this.errorFrom(outcome),\n            }))\n            .when(ImplementationPending, (outcome: ImplementationPending) => ({\n                ...test,\n                type:           unlessSuccessful(outcome, 'test:pending'),\n                error:          this.errorFrom(outcome),\n                pending:        true,\n                pendingReason:  outcome.error.message\n            }))\n            .when(ExecutionIgnored, (outcome: ExecutionIgnored) => ({\n                ...test,\n                // In WebdriverIO, skipped == pending == ignored\n                // https://github.com/webdriverio/webdriverio/blob/a1830046f367be7737af2c00561796c3ae5dd85b/packages/wdio-reporter/src/index.ts#L162\n                type:           unlessSuccessful(outcome, 'test:pending'),\n                error:          this.errorFrom(outcome),\n                pending:        true,\n                pendingReason:  outcome.error.message\n            }))\n            .when(ExecutionSkipped, (outcome: ExecutionSkipped) => ({\n                ...test,\n                // In WebdriverIO, skipped == pending == ignored\n                // https://github.com/webdriverio/webdriverio/blob/a1830046f367be7737af2c00561796c3ae5dd85b/packages/wdio-reporter/src/index.ts#L162\n                type:           unlessSuccessful(outcome, 'test:pending'),\n                pending:        true,\n            }))\n            .else(() => ({\n                ...test,\n                type: 'test:pass',\n            }));\n    }\n\n    private errorFrom(outcome: ProblemIndication) {\n        const error: Error & { type?: string, expected?: string, actual?: string } = outcome.error;\n\n        // https://github.com/webdriverio/webdriverio/blob/7ec2c60a7623de431d60bb3605957e6e4bdf057b/packages/wdio-mocha-framework/src/index.ts#L233\n        return {\n            name:       error.name,\n            message:    error.message,\n            stack:      error.stack,\n            type:       error.type || error.name,\n            expected:   error.expected,\n            actual:     error.actual\n        }\n    }\n}\n\nclass EventLog {\n    private readonly events = new Map<string, DomainEvent>();\n\n    record(correlationId: CorrelationId, event: DomainEvent) {\n        this.events.set(correlationId.value, event)\n    }\n\n    getByCorrelationId<T extends DomainEvent>(correlationId: CorrelationId): T {\n        if (! this.events.has(correlationId.value)) {\n            throw new LogicError(`Event with correlation id ${ correlationId } has never been recorded`);\n        }\n\n        return this.events.get(correlationId.value) as T;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/WebdriverIONotifier.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "class",
    "name": "WebdriverIONotifier",
    "memberof": "src/adapter/WebdriverIONotifier.ts",
    "static": true,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/adapter/WebdriverIONotifier.ts",
    "importStyle": "{WebdriverIONotifier}",
    "description": "",
    "lineNumber": 30,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "events",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#events",
    "access": "private",
    "description": " ",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "suites",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#suites",
    "access": "private",
    "description": " ",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#assignedTo",
    "access": "public",
    "description": " ",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "stage",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#stage",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#notifyOf",
    "access": "public",
    "description": " ",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "failureCount",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#failureCount",
    "access": "public",
    "description": " ",
    "lineNumber": 52,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "onTestSuiteStarts",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#onTestSuiteStarts",
    "access": "private",
    "description": " ",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestSuiteStarts"
        ],
        "spread": false,
        "optional": false,
        "name": "started",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "onTestSuiteFinished",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#onTestSuiteFinished",
    "access": "private",
    "description": " ",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestSuiteFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "finished",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "suiteStartEventFrom",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#suiteStartEventFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestSuiteStarts"
        ],
        "spread": false,
        "optional": false,
        "name": "started",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Suite"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "suiteNamesConcatenatedWith",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#suiteNamesConcatenatedWith",
    "access": "private",
    "description": " ",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "suiteEndEventFrom",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#suiteEndEventFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestSuiteStarts"
        ],
        "spread": false,
        "optional": false,
        "name": "started",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "TestSuiteFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "finished",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Suite"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "onSceneStarts",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#onSceneStarts",
    "access": "private",
    "description": " ",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneStarts"
        ],
        "spread": false,
        "optional": false,
        "name": "started",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "onSceneFinished",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#onSceneFinished",
    "access": "private",
    "description": " ",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "finished",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "willBeRetried",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#willBeRetried",
    "access": "private",
    "description": " ",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "Outcome"
        ],
        "spread": false,
        "optional": false,
        "name": "outcome",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "testStartEventFrom",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#testStartEventFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneStarts"
        ],
        "spread": false,
        "optional": false,
        "name": "started",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Test"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "parentSuiteName",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#parentSuiteName",
    "access": "private",
    "description": " ",
    "lineNumber": 155,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "testEndEventFrom",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#testEndEventFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneStarts"
        ],
        "spread": false,
        "optional": false,
        "name": "started",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SceneFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "finished",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Test"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "testResultEventFrom",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#testResultEventFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "SceneStarts"
        ],
        "spread": false,
        "optional": false,
        "name": "started",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SceneFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "finished",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Test"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "errorFrom",
    "memberof": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~WebdriverIONotifier#errorFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "ProblemIndication"
        ],
        "spread": false,
        "optional": false,
        "name": "outcome",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "{\"name\": *, \"message\": *, \"stack\": *, \"type\": *, \"expected\": *, \"actual\": *}"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "class",
    "name": "EventLog",
    "memberof": "src/adapter/WebdriverIONotifier.ts",
    "static": true,
    "longname": "src/adapter/WebdriverIONotifier.ts~EventLog",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/adapter/WebdriverIONotifier.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 236,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "events",
    "memberof": "src/adapter/WebdriverIONotifier.ts~EventLog",
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~EventLog#events",
    "access": "private",
    "description": " ",
    "lineNumber": 237,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "record",
    "memberof": "src/adapter/WebdriverIONotifier.ts~EventLog",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~EventLog#record",
    "access": "public",
    "description": " ",
    "lineNumber": 239,
    "params": [
      {
        "nullable": null,
        "types": [
          "CorrelationId"
        ],
        "spread": false,
        "optional": false,
        "name": "correlationId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "getByCorrelationId",
    "memberof": "src/adapter/WebdriverIONotifier.ts~EventLog",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/WebdriverIONotifier.ts~EventLog#getByCorrelationId",
    "access": "public",
    "description": " ",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "CorrelationId"
        ],
        "spread": false,
        "optional": false,
        "name": "correlationId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 310,
    "kind": "file",
    "name": "src/adapter/index.ts",
    "content": "export * from './TestRunnerLoader';\nexport * from './WebdriverIOConfig';\nexport * from './WebdriverIOFrameworkAdapterFactory';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 311,
    "kind": "file",
    "name": "src/adapter/reporter/BrowserCapabilitiesReporter.ts",
    "content": "import { Serenity } from '@serenity-js/core';\nimport { SceneTagged } from '@serenity-js/core/lib/events';\nimport { Tag } from '@serenity-js/core/lib/model';\nimport Reporter from '@wdio/reporter';\nimport { Capabilities, Options, Reporters } from '@wdio/types';\n\nimport { TagPrinter } from './TagPrinter';\n\n/**\n * @package\n */\nexport class BrowserCapabilitiesReporter extends Reporter {\n\n    private readonly tagPrinter = new TagPrinter();\n    private readonly serenity: Serenity;\n\n    private readonly tags: Tag[] = [];\n\n    constructor (options: Partial<Reporters.Options> & { serenity: Serenity }) {\n        super({ ...options, stdout: false });\n\n        this.serenity = options.serenity;\n\n        this.on('runner:start', BrowserCapabilitiesReporter.prototype.recordBrowserAndPlatformTags.bind(this));\n        this.on('test:start',   BrowserCapabilitiesReporter.prototype.emitRecordedTags.bind(this));\n    }\n\n    private recordBrowserAndPlatformTags(event: Options.RunnerStart) {\n        const tags = event.isMultiremote\n            ? this.tagsForAll(event.capabilities as unknown as Record<string, Capabilities.DesiredCapabilities | Capabilities.W3CCapabilities>)  // fixme: WDIO MultiremoteCapabilities seem to have incorrect definition?\n            : this.tagPrinter.tagsFor(event.capabilities)\n\n        this.tags.push(...tags);\n    }\n\n    private tagsForAll(capabilities: Record<string, Capabilities.DesiredCapabilities | Capabilities.W3CCapabilities>): Tag[] {\n        return Object.keys(capabilities)\n            .reduce((existingTags, entryName) => {\n\n                const newTags       = this.tagPrinter.tagsFor(capabilities[entryName]);\n                const uniqueNewTags = newTags.filter(tag => ! existingTags.some((existingTag: Tag) => existingTag.equals(tag)));\n\n                return [\n                    ...existingTags,\n                    // todo: maybe add some additional tag to indicate the custom capability name,\n                    //  or the fact that it's a multi-remote scenario?\n                    ...uniqueNewTags,\n                ];\n            }, []);\n    }\n\n    private emitRecordedTags() {\n        this.tags.forEach(tag => {\n            this.serenity.announce(\n                new SceneTagged(\n                    this.serenity.currentSceneId(),\n                    tag,\n                    this.serenity.currentTime(),\n                )\n            )\n        })\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/reporter/BrowserCapabilitiesReporter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "class",
    "name": "BrowserCapabilitiesReporter",
    "memberof": "src/adapter/reporter/BrowserCapabilitiesReporter.ts",
    "static": true,
    "longname": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/adapter/reporter/BrowserCapabilitiesReporter.ts",
    "importStyle": "{BrowserCapabilitiesReporter}",
    "description": "",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "@wdio/reporter~Reporter"
    ],
    "ignore": true
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "tagPrinter",
    "memberof": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter",
    "static": false,
    "longname": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter#tagPrinter",
    "access": "private",
    "description": " ",
    "lineNumber": 14,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "serenity",
    "memberof": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter",
    "static": false,
    "longname": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter#serenity",
    "access": "private",
    "description": " ",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Serenity"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "tags",
    "memberof": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter",
    "static": false,
    "longname": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter#tags",
    "access": "private",
    "description": " ",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 316,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "recordBrowserAndPlatformTags",
    "memberof": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter#recordBrowserAndPlatformTags",
    "access": "private",
    "description": " ",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "tagsForAll",
    "memberof": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter#tagsForAll",
    "access": "private",
    "description": " ",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Record"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "emitRecordedTags",
    "memberof": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/BrowserCapabilitiesReporter.ts~BrowserCapabilitiesReporter#emitRecordedTags",
    "access": "private",
    "description": " ",
    "lineNumber": 52,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "file",
    "name": "src/adapter/reporter/InitialisesReporters.ts",
    "content": "import { Reporters } from '@wdio/types';\n\n/**\n * @package\n */\nexport interface InitialisesReporters {\n    initReporter(reporter: Reporters.ReporterEntry): void;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/reporter/InitialisesReporters.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "class",
    "name": "InitialisesReporters",
    "memberof": "src/adapter/reporter/InitialisesReporters.ts",
    "static": true,
    "longname": "src/adapter/reporter/InitialisesReporters.ts~InitialisesReporters",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/adapter/reporter/InitialisesReporters.ts",
    "importStyle": "{InitialisesReporters}",
    "description": "",
    "lineNumber": 13,
    "interface": true,
    "ignore": true
  },
  {
    "__docId__": 323,
    "kind": "file",
    "name": "src/adapter/reporter/OutputStreamBuffer.ts",
    "content": "import { OutputStream } from '@serenity-js/core/lib/io';\n\n/**\n * @package\n */\nexport class OutputStreamBuffer implements OutputStream {\n    private buffer = '';\n\n    constructor(private readonly prefix: string) {\n    }\n\n    write(content: string): void {\n        this.buffer += content;\n    }\n\n    hasContent(): boolean {\n        return this.buffer !== '';\n    }\n\n    flush(): string {\n        const prefixedContent = this.buffer\n            .split('\\n')\n            .map(line => `${ this.prefix } ${ line }\\n`)\n            .join('');\n\n        this.buffer = '';\n\n        return prefixedContent;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/reporter/OutputStreamBuffer.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 324,
    "kind": "class",
    "name": "OutputStreamBuffer",
    "memberof": "src/adapter/reporter/OutputStreamBuffer.ts",
    "static": true,
    "longname": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/adapter/reporter/OutputStreamBuffer.ts",
    "importStyle": "{OutputStreamBuffer}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "buffer",
    "memberof": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer",
    "static": false,
    "longname": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer#buffer",
    "access": "private",
    "description": " ",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "write",
    "memberof": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer#write",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "hasContent",
    "memberof": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer#hasContent",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "flush",
    "memberof": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/OutputStreamBuffer.ts~OutputStreamBuffer#flush",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "src/adapter/reporter/OutputStreamBufferPrinter.ts",
    "content": "import { Stage, StageCrewMember } from '@serenity-js/core';\nimport { DomainEvent, SceneFinished } from '@serenity-js/core/lib/events';\nimport { OutputStream } from '@serenity-js/core/lib/io';\n\nimport { OutputStreamBuffer } from './OutputStreamBuffer';\n\n/**\n * @package\n */\nexport class OutputStreamBufferPrinter implements StageCrewMember {\n    constructor(\n        private readonly buffer: OutputStreamBuffer,\n        private readonly outputStream: OutputStream,\n        private stage?: Stage,\n    ) {\n    }\n\n    assignedTo(stage: Stage): StageCrewMember {\n        this.stage = stage;\n\n        return this;\n    }\n\n    notifyOf(event: DomainEvent): void {\n        if (event instanceof SceneFinished && this.buffer.hasContent()) {\n            this.outputStream.write(this.buffer.flush());\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/reporter/OutputStreamBufferPrinter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "class",
    "name": "OutputStreamBufferPrinter",
    "memberof": "src/adapter/reporter/OutputStreamBufferPrinter.ts",
    "static": true,
    "longname": "src/adapter/reporter/OutputStreamBufferPrinter.ts~OutputStreamBufferPrinter",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/adapter/reporter/OutputStreamBufferPrinter.ts",
    "importStyle": "{OutputStreamBufferPrinter}",
    "description": "",
    "lineNumber": 17,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 334,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/adapter/reporter/OutputStreamBufferPrinter.ts~OutputStreamBufferPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/OutputStreamBufferPrinter.ts~OutputStreamBufferPrinter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/adapter/reporter/OutputStreamBufferPrinter.ts~OutputStreamBufferPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/OutputStreamBufferPrinter.ts~OutputStreamBufferPrinter#assignedTo",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "stage",
    "memberof": "src/adapter/reporter/OutputStreamBufferPrinter.ts~OutputStreamBufferPrinter",
    "static": false,
    "longname": "src/adapter/reporter/OutputStreamBufferPrinter.ts~OutputStreamBufferPrinter#stage",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/adapter/reporter/OutputStreamBufferPrinter.ts~OutputStreamBufferPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/OutputStreamBufferPrinter.ts~OutputStreamBufferPrinter#notifyOf",
    "access": "public",
    "description": " ",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 338,
    "kind": "file",
    "name": "src/adapter/reporter/ProvidesWriteStream.ts",
    "content": "import { OutputStream } from '@serenity-js/core/lib/io';\n\n/**\n * @package\n */\nexport interface ProvidesWriteStream {\n    getWriteStreamObject(reporter: string): OutputStream;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/reporter/ProvidesWriteStream.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 339,
    "kind": "class",
    "name": "ProvidesWriteStream",
    "memberof": "src/adapter/reporter/ProvidesWriteStream.ts",
    "static": true,
    "longname": "src/adapter/reporter/ProvidesWriteStream.ts~ProvidesWriteStream",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/adapter/reporter/ProvidesWriteStream.ts",
    "importStyle": "{ProvidesWriteStream}",
    "description": "",
    "lineNumber": 13,
    "interface": true,
    "ignore": true
  },
  {
    "__docId__": 340,
    "kind": "file",
    "name": "src/adapter/reporter/TagPrinter.ts",
    "content": "import { BrowserTag, PlatformTag, Tag } from '@serenity-js/core/lib/model';\nimport { Capabilities } from '@wdio/types';\n\n/**\n * @package\n */\nexport class TagPrinter {\n    tagsFor(capability: Capabilities.DesiredCapabilities | Capabilities.W3CCapabilities): Tag[] {\n        const desiredCapabilities = this.desired(capability);\n\n        return [\n            this.browserTagFor(desiredCapabilities),\n            this.platformTagFor(desiredCapabilities),\n        ];\n    }\n\n    private browserTagFor(capabilities: Capabilities.DesiredCapabilities): Tag {\n        return new BrowserTag(\n            this.browserNameFrom(capabilities),\n            this.browserVersionFrom(capabilities),\n        );\n    }\n\n    private platformTagFor(capabilities: Capabilities.DesiredCapabilities): Tag {\n        return new PlatformTag(\n            this.platformNameFrom(capabilities),\n            this.platformVersionFrom(capabilities),\n        );\n    }\n\n    private browserNameFrom(capabilities: Capabilities.DesiredCapabilities): string {\n        return capabilities.browserName\n            || capabilities.browser\n            || (capabilities.app && capabilities.app.replace('sauce-storage:', ''))\n            || 'unknown';\n    }\n\n    private browserVersionFrom(capabilities: Capabilities.DesiredCapabilities): string | undefined {\n        return capabilities.deviceName          // mobile web\n            || capabilities.browserVersion      // W3C format\n            || capabilities.version             // JSONWP format\n            || capabilities.browser_version;    // BrowserStack\n    }\n\n    private platformNameFrom(capabilities: Capabilities.DesiredCapabilities): string {\n        return capabilities.platformName\n            || capabilities.platform\n            || capabilities.os\n            || 'unknown';\n    }\n\n    private platformVersionFrom(capabilities: Capabilities.DesiredCapabilities): string | undefined {\n        return capabilities.platformVersion\n            || capabilities.os_version;\n    }\n\n    private desired(capabilities: Capabilities.RemoteCapability): Capabilities.DesiredCapabilities {\n        return this.isW3C(capabilities)\n            ? capabilities.alwaysMatch\n            : capabilities;\n    }\n\n    private isW3C(capabilities: Capabilities.RemoteCapability): capabilities is Capabilities.W3CCapabilities {\n        return !!(capabilities as Capabilities.W3CCapabilities).alwaysMatch;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/reporter/TagPrinter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 341,
    "kind": "class",
    "name": "TagPrinter",
    "memberof": "src/adapter/reporter/TagPrinter.ts",
    "static": true,
    "longname": "src/adapter/reporter/TagPrinter.ts~TagPrinter",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/adapter/reporter/TagPrinter.ts",
    "importStyle": "{TagPrinter}",
    "description": "",
    "lineNumber": 14,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "tagsFor",
    "memberof": "src/adapter/reporter/TagPrinter.ts~TagPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/TagPrinter.ts~TagPrinter#tagsFor",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          " ",
          " "
        ],
        "spread": false,
        "optional": false,
        "name": "capability",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "browserTagFor",
    "memberof": "src/adapter/reporter/TagPrinter.ts~TagPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/TagPrinter.ts~TagPrinter#browserTagFor",
    "access": "private",
    "description": " ",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Tag"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "platformTagFor",
    "memberof": "src/adapter/reporter/TagPrinter.ts~TagPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/TagPrinter.ts~TagPrinter#platformTagFor",
    "access": "private",
    "description": " ",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Tag"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "browserNameFrom",
    "memberof": "src/adapter/reporter/TagPrinter.ts~TagPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/TagPrinter.ts~TagPrinter#browserNameFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "browserVersionFrom",
    "memberof": "src/adapter/reporter/TagPrinter.ts~TagPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/TagPrinter.ts~TagPrinter#browserVersionFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined ",
        " undefined"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "platformNameFrom",
    "memberof": "src/adapter/reporter/TagPrinter.ts~TagPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/TagPrinter.ts~TagPrinter#platformNameFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "platformVersionFrom",
    "memberof": "src/adapter/reporter/TagPrinter.ts~TagPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/TagPrinter.ts~TagPrinter#platformVersionFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined ",
        " undefined"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "desired",
    "memberof": "src/adapter/reporter/TagPrinter.ts~TagPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/TagPrinter.ts~TagPrinter#desired",
    "access": "private",
    "description": " ",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "isW3C",
    "memberof": "src/adapter/reporter/TagPrinter.ts~TagPrinter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/adapter/reporter/TagPrinter.ts~TagPrinter#isW3C",
    "access": "private",
    "description": " ",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "capabilities",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 351,
    "kind": "file",
    "name": "src/adapter/reporter/index.ts",
    "content": "export * from './BrowserCapabilitiesReporter';\nexport * from './InitialisesReporters';\nexport * from './OutputStreamBuffer';\nexport * from './ProvidesWriteStream';\nexport * from './TagPrinter';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/adapter/reporter/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 352,
    "kind": "file",
    "name": "src/expectations/ElementExpectation.ts",
    "content": "import { AnswersQuestions, Expectation, ExpectationMet, ExpectationNotMet, ExpectationOutcome } from '@serenity-js/core';\nimport { Element } from 'webdriverio';\n\n/**\n * @access private\n */\nexport class ElementExpectation extends Expectation<any, Element<'async'>> {\n    static forElementTo(message: string, fn: (actual: Element<'async'>) => Promise<boolean>): Expectation<any, Element<'async'>> {\n        return new ElementExpectation(message, fn);\n    }\n\n    constructor(\n        subject: string,\n        private readonly fn: (actual: Element<'async'>) => Promise<boolean>,\n    ) {\n        super(subject);\n    }\n\n    answeredBy(actor: AnswersQuestions): (actual: Element<'async'>) => Promise<ExpectationOutcome<boolean, Element<'async'>>> {\n        return (actual: Element<'async'>) =>\n            this.fn(actual)\n                .then(expectationMet =>\n                    expectationMet\n                        ? new ExpectationMet(this.toString(), undefined, actual)\n                        : new ExpectationNotMet(this.toString(), undefined, actual),\n                )\n                .catch(error => {\n                    return new ExpectationNotMet(`${ this.toString() } (${ error.message })`, undefined, actual);\n                });\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/expectations/ElementExpectation.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "class",
    "name": "ElementExpectation",
    "memberof": "src/expectations/ElementExpectation.ts",
    "static": true,
    "longname": "src/expectations/ElementExpectation.ts~ElementExpectation",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/webdriverio/src/expectations/ElementExpectation.ts",
    "importStyle": "{ElementExpectation}",
    "description": "",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "@serenity-js/core~Expectation"
    ],
    "ignore": true
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "forElementTo",
    "memberof": "src/expectations/ElementExpectation.ts~ElementExpectation",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/ElementExpectation.ts~ElementExpectation.forElementTo",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 355,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/expectations/ElementExpectation.ts~ElementExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/ElementExpectation.ts~ElementExpectation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/expectations/ElementExpectation.ts~ElementExpectation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/expectations/ElementExpectation.ts~ElementExpectation#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 357,
    "kind": "file",
    "name": "src/expectations/index.ts",
    "content": "export * from './isActive';\nexport * from './isClickable';\nexport * from './isEnabled';\nexport * from './isPresent';\nexport * from './isSelected';\nexport * from './isVisible';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/expectations/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 358,
    "kind": "file",
    "name": "src/expectations/isActive.ts",
    "content": "import { Expectation } from '@serenity-js/core';\nimport { Element } from 'webdriverio';\n\nimport { ElementExpectation } from './ElementExpectation';\n\n/**\n * @desc\n *  Expectation that the element is active (has focus).\n *  If the selector matches multiple elements, it will return true if one of the elements has focus.\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}\n *\n * @see https://webdriver.io/docs/api/element/isFocused/\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/core/lib/screenplay/questions~Check}\n * @see {@link Wait}\n */\nexport function isActive(): Expectation<boolean, Element<'async'>> {\n    return ElementExpectation.forElementTo('become active', actual => actual.isFocused());\n}\n\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/expectations/isActive.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 359,
    "kind": "function",
    "name": "isActive",
    "memberof": "src/expectations/isActive.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isActive.ts~isActive",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/expectations",
    "importStyle": "{isActive}",
    "description": " Expectation that the element is active (has focus).\n If the selector matches multiple elements, it will return true if one of the elements has focus.",
    "see": [
      "https://webdriver.io/docs/api/element/isFocused/",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/core/lib/screenplay/questions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, Element<'async'>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 360,
    "kind": "file",
    "name": "src/expectations/isClickable.ts",
    "content": "import { Expectation } from '@serenity-js/core';\nimport { Element } from 'webdriverio';\n\nimport { ElementExpectation } from './ElementExpectation';\n\n/**\n * @desc\n *  Expectation that an element is clickable, which means:\n *  - it exists\n *  - it is visible\n *  - it is within viewport (if not, try to scroll to it)\n *  - its center is not overlapped with another element\n *  - it is not disabled\n *  otherwise return false.\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}\n *\n * @see https://webdriver.io/docs/api/element/isClickable/\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/core/lib/screenplay/questions~Check}\n * @see {@link Wait}\n */\nexport function isClickable(): Expectation<boolean, Element<'async'>> {\n    return ElementExpectation.forElementTo('become clickable', actual => actual.isClickable());\n}\n\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/expectations/isClickable.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 361,
    "kind": "function",
    "name": "isClickable",
    "memberof": "src/expectations/isClickable.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isClickable.ts~isClickable",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/expectations",
    "importStyle": "{isClickable}",
    "description": " Expectation that an element is clickable, which means:\n - it exists\n - it is visible\n - it is within viewport (if not, try to scroll to it)\n - its center is not overlapped with another element\n - it is not disabled\n otherwise return false.",
    "see": [
      "https://webdriver.io/docs/api/element/isClickable/",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/core/lib/screenplay/questions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, Element<'async'>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 362,
    "kind": "file",
    "name": "src/expectations/isEnabled.ts",
    "content": "import { Expectation } from '@serenity-js/core';\nimport { Element } from 'webdriverio';\n\nimport { ElementExpectation } from './ElementExpectation';\n\n/**\n * @desc\n *  Expectation that the element is enabled.\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}\n *\n * @see https://webdriver.io/docs/api/element/isEnabled/\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/core/lib/screenplay/questions~Check}\n * @see {@link Wait}\n */\nexport function isEnabled(): Expectation<boolean, Element<'async'>> {\n    return ElementExpectation.forElementTo('become enabled', actual => actual.isEnabled());\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/expectations/isEnabled.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 363,
    "kind": "function",
    "name": "isEnabled",
    "memberof": "src/expectations/isEnabled.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isEnabled.ts~isEnabled",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/expectations",
    "importStyle": "{isEnabled}",
    "description": " Expectation that the element is enabled.",
    "see": [
      "https://webdriver.io/docs/api/element/isEnabled/",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/core/lib/screenplay/questions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, Element<'async'>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 364,
    "kind": "file",
    "name": "src/expectations/isPresent.ts",
    "content": "import { Expectation } from '@serenity-js/core';\nimport { Element } from 'webdriverio';\n\nimport { ElementExpectation } from './ElementExpectation';\n\n/**\n * @desc\n *  Expectation that the element is present in the DOM of a page.\n *  Please note that this does not necessarily mean that the element is visible.\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}\n *\n * @see https://webdriver.io/docs/api/element/isExisting/\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/core/lib/screenplay/questions~Check}\n * @see {@link Wait}\n */\nexport function isPresent(): Expectation<boolean, Element<'async'>> {\n    return ElementExpectation.forElementTo('become present', actual => actual.isExisting());\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/expectations/isPresent.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "isPresent",
    "memberof": "src/expectations/isPresent.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isPresent.ts~isPresent",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/expectations",
    "importStyle": "{isPresent}",
    "description": " Expectation that the element is present in the DOM of a page.\n Please note that this does not necessarily mean that the element is visible.",
    "see": [
      "https://webdriver.io/docs/api/element/isExisting/",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/core/lib/screenplay/questions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, Element<'async'>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 366,
    "kind": "file",
    "name": "src/expectations/isSelected.ts",
    "content": "import { Expectation } from '@serenity-js/core';\nimport { Element } from 'webdriverio';\n\nimport { ElementExpectation } from './ElementExpectation';\n\n/**\n * @desc\n *  Expectation that an `<option>` or `<input>` element of type checkbox or radio is currently selected.\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}\n *\n * @see https://webdriver.io/docs/api/element/isSelected/\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/core/lib/screenplay/questions~Check}\n * @see {@link Wait}\n */\nexport function isSelected(): Expectation<boolean, Element<'async'>> {\n    return ElementExpectation.forElementTo('become selected', actual => actual.isSelected());\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/expectations/isSelected.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 367,
    "kind": "function",
    "name": "isSelected",
    "memberof": "src/expectations/isSelected.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isSelected.ts~isSelected",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/expectations",
    "importStyle": "{isSelected}",
    "description": " Expectation that an `<option>` or `<input>` element of type checkbox or radio is currently selected.",
    "see": [
      "https://webdriver.io/docs/api/element/isSelected/",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/core/lib/screenplay/questions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, Element<'async'>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 368,
    "kind": "file",
    "name": "src/expectations/isVisible.ts",
    "content": "import { Expectation } from '@serenity-js/core';\nimport { Element } from 'webdriverio';\n\nimport { ElementExpectation } from './ElementExpectation';\n\n/**\n * @desc\n *  Expectation that the element is present in the DOM of the page and visible.\n *\n * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}\n *\n * @see https://webdriver.io/docs/api/element/isDisplayed/\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/core/lib/screenplay/questions~Check}\n * @see {@link Wait}\n */\nexport function isVisible(): Expectation<boolean, Element<'async'>> {\n    return ElementExpectation.forElementTo('become visible', actual => actual.isDisplayed());\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/expectations/isVisible.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 369,
    "kind": "function",
    "name": "isVisible",
    "memberof": "src/expectations/isVisible.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/expectations/isVisible.ts~isVisible",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/expectations",
    "importStyle": "{isVisible}",
    "description": " Expectation that the element is present in the DOM of the page and visible.",
    "see": [
      "https://webdriver.io/docs/api/element/isDisplayed/",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/core/lib/screenplay/questions~Check}",
      "{@link Wait}"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions~Expectation<boolean, Element<'async'>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Expectation<boolean, Element<'async'>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "src/index.ts",
    "content": "import { serenity } from '@serenity-js/core';\nimport { ModuleLoader, Path } from '@serenity-js/core/lib/io';\n\nimport { WebdriverIOFrameworkAdapterFactory } from './adapter';\n\nconst adapterFactory = new WebdriverIOFrameworkAdapterFactory(\n    serenity,\n    new ModuleLoader(process.cwd()),\n    Path.from(process.cwd()),\n);\n\nexport default adapterFactory;\n\nexport { WebdriverIOConfig } from './adapter';\nexport * from './expectations';\nexport * from './input';\nexport * from './screenplay';\nexport * from './stage';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "file",
    "name": "src/input/Key.ts",
    "content": "/**\n * @desc\n *  Represents pressable keys that aren't text to be used with {@link Press}.\n *\n *  Note that modifier like Shift, Alt and Meta (a.k.a. Command on Mac) will stay pressed\n *\n * @enum {string}\n * @see {@link Press}\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#keyboard-actions\n * @see https://github.com/puppeteer/puppeteer/blob/v7.1.0/src/common/USKeyboardLayout.ts\n * @see https://github.com/SeleniumHQ/selenium/blob/trunk/javascript/node/selenium-webdriver/lib/input.js#L46\n * @see https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-utils/src/constants.ts#L5\n */\nexport class Key {\n    public static Alt = new Key('Alt', '\\uE00A', true);\n    public static ArrowDown = new Key('ArrowDown', '\\uE015');\n    public static ArrowLeft = new Key('ArrowLeft', '\\uE012');\n    public static ArrowRight = new Key('ArrowRight', '\\uE014');\n    public static ArrowUp = new Key('ArrowUp', '\\uE013');\n    public static Backspace = new Key('Backspace', '\\uE003');\n    public static Cancel = new Key('Cancel', '\\uE001');\n    public static Clear = new Key('Clear', '\\uE005');\n    public static Control = new Key('Control', '\\uE009', true);\n    public static Delete = new Key('Delete', '\\uE017');\n    public static End = new Key('End', '\\uE010');\n    public static Enter = new Key('Enter', '\\uE007');\n    public static Escape = new Key('Escape', '\\uE00C');\n    public static F1 = new Key('F1', '\\uE031');\n    public static F2 = new Key('F2', '\\uE032');\n    public static F3 = new Key('F3', '\\uE033');\n    public static F4 = new Key('F4', '\\uE034');\n    public static F5 = new Key('F5', '\\uE035');\n    public static F6 = new Key('F6', '\\uE036');\n    public static F7 = new Key('F7', '\\uE037');\n    public static F8 = new Key('F8', '\\uE038');\n    public static F9 = new Key('F9', '\\uE039');\n    public static F10 = new Key('F10', '\\uE03A');\n    public static F11 = new Key('F11', '\\uE03B');\n    public static F12 = new Key('F12', '\\uE03C');\n    public static Help = new Key('Help', '\\uE002');\n    public static Home = new Key('Home', '\\uE011');\n    public static Insert = new Key('Insert', '\\uE016');\n    public static Meta = new Key('Meta', '\\uE03D', true);\n    public static Numpad0 = new Key('Numpad0', '\\uE01A');\n    public static Numpad1 = new Key('Numpad1', '\\uE01B');\n    public static Numpad2 = new Key('Numpad2', '\\uE01C');\n    public static Numpad3 = new Key('Numpad3', '\\uE01D');\n    public static Numpad4 = new Key('Numpad4', '\\uE01E');\n    public static Numpad5 = new Key('Numpad5', '\\uE01F');\n    public static Numpad6 = new Key('Numpad6', '\\uE020');\n    public static Numpad7 = new Key('Numpad7', '\\uE021');\n    public static Numpad8 = new Key('Numpad8', '\\uE022');\n    public static Numpad9 = new Key('Numpad9', '\\uE023');\n    public static NumpadAdd = new Key('NumpadAdd', '\\uE025');\n    public static NumpadDecimal = new Key('NumpadDecimal', '\\uE028');\n    public static NumpadDivide = new Key('NumpadDivide', '\\uE029');\n    public static NumpadEqual = new Key('NumpadEqual', '\\uE019');\n    public static NumpadMultiply = new Key('NumpadMultiply', '\\uE024');\n    public static NumpadSubtract = new Key('NumpadSubtract', '\\uE027');\n    public static PageDown = new Key('PageDown', '\\uE00F');\n    public static PageUp = new Key('PageUp', '\\uE00E');\n    public static Pause = new Key('Pause', '\\uE00B');\n    public static Semicolon = new Key('Semicolon', '\\uE018');\n    public static Shift = new Key('Shift', '\\uE008', true);\n    public static Space = new Key('Space', '\\uE00D');\n    public static Tab = new Key('Tab', '\\uE004');\n\n    public static isKey(maybeKey: unknown): maybeKey is Key {\n        return !! maybeKey\n            && maybeKey instanceof Key;\n    }\n\n    constructor(\n        public readonly devtoolsName: string,\n        public readonly utf16codePoint: string,\n        public readonly isModifier: boolean = false,\n    ) {\n    }\n\n    toString(): string {\n        return this.devtoolsName;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/input/Key.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 372,
    "kind": "class",
    "name": "Key",
    "memberof": "src/input/Key.ts",
    "static": true,
    "longname": "src/input/Key.ts~Key",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/input",
    "importStyle": "{Key}",
    "description": " Represents pressable keys that aren't text to be used with {@link Press}.\n\n Note that modifier like Shift, Alt and Meta (a.k.a. Command on Mac) will stay pressed",
    "see": [
      "{@link Press}",
      "https://w3c.github.io/webdriver/webdriver-spec.html#keyboard-actions",
      "https://github.com/puppeteer/puppeteer/blob/v7.1.0/src/common/USKeyboardLayout.ts",
      "https://github.com/SeleniumHQ/selenium/blob/trunk/javascript/node/selenium-webdriver/lib/input.js#L46",
      "https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-utils/src/constants.ts#L5"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": "{string}"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "Alt",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Alt",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "ArrowDown",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.ArrowDown",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "ArrowLeft",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.ArrowLeft",
    "access": "public",
    "description": " ",
    "lineNumber": 17,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "ArrowRight",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.ArrowRight",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "ArrowUp",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.ArrowUp",
    "access": "public",
    "description": " ",
    "lineNumber": 19,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "Backspace",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Backspace",
    "access": "public",
    "description": " ",
    "lineNumber": 20,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "member",
    "name": "Cancel",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Cancel",
    "access": "public",
    "description": " ",
    "lineNumber": 21,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "Clear",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Clear",
    "access": "public",
    "description": " ",
    "lineNumber": 22,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "Control",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Control",
    "access": "public",
    "description": " ",
    "lineNumber": 23,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "Delete",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Delete",
    "access": "public",
    "description": " ",
    "lineNumber": 24,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "End",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.End",
    "access": "public",
    "description": " ",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "Enter",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Enter",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "Escape",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Escape",
    "access": "public",
    "description": " ",
    "lineNumber": 27,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "F1",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F1",
    "access": "public",
    "description": " ",
    "lineNumber": 28,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "F2",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F2",
    "access": "public",
    "description": " ",
    "lineNumber": 29,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "F3",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F3",
    "access": "public",
    "description": " ",
    "lineNumber": 30,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "F4",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F4",
    "access": "public",
    "description": " ",
    "lineNumber": 31,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "F5",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F5",
    "access": "public",
    "description": " ",
    "lineNumber": 32,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "F6",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F6",
    "access": "public",
    "description": " ",
    "lineNumber": 33,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "F7",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F7",
    "access": "public",
    "description": " ",
    "lineNumber": 34,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "F8",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F8",
    "access": "public",
    "description": " ",
    "lineNumber": 35,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "F9",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F9",
    "access": "public",
    "description": " ",
    "lineNumber": 36,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 395,
    "kind": "member",
    "name": "F10",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F10",
    "access": "public",
    "description": " ",
    "lineNumber": 37,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "F11",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F11",
    "access": "public",
    "description": " ",
    "lineNumber": 38,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "F12",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.F12",
    "access": "public",
    "description": " ",
    "lineNumber": 39,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "Help",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Help",
    "access": "public",
    "description": " ",
    "lineNumber": 40,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "Home",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Home",
    "access": "public",
    "description": " ",
    "lineNumber": 41,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "Insert",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Insert",
    "access": "public",
    "description": " ",
    "lineNumber": 42,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "Meta",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Meta",
    "access": "public",
    "description": " ",
    "lineNumber": 43,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "Numpad0",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Numpad0",
    "access": "public",
    "description": " ",
    "lineNumber": 44,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "member",
    "name": "Numpad1",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Numpad1",
    "access": "public",
    "description": " ",
    "lineNumber": 45,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "Numpad2",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Numpad2",
    "access": "public",
    "description": " ",
    "lineNumber": 46,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "Numpad3",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Numpad3",
    "access": "public",
    "description": " ",
    "lineNumber": 47,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "Numpad4",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Numpad4",
    "access": "public",
    "description": " ",
    "lineNumber": 48,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "Numpad5",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Numpad5",
    "access": "public",
    "description": " ",
    "lineNumber": 49,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "Numpad6",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Numpad6",
    "access": "public",
    "description": " ",
    "lineNumber": 50,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "Numpad7",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Numpad7",
    "access": "public",
    "description": " ",
    "lineNumber": 51,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "Numpad8",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Numpad8",
    "access": "public",
    "description": " ",
    "lineNumber": 52,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "Numpad9",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Numpad9",
    "access": "public",
    "description": " ",
    "lineNumber": 53,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "NumpadAdd",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.NumpadAdd",
    "access": "public",
    "description": " ",
    "lineNumber": 54,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "NumpadDecimal",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.NumpadDecimal",
    "access": "public",
    "description": " ",
    "lineNumber": 55,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "NumpadDivide",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.NumpadDivide",
    "access": "public",
    "description": " ",
    "lineNumber": 56,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "NumpadEqual",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.NumpadEqual",
    "access": "public",
    "description": " ",
    "lineNumber": 57,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "NumpadMultiply",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.NumpadMultiply",
    "access": "public",
    "description": " ",
    "lineNumber": 58,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "NumpadSubtract",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.NumpadSubtract",
    "access": "public",
    "description": " ",
    "lineNumber": 59,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "PageDown",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.PageDown",
    "access": "public",
    "description": " ",
    "lineNumber": 60,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "PageUp",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.PageUp",
    "access": "public",
    "description": " ",
    "lineNumber": 61,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "Pause",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Pause",
    "access": "public",
    "description": " ",
    "lineNumber": 62,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "Semicolon",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Semicolon",
    "access": "public",
    "description": " ",
    "lineNumber": 63,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "Shift",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Shift",
    "access": "public",
    "description": " ",
    "lineNumber": 64,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "Space",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Space",
    "access": "public",
    "description": " ",
    "lineNumber": 65,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "Tab",
    "memberof": "src/input/Key.ts~Key",
    "static": true,
    "longname": "src/input/Key.ts~Key.Tab",
    "access": "public",
    "description": " ",
    "lineNumber": 66,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "isKey",
    "memberof": "src/input/Key.ts~Key",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/input/Key.ts~Key.isKey",
    "access": "public",
    "description": " ",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeKey",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 426,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/input/Key.ts~Key",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Key.ts~Key#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 667,
    "undocument": true
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "toString",
    "memberof": "src/input/Key.ts~Key",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/input/Key.ts~Key#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 428,
    "kind": "file",
    "name": "src/input/index.ts",
    "content": "export * from './Key';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/input/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 429,
    "kind": "file",
    "name": "src/screenplay/abilities/BrowseTheWeb.ts",
    "content": "import { Ability, LogicError, UsesAbilities } from '@serenity-js/core';\nimport type { Browser } from 'webdriverio';\n\nimport { Key } from '../../input';\n\n/**\n * @desc\n *  An {@link @serenity-js/core/lib/screenplay~Ability} that enables the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n *  to interact with Web apps using [WebdriverIO](https://webdriver.io/).\n *\n *  *Please note*: this class is still marked as experimental while new WebdriverIO Interactions and Questions are being developed.\n *  This means that its interface can change without affecting the major version of Serenity/JS itself.\n *  In particular, please don't rely on the `browser` field to remain `public` in future releases.\n *\n * @experimental\n *\n * @example <caption>Using the WebdriverIO browser</caption>\n *  import { Actor } from '@serenity-js/core';\n *  import { BrowseTheWeb, by, Navigate, Target } from '@serenity-js/webdriverio'\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  const actor = Actor.named('Wendy').whoCan(\n *      BrowseTheWeb.using(browser),\n *  );\n *\n *  const HomePage = {\n *      Title: Target.the('title').located(by.css('h1')),\n *  };\n *\n *  actor.attemptsTo(\n *      Navigate.to(`https://serenity-js.org`),\n *      Ensure.that(Text.of(HomePage.Title), equals('Serenity/JS')),\n *  );\n *\n * @see https://webdriver.io/\n *\n * @public\n * @implements {@serenity-js/core/lib/screenplay~Ability}\n * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n */\nexport class BrowseTheWeb implements Ability {\n\n    /**\n     * @private\n     */\n    private lastScriptExecutionSummary: LastScriptExecutionSummary;\n\n    /**\n     * @param {@wdio/types~Browser} browserInstance\n     * @returns {BrowseTheWeb}\n     */\n    static using(browserInstance: Browser<'async'>): BrowseTheWeb {\n        return new BrowseTheWeb(browserInstance);\n    }\n\n    /**\n     * @desc\n     *  Used to access the Actor's ability to {@link BrowseTheWeb}\n     *  from within the {@link @serenity-js/core/lib/screenplay~Interaction} classes,\n     *  such as {@link Navigate}.\n     *\n     * @param {@serenity-js/core/lib/screenplay/actor~UsesAbilities} actor\n     * @return {BrowseTheWeb}\n     */\n    static as(actor: UsesAbilities): BrowseTheWeb {\n        return actor.abilityTo(BrowseTheWeb);\n    }\n\n    /**\n     * @param {@wdio/types~Browser} browser\n     */\n    constructor(public readonly browser: Browser<'async'>) {\n    }\n\n    /**\n     * @desc\n     *  Navigate to a given destination, specified as an absolute URL\n     *  or a path relative to WebdriverIO `baseUrl`.\n     *\n     * @param {string} destination\n     * @returns {Promise<void>}\n     */\n    get(destination: string): Promise<void> {\n        return this.browser.url(destination) as any;  // todo: check if this returns a string or is mistyped\n    }\n\n    /**\n     * @desc\n     *  Send a sequence of {@link Key} strokes to the active element.\n     *\n     * @param {Array<Key | string>} keys\n     *  Keys to enter\n     *\n     * @returns {Promise<void>}\n     *\n     * @see https://webdriver.io/docs/api/browser/keys/\n     */\n    sendKeys(keys: Array<Key | string>): Promise<void> {\n        const keySequence = keys.map(key => {\n            if (! Key.isKey(key)) {\n                return key;\n            }\n\n            if (browser.isDevTools) {\n                return key.devtoolsName;\n            }\n\n            return key.utf16codePoint;\n        });\n\n        return this.browser.keys(keySequence);\n    }\n\n    /**\n     * @desc\n     *  Take a screenshot of the top-level browsing context's viewport.\n     *\n     * @return {Promise<string>}\n     *  A promise that will resolve to a base64-encoded screenshot PNG\n     */\n    takeScreenshot(): Promise<string> {\n        return this.browser.takeScreenshot();\n    }\n\n    /**\n     * @desc\n     *  Schedules a command to execute JavaScript in the context of the currently selected frame or window.\n     *  The script fragment will be executed as the body of an anonymous function.\n     *  If the script is provided as a function object, that function will be converted to a string for injection\n     *  into the target window.\n     *\n     *  Any arguments provided in addition to the script will be included as script arguments and may be referenced\n     *  using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`.\n     *  Arrays and objects may also be used as script arguments as long as each item adheres\n     *  to the types previously mentioned.\n     *\n     *  The script may refer to any variables accessible from the current window.\n     *  Furthermore, the script will execute in the window's context, thus `document` may be used to refer\n     *  to the current document. Any local variables will not be available once the script has finished executing,\n     *  though global variables will persist.\n     *\n     *  If the script has a return value (i.e. if the script contains a `return` statement),\n     *  then the following steps will be taken for resolving this functions return value:\n     *\n     *  For a HTML element, the value will resolve to a WebElement\n     *  - Null and undefined return values will resolve to null\n     *  - Booleans, numbers, and strings will resolve as is\n     *  - Functions will resolve to their string representation\n     *  - For arrays and objects, each member item will be converted according to the rules above\n     *\n     * @example <caption>Perform a sleep in the browser under test</caption>\n     * BrowseTheWeb.as(actor).executeAsyncScript(`\n     *   return arguments[0].tagName;\n     * `, Target.the('header').located(by.css(h1))\n     *\n     * @see https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeScript-java.lang.String-java.lang.Object...-\n     *\n     * @param {string | Function} script\n     * @param {any[]} args\n     *\n     * @returns {Promise<any>}\n     *\n     * @see {@link BrowseTheWeb#getLastScriptExecutionResult}\n     */\n    executeScript<Result, InnerArguments extends any[]>(\n        script: string | ((...parameters: InnerArguments) => Result),\n        ...args: InnerArguments\n    ): Promise<Result> {\n\n        return this.browser.execute(script, ...args)\n            .then(result => {\n                this.lastScriptExecutionSummary = new LastScriptExecutionSummary(\n                    result,\n                );\n                return result;\n            });\n    }\n\n    /**\n     * @desc\n     *  Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n     *  The script fragment will be executed as the body of an anonymous function.\n     *  If the script is provided as a function object, that function will be converted to a string for injection\n     *  into the target window.\n     *\n     *  Any arguments provided in addition to the script will be included as script arguments and may be referenced\n     *  using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`\n     *  Arrays and objects may also be used as script arguments as long as each item adheres\n     *  to the types previously mentioned.\n     *\n     *  Unlike executing synchronous JavaScript with {@link BrowseTheWeb#executeScript},\n     *  scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n     *\n     *  This callback will always be injected into the executed function as the last argument,\n     *  and thus may be referenced with `arguments[arguments.length - 1]`.\n     *\n     *  The following steps will be taken for resolving this functions return value against\n     *  the first argument to the script's callback function:\n     *\n     *  - For a HTML element, the value will resolve to a WebElement\n     *  - Null and undefined return values will resolve to null\n     *  - Booleans, numbers, and strings will resolve as is\n     *  - Functions will resolve to their string representation\n     *  - For arrays and objects, each member item will be converted according to the rules above\n     *\n     * @example <caption>Perform a sleep in the browser under test</caption>\n     * BrowseTheWeb.as(actor).executeAsyncScript(`\n     *   var delay    = arguments[0];\n     *   var callback = arguments[arguments.length - 1];\n     *\n     *   window.setTimeout(callback, delay);\n     * `, 500)\n     *\n     * @example <caption>Return a value asynchronously</caption>\n     * BrowseTheWeb.as(actor).executeAsyncScript(`\n     *   var callback = arguments[arguments.length - 1];\n     *\n     *   callback('some return value')\n     * `).then(value => doSomethingWithThe(value))\n     *\n     * @see https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeAsyncScript-java.lang.String-java.lang.Object...-\n     *\n     * @param {string|Function} script\n     * @param {any[]} args\n     *\n     * @returns {Promise<any>}\n     *\n     * @see {@link BrowseTheWeb#getLastScriptExecutionResult}\n     */\n    executeAsyncScript<Result, Parameters extends any[]>(\n        script: string | ((...args: [...parameters: Parameters, callback: (result: Result) => void]) => void),\n        ...args: Parameters\n    ): Promise<Result> {\n        return this.browser.executeAsync<Result, Parameters>(script, ...args)\n            .then(result => {\n                this.lastScriptExecutionSummary = new LastScriptExecutionSummary<Result>(\n                    result,\n                );\n                return result;\n            });\n    }\n\n    /**\n     * @desc\n     *  Returns the last result of calling {@link BrowseTheWeb#executeAsyncScript}\n     *  or {@link BrowseTheWeb#executeScript}\n     *\n     * @returns {any}\n     */\n    getLastScriptExecutionResult<Result = any>(): Result {\n        if (! this.lastScriptExecutionSummary) {\n            throw new LogicError(`Make sure to execute a script before checking on the result`);\n        }\n\n        return this.lastScriptExecutionSummary.result as Result;\n    }\n}\n\n/**\n * @package\n */\nclass LastScriptExecutionSummary<Result = any> {\n    constructor(public readonly result: Result) {}\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/abilities/BrowseTheWeb.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 430,
    "kind": "class",
    "name": "BrowseTheWeb",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts",
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/abilities",
    "importStyle": "{BrowseTheWeb}",
    "description": " An {@link @serenity-js/core/lib/screenplay~Ability} that enables the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n to interact with Web apps using [WebdriverIO](https://webdriver.io/).\n\n *Please note*: this class is still marked as experimental while new WebdriverIO Interactions and Questions are being developed.\n This means that its interface can change without affecting the major version of Serenity/JS itself.\n In particular, please don't rely on the `browser` field to remain `public` in future releases.",
    "examples": [
      "<caption>Using the WebdriverIO browser</caption>\n import { Actor } from '@serenity-js/core';\n import { BrowseTheWeb, by, Navigate, Target } from '@serenity-js/webdriverio'\n import { Ensure, equals } from '@serenity-js/assertions';\n\n const actor = Actor.named('Wendy').whoCan(\n     BrowseTheWeb.using(browser),\n );\n\n const HomePage = {\n     Title: Target.the('title').located(by.css('h1')),\n };\n\n actor.attemptsTo(\n     Navigate.to(`https://serenity-js.org`),\n     Ensure.that(Text.of(HomePage.Title), equals('Serenity/JS')),\n );"
    ],
    "see": [
      "https://webdriver.io/",
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}"
    ],
    "lineNumber": 48,
    "experimental": true,
    "interface": false,
    "implements": [
      "Ability"
    ]
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "lastScriptExecutionSummary",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#lastScriptExecutionSummary",
    "access": "private",
    "description": "",
    "lineNumber": 64,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "using",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb.using",
    "access": "public",
    "description": "",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BrowseTheWeb}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Browser"
        ],
        "spread": false,
        "optional": false,
        "name": "browserInstance",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BrowseTheWeb"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "as",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb.as",
    "access": "public",
    "description": " Used to access the Actor's ability to {@link BrowseTheWeb}\n from within the {@link @serenity-js/core/lib/screenplay~Interaction} classes,\n such as {@link Navigate}.",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BrowseTheWeb"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 434,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "Browser"
        ],
        "spread": false,
        "optional": false,
        "name": "browser",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#get",
    "access": "public",
    "description": " Navigate to a given destination, specified as an absolute URL\n or a path relative to WebdriverIO `baseUrl`.",
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "sendKeys",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#sendKeys",
    "access": "public",
    "description": " Send a sequence of {@link Key} strokes to the active element.",
    "see": [
      "https://webdriver.io/docs/api/browser/keys/"
    ],
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Key | string>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "Keys to enter"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "takeScreenshot",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#takeScreenshot",
    "access": "public",
    "description": " Take a screenshot of the top-level browsing context's viewport.",
    "lineNumber": 206,
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "A promise that will resolve to a base64-encoded screenshot PNG"
    },
    "params": []
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "executeScript",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#executeScript",
    "access": "public",
    "description": " Schedules a command to execute JavaScript in the context of the currently selected frame or window.\n The script fragment will be executed as the body of an anonymous function.\n If the script is provided as a function object, that function will be converted to a string for injection\n into the target window.\n\n Any arguments provided in addition to the script will be included as script arguments and may be referenced\n using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`.\n Arrays and objects may also be used as script arguments as long as each item adheres\n to the types previously mentioned.\n\n The script may refer to any variables accessible from the current window.\n Furthermore, the script will execute in the window's context, thus `document` may be used to refer\n to the current document. Any local variables will not be available once the script has finished executing,\n though global variables will persist.\n\n If the script has a return value (i.e. if the script contains a `return` statement),\n then the following steps will be taken for resolving this functions return value:\n\n For a HTML element, the value will resolve to a WebElement\n - Null and undefined return values will resolve to null\n - Booleans, numbers, and strings will resolve as is\n - Functions will resolve to their string representation\n - For arrays and objects, each member item will be converted according to the rules above",
    "examples": [
      "<caption>Perform a sleep in the browser under test</caption>\nBrowseTheWeb.as(actor).executeAsyncScript(`\n  return arguments[0].tagName;\n`, Target.the('header').located(by.css(h1))"
    ],
    "see": [
      "https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeScript-java.lang.String-java.lang.Object...-",
      "{@link BrowseTheWeb#getLastScriptExecutionResult}"
    ],
    "lineNumber": 265,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<any>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "executeAsyncScript",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#executeAsyncScript",
    "access": "public",
    "description": " Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n The script fragment will be executed as the body of an anonymous function.\n If the script is provided as a function object, that function will be converted to a string for injection\n into the target window.\n\n Any arguments provided in addition to the script will be included as script arguments and may be referenced\n using the `arguments` object. Arguments may be a `boolean`, `number`, `string` or `WebElement`\n Arrays and objects may also be used as script arguments as long as each item adheres\n to the types previously mentioned.\n\n Unlike executing synchronous JavaScript with {@link BrowseTheWeb#executeScript},\n scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n\n This callback will always be injected into the executed function as the last argument,\n and thus may be referenced with `arguments[arguments.length - 1]`.\n\n The following steps will be taken for resolving this functions return value against\n the first argument to the script's callback function:\n\n - For a HTML element, the value will resolve to a WebElement\n - Null and undefined return values will resolve to null\n - Booleans, numbers, and strings will resolve as is\n - Functions will resolve to their string representation\n - For arrays and objects, each member item will be converted according to the rules above",
    "examples": [
      "<caption>Perform a sleep in the browser under test</caption>\nBrowseTheWeb.as(actor).executeAsyncScript(`\n  var delay    = arguments[0];\n  var callback = arguments[arguments.length - 1];\n\n  window.setTimeout(callback, delay);\n`, 500)",
      "<caption>Return a value asynchronously</caption>\nBrowseTheWeb.as(actor).executeAsyncScript(`\n  var callback = arguments[arguments.length - 1];\n\n  callback('some return value')\n`).then(value => doSomethingWithThe(value))"
    ],
    "see": [
      "https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html#executeAsyncScript-java.lang.String-java.lang.Object...-",
      "{@link BrowseTheWeb#getLastScriptExecutionResult}"
    ],
    "lineNumber": 345,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<any>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "any[]"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "getLastScriptExecutionResult",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~BrowseTheWeb#getLastScriptExecutionResult",
    "access": "public",
    "description": " Returns the last result of calling {@link BrowseTheWeb#executeAsyncScript}\n or {@link BrowseTheWeb#executeScript}",
    "lineNumber": 376,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{any}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 443,
    "kind": "class",
    "name": "LastScriptExecutionSummary",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts",
    "static": true,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~LastScriptExecutionSummary",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/abilities/BrowseTheWeb.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 395,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 444,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/abilities/BrowseTheWeb.ts~LastScriptExecutionSummary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/abilities/BrowseTheWeb.ts~LastScriptExecutionSummary#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 396,
    "undocument": true
  },
  {
    "__docId__": 445,
    "kind": "file",
    "name": "src/screenplay/abilities/index.ts",
    "content": "export * from './BrowseTheWeb';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/abilities/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 446,
    "kind": "file",
    "name": "src/screenplay/index.ts",
    "content": "export * from './abilities';\nexport * from './interactions';\nexport * from './questions';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 447,
    "kind": "file",
    "name": "src/screenplay/interactions/Clear.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, LogicError, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Element } from 'webdriverio';\n\nimport { WebElementInteraction } from './WebElementInteraction';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  clear the `value` of a [form `input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).\n *\n * @example <caption>Example widget</caption>\n *  <form>\n *    <input type=\"text\" name=\"example\" id=\"example\" />\n *  </form>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { by, Target } from '@serenity-js/webdriverio';\n *\n *  class Form {\n *      static exampleInput = Target.the('example input')\n *          .located(by.id('example'));\n *  }\n *\n * @example <caption>Clearing the value of an input field</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Clear, Enter, Value } from '@serenity-js/webdriverio';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  actorCalled('Inés')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Enter.theValue('Hello world!').into(Form.exampleInput),\n *          Ensure.that(Value.of(Form.exampleInput), equals('Hello world!')),\n *\n *          Clear.theValueOf(Form.exampleInput),\n *          Ensure.that(Value.of(Form.exampleInput), equals('')),\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Enter}\n * @see {@link Value}\n * @see {@link Target}\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions/lib/expectations~equals}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Clear extends WebElementInteraction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Answerable<Element<'async'>>} field\n     *  The field to be cleared\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static theValueOf(field: Answerable<Element<'async'>>): Interaction {\n        return new Clear(field);\n    }\n\n    /**\n     * @param {Answerable<Element<'async'>>} field\n     *  The element to be clicked on\n     */\n    constructor(private readonly field: Answerable<Element<'async'>>) {\n        super(formatted `#actor clears the value of ${ field }`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    async performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        const element   = await this.resolve(actor, this.field);\n        const value     = await element.getValue();\n\n        if (value === undefined) {\n            throw new LogicError(\n                this.capitaliseFirstLetter(formatted `${ this.field } doesn't seem to have a 'value' attribute that could be cleared.`),\n            );\n        }\n\n        return element.clearValue();\n    }\n\n    private capitaliseFirstLetter(text: string) {\n        return text.charAt(0).toUpperCase() + text.slice(1);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/Clear.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 448,
    "kind": "class",
    "name": "Clear",
    "memberof": "src/screenplay/interactions/Clear.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Clear.ts~Clear",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{Clear}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n clear the `value` of a [form `input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).",
    "examples": [
      "<caption>Example widget</caption>\n <form>\n   <input type=\"text\" name=\"example\" id=\"example\" />\n </form>",
      "<caption>Lean Page Object describing the widget</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n class Form {\n     static exampleInput = Target.the('example input')\n         .located(by.id('example'));\n }",
      "<caption>Clearing the value of an input field</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Clear, Enter, Value } from '@serenity-js/webdriverio';\n import { Ensure, equals } from '@serenity-js/assertions';\n\n actorCalled('Inés')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Enter.theValue('Hello world!').into(Form.exampleInput),\n         Ensure.that(Value.of(Form.exampleInput), equals('Hello world!')),\n\n         Clear.theValueOf(Form.exampleInput),\n         Ensure.that(Value.of(Form.exampleInput), equals('')),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Enter}",
      "{@link Value}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}"
    ],
    "lineNumber": 56,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "theValueOf",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Clear.ts~Clear.theValueOf",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The field to be cleared"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 450,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The element to be clicked on"
      }
    ]
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "capitaliseFirstLetter",
    "memberof": "src/screenplay/interactions/Clear.ts~Clear",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Clear.ts~Clear#capitaliseFirstLetter",
    "access": "private",
    "description": " ",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "file",
    "name": "src/screenplay/interactions/Click.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Element } from 'webdriverio';\n\nimport { WebElementInteraction } from './WebElementInteraction';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  [click](https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event) on a given Web element.\n *\n * @example <caption>Example widget</caption>\n *  <form>\n *    <input type=\"text\" name=\"example\" id=\"example\" />\n *  </form>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { by, Target } from '@serenity-js/webdriverio';\n *\n *  class Form {\n *      static exampleInput = Target.the('example input')\n *          .located(by.id('example'));\n *  }\n *\n * @example <caption>Clicking on an element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Click, isSelected } from '@serenity-js/webdriverio';\n *  import { Ensure } from '@serenity-js/assertions';\n *\n *  actorCalled('Chloé')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Click.on(Form.exampleInput),\n *          Ensure.that(Form.exampleInput, isSelected()),\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Target}\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link isSelected}\n *\n * @extends {WebElementInteraction}\n */\nexport class Click extends WebElementInteraction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Answerable<Element<'async'>>} target\n     *  The element to be clicked on\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static on(target: Answerable<Element<'async'>>): Interaction {\n        return new Click(target);\n    }\n\n    /**\n     * @param {Answerable<Element<'async'>>} target\n     *  The element to be clicked on\n     */\n    constructor(private readonly target: Answerable<Element<'async'>>) {\n        super(formatted `#actor clicks on ${ target }`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    async performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        const element = await this.resolve(actor, this.target);\n        return element.click();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/Click.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 454,
    "kind": "class",
    "name": "Click",
    "memberof": "src/screenplay/interactions/Click.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Click.ts~Click",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{Click}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n [click](https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event) on a given Web element.",
    "examples": [
      "<caption>Example widget</caption>\n <form>\n   <input type=\"text\" name=\"example\" id=\"example\" />\n </form>",
      "<caption>Lean Page Object describing the widget</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n class Form {\n     static exampleInput = Target.the('example input')\n         .located(by.id('example'));\n }",
      "<caption>Clicking on an element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Click, isSelected } from '@serenity-js/webdriverio';\n import { Ensure } from '@serenity-js/assertions';\n\n actorCalled('Chloé')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Click.on(Form.exampleInput),\n         Ensure.that(Form.exampleInput, isSelected()),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link isSelected}"
    ],
    "lineNumber": 51,
    "interface": false,
    "extends": [
      "WebElementInteraction"
    ]
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "on",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Click.ts~Click.on",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be clicked on"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 456,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Click.ts~Click#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be clicked on"
      }
    ]
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Click.ts~Click",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/Click.ts~Click#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 458,
    "kind": "file",
    "name": "src/screenplay/interactions/DoubleClick.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Element } from 'webdriverio';\n\nimport { WebElementInteraction } from './WebElementInteraction';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  perform a double-click on a given Web element.\n *\n * @example <caption>Example widget</caption>\n *  <!--\n *      The editor shows up when the user double-clicks\n *      on one of the properties of their profile\n *      and let's them change the value of that property.\n *  -->\n *  <div id=\"user-profile\">\n *      <ul>\n *          <li id=\"display-name\" ondblclick=\"edit(this)\">User12345</li>\n *          <li id=\"email-address\" ondblclick=\"edit(this)\">tester@example.org</li>\n *      </ul>\n *      <form id=\"editor\" class=\"hidden\">\n *          <input type=\"text\" value=\"\" />\n *      </form>\n *  </div>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { by, Target } from '@serenity-js/webdriverio';\n *\n *  class UserProfile {\n *      static displayName = Target.the('display name')\n *          .located(by.id('display-name'));\n *      static emailAddress = Target.the('email address')\n *          .located(by.id('email-address'));\n *      static editor = Target.the('editor')\n *          .located(by.id('editor'));\n *  }\n *\n * @example <caption>Double-clicking on an element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, DoubleClick, isVisible, Enter, Text, Wait } from '@serenity-js/webdriverio';\n *  import { Ensure, equals, not } from '@serenity-js/assertions';\n *\n *  actorCalled('Dorothy')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          DoubleClick.on(UserProfile.displayName),\n *          Wait.until(UserProfile.editor, isVisible()),\n *\n *          Enter.theValue('New username').into(UserProfile.editor),\n *\n *          Ensure.that(Text.of(UserProfile.displayName), equals('New username')),\n *          Ensure.that(UserProfile.editor, not(isVisible()))\n *      );\n *\n * @see {@link Target}\n *\n * @extends {WebElementInteraction}\n */\nexport class DoubleClick extends WebElementInteraction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Answerable<Element<'async'>>} target\n     *  The element to be double-clicked on\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static on(target: Answerable<Element<'async'>>): Interaction {\n        return new DoubleClick(target);\n    }\n\n    /**\n     * @param {Answerable<Element<'async'>>} target\n     *  The element to be double-clicked on\n     */\n    constructor(private readonly target: Answerable<Element<'async'>>) {\n        super(formatted `#actor double-clicks on ${ target }`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    async performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        const element = await this.resolve(actor, this.target);\n        return element.doubleClick();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/DoubleClick.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 459,
    "kind": "class",
    "name": "DoubleClick",
    "memberof": "src/screenplay/interactions/DoubleClick.ts",
    "static": true,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{DoubleClick}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n perform a double-click on a given Web element.",
    "examples": [
      "<caption>Example widget</caption>\n <!--\n     The editor shows up when the user double-clicks\n     on one of the properties of their profile\n     and let's them change the value of that property.\n -->\n <div id=\"user-profile\">\n     <ul>\n         <li id=\"display-name\" ondblclick=\"edit(this)\">User12345</li>\n         <li id=\"email-address\" ondblclick=\"edit(this)\">tester@example.org</li>\n     </ul>\n     <form id=\"editor\" class=\"hidden\">\n         <input type=\"text\" value=\"\" />\n     </form>\n </div>",
      "<caption>Lean Page Object describing the widget</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n class UserProfile {\n     static displayName = Target.the('display name')\n         .located(by.id('display-name'));\n     static emailAddress = Target.the('email address')\n         .located(by.id('email-address'));\n     static editor = Target.the('editor')\n         .located(by.id('editor'));\n }",
      "<caption>Double-clicking on an element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, DoubleClick, isVisible, Enter, Text, Wait } from '@serenity-js/webdriverio';\n import { Ensure, equals, not } from '@serenity-js/assertions';\n\n actorCalled('Dorothy')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         DoubleClick.on(UserProfile.displayName),\n         Wait.until(UserProfile.editor, isVisible()),\n\n         Enter.theValue('New username').into(UserProfile.editor),\n\n         Ensure.that(Text.of(UserProfile.displayName), equals('New username')),\n         Ensure.that(UserProfile.editor, not(isVisible()))\n     );"
    ],
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 68,
    "interface": false,
    "extends": [
      "WebElementInteraction"
    ]
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "on",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick.on",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be double-clicked on"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 461,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be double-clicked on"
      }
    ]
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/DoubleClick.ts~DoubleClick",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/DoubleClick.ts~DoubleClick#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 463,
    "kind": "file",
    "name": "src/screenplay/interactions/Enter.ts",
    "content": "import { Answerable, AnswersQuestions, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Element } from 'webdriverio';\n\nimport { EnterBuilder } from './EnterBuilder';\nimport { WebElementInteraction } from './WebElementInteraction';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  enter a value into a [form `input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) field.\n *\n * @example <caption>Example widget</caption>\n *  <form>\n *    <input type=\"text\" name=\"example\" id=\"example\" />\n *  </form>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { by, Target } from '@serenity-js/webdriverio';\n *\n *  class Form {\n *      static exampleInput = Target.the('example input')\n *          .located(by.id('example'));\n *  }\n *\n * @example <caption>Entering the value into a form field</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Enter } from '@serenity-js/webdriverio';\n *\n *  actorCalled('Esme')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Enter.theValue('Hello world!').into(Form.exampleInput),\n *      );\n *\n * @see {@link Target}\n *\n * @extends {WebElementInteraction}\n */\nexport class Enter extends WebElementInteraction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Array<Answerable<string | number | string[] | number[]>>} value\n     *  The value to be entered\n     *\n     * @returns {EnterBuilder}\n     */\n    static theValue(...value: Array<Answerable<string | number | string[] | number[]>>): EnterBuilder {\n        return {\n            into: (field: Answerable<Element<'async'>>  /* todo Question<AlertPromise> | AlertPromise */) =>\n                new Enter(value, field),\n        };\n    }\n\n    /**\n     * @param {Array<Answerable<string | number | string[] | number[]>>} value\n     *  The value to be entered\n     *\n     * @param {Answerable<Element<'async'>>} field\n     *  The field to enter the value into\n     */\n    constructor(\n        private readonly value: Array<Answerable<string | number | string[] | number[]>>,\n        private readonly field: Answerable<Element<'async'>> /* todo | Question<AlertPromise> | AlertPromise */,\n    ) {\n        super(formatted `#actor enters ${ value.join(', ') } into ${ field }`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    async performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        const values = await Promise.all(this.value.map(part => actor.answer(part)));\n        const field  = await this.resolve(actor, this.field);\n\n        // addValue rather than setValue so that the behaviour is consistent with Selenium sendKeys\n        return field.addValue(values.flat());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/Enter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 464,
    "kind": "class",
    "name": "Enter",
    "memberof": "src/screenplay/interactions/Enter.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Enter.ts~Enter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{Enter}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n enter a value into a [form `input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) field.",
    "examples": [
      "<caption>Example widget</caption>\n <form>\n   <input type=\"text\" name=\"example\" id=\"example\" />\n </form>",
      "<caption>Lean Page Object describing the widget</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n class Form {\n     static exampleInput = Target.the('example input')\n         .located(by.id('example'));\n }",
      "<caption>Entering the value into a form field</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Enter } from '@serenity-js/webdriverio';\n\n actorCalled('Esme')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Enter.theValue('Hello world!').into(Form.exampleInput),\n     );"
    ],
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 47,
    "interface": false,
    "extends": [
      "WebElementInteraction"
    ]
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "theValue",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Enter.ts~Enter.theValue",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{EnterBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Answerable<string | number | string[] | number[]>>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to be entered"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EnterBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 466,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Enter.ts~Enter#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Answerable<string | number | string[] | number[]>>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to be entered"
      },
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "The field to enter the value into"
      }
    ]
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Enter.ts~Enter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/Enter.ts~Enter#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 468,
    "kind": "file",
    "name": "src/screenplay/interactions/EnterBuilder.ts",
    "content": "import { Answerable, Interaction } from '@serenity-js/core';\nimport { Element } from 'webdriverio';\n\n/**\n * @desc\n *  Fluent interface to make the instantiation of\n *  the {@link @serenity-js/core/lib/screenplay~Interaction}\n *  to {@link Enter} more readable.\n *\n * @see {@link Enter}\n *\n * @interface\n */\nexport interface EnterBuilder {\n\n    /**\n     * @desc\n     *  Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  to {@link Enter}.\n     *\n     * @param {Answerable<Element<'async'>>} field\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link Target}\n     */\n    into: (field: Answerable<Element<'async'>> /* | Question<AlertPromise> | AlertPromise */) => Interaction;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/EnterBuilder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 469,
    "kind": "class",
    "name": "EnterBuilder",
    "memberof": "src/screenplay/interactions/EnterBuilder.ts",
    "static": true,
    "longname": "src/screenplay/interactions/EnterBuilder.ts~EnterBuilder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{EnterBuilder}",
    "description": " Fluent interface to make the instantiation of\n the {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Enter} more readable.",
    "see": [
      "{@link Enter}"
    ],
    "lineNumber": 21,
    "interface": true
  },
  {
    "__docId__": 470,
    "kind": "member",
    "name": "into",
    "memberof": "src/screenplay/interactions/EnterBuilder.ts~EnterBuilder",
    "static": false,
    "longname": "src/screenplay/interactions/EnterBuilder.ts~EnterBuilder#into",
    "access": "public",
    "description": " Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Enter}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "file",
    "name": "src/screenplay/interactions/ExecuteScript.ts",
    "content": "import { Answerable, AnswersQuestions, CollectsArtifacts, Interaction, LogicError, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Name, TextData } from '@serenity-js/core/lib/model';\n\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  execute a script within the context of the current browser window.\n *\n *  Please see the tests below for usage examples.\n *\n * @see {@link LastScriptExecution.result}\n */\nexport class ExecuteScript {\n\n    /**\n     * @desc\n     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  configured to load a script from `sourceUrl`.\n     *\n     * @param {string} sourceUrl\n     *  The URL to load the script from\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static from(sourceUrl: string): Interaction {\n        return new ExecuteScriptFromUrl(sourceUrl);\n    }\n\n    /**\n     * @desc\n     *  Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n     *  The script fragment will be executed as the body of an anonymous function.\n     *  If the script is provided as a function object, that function will be converted to a string for injection\n     *  into the target window.\n     *\n     *  Any arguments provided in addition to the script will be included as script arguments and may be referenced\n     *  using the `arguments` object. Arguments may be a `boolean`, `number`, `string`\n     *  or {@link Target} (`Answerable<Element<'async'>>`).\n     *  Arrays and objects may also be used as script arguments as long as each item adheres\n     *  to the types previously mentioned.\n     *\n     *  Unlike executing synchronous JavaScript with {@link ExecuteScript#sync},\n     *  scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n     *\n     *  This callback will always be injected into the executed function as the last argument,\n     *  and thus may be referenced with `arguments[arguments.length - 1]`.\n     *\n     *  If the script invokes the `callback` with a return value, this will be made available\n     *  via the {@link LastScriptExecution.result}.\n     *\n     *  **Please note** that in order to signal an error in the `script` you need to throw an {@link Error}\n     *  instead of passing it to the callback function.\n     *\n     * @example <caption>Executing an async script</caption>\n     *  import { ExecuteScript } from '@serenity-js/webdriverio';\n     *\n     *  actor.attemptsTo(\n     *      ExecuteScript.async(`\n     *          var callback = arguments[arguments.length - 1];\n     *\n     *          // do stuff\n     *\n     *          callback(result)\n     *      `)\n     *  );\n     *\n     * @example <caption>Passing arguments to an async script</caption>\n     *  import { ExecuteScript } from '@serenity-js/webdriverio';\n     *\n     *  actor.attemptsTo(\n     *      ExecuteScript.async(`\n     *          var name = arguments[0];\n     *          var age = arguments[1];\n     *          var callback = arguments[arguments.length - 1];\n     *\n     *          // do stuff\n     *\n     *          callback(result)\n     *      `).withArguments('Bob', 24)\n     *  );\n     *\n     * @example <caption>Passing Target arguments to an async script</caption>\n     *  import { ExecuteScript } from '@serenity-js/webdriverio';\n     *\n     *  actor.attemptsTo(\n     *      ExecuteScript.async(`\n     *          var header = arguments[0];    // Target gets converted to a WebElement\n     *          var callback = arguments[arguments.length - 1];\n     *\n     *          callback(header.innerText)\n     *      `).withArguments(Target.the('header').located(by.css('h1')))\n     *  );\n     *\n     * @example <caption>Executing async script as function</caption>\n     *  import { ExecuteScript } from '@serenity-js/webdriverio';\n     *\n     *  actor.attemptsTo(\n     *      ExecuteScript.async(function getText(header, callback) {\n     *          callback(header.innerText)\n     *      }).withArguments(Target.the('header').located(by.css('h1')))\n     *  );\n     *\n     * @param {string | Function} script\n     *  The script to be executed\n     *\n     * @returns {ExecuteScriptWithArguments}\n     *\n     * @see {@link LastScriptExecution.result}\n     */\n    static async(script: string | Function): ExecuteScriptWithArguments {   // eslint-disable-line @typescript-eslint/ban-types\n        return new ExecuteAsynchronousScript(script);\n    }\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  execute a synchronous script in the context of the currently selected frame or window.\n     *\n     *  If the script returns a value, it will be made available via {@link LastScriptExecution.result}.\n     *\n     * @example <caption>Executing a sync script as string and reading the result</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, ExecuteScript, LastScriptExecution } from '@serenity-js/webdriverio';\n     *  import { Ensure, includes } from '@serenity-js/assertions';\n     *\n     *  actorCalled('Joseph')\n     *      .whoCan(BrowseTheWeb.using(browser))\n     *      .attemptsTo(\n     *          ExecuteScript.sync('return navigator.userAgent'),\n     *          Ensure.that(LastScriptExecution.result<string>(), includes('Chrome')),\n     *      );\n     *\n     * @example <caption>Executing a sync script as function and reading the result</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { by, BrowseTheWeb, Enter, ExecuteScript, LastScriptExecution, Target } from '@serenity-js/webdriverio';\n     *\n     *  const someOfferField      = Target.the('offer code').located(by.id('offer-code'));\n     *  const applyOfferCodeField = Target.the('apply offer field').located(by.id('apply-offer-code'));\n     *\n     *  actorCalled('Joseph')\n     *      .whoCan(BrowseTheWeb.using(browser))\n     *      .attemptsTo(\n     *          // inject JavaScript to read some property of an element\n     *          ExecuteScript.sync(function getValue(element) {\n     *              return element.value;\n     *          }).withArguments(someOfferField),\n     *\n     *          // use LastScriptExecution.result() to read the value\n     *          // returned from the injected script\n     *          // and pass it to another interaction\n     *          Enter.theValue(LastScriptExecution.result<string>()).into(applyOfferCodeField),\n     *      );\n     *\n     * @param {string | Function} script\n     *  The script to be executed\n     *\n     * @returns {ExecuteScriptWithArguments}\n     *\n     * @see {@link LastScriptExecution.result}\n     */\n    static sync(script: string | Function): ExecuteScriptWithArguments {    // eslint-disable-line @typescript-eslint/ban-types\n        return new ExecuteSynchronousScript(script);\n    }\n}\n\n/**\n * @desc\n *  Allows for a script to be executed to be parametrised.\n *\n *  **Please note** that the arguments can be both synchronous and asynchronous {@link @serenity-js/core/lib/screenplay~Question}s\n *  as well as regular static values.\n *\n * @abstract\n *\n * @see {@link ExecuteScript}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport abstract class ExecuteScriptWithArguments extends Interaction {\n\n    /**\n     * @param {string | Function} script\n     *  The script to be executed\n     *\n     * @param {Array<Answerable<any>>} args\n     *  Arguments to parametrise the script with\n     */\n    constructor(\n        protected readonly script: string | Function,           // eslint-disable-line @typescript-eslint/ban-types\n        protected readonly args: Array<Answerable<any>> = [],\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  to {@link Enter}.\n     *\n     * @param {...Array<Answerable<any>>} args\n     *  Arguments to parametrise the script with\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    public abstract withArguments(...args: Array<Answerable<any>>): Interaction;\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & CollectsArtifacts & AnswersQuestions): PromiseLike<void> {\n        return Promise.all(this.args.map(arg => actor.answer(arg)))\n            .then(args => this.executeAs(actor, args))\n            .then(() => actor.collect(\n                TextData.fromJSON({\n                    contentType:    'text/javascript;charset=UTF-8',\n                    data:           this.script.toString(),\n                }),\n                new Name('Script source'),\n            ));\n    }\n\n    protected abstract executeAs(actor: UsesAbilities & AnswersQuestions, args: any[]): Promise<any>;\n}\n\n/**\n * @package\n */\nclass ExecuteAsynchronousScript extends ExecuteScriptWithArguments {\n    withArguments(...args: Array<Answerable<any>>): Interaction {\n        return new ExecuteAsynchronousScript(this.script, args);\n    }\n\n    protected executeAs(actor: UsesAbilities & AnswersQuestions, args: any[]): Promise<any> {\n        return BrowseTheWeb.as(actor).executeAsyncScript(this.script as unknown as any, ...args);   // todo: fix types\n    }\n\n    toString(): string {\n        return this.args.length > 0\n            ? formatted `#actor executes an asynchronous script with arguments: ${ this.args }`\n            : `#actor executes an asynchronous script`;\n    }\n}\n\n/**\n * @package\n *\n * https://seleniumhq.github.io/selenium/docs/api/java/org/openqa/selenium/JavascriptExecutor.html\n * https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement\n */\nclass ExecuteScriptFromUrl extends Interaction {\n    constructor(private readonly sourceUrl: string) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<any> {\n        return BrowseTheWeb.as(actor)\n            .browser.executeAsync(\n                /* istanbul ignore next */\n                function executeScriptFromUrl(sourceUrl: string, callback: (message?: string) => void) {\n                    const alreadyLoadedScripts = Array.prototype.slice\n                            .call(document.querySelectorAll('script'))\n                            .map(script => script.src);\n\n                    if (~ alreadyLoadedScripts.indexOf(sourceUrl)) {\n                        return callback('Script from ' + sourceUrl + ' has already been loaded');\n                    }\n\n                    const script = document.createElement('script');\n                    script.addEventListener('load', function() {\n                        callback();\n                    });\n                    script.addEventListener('error', function () {\n                        return callback('Couldn\\'t load script from ' + sourceUrl);\n                    });\n\n                    script.src = sourceUrl;\n                    script.async = true;\n                    document.head.append(script);\n                },\n                this.sourceUrl\n            )\n            .then(errorMessage => {\n                if (errorMessage) {\n                    throw new LogicError(errorMessage);\n                }\n            });\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return `#actor executes a script from ${ this.sourceUrl }`;\n    }\n}\n\n/**\n * @package\n */\nclass ExecuteSynchronousScript extends ExecuteScriptWithArguments {\n\n    withArguments(...args: Array<Answerable<any>>): Interaction {\n        return new ExecuteSynchronousScript(this.script, args);\n    }\n\n    protected executeAs(actor: UsesAbilities & AnswersQuestions, args: any[]): Promise<any> {\n        return BrowseTheWeb.as(actor).executeScript(this.script as unknown as any, ...args);    // todo fix type\n    }\n\n    toString(): string {\n        return this.args.length > 0\n            ? formatted `#actor executes a synchronous script with arguments: ${ this.args }`\n            : `#actor executes a synchronous script`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/ExecuteScript.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 472,
    "kind": "class",
    "name": "ExecuteScript",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{ExecuteScript}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n execute a script within the context of the current browser window.\n\n Please see the tests below for usage examples.",
    "see": [
      "{@link LastScriptExecution.result}"
    ],
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "from",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript.from",
    "access": "public",
    "description": " Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n configured to load a script from `sourceUrl`.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": "The URL to load the script from"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "async",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript.async",
    "access": "public",
    "description": " Schedules a command to execute asynchronous JavaScript in the context of the currently selected frame or window.\n The script fragment will be executed as the body of an anonymous function.\n If the script is provided as a function object, that function will be converted to a string for injection\n into the target window.\n\n Any arguments provided in addition to the script will be included as script arguments and may be referenced\n using the `arguments` object. Arguments may be a `boolean`, `number`, `string`\n or {@link Target} (`Answerable<Element<'async'>>`).\n Arrays and objects may also be used as script arguments as long as each item adheres\n to the types previously mentioned.\n\n Unlike executing synchronous JavaScript with {@link ExecuteScript#sync},\n scripts executed with this function must explicitly signal they are finished by invoking the provided callback.\n\n This callback will always be injected into the executed function as the last argument,\n and thus may be referenced with `arguments[arguments.length - 1]`.\n\n If the script invokes the `callback` with a return value, this will be made available\n via the {@link LastScriptExecution.result}.\n\n **Please note** that in order to signal an error in the `script` you need to throw an {@link Error}\n instead of passing it to the callback function.",
    "examples": [
      "<caption>Executing an async script</caption>\n import { ExecuteScript } from '@serenity-js/webdriverio';\n\n actor.attemptsTo(\n     ExecuteScript.async(`\n         var callback = arguments[arguments.length - 1];\n\n         // do stuff\n\n         callback(result)\n     `)\n );",
      "<caption>Passing arguments to an async script</caption>\n import { ExecuteScript } from '@serenity-js/webdriverio';\n\n actor.attemptsTo(\n     ExecuteScript.async(`\n         var name = arguments[0];\n         var age = arguments[1];\n         var callback = arguments[arguments.length - 1];\n\n         // do stuff\n\n         callback(result)\n     `).withArguments('Bob', 24)\n );",
      "<caption>Passing Target arguments to an async script</caption>\n import { ExecuteScript } from '@serenity-js/webdriverio';\n\n actor.attemptsTo(\n     ExecuteScript.async(`\n         var header = arguments[0];    // Target gets converted to a WebElement\n         var callback = arguments[arguments.length - 1];\n\n         callback(header.innerText)\n     `).withArguments(Target.the('header').located(by.css('h1')))\n );",
      "<caption>Executing async script as function</caption>\n import { ExecuteScript } from '@serenity-js/webdriverio';\n\n actor.attemptsTo(\n     ExecuteScript.async(function getText(header, callback) {\n         callback(header.innerText)\n     }).withArguments(Target.the('header').located(by.css('h1')))\n );"
    ],
    "see": [
      "{@link LastScriptExecution.result}"
    ],
    "lineNumber": 150,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ExecuteScriptWithArguments}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": "The script to be executed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExecuteScriptWithArguments"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "sync",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScript.sync",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n execute a synchronous script in the context of the currently selected frame or window.\n\n If the script returns a value, it will be made available via {@link LastScriptExecution.result}.",
    "examples": [
      "<caption>Executing a sync script as string and reading the result</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, ExecuteScript, LastScriptExecution } from '@serenity-js/webdriverio';\n import { Ensure, includes } from '@serenity-js/assertions';\n\n actorCalled('Joseph')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         ExecuteScript.sync('return navigator.userAgent'),\n         Ensure.that(LastScriptExecution.result<string>(), includes('Chrome')),\n     );",
      "<caption>Executing a sync script as function and reading the result</caption>\n import { actorCalled } from '@serenity-js/core';\n import { by, BrowseTheWeb, Enter, ExecuteScript, LastScriptExecution, Target } from '@serenity-js/webdriverio';\n\n const someOfferField      = Target.the('offer code').located(by.id('offer-code'));\n const applyOfferCodeField = Target.the('apply offer field').located(by.id('apply-offer-code'));\n\n actorCalled('Joseph')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         // inject JavaScript to read some property of an element\n         ExecuteScript.sync(function getValue(element) {\n             return element.value;\n         }).withArguments(someOfferField),\n\n         // use LastScriptExecution.result() to read the value\n         // returned from the injected script\n         // and pass it to another interaction\n         Enter.theValue(LastScriptExecution.result<string>()).into(applyOfferCodeField),\n     );"
    ],
    "see": [
      "{@link LastScriptExecution.result}"
    ],
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ExecuteScriptWithArguments}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": "The script to be executed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExecuteScriptWithArguments"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 476,
    "kind": "class",
    "name": "ExecuteScriptWithArguments",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{ExecuteScriptWithArguments}",
    "description": " Allows for a script to be executed to be parametrised.\n\n **Please note** that the arguments can be both synchronous and asynchronous {@link @serenity-js/core/lib/screenplay~Question}s\n as well as regular static values.",
    "see": [
      "{@link ExecuteScript}"
    ],
    "lineNumber": 241,
    "abstract": true,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 477,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "string ",
          " Function"
        ],
        "spread": false,
        "optional": false,
        "name": "script",
        "description": "The script to be executed"
      },
      {
        "nullable": null,
        "types": [
          "Array<Answerable<any>>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments to parametrise the script with"
      }
    ]
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptWithArguments#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 311,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 479,
    "kind": "class",
    "name": "ExecuteAsynchronousScript",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/interactions/ExecuteScript.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 353,
    "interface": false,
    "extends": [
      "ExecuteScriptWithArguments"
    ],
    "ignore": true
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "withArguments",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript#withArguments",
    "access": "public",
    "description": " ",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "executeAs",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript#executeAs",
    "access": "protected",
    "description": " ",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteAsynchronousScript#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 251,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 483,
    "kind": "class",
    "name": "ExecuteScriptFromUrl",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/interactions/ExecuteScript.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 421,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 484,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 422,
    "undocument": true
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 451,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteScriptFromUrl#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 502,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 487,
    "kind": "class",
    "name": "ExecuteSynchronousScript",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts",
    "static": true,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/interactions/ExecuteScript.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 517,
    "interface": false,
    "extends": [
      "ExecuteScriptWithArguments"
    ],
    "ignore": true
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "withArguments",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript#withArguments",
    "access": "public",
    "description": " ",
    "lineNumber": 331,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 489,
    "kind": "method",
    "name": "executeAs",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript#executeAs",
    "access": "protected",
    "description": " ",
    "lineNumber": 335,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/ExecuteScript.ts~ExecuteSynchronousScript#toString",
    "access": "public",
    "description": " ",
    "lineNumber": 339,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 491,
    "kind": "file",
    "name": "src/screenplay/interactions/Hover.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Element } from 'webdriverio';\n\nimport { WebElementInteraction } from './WebElementInteraction';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  hover the mouse pointer over a given Web element.\n *\n * @example <caption>Example widget</caption>\n *  <a data-test=\"example-link\"\n *      class=\"off\"\n *      onmouseover=\"this.className='on';\"\n *      onmouseout=\"this.className='off';\"\n *      href=\"/\">hover over me</a>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { by, Target } from '@serenity-js/webdriverio';\n *\n *  class Example {\n *      static link = Target.the('example link')\n *          .located(by.css('[data-test=\"example-link\"]'));\n *  }\n *\n * @example <caption>Hovering over an element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Hover, CSSClasses } from '@serenity-js/webdriverio';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  actorCalled('Hank')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Ensure.that(CSSClasses.of(Example.link), equals([ 'off' ])),\n *\n *          Hover.over(Example.link),\n *          Ensure.that(CSSClasses.of(Example.link), equals([ 'on' ])),\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Target}\n * @see {@link CSSClasses}\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions/lib/expectations~equals}\n *\n * @extends {WebElementInteraction}\n */\nexport class Hover extends WebElementInteraction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Answerable<Element<'async'>>} target\n     *  The element to be hovered over\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static over(target: Answerable<Element<'async'>>): Interaction {\n        return new Hover(target);\n    }\n\n    /**\n     * @param {Answerable<Element<'async'>>} target\n     *  The element to be hovered over\n     */\n    constructor(private readonly target: Answerable<Element<'async'>>) {\n        super(formatted `#actor hovers the mouse over ${ target }`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    async performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        const element = await this.resolve(actor, this.target);\n        return element.moveTo();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/Hover.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 492,
    "kind": "class",
    "name": "Hover",
    "memberof": "src/screenplay/interactions/Hover.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Hover.ts~Hover",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{Hover}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n hover the mouse pointer over a given Web element.",
    "examples": [
      "<caption>Example widget</caption>\n <a data-test=\"example-link\"\n     class=\"off\"\n     onmouseover=\"this.className='on';\"\n     onmouseout=\"this.className='off';\"\n     href=\"/\">hover over me</a>",
      "<caption>Lean Page Object describing the widget</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n class Example {\n     static link = Target.the('example link')\n         .located(by.css('[data-test=\"example-link\"]'));\n }",
      "<caption>Hovering over an element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Hover, CSSClasses } from '@serenity-js/webdriverio';\n import { Ensure, equals } from '@serenity-js/assertions';\n\n actorCalled('Hank')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Ensure.that(CSSClasses.of(Example.link), equals([ 'off' ])),\n\n         Hover.over(Example.link),\n         Ensure.that(CSSClasses.of(Example.link), equals([ 'on' ])),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link CSSClasses}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}"
    ],
    "lineNumber": 56,
    "interface": false,
    "extends": [
      "WebElementInteraction"
    ]
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "over",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Hover.ts~Hover.over",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be hovered over"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 494,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Hover.ts~Hover#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be hovered over"
      }
    ]
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Hover.ts~Hover",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/Hover.ts~Hover#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 496,
    "kind": "file",
    "name": "src/screenplay/interactions/Navigate.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, TestCompromisedError, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\n\nimport { BrowseTheWeb } from '../';\n\n/**\n * @desc\n *  Allows the {@link @serenity-js/core/lib/screenplay/actor~Actor} to navigate\n *  to a specific destination, as well as back and forth in the browser history,\n *  or reload the current page.\n */\nexport class Navigate {\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  to navigate to a given URL.\n     *\n     *  The URL can be:\n     *  - absolute, i.e. `https://example.org/search`\n     *  - relative, i.e. `/search`\n     *\n     *  If the URL is relative, WebdriverIO will append it to `baseUrl` specified in\n     *  the [configuration file](https://webdriver.io/docs/configurationfile/).\n     *\n     * @example <caption>wdio.conf.ts</caption>\n     *  export const config = {\n     *      baseUrl: 'https://example.org',\n     *      // ...\n     *  }\n     *\n     * @example <caption>Navigate to path relative to baseUrl</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Navigate } from '@serenity-js/webdriverio';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(browser))\n     *      .attemptsTo(\n     *          Navigate.to('/search'),\n     *      );\n     *\n     * @example <caption>Navigate to an absolute URL (overrides baseUrl)</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { BrowseTheWeb, Navigate } from '@serenity-js/webdriverio';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(browser))\n     *      .attemptsTo(\n     *          Navigate.to('https://mycompany.org/login'),\n     *      );\n     *\n     * @param {Answerable<string>} url\n     *  An absolute URL or path an {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  should navigate to\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link BrowseTheWeb}\n     */\n    static to(url: Answerable<string>): Interaction {\n        return new NavigateToUrl(url);\n    }\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  navigate back one page in the joint session history of the current top-level browsing context.\n     *\n     * @example <caption>Navigate to path relative to baseUrl</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Ensure, endsWith } from '@serenity-js/assertions';\n     *  import { BrowseTheWeb, Navigate } from '@serenity-js/webdriverio';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(browser))\n     *      .attemptsTo(\n     *          Navigate.to('/first'),\n     *          Navigate.to('/second'),\n     *\n     *          Navigate.back(),\n     *\n     *          Ensure.that(Website.url(), endsWith('/first')),\n     *      );\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see https://webdriver.io/docs/api/webdriver/#back\n     * @see {@link BrowseTheWeb}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~endsWith}\n     */\n    static back(): Interaction {\n        return Interaction.where(`#actor navigates back in the browser history`, actor =>\n            BrowseTheWeb.as(actor).browser.back(),\n        );\n    }\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  navigate forward one page in the session history.\n     *\n     * @example <caption>Navigate to path relative to baseUrl</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Ensure, endsWith } from '@serenity-js/assertions';\n     *  import { BrowseTheWeb, Navigate } from '@serenity-js/webdriverio';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(browser))\n     *      .attemptsTo(\n     *          Navigate.to('/first'),\n     *          Navigate.to('/second'),\n     *\n     *          Navigate.back(),\n     *          Navigate.forward(),\n     *\n     *          Ensure.that(Website.url(), endsWith('/second')),\n     *      );\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link BrowseTheWeb}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~endsWith}\n     * @see https://webdriver.io/docs/api/webdriver/#forward\n     */\n    static forward(): Interaction {\n        return Interaction.where(`#actor navigates forward in the browser history`, actor =>\n            BrowseTheWeb.as(actor).browser.forward(),\n        );\n    }\n\n    /**\n     * @desc\n     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n     *  reload the current page.\n     *\n     * @example <caption>Navigate to path relative to baseUrl</caption>\n     *  import { actorCalled } from '@serenity-js/core';\n     *  import { Ensure, endsWith } from '@serenity-js/assertions';\n     *  import { Navigate, BrowseTheWeb, DeleteCookies } from '@serenity-js/webdriverio';\n     *\n     *  actorCalled('Hannu')\n     *      .whoCan(BrowseTheWeb.using(browser))\n     *      .attemptsTo(\n     *          Navigate.to('/login'),\n     *          DeleteCookies.called('session_id'),\n     *          Navigate.reloadPage(),\n     *      );\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link BrowseTheWeb}\n     * @see {@link DeleteCookies}\n     * @see {@link @serenity-js/assertions~Ensure}\n     * @see {@link @serenity-js/assertions/lib/expectations~endsWith}\n     */\n    static reloadPage(): Interaction {\n        return Interaction.where(`#actor reloads the page`, actor =>\n            BrowseTheWeb.as(actor).browser.refresh(),\n        );\n    }\n}\n\n/**\n * @package\n */\nclass NavigateToUrl extends Interaction {\n    constructor(private readonly url: Answerable<string>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        return actor.answer(this.url)\n            .then(url =>\n                BrowseTheWeb.as(actor)\n                    .get(url)\n                    .catch(error => {\n                        throw new TestCompromisedError(`Couldn't navigate to ${ url }`, error);\n                    })\n            )\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `#actor navigates to ${ this.url }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/Navigate.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 497,
    "kind": "class",
    "name": "Navigate",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{Navigate}",
    "description": " Allows the {@link @serenity-js/core/lib/screenplay/actor~Actor} to navigate\n to a specific destination, as well as back and forth in the browser history,\n or reload the current page.",
    "lineNumber": 19,
    "interface": false
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "to",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.to",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n to navigate to a given URL.\n\n The URL can be:\n - absolute, i.e. `https://example.org/search`\n - relative, i.e. `/search`\n\n If the URL is relative, WebdriverIO will append it to `baseUrl` specified in\n the [configuration file](https://webdriver.io/docs/configurationfile/).",
    "examples": [
      "<caption>wdio.conf.ts</caption>\n export const config = {\n     baseUrl: 'https://example.org',\n     // ...\n }",
      "<caption>Navigate to path relative to baseUrl</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Navigate } from '@serenity-js/webdriverio';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Navigate.to('/search'),\n     );",
      "<caption>Navigate to an absolute URL (overrides baseUrl)</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Navigate } from '@serenity-js/webdriverio';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Navigate.to('https://mycompany.org/login'),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}"
    ],
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "An absolute URL or path an {@link @serenity-js/core/lib/screenplay/actor~Actor}\n should navigate to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "back",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.back",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n navigate back one page in the joint session history of the current top-level browsing context.",
    "examples": [
      "<caption>Navigate to path relative to baseUrl</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, endsWith } from '@serenity-js/assertions';\n import { BrowseTheWeb, Navigate } from '@serenity-js/webdriverio';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Navigate.to('/first'),\n         Navigate.to('/second'),\n\n         Navigate.back(),\n\n         Ensure.that(Website.url(), endsWith('/first')),\n     );"
    ],
    "see": [
      "https://webdriver.io/docs/api/webdriver/#back",
      "{@link BrowseTheWeb}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~endsWith}"
    ],
    "lineNumber": 127,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "forward",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.forward",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n navigate forward one page in the session history.",
    "examples": [
      "<caption>Navigate to path relative to baseUrl</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, endsWith } from '@serenity-js/assertions';\n import { BrowseTheWeb, Navigate } from '@serenity-js/webdriverio';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Navigate.to('/first'),\n         Navigate.to('/second'),\n\n         Navigate.back(),\n         Navigate.forward(),\n\n         Ensure.that(Website.url(), endsWith('/second')),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~endsWith}",
      "https://webdriver.io/docs/api/webdriver/#forward"
    ],
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "reloadPage",
    "memberof": "src/screenplay/interactions/Navigate.ts~Navigate",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~Navigate.reloadPage",
    "access": "public",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n reload the current page.",
    "examples": [
      "<caption>Navigate to path relative to baseUrl</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, endsWith } from '@serenity-js/assertions';\n import { Navigate, BrowseTheWeb, DeleteCookies } from '@serenity-js/webdriverio';\n\n actorCalled('Hannu')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Navigate.to('/login'),\n         DeleteCookies.called('session_id'),\n         Navigate.reloadPage(),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link DeleteCookies}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~endsWith}"
    ],
    "lineNumber": 219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 502,
    "kind": "class",
    "name": "NavigateToUrl",
    "memberof": "src/screenplay/interactions/Navigate.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/interactions/Navigate.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 236,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 503,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 237,
    "undocument": true
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor}\n to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Navigate.ts~NavigateToUrl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Navigate.ts~NavigateToUrl#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 506,
    "kind": "file",
    "name": "src/screenplay/interactions/Press.ts",
    "content": "import { Activity, Answerable, AnswersQuestions, Interaction, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Element } from 'webdriverio';\n\nimport { Key } from '../../input';\nimport { BrowseTheWeb } from '../abilities';\nimport { PressBuilder } from './PressBuilder';\nimport { WebElementInteraction } from './WebElementInteraction';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  send a key press or a sequence of keys to a Web element.\n *\n *  *Please note*: On macOS, some keyboard shortcuts might not work with the [`devtools` protocol](https://webdriver.io/docs/automationProtocols/#devtools-protocol).\n *\n *  For example:\n *  - to *copy*, instead of `Meta+C`, use `Control+Insert`\n *  - to *cut*, instead of `Meta+X`, use `Control+Delete`\n *  - to *paste*, instead of `Meta+V`, use `Shift+Insert`\n *\n * @example <caption>Example widget</caption>\n *  <form>\n *    <input type=\"text\" name=\"example\" id=\"example\" />\n *  </form>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { by, Target } from '@serenity-js/webdriverio';\n *\n *  class Form {\n *      static exampleInput = Target.the('example input')\n *          .located(by.id('example'));\n *  }\n *\n * @example <caption>Pressing keys</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Key, Press, Value } from '@serenity-js/webdriverio';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  actorCalled('Priyanka')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Press.the('H', 'i', '!', Key.ENTER).in(Form.exampleInput),\n *          Ensure.that(Value.of(Form.exampleInput), equals('Hi!')),\n *      );\n *\n * @see {@link Key}\n * @see {@link BrowseTheWeb}\n * @see {@link Target}\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions/lib/expectations~equals}\n *\n * @extends {WebElementInteraction}\n */\nexport class Press extends WebElementInteraction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {...keys: Array<Answerable<Key | string | Key[] | string[]>>} keys\n     *  A sequence of one or more keys to press\n     *\n     * @returns {PressBuilder}\n     */\n    static  the(...keys: Array<Answerable<Key | string | Key[] | string[]>>): Activity & PressBuilder {\n        return new Press(KeySequence.of(keys));\n    }\n\n    in(field: Answerable<Element<'async'>> /* | Question<AlertPromise> | AlertPromise */): Interaction {\n        return new PressKeyInField(this.keys, field)\n    }\n\n    /**\n     * @param {Answerable<Array<Key | string>>} keys\n     *  A sequence of one or more keys to press\n     */\n    constructor(\n        private readonly keys: Answerable<Array<Key | string>>\n    ) {\n        super(formatted `#actor presses ${ keys }`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    async performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        const keys  = await actor.answer(this.keys);\n\n        return BrowseTheWeb.as(actor).sendKeys(keys);\n    }\n}\n\nclass PressKeyInField extends WebElementInteraction {\n    /**\n     * @param {Answerable<Array<Key | string>>} keys\n     *  A sequence of one or more keys to press\n     *\n     * @param {Answerable<Element<'async'>>} field\n     *  Web element to send the keys to\n     */\n    constructor(\n        private readonly keys: Answerable<Array<Key | string>>,\n        private readonly field: Answerable<Element<'async'>> /* todo | Question<AlertPromise> | AlertPromise */,\n    ) {\n        super(formatted `#actor presses ${ keys } in ${ field }`);\n    }\n\n    async performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        const field = await this.resolve(actor, this.field);\n        const keys  = await actor.answer(this.keys);\n\n        await BrowseTheWeb.as(actor).browser.execute(\n            /* istanbul ignore next */\n            function focus(element: any) {  // todo: fix type\n                element.focus();\n            },\n            field,\n        );\n\n        return BrowseTheWeb.as(actor).sendKeys(keys);\n    }\n}\n\n/**\n * @package\n */\nclass KeySequence extends Question<Promise<Array<Key | string>>> {\n    static of(keys: Array<Answerable<Key | string | Key[] | string[]>>) {\n        return new KeySequence(keys);\n    }\n\n    constructor(private readonly keys: Array<Answerable<Key | string | Key[] | string[]>>) {\n        super(KeySequence.describe(keys));\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<Array<string | Key>> {\n        return Promise.all(\n            this.keys.map(part => actor.answer(part))\n        ).then(keys => keys.flat().filter(key => !! key))\n    }\n\n    private static describe(keys: Array<Answerable<Key | string | Key[] | string[]>>): string {\n        const prefix = keys.length === 1 ? 'key' : 'keys';\n\n        const description = keys.reduce((acc, key, index) => {\n            const separator = Key.isKey(key) && key.isModifier\n                ? '-'\n                : acc.separator;\n\n            return {\n                description: index === 0\n                    ? `${ key }`\n                    : `${ acc.description }${acc.separator}${ key }`,\n                separator,\n            }\n        }, { description: '', separator: ', ' }).description;\n\n        return `${ prefix } ${ description }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/Press.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 507,
    "kind": "class",
    "name": "Press",
    "memberof": "src/screenplay/interactions/Press.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~Press",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{Press}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n send a key press or a sequence of keys to a Web element.\n\n *Please note*: On macOS, some keyboard shortcuts might not work with the [`devtools` protocol](https://webdriver.io/docs/automationProtocols/#devtools-protocol).\n\n For example:\n - to *copy*, instead of `Meta+C`, use `Control+Insert`\n - to *cut*, instead of `Meta+X`, use `Control+Delete`\n - to *paste*, instead of `Meta+V`, use `Shift+Insert`",
    "examples": [
      "<caption>Example widget</caption>\n <form>\n   <input type=\"text\" name=\"example\" id=\"example\" />\n </form>",
      "<caption>Lean Page Object describing the widget</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n class Form {\n     static exampleInput = Target.the('example input')\n         .located(by.id('example'));\n }",
      "<caption>Pressing keys</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Key, Press, Value } from '@serenity-js/webdriverio';\n import { Ensure, equals } from '@serenity-js/assertions';\n\n actorCalled('Priyanka')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Press.the('H', 'i', '!', Key.ENTER).in(Form.exampleInput),\n         Ensure.that(Value.of(Form.exampleInput), equals('Hi!')),\n     );"
    ],
    "see": [
      "{@link Key}",
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}"
    ],
    "lineNumber": 62,
    "interface": false,
    "extends": [
      "WebElementInteraction"
    ]
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~Press.the",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PressBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...keys: Array<Answerable<Key | string | Key[] | string[]>>"
        ],
        "spread": true,
        "optional": false,
        "name": "keys",
        "description": "A sequence of one or more keys to press"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PressBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "in",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~Press#in",
    "access": "public",
    "description": " ",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 510,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~Press#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Array<Key | string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "A sequence of one or more keys to press"
      }
    ]
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Press.ts~Press",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~Press#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 512,
    "kind": "class",
    "name": "PressKeyInField",
    "memberof": "src/screenplay/interactions/Press.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~PressKeyInField",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/interactions/Press.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 105,
    "interface": false,
    "extends": [
      "src/screenplay/interactions/WebElementInteraction.js~WebElementInteraction"
    ],
    "ignore": true
  },
  {
    "__docId__": 513,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Press.ts~PressKeyInField",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~PressKeyInField#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Array<Key | string>>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "A sequence of one or more keys to press"
      },
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "Web element to send the keys to"
      }
    ]
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Press.ts~PressKeyInField",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~PressKeyInField#performAs",
    "access": "public",
    "description": " ",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 515,
    "kind": "class",
    "name": "KeySequence",
    "memberof": "src/screenplay/interactions/Press.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~KeySequence",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/interactions/Press.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 214,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/interactions/Press.ts~KeySequence",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~KeySequence.of",
    "access": "public",
    "description": " ",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 517,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Press.ts~KeySequence",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~KeySequence#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/interactions/Press.ts~KeySequence",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Press.ts~KeySequence#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "describe",
    "memberof": "src/screenplay/interactions/Press.ts~KeySequence",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Press.ts~KeySequence.describe",
    "access": "private",
    "description": " ",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 520,
    "kind": "file",
    "name": "src/screenplay/interactions/PressBuilder.ts",
    "content": "import { Answerable } from '@serenity-js/core';\nimport { Interaction } from '@serenity-js/core/lib/screenplay';\nimport { Element } from 'webdriverio';\n\n/**\n * @desc\n *  Fluent interface to make the instantiation of\n *  the {@link @serenity-js/core/lib/screenplay~Interaction}\n *  to {@link Press} more readable.\n *\n * @see {@link Press}\n *\n * @interface\n */\nexport interface PressBuilder {\n\n    /**\n     * @desc\n     *  Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  to {@link Press}.\n     *\n     * @param {Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise} field\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @see {@link Target}\n     */\n    in: (field: Answerable<Element<'async'>> /* | Question<AlertPromise> | AlertPromise */) => Interaction;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/PressBuilder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 521,
    "kind": "class",
    "name": "PressBuilder",
    "memberof": "src/screenplay/interactions/PressBuilder.ts",
    "static": true,
    "longname": "src/screenplay/interactions/PressBuilder.ts~PressBuilder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{PressBuilder}",
    "description": " Fluent interface to make the instantiation of\n the {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Press} more readable.",
    "see": [
      "{@link Press}"
    ],
    "lineNumber": 22,
    "interface": true
  },
  {
    "__docId__": 522,
    "kind": "member",
    "name": "in",
    "memberof": "src/screenplay/interactions/PressBuilder.ts~PressBuilder",
    "static": false,
    "longname": "src/screenplay/interactions/PressBuilder.ts~PressBuilder#in",
    "access": "public",
    "description": " Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Press}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<ElementFinder> | ElementFinder | Question<AlertPromise> | AlertPromise"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 523,
    "kind": "file",
    "name": "src/screenplay/interactions/RightClick.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, UsesAbilities } from '@serenity-js/core';\r\nimport { formatted } from '@serenity-js/core/lib/io';\r\nimport { Element } from 'webdriverio';\r\n\r\nimport { WebElementInteraction } from './WebElementInteraction';\r\n\r\n/**\r\n * @desc\r\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\r\n *  perfom a right click on a given Web element.\r\n *\r\n *  This is typically used to open a [custom context menu](https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event)\r\n *  on a given Web element, since it's not possible to interact with the standard context menu offered by your browser\r\n *\r\n * @example <caption>Example widget</caption>\r\n *  <form>\r\n *    <input type=\"text\" id=\"field\"\r\n *      oncontextmenu=\"showMenu(); return false;\" />\r\n *\r\n *    <div id=\"context-menu\" style=\"display:none\">\r\n *      Custom context menu\r\n *    </div>\r\n *  </form>\r\n *\r\n *  <script>\r\n *    function showMenu() {\r\n *      document.getElementById(\"context-menu\").style.display = 'block';\r\n *    }\r\n *  </script>\r\n *\r\n * @example <caption>Lean Page Object describing the widget</caption>\r\n *  import { by, Target } from '@serenity-js/webdriverio';\r\n *\r\n *  class Form {\r\n *      static exampleInput = Target.the('example input')\r\n *          .located(by.id('example'));\r\n *      static exampleContextMenu = Target.the('example context menu')\r\n *          .located(by.id('context-menu'));\r\n *  }\r\n *\r\n * @example <caption>Right-click on an element</caption>\r\n *  import { actorCalled } from '@serenity-js/core';\r\n *  import { BrowseTheWeb, RightClick, isVisible } from '@serenity-js/webdriverio';\r\n *  import { Ensure } from '@serenity-js/assertions';\r\n *\r\n *  actorCalled('Chloé')\r\n *      .whoCan(BrowseTheWeb.using(browser))\r\n *      .attemptsTo(\r\n *          RightClick.on(Form.exampleInput),\r\n *          Ensure.that(Form.exampleContextMenu, isVisible()),\r\n *      );\r\n *\r\n * @see {@link BrowseTheWeb}\r\n * @see {@link Target}\r\n * @see {@link @serenity-js/assertions~Ensure}\r\n * @see {@link isVisible}\r\n *\r\n * @extends {WebElementInteraction}\r\n */\r\nexport class RightClick extends WebElementInteraction {\r\n    /**\r\n     * @desc\r\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\r\n     *\r\n     * @param {Answerable<Element<'async'>>} target\r\n     *  The element to be right-clicked on\r\n     *\r\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\r\n     */\r\n    static on(target: Answerable<Element<'async'>>): Interaction {\r\n        return new RightClick(target);\r\n    }\r\n\r\n    /**\r\n     * @param {Answerable<Element<'async'>>} target\r\n     *  The element to be right-clicked on\r\n     */\r\n    constructor(private readonly target: Answerable<Element<'async'>>) {\r\n        super(formatted `#actor right-clicks on ${ target }`);\r\n    }\r\n\r\n    /**\r\n     * @desc\r\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\r\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\r\n     *\r\n     * @param {UsesAbilities & AnswersQuestions} actor\r\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\r\n     *\r\n     * @returns {PromiseLike<void>}\r\n     *\r\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\r\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\r\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\r\n     */\r\n    async performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\r\n        const element = await this.resolve(actor, this.target);\r\n        return element.click({ button: 'right' });\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/RightClick.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 524,
    "kind": "class",
    "name": "RightClick",
    "memberof": "src/screenplay/interactions/RightClick.ts",
    "static": true,
    "longname": "src/screenplay/interactions/RightClick.ts~RightClick",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{RightClick}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n perfom a right click on a given Web element.\n\n This is typically used to open a [custom context menu](https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event)\n on a given Web element, since it's not possible to interact with the standard context menu offered by your browser",
    "examples": [
      "<caption>Example widget</caption>\n <form>\n   <input type=\"text\" id=\"field\"\n     oncontextmenu=\"showMenu(); return false;\" />\n\n   <div id=\"context-menu\" style=\"display:none\">\n     Custom context menu\n   </div>\n </form>\n\n <script>\n   function showMenu() {\n     document.getElementById(\"context-menu\").style.display = 'block';\n   }\n </script>",
      "<caption>Lean Page Object describing the widget</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n class Form {\n     static exampleInput = Target.the('example input')\n         .located(by.id('example'));\n     static exampleContextMenu = Target.the('example context menu')\n         .located(by.id('context-menu'));\n }",
      "<caption>Right-click on an element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, RightClick, isVisible } from '@serenity-js/webdriverio';\n import { Ensure } from '@serenity-js/assertions';\n\n actorCalled('Chloé')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         RightClick.on(Form.exampleInput),\n         Ensure.that(Form.exampleContextMenu, isVisible()),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link isVisible}"
    ],
    "lineNumber": 67,
    "interface": false,
    "extends": [
      "WebElementInteraction"
    ]
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "on",
    "memberof": "src/screenplay/interactions/RightClick.ts~RightClick",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/RightClick.ts~RightClick.on",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be right-clicked on"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 526,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/RightClick.ts~RightClick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/RightClick.ts~RightClick#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be right-clicked on"
      }
    ]
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/RightClick.ts~RightClick",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/RightClick.ts~RightClick#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 528,
    "kind": "file",
    "name": "src/screenplay/interactions/Scroll.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction,  UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Element } from 'webdriverio';\n\nimport { WebElementInteraction } from './WebElementInteraction';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  scroll until a given Web element comes into view.\n *\n * @example <caption>Example widget</caption>\n *  <!--\n *      an element somewhere at the bottom of the page,\n *      outside of the visible area\n *  -->\n *  <input type=\"submit\" id=\"submit\" />\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { by, Target } from '@serenity-js/webdriverio';\n *\n *  class Form {\n *      static submitButton = Target.the('submit button')\n *          .located(by.id('submit'));\n *  }\n *\n * @example <caption>Scrolling to element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure } from '@serenity-js/assertions';\n *  import { BrowseTheWeb, Scroll, isVisible } from '@serenity-js/webdriverio';\n *\n *  actorCalled('Sara')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Scroll.to(Form.submitButton),\n *          Ensure.that(Form.submitButton, isVisible()),\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Target}\n * @see {@link isVisible}\n * @see {@link @serenity-js/assertions~Ensure}\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Scroll extends WebElementInteraction {\n\n    /**\n     * @desc\n     *  Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {Answerable<Element<'async'>>} target\n     *  The element to be scrolled to\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static to(target: Answerable<Element<'async'>>) : Interaction {\n        return new Scroll(target);\n    }\n\n    /**\n     * @param {Answerable<Element<'async'>>} target\n     *  The element to be scrolled to\n     */\n    constructor(private readonly target: Answerable<Element<'async'>>) {\n        super(formatted `#actor scrolls to ${ target }`);\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *\n     * @returns {PromiseLike<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    async performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        const element = await this.resolve(actor, this.target);\n        return element.scrollIntoView();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/Scroll.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 529,
    "kind": "class",
    "name": "Scroll",
    "memberof": "src/screenplay/interactions/Scroll.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{Scroll}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n scroll until a given Web element comes into view.",
    "examples": [
      "<caption>Example widget</caption>\n <!--\n     an element somewhere at the bottom of the page,\n     outside of the visible area\n -->\n <input type=\"submit\" id=\"submit\" />",
      "<caption>Lean Page Object describing the widget</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n class Form {\n     static submitButton = Target.the('submit button')\n         .located(by.id('submit'));\n }",
      "<caption>Scrolling to element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure } from '@serenity-js/assertions';\n import { BrowseTheWeb, Scroll, isVisible } from '@serenity-js/webdriverio';\n\n actorCalled('Sara')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Scroll.to(Form.submitButton),\n         Ensure.that(Form.submitButton, isVisible()),\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link isVisible}",
      "{@link @serenity-js/assertions~Ensure}"
    ],
    "lineNumber": 53,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "to",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll.to",
    "access": "public",
    "description": " Instantiates this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be scrolled to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 531,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The element to be scrolled to"
      }
    ]
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Scroll.ts~Scroll",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/Scroll.ts~Scroll#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiseLike<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": "An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiseLike<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 533,
    "kind": "file",
    "name": "src/screenplay/interactions/Wait.ts",
    "content": "import { Answerable, AnswersQuestions, AssertionError, Duration, Expectation, ExpectationMet, ExpectationOutcome, Interaction, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\n\nimport { BrowseTheWeb } from '../abilities';\nimport { WaitBuilder } from './WaitBuilder';\n\n/**\n * @desc\n *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n *  wait before proceeding either for a set {@link @serenity-js/core/lib/model~Duration}\n *  or until a given {@link @serenity-js/core/lib/screenplay/questions~Expectation} is met.\n *\n *  Under the hood, `Wait` uses WebdriverIO [\"explicit waiting\"](https://webdriver.io/docs/autowait/)\n *  mechanism.\n *\n * @example <caption>Example widget</caption>\n *  <!--\n *      After about 1 second, the text will change from 'Loading...' to 'Ready!'\n *  -->\n *  <h1 id=\"status\">Loading...</h1>\n *  <script>\n *      (function () {\n *          setTimeout(function () {\n *              document.getElementById('status').textContent = 'Ready!'\n *          }, 1000);\n *      })();\n *  </script>\n *\n * @example <caption>Lean Page Object describing the widget</caption>\n *  import { by, Target } from '@serenity-js/webdriverio';\n *\n *  class App {\n *      static status = Target.the('status widget')\n *          .located(by.id('status'));\n *  }\n *\n * @example <caption>Waiting for a set amount of time</caption>\n *  import { actorCalled, Duration } from '@serenity-js/core';\n *  import { BrowseTheWeb, Wait } from '@serenity-js/webdriverio';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *\n *  actorCalled('Wendy')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Wait.for(Duration.ofSeconds(1.5)),\n *          Ensure.that(App.status, equals('Ready!')),\n *      );\n *\n *  // Please note that while the above implementation works,\n *  // this approach is inefficient because at best\n *  // the actor might wait too long and at worst the test\n *  // might become \"flaky\" if any external interference\n *  // (like network glitches, animations taking a bit too long etc.)\n *  // makes the actor wait not long enough.\n *\n * @example <caption>Waiting until a condition is met</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { BrowseTheWeb, Wait, Text } from '@serenity-js/webdriverio';\n *  import { equals } from '@serenity-js/assertions';\n *\n *  actorCalled('Wendy')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Wait.until(Text.of(App.status), equals('Ready!')),\n *          // app is ready, proceed with the scenario\n *      );\n *\n *  // Wait.until makes the Actor keep asking a Question,\n *  // in this case Text.of(App.status), until the answer meets\n *  // the expectation, or a timeout expires (default: 5s).\n *  //\n *  // Please note that both Ensure and Wait can be used with\n *  // the same expectations, like `equals`.\n *\n * @example <caption>Changing the default timeout</caption>\n *  import { actorCalled, Duration } from '@serenity-js/core';\n *  import { BrowseTheWeb, Wait, Text } from '@serenity-js/webdriverio';\n *  import { equals } from '@serenity-js/assertions';\n *\n *  actorCalled('Wendy')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Wait.upTo(Duration.ofSeconds(3))\n *              .until(Text.of(App.status), equals('Ready!')),\n *          // app is ready, proceed with the scenario\n *      );\n *\n * @see {@link BrowseTheWeb}\n * @see {@link Target}\n * @see {@link Text}\n * @see {@link @serenity-js/assertions~Ensure}\n * @see {@link @serenity-js/assertions/lib/expectations~equals}\n * @see {@link @serenity-js/core/lib/model~Duration}\n *\n * @see {@link @serenity-js/core/lib/screenplay~Interaction}\n */\nexport class Wait {\n\n    /**\n     * @desc\n     *  Default timeout of 5 seconds used with {@link Wait.until}.\n     *\n     * @type {@serenity-js/core~Duration}\n     */\n    static readonly Default_Timeout = Duration.ofSeconds(5);\n\n    /**\n     * @desc\n     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  configured to wait for a set duration.\n     *\n     * @param {Answerable<Duration>} duration\n     *  A set duration the {@link @serenity-js/core/lib/screenplay/actor~Actor} should wait for\n     *  before proceeding\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static for(duration: Answerable<Duration>): Interaction {\n        return new WaitFor(duration);\n    }\n\n    /**\n     * @desc\n     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  configured to wait until the answer to the question (`actual`) meets the `expectation`,\n     *  or a custom timeout expires.\n     *\n     * @param {Duration} duration\n     *  Custom timeout to override {@link Wait.Default_Timeout}\n     *\n     * @returns {WaitBuilder}\n     */\n    static upTo(duration: Duration): WaitBuilder {\n        return {\n            until: <Actual>(actual: Answerable<Actual>, expectation: Expectation<any, Actual>): Interaction =>\n                new WaitUntil(actual, expectation, duration),\n        };\n    }\n\n    /**\n     * @desc\n     *  Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  configured to wait until the answer to the question (`actual`) meets the `expectation`,\n     *  or a {@link Wait.Default_Timeout} expires.\n     *\n     * @param {Answerable<Actual>} actual\n     *  A {@link @serenity-js/core/lib/screenplay~Question}\n     *  that the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  will keep asking until the answer meets\n     *  the {@link @serenity-js/core/lib/screenplay/questions~Expectation} provided\n     *\n     * @param {@serenity-js/core/lib/screenplay/questions~<any,Actual>} expectation\n     *  An {@link @serenity-js/core/lib/screenplay/questions~Expectation} to be met before proceeding\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Interaction}\n     */\n    static until<Actual>(actual: Answerable<Actual>, expectation: Expectation<any, Actual>): Interaction {\n        return new WaitUntil(actual, expectation, Wait.Default_Timeout);\n    }\n}\n\n/**\n * @package\n */\nclass WaitFor extends Interaction {\n    constructor(private readonly duration: Answerable<Duration>) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    async performAs(actor: UsesAbilities & AnswersQuestions): Promise<void> {\n        return actor.answer(this.duration)\n            .then(duration => BrowseTheWeb.as(actor).browser.pause(duration.inMilliseconds()) as Promise<void>);\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted`#actor waits for ${ this.duration }`;\n    }\n}\n\n/**\n * @package\n */\nclass WaitUntil<Actual> extends Interaction {\n    constructor(\n        private readonly actual: Answerable<Actual>,\n        private readonly expectation: Expectation<any, Actual>,\n        private readonly timeout: Duration,\n    ) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     *\n     * @param {UsesAbilities & AnswersQuestions} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     */\n    performAs(actor: UsesAbilities & AnswersQuestions): PromiseLike<void> {\n        const\n            actual      = this.actual,\n            expectation = this.expectation.answeredBy(actor);\n\n        let expectationOutcome: ExpectationOutcome<any, Actual>;\n\n        return BrowseTheWeb.as(actor)\n            .browser\n            .waitUntil(function () {\n                return actor.answer(actual)\n                    .then(act => expectation(act))\n                    .then(outcome => {\n                        expectationOutcome = outcome;\n\n                        return outcome instanceof ExpectationMet;\n                    });\n            }, {\n                timeout:    this.timeout.inMilliseconds(),\n                timeoutMsg: `Wait timed out after ${ this.timeout }`,\n            })\n            .then(_ => void 0)\n            .catch(error => {\n                if (expectationOutcome) {\n                    throw new AssertionError(\n                        `Waited ${ this.timeout.toString() } for ${ formatted `${ this.actual }` } to ${ this.expectation.toString() }`,\n                        expectationOutcome.expected,\n                        expectationOutcome.actual,\n                        error,\n                    );\n                }\n\n                throw error;\n            });\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted`#actor waits up to ${ this.timeout } until ${ this.actual } does ${ this.expectation }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/Wait.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 534,
    "kind": "class",
    "name": "Wait",
    "memberof": "src/screenplay/interactions/Wait.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{Wait}",
    "description": " Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to\n wait before proceeding either for a set {@link @serenity-js/core/lib/model~Duration}\n or until a given {@link @serenity-js/core/lib/screenplay/questions~Expectation} is met.\n\n Under the hood, `Wait` uses WebdriverIO [\"explicit waiting\"](https://webdriver.io/docs/autowait/)\n mechanism.",
    "examples": [
      "<caption>Example widget</caption>\n <!--\n     After about 1 second, the text will change from 'Loading...' to 'Ready!'\n -->\n <h1 id=\"status\">Loading...</h1>\n <script>\n     (function () {\n         setTimeout(function () {\n             document.getElementById('status').textContent = 'Ready!'\n         }, 1000);\n     })();\n </script>",
      "<caption>Lean Page Object describing the widget</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n class App {\n     static status = Target.the('status widget')\n         .located(by.id('status'));\n }",
      "<caption>Waiting for a set amount of time</caption>\n import { actorCalled, Duration } from '@serenity-js/core';\n import { BrowseTheWeb, Wait } from '@serenity-js/webdriverio';\n import { Ensure, equals } from '@serenity-js/assertions';\n\n actorCalled('Wendy')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Wait.for(Duration.ofSeconds(1.5)),\n         Ensure.that(App.status, equals('Ready!')),\n     );\n\n // Please note that while the above implementation works,\n // this approach is inefficient because at best\n // the actor might wait too long and at worst the test\n // might become \"flaky\" if any external interference\n // (like network glitches, animations taking a bit too long etc.)\n // makes the actor wait not long enough.",
      "<caption>Waiting until a condition is met</caption>\n import { actorCalled } from '@serenity-js/core';\n import { BrowseTheWeb, Wait, Text } from '@serenity-js/webdriverio';\n import { equals } from '@serenity-js/assertions';\n\n actorCalled('Wendy')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Wait.until(Text.of(App.status), equals('Ready!')),\n         // app is ready, proceed with the scenario\n     );\n\n // Wait.until makes the Actor keep asking a Question,\n // in this case Text.of(App.status), until the answer meets\n // the expectation, or a timeout expires (default: 5s).\n //\n // Please note that both Ensure and Wait can be used with\n // the same expectations, like `equals`.",
      "<caption>Changing the default timeout</caption>\n import { actorCalled, Duration } from '@serenity-js/core';\n import { BrowseTheWeb, Wait, Text } from '@serenity-js/webdriverio';\n import { equals } from '@serenity-js/assertions';\n\n actorCalled('Wendy')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Wait.upTo(Duration.ofSeconds(3))\n             .until(Text.of(App.status), equals('Ready!')),\n         // app is ready, proceed with the scenario\n     );"
    ],
    "see": [
      "{@link BrowseTheWeb}",
      "{@link Target}",
      "{@link Text}",
      "{@link @serenity-js/assertions~Ensure}",
      "{@link @serenity-js/assertions/lib/expectations~equals}",
      "{@link @serenity-js/core/lib/model~Duration}",
      "{@link @serenity-js/core/lib/screenplay~Interaction}"
    ],
    "lineNumber": 104,
    "interface": false
  },
  {
    "__docId__": 535,
    "kind": "member",
    "name": "Default_Timeout",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.Default_Timeout",
    "access": "public",
    "description": " Default timeout of 5 seconds used with {@link Wait.until}.",
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "Duration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "for",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.for",
    "access": "public",
    "description": " Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n configured to wait for a set duration.",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Duration>"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "A set duration the {@link @serenity-js/core/lib/screenplay/actor~Actor} should wait for\n before proceeding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "upTo",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.upTo",
    "access": "public",
    "description": " Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n configured to wait until the answer to the question (`actual`) meets the `expectation`,\n or a custom timeout expires.",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{WaitBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Duration"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "Custom timeout to override {@link Wait.Default_Timeout}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WaitBuilder"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "until",
    "memberof": "src/screenplay/interactions/Wait.ts~Wait",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~Wait.until",
    "access": "public",
    "description": " Instantiates a version of this {@link @serenity-js/core/lib/screenplay~Interaction}\n configured to wait until the answer to the question (`actual`) meets the `expectation`,\n or a {@link Wait.Default_Timeout} expires.",
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Actual>"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": "A {@link @serenity-js/core/lib/screenplay~Question}\n that the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n will keep asking until the answer meets\n the {@link @serenity-js/core/lib/screenplay/questions~Expectation} provided"
      },
      {
        "nullable": null,
        "types": [
          "<any,Actual>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": "An {@link @serenity-js/core/lib/screenplay/questions~Expectation} to be met before proceeding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 539,
    "kind": "class",
    "name": "WaitFor",
    "memberof": "src/screenplay/interactions/Wait.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/interactions/Wait.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 237,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 540,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitFor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitFor",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 267,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitFor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitFor#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 289,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 543,
    "kind": "class",
    "name": "WaitUntil",
    "memberof": "src/screenplay/interactions/Wait.ts",
    "static": true,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "access": "package",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/interactions/Wait.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 304,
    "interface": false,
    "extends": [
      "@serenity-js/core~Interaction"
    ],
    "ignore": true
  },
  {
    "__docId__": 544,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 305,
    "undocument": true
  },
  {
    "__docId__": 545,
    "kind": "method",
    "name": "performAs",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil#performAs",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n perform this {@link @serenity-js/core/lib/screenplay~Interaction}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}"
    ],
    "lineNumber": 338,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "UsesAbilities & AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/Wait.ts~WaitUntil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/Wait.ts~WaitUntil#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 391,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 547,
    "kind": "file",
    "name": "src/screenplay/interactions/WaitBuilder.ts",
    "content": "/**\n * @desc\n *  Fluent interface to make the instantiation of\n *  the {@link @serenity-js/core/lib/screenplay~Interaction}\n *  to {@link Wait} more readable.\n *\n * @see {@link Wait}\n *\n * @interface\n */\nimport { Answerable, Expectation, Interaction } from '@serenity-js/core';\n\nexport interface WaitBuilder {\n\n    /**\n     * @desc\n     *  Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n     *  to {@link Wait}.\n     *\n     * @param {Answerable<Actual>} actual\n     *  A {@link @serenity-js/core/lib/screenplay~Question}\n     *  that the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  will keep asking until the answer meets\n     *  the {@link @serenity-js/core/lib/screenplay/questions~Expectation} provided\n     *\n     * @param {@serenity-js/core/lib/screenplay/questions~Expectation<any,Actual>} expectation\n     *  An {@link @serenity-js/assertions~Expectation} to be met before proceeding\n     *\n     * @returns {Interaction}\n     *\n     * @see {@link Target}\n     */\n    until: <Actual>(actual: Answerable<Actual>, expectation: Expectation<any, Actual>) => Interaction;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/WaitBuilder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 548,
    "kind": "class",
    "name": "WaitBuilder",
    "memberof": "src/screenplay/interactions/WaitBuilder.ts",
    "static": true,
    "longname": "src/screenplay/interactions/WaitBuilder.ts~WaitBuilder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{WaitBuilder}",
    "description": " Fluent interface to make the instantiation of\n the {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Wait} more readable.",
    "see": [
      "{@link Wait}"
    ],
    "lineNumber": 18,
    "interface": true
  },
  {
    "__docId__": 549,
    "kind": "member",
    "name": "until",
    "memberof": "src/screenplay/interactions/WaitBuilder.ts~WaitBuilder",
    "static": false,
    "longname": "src/screenplay/interactions/WaitBuilder.ts~WaitBuilder#until",
    "access": "public",
    "description": " Instantiates an {@link @serenity-js/core/lib/screenplay~Interaction}\n to {@link Wait}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Interaction}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Actual>"
        ],
        "spread": false,
        "optional": false,
        "name": "actual",
        "description": "A {@link @serenity-js/core/lib/screenplay~Question}\n that the {@link @serenity-js/core/lib/screenplay/actor~Actor}\n will keep asking until the answer meets\n the {@link @serenity-js/core/lib/screenplay/questions~Expectation} provided"
      },
      {
        "nullable": null,
        "types": [
          "Expectation<any,Actual>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": "An {@link @serenity-js/assertions~Expectation} to be met before proceeding"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Interaction"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "file",
    "name": "src/screenplay/interactions/WebElementInteraction.ts",
    "content": "import { Answerable, AnswersQuestions, Interaction, LogicError } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Element } from 'webdriverio';\n\n/**\n * @desc\n *  A base class for WebdriverIO-specific interactions\n *\n * @extends {@serenity-js/core/lib/screenplay~Interaction}\n */\nexport abstract class WebElementInteraction extends Interaction {\n\n    /**\n     * @param {string} description\n     *  A human-readable description to be used when reporting\n     *  this {@link @serenity-js/core/lib/screenplay~Interaction}.\n     */\n    constructor(private readonly description: string) {\n        super();\n    }\n\n    /**\n     * @desc\n     *  Returns the resolved {@link @wdio/types~Element}, or throws a {@link @serenity-js/core/lib/errors~LogicError}\n     *  if the element is `undefined`.\n     *\n     * @param {@serenity-js/core/lib/screenplay/actor~AnswersQuestions} actor\n     * @param {@serenity-js/core/lib/screenplay~Answerable<Element<'async'>>} element\n     *\n     * @returns {Promise<Element<'async'>>}\n     *\n     * @protected\n     */\n    protected async resolve(\n        actor: AnswersQuestions,\n        element: Answerable<Element<'async'>>,\n    ): Promise<Element<'async'>> {\n        const resolved = await actor.answer(element);\n\n        if (! resolved) {\n            throw new LogicError(formatted `Couldn't find ${ element }`);\n        }\n\n        return resolved;\n    }\n\n    /**\n     * @desc\n     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return this.description;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/WebElementInteraction.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 551,
    "kind": "class",
    "name": "WebElementInteraction",
    "memberof": "src/screenplay/interactions/WebElementInteraction.ts",
    "static": true,
    "longname": "src/screenplay/interactions/WebElementInteraction.ts~WebElementInteraction",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/interactions",
    "importStyle": "{WebElementInteraction}",
    "description": " A base class for WebdriverIO-specific interactions",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "Interaction"
    ]
  },
  {
    "__docId__": 552,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/interactions/WebElementInteraction.ts~WebElementInteraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/WebElementInteraction.ts~WebElementInteraction#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A human-readable description to be used when reporting\n this {@link @serenity-js/core/lib/screenplay~Interaction}."
      }
    ]
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "resolve",
    "memberof": "src/screenplay/interactions/WebElementInteraction.ts~WebElementInteraction",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/interactions/WebElementInteraction.ts~WebElementInteraction#resolve",
    "access": "protected",
    "description": " Returns the resolved {@link @wdio/types~Element}, or throws a {@link @serenity-js/core/lib/errors~LogicError}\n if the element is `undefined`.",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Element<'async'>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Element<'async'>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/interactions/WebElementInteraction.ts~WebElementInteraction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/interactions/WebElementInteraction.ts~WebElementInteraction#toString",
    "access": "public",
    "description": " Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 555,
    "kind": "file",
    "name": "src/screenplay/interactions/index.ts",
    "content": "export * from './Clear';\nexport * from './Click';\nexport * from './DoubleClick';\nexport * from './Enter';\nexport * from './ExecuteScript';\nexport * from './Hover';\nexport * from './Navigate';\nexport * from './Press';\nexport * from './PressBuilder';\nexport * from './RightClick';\nexport * from './Scroll';\nexport * from './Wait';\nexport * from './WebElementInteraction';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/interactions/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 556,
    "kind": "file",
    "name": "src/screenplay/questions/Attribute.ts",
    "content": "import { Answerable, AnswersQuestions, LogicError, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { Element } from 'webdriverio';\n\nimport { TargetNestedElement } from './targets';\n\n/**\n * @desc\n *  Returns the value of the given HTML attribute of a given {@link WebElement},\n *  represented by Answerable<{@link @wdio/types~Element}>\n *\n * @example <caption>Example widget</caption>\n *  <ul id=\"shopping-list\" data-items-left=\"2\">\n *    <li data-state=\"bought\">Coffee<li>\n *    <li data-state=\"buy\">Honey<li>\n *    <li data-state=\"buy\">Chocolate<li>\n *  </ul>\n *\n * @example <caption>Retrieve a HTML attribute of a given WebElement</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { Attribute, by, BrowseTheWeb, Target } from '@serenity-js/webdriverio';\n *\n *  const shoppingList = () =>\n *      Target.the('shopping list').located(by.id('shopping-list'))\n *\n *  actorCalled('Lisa')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Ensure.that(Attribute.called('data-items-left').of(shoppingList()), equals('2')),\n *      )\n *\n * @example <caption>Find WebElements with a given attribute</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure, includes } from '@serenity-js/assertions';\n *  import { Attribute, BrowseTheWeb, by, Target } from '@serenity-js/webdriverio';\n *\n *  class ShoppingList {\n *      static items = () =>\n *          Target.all('items')\n *              .located(by.css('#shopping-list li'))\n *\n *      static outstandingItems = () =>\n *          ShoppingList.items\n *              .where(Attribute.called('data-state'), includes('buy'))\n *  }\n *\n *  actorCalled('Lisa')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Ensure.that(\n *              Text.ofAll(ShoppingList.outstandingItems()),\n *              equals([ 'Honey', 'Chocolate' ])\n *          ),\n *      )\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n */\nexport class Attribute\n    extends Question<Promise<string>>\n    implements MetaQuestion<Answerable<Element<'async'>>, Promise<string>>\n{\n    /**\n     * @param {Answerable<string>} name\n     * @returns {Attribute}\n     */\n    static called(name: Answerable<string>): Attribute {\n        return new Attribute(name);\n    }\n\n    /**\n     * @param {Answerable<string>} name\n     * @param {@serenity-js/core/lib/screenplay~Answerable<Element<'async'>>} [element]\n     */\n    constructor(\n        private readonly name: Answerable<string>,\n        private readonly element?: Answerable<Element<'async'>>,\n    ) {\n        super(`\"${ name }\" attribute of ${ element }`);\n    }\n\n    /**\n     * @desc\n     *  Resolves to the value of a HTML attribute of the `target` element,\n     *  located in the context of a `parent` element.\n     *\n     * @param {Answerable<Element<'async'>>} parent\n     * @returns {Question<Promise<string[]>>}\n     *\n     * @see {@link Target.all}\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    of(parent: Answerable<Element<'async'>>): Question<Promise<string>> {\n        return new Attribute(\n            this.name,\n            this.element\n                ? new TargetNestedElement(parent, this.element)\n                : parent\n        );\n    }\n\n    async answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        if (! this.element) {\n            throw new LogicError(`Target not specified`);   // todo: better error message?\n        }\n\n        const element = await actor.answer(this.element);\n        const name    = await actor.answer(this.name);\n\n        return element.getAttribute(name);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/Attribute.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 557,
    "kind": "class",
    "name": "Attribute",
    "memberof": "src/screenplay/questions/Attribute.ts",
    "static": true,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{Attribute}",
    "description": " Returns the value of the given HTML attribute of a given {@link WebElement},\n represented by Answerable<{@link @wdio/types~Element}>",
    "examples": [
      "<caption>Example widget</caption>\n <ul id=\"shopping-list\" data-items-left=\"2\">\n   <li data-state=\"bought\">Coffee<li>\n   <li data-state=\"buy\">Honey<li>\n   <li data-state=\"buy\">Chocolate<li>\n </ul>",
      "<caption>Retrieve a HTML attribute of a given WebElement</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { Attribute, by, BrowseTheWeb, Target } from '@serenity-js/webdriverio';\n\n const shoppingList = () =>\n     Target.the('shopping list').located(by.id('shopping-list'))\n\n actorCalled('Lisa')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Ensure.that(Attribute.called('data-items-left').of(shoppingList()), equals('2')),\n     )",
      "<caption>Find WebElements with a given attribute</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, includes } from '@serenity-js/assertions';\n import { Attribute, BrowseTheWeb, by, Target } from '@serenity-js/webdriverio';\n\n class ShoppingList {\n     static items = () =>\n         Target.all('items')\n             .located(by.css('#shopping-list li'))\n\n     static outstandingItems = () =>\n         ShoppingList.items\n             .where(Attribute.called('data-state'), includes('buy'))\n }\n\n actorCalled('Lisa')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Ensure.that(\n             Text.ofAll(ShoppingList.outstandingItems()),\n             equals([ 'Honey', 'Chocolate' ])\n         ),\n     )"
    ],
    "lineNumber": 66,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "called",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute.called",
    "access": "public",
    "description": "",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Attribute}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Attribute"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 559,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": true,
        "name": "element",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute#of",
    "access": "public",
    "description": " Resolves to the value of a HTML attribute of the `target` element,\n located in the context of a `parent` element.",
    "see": [
      "{@link Target.all}",
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string[]>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string[]>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Attribute.ts~Attribute",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/questions/Attribute.ts~Attribute#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 562,
    "kind": "file",
    "name": "src/screenplay/questions/CSSClasses.ts",
    "content": "import { Answerable, AnswersQuestions, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Element } from 'webdriverio';\n\nimport { Attribute } from './Attribute';\nimport { TargetNestedElement } from './targets';\n\n/**\n * @desc\n *  Resolves to an array of [CSS classes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-class)\n *  of a given {@link WebElement}, represented by Answerable<{@link @wdio/types~Element}>.\n *\n * @example <caption>Example widget</caption>\n *  <ul id=\"shopping-list\" class=\"active favourite\">\n *    <li class=\"bought\">Coffee<li>\n *    <li class=\"buy\">Honey<li>\n *    <li class=\"buy\">Chocolate<li>\n *  </ul>\n *\n * @example <caption>Retrieve CSS classes of a given WebElement</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { BrowseTheWeb, by, CSSClasses, Target } from '@serenity-js/webdriverio';\n *\n *  const shoppingList = () =>\n *      Target.the('shopping list').located(by.id('shopping-list'))\n *\n *  actorCalled('Lisa')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Ensure.that(CSSClasses.of(shoppingList()), equals([ 'active', 'favourite' ])),\n *      )\n *\n * @example <caption>Find WebElements with a given class</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure, contain } from '@serenity-js/assertions';\n *  import { BrowseTheWeb, by, CSSClasses, Target } from '@serenity-js/webdriverio';\n *\n *  class ShoppingList {\n *      static items = () =>\n *          Target.all('items')\n *              .located(by.css('#shopping-list li'))\n *\n *      static outstandingItems = () =>\n *          ShoppingList.items\n *              .where(CSSClasses, contain('buy'))\n *  }\n *\n *  actorCalled('Lisa')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Ensure.that(\n *              Text.ofAll(ShoppingList.outstandingItems()),\n *              equals([ 'Honey', 'Chocolate' ])\n *          ),\n *      )\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n */\nexport class CSSClasses\n    extends Question<Promise<string[]>>\n    implements MetaQuestion<Answerable<Element<'async'>>, Promise<string[]>>\n{\n    /**\n     * @param {Question<Element<'async'>> | Element<'async'>} target\n     * @returns {CSSClasses}\n     */\n    static of(target: Answerable<Element<'async'>>): CSSClasses {\n        return new CSSClasses(target);\n    }\n\n    /**\n     * @param {Question<Element<'async'>> | Element<'async'>} target\n     */\n    constructor(private readonly target: Answerable<Element<'async'>>) {\n        super(formatted `CSS classes of ${ target}`);\n    }\n\n    /**\n     * @desc\n     *  Resolves to an array of CSS classes of the `target` element,\n     *  located in the context of a `parent` element.\n     *\n     * @param {@serenity-js/core/lib/screenplay~Answerable<Element<'async'>>} parent\n     * @returns {Question<Promise<string[]>>}\n     *\n     * @see {@link Target.all}\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    of(parent: Answerable<Element<'async'>>): Question<Promise<string[]>> {\n        return new CSSClasses(new TargetNestedElement(parent, this.target));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string[]> {\n        return Attribute.called('class').of(this.target).answeredBy(actor)\n            .then(attribute => attribute\n                .replace(/\\s+/, ' ')\n                .trim()\n                .split(' ')\n                .filter(cssClass => !! cssClass),\n            );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/CSSClasses.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 563,
    "kind": "class",
    "name": "CSSClasses",
    "memberof": "src/screenplay/questions/CSSClasses.ts",
    "static": true,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{CSSClasses}",
    "description": " Resolves to an array of [CSS classes](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-class)\n of a given {@link WebElement}, represented by Answerable<{@link @wdio/types~Element}>.",
    "examples": [
      "<caption>Example widget</caption>\n <ul id=\"shopping-list\" class=\"active favourite\">\n   <li class=\"bought\">Coffee<li>\n   <li class=\"buy\">Honey<li>\n   <li class=\"buy\">Chocolate<li>\n </ul>",
      "<caption>Retrieve CSS classes of a given WebElement</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { BrowseTheWeb, by, CSSClasses, Target } from '@serenity-js/webdriverio';\n\n const shoppingList = () =>\n     Target.the('shopping list').located(by.id('shopping-list'))\n\n actorCalled('Lisa')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Ensure.that(CSSClasses.of(shoppingList()), equals([ 'active', 'favourite' ])),\n     )",
      "<caption>Find WebElements with a given class</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, contain } from '@serenity-js/assertions';\n import { BrowseTheWeb, by, CSSClasses, Target } from '@serenity-js/webdriverio';\n\n class ShoppingList {\n     static items = () =>\n         Target.all('items')\n             .located(by.css('#shopping-list li'))\n\n     static outstandingItems = () =>\n         ShoppingList.items\n             .where(CSSClasses, contain('buy'))\n }\n\n actorCalled('Lisa')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Ensure.that(\n             Text.ofAll(ShoppingList.outstandingItems()),\n             equals([ 'Honey', 'Chocolate' ])\n         ),\n     )"
    ],
    "lineNumber": 68,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses.of",
    "access": "public",
    "description": "",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{CSSClasses}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Element<'async'>> | Element<'async'>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CSSClasses"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 565,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "Question<Element<'async'>> | Element<'async'>"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses#of",
    "access": "public",
    "description": " Resolves to an array of CSS classes of the `target` element,\n located in the context of a `parent` element.",
    "see": [
      "{@link Target.all}",
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string[]>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string[]>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/CSSClasses.ts~CSSClasses",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/CSSClasses.ts~CSSClasses#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 568,
    "kind": "file",
    "name": "src/screenplay/questions/LastScriptExecution.ts",
    "content": "import { Question } from '@serenity-js/core';\n\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Returns the result of last script executed via {@link ExecuteScript}\n */\nexport class LastScriptExecution {\n\n    /**\n     * @desc\n     *  Enables asserting on the result of a function executed via {@link ExecuteScript}.\n     *\n     * @returns {Question<R>}\n     */\n    static result<R>(): Question<R> {\n        return Question.about(`last script execution result`, actor =>\n            BrowseTheWeb.as(actor).getLastScriptExecutionResult());\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/LastScriptExecution.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 569,
    "kind": "class",
    "name": "LastScriptExecution",
    "memberof": "src/screenplay/questions/LastScriptExecution.ts",
    "static": true,
    "longname": "src/screenplay/questions/LastScriptExecution.ts~LastScriptExecution",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{LastScriptExecution}",
    "description": " Returns the result of last script executed via {@link ExecuteScript}",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "result",
    "memberof": "src/screenplay/questions/LastScriptExecution.ts~LastScriptExecution",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/LastScriptExecution.ts~LastScriptExecution.result",
    "access": "public",
    "description": " Enables asserting on the result of a function executed via {@link ExecuteScript}.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<R>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<R>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 571,
    "kind": "file",
    "name": "src/screenplay/questions/NestedTargetBuilder.ts",
    "content": "import { Answerable } from '@serenity-js/core';\nimport type { Element } from 'webdriverio';\n\nimport { TargetBuilder } from './TargetBuilder';\n\n/**\n * @desc\n *  Fluent interface to make the instantiation of\n *  the {@link @serenity-js/core/lib/screenplay~Question}\n *  about a nested {@link Target} more readable.\n *\n * @see {@link Target}\n *\n * @interface\n */\nexport interface NestedTargetBuilder<T> {\n\n    /**\n     * @desc\n     *  Instantiates a {@link @serenity-js/core/lib/screenplay~Question}\n     *  about a {@link Target}.\n     *\n     * @param {@serenity-js/core/lib/screenplay~Answerable<Element<'async'>>} parent\n     * @returns {TargetBuilder}\n     *\n     * @see {@link Target}\n     * @see {@link TargetBuilder}\n     */\n    of: (parent: Answerable<Element<'async'>>) => TargetBuilder<T>;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/NestedTargetBuilder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 572,
    "kind": "class",
    "name": "NestedTargetBuilder",
    "memberof": "src/screenplay/questions/NestedTargetBuilder.ts",
    "static": true,
    "longname": "src/screenplay/questions/NestedTargetBuilder.ts~NestedTargetBuilder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{NestedTargetBuilder}",
    "description": " Fluent interface to make the instantiation of\n the {@link @serenity-js/core/lib/screenplay~Question}\n about a nested {@link Target} more readable.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 23,
    "interface": true
  },
  {
    "__docId__": 573,
    "kind": "member",
    "name": "of",
    "memberof": "src/screenplay/questions/NestedTargetBuilder.ts~NestedTargetBuilder",
    "static": false,
    "longname": "src/screenplay/questions/NestedTargetBuilder.ts~NestedTargetBuilder#of",
    "access": "public",
    "description": " Instantiates a {@link @serenity-js/core/lib/screenplay~Question}\n about a {@link Target}.",
    "see": [
      "{@link Target}",
      "{@link TargetBuilder}"
    ],
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetBuilder}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetBuilder"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 574,
    "kind": "file",
    "name": "src/screenplay/questions/TargetBuilder.ts",
    "content": "import { Locator } from './locators';\n\n/**\n * @desc\n *  Fluent interface to make the instantiation of\n *  the {@link @serenity-js/core/lib/screenplay~Question}\n *  about a {@link Target} more readable.\n *\n * @see {@link Target}\n *\n * @interface\n */\nexport interface TargetBuilder<T> {\n\n    /**\n     * @desc\n     *  Instantiates a {@link @serenity-js/core/lib/screenplay~Question}\n     *  about a {@link Target}.\n     *\n     * @param {Locator} locator\n     * @returns {@serenity-js/core/lib/screenplay~Question}\n     *\n     * @see {@link Target}\n     * @see {@link Locator}\n     */\n    located: (locator: Locator) => T;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/TargetBuilder.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 575,
    "kind": "class",
    "name": "TargetBuilder",
    "memberof": "src/screenplay/questions/TargetBuilder.ts",
    "static": true,
    "longname": "src/screenplay/questions/TargetBuilder.ts~TargetBuilder",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{TargetBuilder}",
    "description": " Fluent interface to make the instantiation of\n the {@link @serenity-js/core/lib/screenplay~Question}\n about a {@link Target} more readable.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 20,
    "interface": true
  },
  {
    "__docId__": 576,
    "kind": "member",
    "name": "located",
    "memberof": "src/screenplay/questions/TargetBuilder.ts~TargetBuilder",
    "static": false,
    "longname": "src/screenplay/questions/TargetBuilder.ts~TargetBuilder#located",
    "access": "public",
    "description": " Instantiates a {@link @serenity-js/core/lib/screenplay~Question}\n about a {@link Target}.",
    "see": [
      "{@link Target}",
      "{@link Locator}"
    ],
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Locator"
        ],
        "spread": false,
        "optional": false,
        "name": "locator",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 577,
    "kind": "file",
    "name": "src/screenplay/questions/Text.ts",
    "content": "import { Answerable, AnswersQuestions, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport type { Element, ElementArray } from 'webdriverio';\n\nimport { TargetNestedElement, TargetNestedElements } from './targets';\n\n/**\n * @desc\n *  Resolves to the visible (i.e. not hidden by CSS) `innerText` of:\n *  - a given {@link WebElement}, represented by Answerable<{@link @wdio/types~Element}>\n *  - a group of {@link WebElement}s, represented by Answerable<{@link @wdio/types~ElementArray}>\n *\n *  The result includes the visible text of any sub-elements, without any leading or trailing whitespace.\n *\n * @example <caption>Example widget</caption>\n *  <h1>Shopping list</h1>\n *  <ul id=\"shopping-list\">\n *    <li>Coffee<li>\n *    <li class=\"bought\">Honey<li>\n *    <li>Chocolate<li>\n *  </ul>\n *\n * @example <caption>Retrieve text of a single element</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { BrowseTheWeb, by, Target, Text } from '@serenity-js/webdriverio';\n *\n *  const header = () =>\n *      Target.the('header').located(by.tagName('h1'))\n *\n *  actorCalled('Lisa')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Ensure.that(Text.of(header()), equals('Shopping list')),\n *      )\n *\n * @example <caption>Retrieve text of a multiple elements</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { BrowseTheWeb, by, Target, Text } from '@serenity-js/webdriverio';\n *\n *  const shoppingListItems = () =>\n *      Target.the('shopping list items').located(by.css('#shopping-list li'))\n *\n *  actorCalled('Lisa')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Ensure.that(\n *              Text.ofAll(shoppingListItems()),\n *              equals([ 'Coffee', 'Honey', 'Chocolate' ])\n *          ),\n *      )\n *\n * @example <caption>Find element with matching text</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { contain, Ensure } from '@serenity-js/assertions';\n *  import { BrowseTheWeb, by, CSSClasses, Target, Text } from '@serenity-js/webdriverio';\n *\n *  const shoppingListItemCalled = (name: string) =>\n *      Target.the('shopping list items').located(by.css('#shopping-list li'))\n *          .where(Text, equals(name))\n *          .first()\n *\n *  actorCalled('Lisa')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Ensure.that(\n *              CSSClasses.of(shoppingListItemCalled('Honey)),\n *              contain('bought')\n *          ),\n *      )\n *\n * @public\n * @see {@link Target}\n */\nexport class Text {\n\n    /**\n     * @desc\n     *  Retrieves text of a single {@link WebElement},\n     *  represented by Answerable<{@link @wdio/types~Element}>.\n     *\n     * @param {Answerable<Element<'async'>>} element\n     * @returns {Question<Promise<string>> & MetaQuestion<Answerable<Element<'async'>>, Promise<string>>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    static of(element: Answerable<Element<'async'>>): Question<Promise<string>> & MetaQuestion<Answerable<Element<'async'>>, Promise<string>> {\n        return new TextOfSingleElement(element);\n    }\n\n    /**\n     * @desc\n     *  Retrieves text of a group of {@link WebElement}s,\n     *  represented by Answerable<{@link @wdio/types~ElementArray}>\n     *\n     * @param {Answerable<ElementArray>} elements\n     * @returns {Question<Promise<string[]>> & MetaQuestion<Answerable<Element<'async'>>, Promise<string[]>>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    static ofAll(elements: Answerable<ElementArray>): Question<Promise<string[]>> & MetaQuestion<Answerable<Element<'async'>>, Promise<string[]>> {\n        return new TextOfMultipleElements(elements);\n    }\n}\n\nclass TextOfSingleElement\n    extends Question<Promise<string>>\n    implements MetaQuestion<Answerable<Element<'async'>>, Promise<string>>\n{\n    constructor(private readonly element: Answerable<Element<'async'>>) {\n        super(`the text of ${ element }`);\n    }\n\n    of(parent: Answerable<Element<'async'>>): Question<Promise<string>> {\n        return new TextOfSingleElement(new TargetNestedElement(parent, this.element));\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        return actor.answer(this.element)\n            .then(element => element.getText())\n    }\n}\n\nclass TextOfMultipleElements\n    extends Question<Promise<string[]>>\n    implements MetaQuestion<Answerable<Element<'async'>>, Promise<string[]>>\n{\n    constructor(private readonly elements: Answerable<ElementArray>) {\n        super(`the text of ${ elements }`);\n    }\n\n    of(parent: Answerable<Element<'async'>>): Question<Promise<string[]>> {\n        return new TextOfMultipleElements(new TargetNestedElements(parent, this.elements));\n    }\n\n    async answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string[]> {\n        const elements = await actor.answer(this.elements);\n        return Promise.all(elements.map(answer => answer.getText()));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/Text.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 578,
    "kind": "class",
    "name": "Text",
    "memberof": "src/screenplay/questions/Text.ts",
    "static": true,
    "longname": "src/screenplay/questions/Text.ts~Text",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{Text}",
    "description": " Resolves to the visible (i.e. not hidden by CSS) `innerText` of:\n - a given {@link WebElement}, represented by Answerable<{@link @wdio/types~Element}>\n - a group of {@link WebElement}s, represented by Answerable<{@link @wdio/types~ElementArray}>\n\n The result includes the visible text of any sub-elements, without any leading or trailing whitespace.",
    "examples": [
      "<caption>Example widget</caption>\n <h1>Shopping list</h1>\n <ul id=\"shopping-list\">\n   <li>Coffee<li>\n   <li class=\"bought\">Honey<li>\n   <li>Chocolate<li>\n </ul>",
      "<caption>Retrieve text of a single element</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { BrowseTheWeb, by, Target, Text } from '@serenity-js/webdriverio';\n\n const header = () =>\n     Target.the('header').located(by.tagName('h1'))\n\n actorCalled('Lisa')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Ensure.that(Text.of(header()), equals('Shopping list')),\n     )",
      "<caption>Retrieve text of a multiple elements</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { BrowseTheWeb, by, Target, Text } from '@serenity-js/webdriverio';\n\n const shoppingListItems = () =>\n     Target.the('shopping list items').located(by.css('#shopping-list li'))\n\n actorCalled('Lisa')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Ensure.that(\n             Text.ofAll(shoppingListItems()),\n             equals([ 'Coffee', 'Honey', 'Chocolate' ])\n         ),\n     )",
      "<caption>Find element with matching text</caption>\n import { actorCalled } from '@serenity-js/core';\n import { contain, Ensure } from '@serenity-js/assertions';\n import { BrowseTheWeb, by, CSSClasses, Target, Text } from '@serenity-js/webdriverio';\n\n const shoppingListItemCalled = (name: string) =>\n     Target.the('shopping list items').located(by.css('#shopping-list li'))\n         .where(Text, equals(name))\n         .first()\n\n actorCalled('Lisa')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Ensure.that(\n             CSSClasses.of(shoppingListItemCalled('Honey)),\n             contain('bought')\n         ),\n     )"
    ],
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 82,
    "interface": false
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Text.ts~Text",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Text.ts~Text.of",
    "access": "public",
    "description": " Retrieves text of a single {@link WebElement},\n represented by Answerable<{@link @wdio/types~Element}>.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 109,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string>> & MetaQuestion<Answerable<Element<'async'>>, Promise<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string>> & MetaQuestion<Answerable<Element<'async'>>, Promise<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "ofAll",
    "memberof": "src/screenplay/questions/Text.ts~Text",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Text.ts~Text.ofAll",
    "access": "public",
    "description": " Retrieves text of a group of {@link WebElement}s,\n represented by Answerable<{@link @wdio/types~ElementArray}>",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string[]>> & MetaQuestion<Answerable<Element<'async'>>, Promise<string[]>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<ElementArray>"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string[]>> & MetaQuestion<Answerable<Element<'async'>>, Promise<string[]>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 581,
    "kind": "class",
    "name": "TextOfSingleElement",
    "memberof": "src/screenplay/questions/Text.ts",
    "static": true,
    "longname": "src/screenplay/questions/Text.ts~TextOfSingleElement",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/questions/Text.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 106,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 582,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Text.ts~TextOfSingleElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Text.ts~TextOfSingleElement#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Text.ts~TextOfSingleElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Text.ts~TextOfSingleElement#of",
    "access": "public",
    "description": " ",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Text.ts~TextOfSingleElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Text.ts~TextOfSingleElement#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 585,
    "kind": "class",
    "name": "TextOfMultipleElements",
    "memberof": "src/screenplay/questions/Text.ts",
    "static": true,
    "longname": "src/screenplay/questions/Text.ts~TextOfMultipleElements",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/questions/Text.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 124,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 586,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Text.ts~TextOfMultipleElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Text.ts~TextOfMultipleElements#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Text.ts~TextOfMultipleElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Text.ts~TextOfMultipleElements#of",
    "access": "public",
    "description": " ",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Text.ts~TextOfMultipleElements",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/questions/Text.ts~TextOfMultipleElements#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 589,
    "kind": "file",
    "name": "src/screenplay/questions/Value.ts",
    "content": "import { Answerable, AnswersQuestions, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { Element } from 'webdriverio';\n\nimport { TargetNestedElement } from './targets';\n\n/**\n * @desc\n *  Returns the `value` attribute of a given {@link WebElement},\n *  represented by Answerable<{@link @wdio/types~Element}>\n *\n * @example <caption>Example widget</caption>\n *  <input type=\"text\" id=\"username\" value=\"Alice\" />\n *\n * @example <caption>Retrieve CSS classes of a given WebElement</caption>\n *  import { actorCalled } from '@serenity-js/core';\n *  import { Ensure, equals } from '@serenity-js/assertions';\n *  import { BrowseTheWeb, by, Value, Target } from '@serenity-js/webdriverio';\n *\n *  const usernameField = () =>\n *      Target.the('username field').located(by.id('username'))\n *\n *  actorCalled('Lisa')\n *      .whoCan(BrowseTheWeb.using(browser))\n *      .attemptsTo(\n *          Ensure.that(Value.of(usernameField), equals('Alice')),\n *      )\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n */\nexport class Value\n    extends Question<Promise<string>>\n    implements MetaQuestion<Answerable<Element<'async'>>, Promise<string>>\n{\n    /**\n     * @param {Answerable<Element<'async'>>} element\n     * @returns {Value}\n     */\n    static of(element: Answerable<Element<'async'>>): Question<Promise<string>> & MetaQuestion<Answerable<Element<'async'>>, Promise<string>> {\n        return new Value(element);\n    }\n\n    /**\n     * @param {Answerable<Element<'async'>>} element\n     */\n    constructor(private readonly element: Answerable<Element<'async'>>) {\n        super(formatted`the value of ${ element }`);\n    }\n\n    /**\n     * @desc\n     *  Resolves to the value of a given [`input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\n     *  {@link WebElement}, located in the context of a `parent` element.\n     *\n     * @param {Answerable<Element<'async'>>} parent\n     * @returns {Question<Promise<string>>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    of(parent: Answerable<Element<'async'>>): Question<Promise<string>> {\n        return new Value(new TargetNestedElement(parent, this.element));\n    }\n\n    /**\n     * @desc\n     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<void>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}\n     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}\n     */\n    async answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<string> {\n        const element = await actor.answer(this.element);\n\n        return element.getValue();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/Value.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 590,
    "kind": "class",
    "name": "Value",
    "memberof": "src/screenplay/questions/Value.ts",
    "static": true,
    "longname": "src/screenplay/questions/Value.ts~Value",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{Value}",
    "description": " Returns the `value` attribute of a given {@link WebElement},\n represented by Answerable<{@link @wdio/types~Element}>",
    "examples": [
      "<caption>Example widget</caption>\n <input type=\"text\" id=\"username\" value=\"Alice\" />",
      "<caption>Retrieve CSS classes of a given WebElement</caption>\n import { actorCalled } from '@serenity-js/core';\n import { Ensure, equals } from '@serenity-js/assertions';\n import { BrowseTheWeb, by, Value, Target } from '@serenity-js/webdriverio';\n\n const usernameField = () =>\n     Target.the('username field').located(by.id('username'))\n\n actorCalled('Lisa')\n     .whoCan(BrowseTheWeb.using(browser))\n     .attemptsTo(\n         Ensure.that(Value.of(usernameField), equals('Alice')),\n     )"
    ],
    "lineNumber": 39,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Value.ts~Value.of",
    "access": "public",
    "description": "",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Value}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Value"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 592,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Value.ts~Value#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/Value.ts~Value#of",
    "access": "public",
    "description": " Resolves to the value of a given [`input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)\n {@link WebElement}, located in the context of a `parent` element.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Question<Promise<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable<Element<'async'>>"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/Value.ts~Value",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/questions/Value.ts~Value#answeredBy",
    "access": "public",
    "description": " Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}\n answer this {@link @serenity-js/core/lib/screenplay~Question}.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/actor~Actor}",
      "{@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}",
      "{@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}"
    ],
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 595,
    "kind": "file",
    "name": "src/screenplay/questions/Website.ts",
    "content": "import { Question } from '@serenity-js/core';\n\nimport { BrowseTheWeb } from '../abilities';\n\nexport class Website {\n\n    /**\n     * @desc\n     *  Retrieves the document title of the current top-level browsing context, equivalent to calling `document.title`.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<string>>}\n     *\n     * @see https://webdriver.io/docs/api/webdriver/#gettitle\n     */\n    static title(): Question<Promise<string>> {\n        return Question.about(`the title of the current page`, actor =>\n            BrowseTheWeb.as(actor).browser.getTitle(),\n        );\n    }\n\n    /**\n     * @desc\n     *  Retrieves the URL of the current top-level browsing context.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<string>>}\n     *\n     * @see https://webdriver.io/docs/api/webdriver/#geturl\n     */\n    static url(): Question<Promise<string>> {\n        return Question.about(`the url of the current page`, actor =>\n            BrowseTheWeb.as(actor).browser.getUrl(),\n        );\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/Website.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 596,
    "kind": "class",
    "name": "Website",
    "memberof": "src/screenplay/questions/Website.ts",
    "static": true,
    "longname": "src/screenplay/questions/Website.ts~Website",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{Website}",
    "description": " ",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "title",
    "memberof": "src/screenplay/questions/Website.ts~Website",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Website.ts~Website.title",
    "access": "public",
    "description": " Retrieves the document title of the current top-level browsing context, equivalent to calling `document.title`.",
    "see": [
      "https://webdriver.io/docs/api/webdriver/#gettitle"
    ],
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<Promise<string>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "url",
    "memberof": "src/screenplay/questions/Website.ts~Website",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/Website.ts~Website.url",
    "access": "public",
    "description": " Retrieves the URL of the current top-level browsing context.",
    "see": [
      "https://webdriver.io/docs/api/webdriver/#geturl"
    ],
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<Promise<string>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<string>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 599,
    "kind": "file",
    "name": "src/screenplay/questions/index.ts",
    "content": "export * from './Attribute';\nexport * from './CSSClasses';\nexport * from './LastScriptExecution';\nexport * from './locators';\nexport * from './NestedTargetBuilder';\nexport * from './TargetBuilder';\nexport * from './targets';\nexport * from './Text';\nexport * from './Value';\nexport * from './Website';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 600,
    "kind": "file",
    "name": "src/screenplay/questions/lists.ts",
    "content": "import { Answerable, AnswersQuestions, Expectation, ExpectationMet, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { ListAdapter } from '@serenity-js/core/lib/screenplay/questions/lists';\nimport type { Element, ElementArray } from 'webdriverio';\n\n/**\n * @desc\n *  Adapts {@link ElementArray} so that it can be used with {@link @serenity-js/core/lib/screenplay/questions~List}.\n *\n *  You most likely won't need to use this class directly. Instead, check out {@link Target} and {@link Target.all}.\n *\n * @see {@link Target}\n *\n * @implements {@serenity-js/core/lib/screenplay/questions/lists~ListAdapter}\n */\nexport class ElementArrayListAdapter implements ListAdapter<Promise<Element<'async'>>, Promise<ElementArray>> {\n\n    constructor(private readonly collection: Answerable<ElementArray>) {\n    }\n\n    /**\n     * @desc\n     *  Returns the number of {@link Element}s that the underlying {@link ElementArray} contains,\n     *  left after applying any filters.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Promise<number>}\n     */\n    async count(actor: AnswersQuestions & UsesAbilities): Promise<number> {\n        const elements = await this.elements(actor);\n        return elements.length;\n    }\n\n    /**\n     * @desc\n     *  Returns the first of {@link Element}s that the underlying {@link ElementArray} contains,\n     *  left after applying any filters\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Element<'async'>}\n     */\n    async first(actor: AnswersQuestions & UsesAbilities): Promise<Element<'async'>> {\n        const elements = await this.elements(actor);\n        return elements[0];\n    }\n\n    /**\n     * @desc\n     *  Returns the last of {@link Element}s that the underlying {@link ElementArray} contains,\n     *  left after applying any filters\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Element<'async'>}\n     */\n    async last(actor: AnswersQuestions & UsesAbilities): Promise<Element<'async'>> {\n        const elements = await this.elements(actor);\n        return elements[elements.length - 1];\n    }\n\n    /**\n     * @desc\n     *  Returns the nth of {@link Element}s that the underlying {@link ElementArray} contains,\n     *  left after applying any filters\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     *\n     * @param {number} index\n     *  Zero-based index of the item to return\n     *\n     * @returns {Element<'async'>}\n     */\n    async get(actor: AnswersQuestions & UsesAbilities, index: number): Promise<Element<'async'>> {\n        const elements = await this.elements(actor);\n        return elements[index];\n    }\n\n    /**\n     * @desc\n     *  Returns the underlying {@link ElementArray},\n     *  with any filters applied.\n     *\n     * @param {AnswersQuestions & UsesAbilities} actor\n     * @returns {Element<'async'>}\n     */\n    items(actor: AnswersQuestions & UsesAbilities): Promise<ElementArray> {\n        return this.elements(actor);\n    }\n\n    /**\n     * @desc\n     *  Filters the underlying {@link ElementArray} so that the result contains only those {@link Element<'async'>}s that meet the {@link Expectation}\n     *\n     * @param {@serenity-js/core/lib/screenplay/questions~MetaQuestion<Answerable<Element<'async'>>, Promise<Answer_Type> | Answer_Type>} question\n     * @param {@serenity-js/core/lib/screenplay/questions~Expectation<any, Answer_Type>} expectation\n     *\n     * @returns {@serenity-js/core/lib/screenplay/questions/lists~ListAdapter<Element<'async'>, ElementArrayFinder>}\n     *\n     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}\n     */\n    withFilter<Answer_Type>(\n        question: MetaQuestion<Answerable<Element<'async'>>, Promise<Answer_Type> | Answer_Type>,\n        expectation: Expectation<any, Answer_Type>\n    ): ListAdapter<Promise<Element<'async'>>, Promise<ElementArray>> {\n        return new ElementArrayListAdapter(\n            new ElementArrayListFilter(this.collection, question, expectation)\n        );\n    }\n\n    /**\n     * @desc\n     *  Returns a human-readable description of the underlying {@link ElementArray}.\n     *\n     * @returns {string}\n     */\n    toString(): string {\n        return formatted `${ this.collection }`;\n    }\n\n    private elements(actor: AnswersQuestions & UsesAbilities): Promise<ElementArray> {\n        return actor.answer(this.collection);\n    }\n}\n\n/**\n * @private\n */\nclass ElementArrayListFilter<Answer_Type>\n    extends Question<Promise<ElementArray>>\n{\n    constructor(\n        private readonly collection: Answerable<ElementArray>,\n        private readonly question: MetaQuestion<Answerable<Element<'async'>>, Promise<Answer_Type> | Answer_Type>,\n        private readonly expectation: Expectation<any, Answer_Type>\n    ) {\n        super([\n            formatted `${ collection }`,\n            collection instanceof ElementArrayListFilter ? 'and' : 'where',\n            formatted `${ question } does ${ expectation }`\n        ].join(' '));\n    }\n\n    async answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<ElementArray> {\n\n        const collection = await actor.answer(this.collection);\n        const outcomes   = await Promise.all(\n            collection.map((element: Element<'async'>) =>\n                actor.answer(this.question.of(element))\n                    .then((answer: Answer_Type) => this.expectation.answeredBy(actor)(answer))\n            )\n        );\n\n        const matching = collection.filter((element: Element<'async'>, index: number) => outcomes[index] instanceof ExpectationMet) as ElementArray;\n\n        matching.selector   = collection.selector;\n        matching.parent     = collection.parent;\n        matching.foundWith  = collection.foundWith;\n        matching.props      = collection.props;\n\n        return matching;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/lists.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 601,
    "kind": "class",
    "name": "ElementArrayListAdapter",
    "memberof": "src/screenplay/questions/lists.ts",
    "static": true,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListAdapter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{ElementArrayListAdapter}",
    "description": " Adapts {@link ElementArray} so that it can be used with {@link @serenity-js/core/lib/screenplay/questions~List}.\n\n You most likely won't need to use this class directly. Instead, check out {@link Target} and {@link Target.all}.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 23,
    "interface": false,
    "implements": [
      "ListAdapter"
    ]
  },
  {
    "__docId__": 602,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListAdapter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "count",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListAdapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListAdapter#count",
    "access": "public",
    "description": " Returns the number of {@link Element}s that the underlying {@link ElementArray} contains,\n left after applying any filters.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "first",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListAdapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListAdapter#first",
    "access": "public",
    "description": " Returns the first of {@link Element}s that the underlying {@link ElementArray} contains,\n left after applying any filters",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element<'async'>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element<'async'>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "last",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListAdapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListAdapter#last",
    "access": "public",
    "description": " Returns the last of {@link Element}s that the underlying {@link ElementArray} contains,\n left after applying any filters",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element<'async'>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element<'async'>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListAdapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListAdapter#get",
    "access": "public",
    "description": " Returns the nth of {@link Element}s that the underlying {@link ElementArray} contains,\n left after applying any filters",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element<'async'>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "Zero-based index of the item to return"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element<'async'>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "items",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListAdapter#items",
    "access": "public",
    "description": " Returns the underlying {@link ElementArray},\n with any filters applied.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element<'async'>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element<'async'>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "withFilter",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListAdapter#withFilter",
    "access": "public",
    "description": " Filters the underlying {@link ElementArray} so that the result contains only those {@link Element<'async'>}s that meet the {@link Expectation}",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}"
    ],
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay/questions/lists~ListAdapter<Element<'async'>, ElementArrayFinder>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MetaQuestion<Answerable<Element<'async'>>, Promise<Answer_Type> | Answer_Type>"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation<any, Answer_Type>"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ListAdapter<Element<'async'>, ElementArrayFinder>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "toString",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListAdapter#toString",
    "access": "public",
    "description": " Returns a human-readable description of the underlying {@link ElementArray}.",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "elements",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListAdapter#elements",
    "access": "private",
    "description": " ",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 611,
    "kind": "class",
    "name": "ElementArrayListFilter",
    "memberof": "src/screenplay/questions/lists.ts",
    "static": true,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListFilter",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/webdriverio/src/screenplay/questions/lists.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 247,
    "interface": false,
    "extends": [
      "@serenity-js/core~Question"
    ],
    "ignore": true
  },
  {
    "__docId__": 612,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListFilter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListFilter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true
  },
  {
    "__docId__": 613,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/lists.ts~ElementArrayListFilter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/questions/lists.ts~ElementArrayListFilter#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 614,
    "kind": "file",
    "name": "src/screenplay/questions/locators.ts",
    "content": "import { Question } from '@serenity-js/core';\nimport type { Browser, Element, ElementArray, Selector } from 'webdriverio';\n\nimport { BrowseTheWeb } from '../abilities';\n\n/**\n * @desc\n *  Represents a way to retrieve one and multiple Web elements using a given strategy.\n *\n * @see {@link by}\n * @see {@link Locators}\n */\nexport class Locator {\n    constructor(\n        private readonly description: string,\n        private readonly locateOne: (browserInstance: Browser<'async'>) => Promise<Element<'async'>>,\n        private readonly locateAll: (browserInstance: Browser<'async'>) => Promise<ElementArray>,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Returns a {@link @serenity-js/core/lib/screenplay~Question} that resolves\n     *  to the first Web element found using a given strategy.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<Element<'async'>>>}\n     */\n    firstMatching(): Question<Promise<Element<'async'>>> {\n        return Question.about(this.description, actor =>\n            this.locateOne(BrowseTheWeb.as(actor).browser)\n        )\n    }\n\n    /**\n     * @desc\n     *  Returns a {@link @serenity-js/core/lib/screenplay~Question} that resolves\n     *  to all the Web elements found using a given strategy.\n     *\n     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<ElementArray>>}\n     */\n    allMatching(): Question<Promise<ElementArray>> {\n        return Question.about(this.description, actor =>\n            this.locateAll(BrowseTheWeb.as(actor).browser)\n        )\n    }\n}\n\n/**\n * @desc\n *  {@link Locator} factory. You probably want to use {@link by} instead in your tests.\n */\nexport class Locators {\n    /**\n     * @desc\n     *  Locates elements by their `id` attribute.\n     *\n     * @example <caption>Example widget</caption>\n     *  <input id=\"username\" />\n     *\n     * @example\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const usernameField = Target.the('username field').located(by.id('username'));\n     *\n     * @param {string} id\n     * @returns {Locator}\n     *\n     * @see {@link Target}\n     * @see https://webdriver.io/docs/selectors/#id\n     */\n    id(id: string): Locator {\n        return new Locator(\n            `by id #${ id }`,\n            browser => browser.$(`#${id}`) as unknown as Promise<Element<'async'>>,\n            browser => browser.$$(`#${id}`),\n        )\n    }\n\n    /**\n     * @desc\n     *  Locates elements using a CSS selector\n     *\n     * @example <caption>Example widget</caption>\n     *  <div id=\"article\">\n     *      <h1>Title</h1>\n     *      <h2>Section 1</h2>\n     *      <h2>Section 2</h2>\n     *  </div>\n     *\n     * @example <caption>Locating a single element</caption>\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const title = Target.the('article title').located(by.css('#article h1'));\n     *\n     * @example <caption>Locating multiple elements</caption>\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const titles = Target.all('section titles').located(by.css('#article h2'));\n     *\n     * @param {Selector} selector\n     * @returns {Locator}\n     *\n     * @see {@link Target}\n     * @see https://webdriver.io/docs/selectors/#css-query-selector\n     */\n    css(selector: Selector): Locator {\n        return new Locator(\n            `by css ${ selector }`,\n            browser => browser.$(selector) as unknown as Promise<Element<'async'>>,\n            browser => browser.$$(selector),\n        )\n    }\n\n    /**\n     * @desc\n     *  Locates elements by HTML tag name\n     *\n     * @example <caption>Example widget</caption>\n     *  <ul>\n     *      <li>Item 1</li>\n     *      <li>Item 2</li>\n     *  </ul>\n     *  <span>Total price: £5</span>\n     *\n     * @example <caption>Locating a single element</caption>\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const totalPrice = Target.the('total price').located(by.tagName('span'));\n     *\n     * @example <caption>Locating multiple elements</caption>\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const items = Target.all('shopping basket items').located(by.tagName('li'));\n     *\n     * @param {string} tagName\n     * @returns {Locator}\n     *\n     * @see {@link Target}\n     * @see https://webdriver.io/docs/selectors/#tag-name\n     */\n    tagName(tagName: string): Locator {\n        return new Locator(\n            `by tag name <${ tagName } />`,\n            browser => browser.$(`<${ tagName } />`) as unknown as Promise<Element<'async'>>,\n            browser => browser.$$(`<${ tagName } />`),\n        )\n    }\n\n    /**\n     * @desc\n     *  Locates an HTML anchor element with a specific text in it.\n     *\n     * @example <caption>Example widget</caption>\n     *  <a href=\"https://serenity-js.org\">Serenity/JS</a>\n     *\n     * @example <caption>Locating a single element</caption>\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const serenityWebsite = Target.the('Serenity/JS website link').located(by.linkText('Serenity/JS'));\n     *\n     * @example <caption>Locating multiple elements</caption>\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const items = Target.all('Serenity/JS website links').located(by.linkText('Serenity/JS'));\n     *\n     * @param {string} linkText\n     * @returns {Locator}\n     *\n     * @see {@link Target}\n     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n     * @see https://webdriver.io/docs/selectors/#link-text\n     */\n    linkText(linkText: string): Locator {\n        return new Locator(\n            `by link text ${ linkText }`,\n            browser => browser.$(`=${ linkText }`) as unknown as Promise<Element<'async'>>,\n            browser => browser.$$(`=${ linkText }`),\n        )\n    }\n\n    /**\n     * @desc\n     *  Locates an HTML anchor element with which visible text partially matches `partialLinkText`\n     *\n     * @example <caption>Example widget</caption>\n     *  <a href=\"https://serenity-js.org\">Serenity/JS</a>\n     *  <a href=\"https://serenity-bdd.info/#/\">Serenity BDD</a>\n     *\n     * @example <caption>Locating a single element</caption>\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const serenityWebsite = Target.the('Serenity/JS website link').located(by.partialLinkText('JS'));\n     *\n     * @example <caption>Locating multiple elements</caption>\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const serenityWebsites = Target.all('Serenity frameworks').located(by.partialLinkText('Serenity'));\n     *\n     * @param {string} partialLinkText\n     * @returns {Locator}\n     *\n     * @see {@link Target}\n     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n     * @see https://webdriver.io/docs/selectors/#link-text\n     */\n    partialLinkText(partialLinkText: string): Locator {\n        return new Locator(\n            `by partial link text ${ partialLinkText }`,\n            browser => browser.$(`*=${ partialLinkText }`) as unknown as Promise<Element<'async'>>,\n            browser => browser.$$(`*=${ partialLinkText }`),\n        )\n    }\n\n    /**\n     * @desc\n     *  Locates elements using an [XPath](https://developer.mozilla.org/en-US/docs/Web/XPath) selector.\n     *\n     *  Please note that whenever possible you should use {@link Locators#id} and {@link Locators#css} locators\n     *  instead of XPath to make your tests more robust.\n     *\n     * @example <caption>Example widget</caption>\n     *  <div id=\"article\">\n     *      <h1>Title</h1>\n     *      <h2>Section 1</h2>\n     *      <h2>Section 2</h2>\n     *  </div>\n     *\n     * @example <caption>Locating a single element</caption>\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const title = Target.the('article title').located(by.xpath('//*[@id=\"article\"]/h1'));\n     *\n     * @example <caption>Locating multiple elements</caption>\n     *  import { by, Target } from '@serenity-js/webdriverio';\n     *\n     *  const title = Target.the('article title').located(by.xpath('//*[@id=\"article\"]/h2'));\n     *\n     * @param {string} xpath\n     * @returns {Locator}\n     *\n     * @see {@link Target}\n     * @see https://developer.mozilla.org/en-US/docs/Web/XPath\n     * @see https://webdriver.io/docs/selectors/#xpath\n     */\n    xpath(xpath: string): Locator {\n        return new Locator(\n            `by xpath ${ xpath }`,\n            browser => browser.$(xpath) as unknown as Promise<Element<'async'>>,\n            browser => browser.$$(xpath),\n        )\n    }\n}\n\nexport const by = new Locators();\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/locators.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 615,
    "kind": "class",
    "name": "Locator",
    "memberof": "src/screenplay/questions/locators.ts",
    "static": true,
    "longname": "src/screenplay/questions/locators.ts~Locator",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{Locator}",
    "description": " Represents a way to retrieve one and multiple Web elements using a given strategy.",
    "see": [
      "{@link by}",
      "{@link Locators}"
    ],
    "lineNumber": 20,
    "interface": false
  },
  {
    "__docId__": 616,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/locators.ts~Locator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/locators.ts~Locator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 617,
    "kind": "method",
    "name": "firstMatching",
    "memberof": "src/screenplay/questions/locators.ts~Locator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/locators.ts~Locator#firstMatching",
    "access": "public",
    "description": " Returns a {@link @serenity-js/core/lib/screenplay~Question} that resolves\n to the first Web element found using a given strategy.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<Promise<Element<'async'>>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<Element<'async'>>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "allMatching",
    "memberof": "src/screenplay/questions/locators.ts~Locator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/locators.ts~Locator#allMatching",
    "access": "public",
    "description": " Returns a {@link @serenity-js/core/lib/screenplay~Question} that resolves\n to all the Web elements found using a given strategy.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@serenity-js/core/lib/screenplay~Question<Promise<ElementArray>>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question<Promise<ElementArray>>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 619,
    "kind": "class",
    "name": "Locators",
    "memberof": "src/screenplay/questions/locators.ts",
    "static": true,
    "longname": "src/screenplay/questions/locators.ts~Locators",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{Locators}",
    "description": " {@link Locator} factory. You probably want to use {@link by} instead in your tests.",
    "lineNumber": 88,
    "interface": false
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "id",
    "memberof": "src/screenplay/questions/locators.ts~Locators",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/locators.ts~Locators#id",
    "access": "public",
    "description": " Locates elements by their `id` attribute.",
    "examples": [
      "<caption>Example widget</caption>\n <input id=\"username\" />",
      " import { by, Target } from '@serenity-js/webdriverio';\n\n const usernameField = Target.the('username field').located(by.id('username'));"
    ],
    "see": [
      "{@link Target}",
      "https://webdriver.io/docs/selectors/#id"
    ],
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Locator}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Locator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "css",
    "memberof": "src/screenplay/questions/locators.ts~Locators",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/locators.ts~Locators#css",
    "access": "public",
    "description": " Locates elements using a CSS selector",
    "examples": [
      "<caption>Example widget</caption>\n <div id=\"article\">\n     <h1>Title</h1>\n     <h2>Section 1</h2>\n     <h2>Section 2</h2>\n </div>",
      "<caption>Locating a single element</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n const title = Target.the('article title').located(by.css('#article h1'));",
      "<caption>Locating multiple elements</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n const titles = Target.all('section titles').located(by.css('#article h2'));"
    ],
    "see": [
      "{@link Target}",
      "https://webdriver.io/docs/selectors/#css-query-selector"
    ],
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Locator}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Selector"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Locator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "tagName",
    "memberof": "src/screenplay/questions/locators.ts~Locators",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/locators.ts~Locators#tagName",
    "access": "public",
    "description": " Locates elements by HTML tag name",
    "examples": [
      "<caption>Example widget</caption>\n <ul>\n     <li>Item 1</li>\n     <li>Item 2</li>\n </ul>\n <span>Total price: £5</span>",
      "<caption>Locating a single element</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n const totalPrice = Target.the('total price').located(by.tagName('span'));",
      "<caption>Locating multiple elements</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n const items = Target.all('shopping basket items').located(by.tagName('li'));"
    ],
    "see": [
      "{@link Target}",
      "https://webdriver.io/docs/selectors/#tag-name"
    ],
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Locator}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tagName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Locator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "linkText",
    "memberof": "src/screenplay/questions/locators.ts~Locators",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/locators.ts~Locators#linkText",
    "access": "public",
    "description": " Locates an HTML anchor element with a specific text in it.",
    "examples": [
      "<caption>Example widget</caption>\n <a href=\"https://serenity-js.org\">Serenity/JS</a>",
      "<caption>Locating a single element</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n const serenityWebsite = Target.the('Serenity/JS website link').located(by.linkText('Serenity/JS'));",
      "<caption>Locating multiple elements</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n const items = Target.all('Serenity/JS website links').located(by.linkText('Serenity/JS'));"
    ],
    "see": [
      "{@link Target}",
      "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a",
      "https://webdriver.io/docs/selectors/#link-text"
    ],
    "lineNumber": 261,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Locator}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "linkText",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Locator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "partialLinkText",
    "memberof": "src/screenplay/questions/locators.ts~Locators",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/locators.ts~Locators#partialLinkText",
    "access": "public",
    "description": " Locates an HTML anchor element with which visible text partially matches `partialLinkText`",
    "examples": [
      "<caption>Example widget</caption>\n <a href=\"https://serenity-js.org\">Serenity/JS</a>\n <a href=\"https://serenity-bdd.info/#/\">Serenity BDD</a>",
      "<caption>Locating a single element</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n const serenityWebsite = Target.the('Serenity/JS website link').located(by.partialLinkText('JS'));",
      "<caption>Locating multiple elements</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n const serenityWebsites = Target.all('Serenity frameworks').located(by.partialLinkText('Serenity'));"
    ],
    "see": [
      "{@link Target}",
      "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a",
      "https://webdriver.io/docs/selectors/#link-text"
    ],
    "lineNumber": 307,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Locator}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "partialLinkText",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Locator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "xpath",
    "memberof": "src/screenplay/questions/locators.ts~Locators",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/locators.ts~Locators#xpath",
    "access": "public",
    "description": " Locates elements using an [XPath](https://developer.mozilla.org/en-US/docs/Web/XPath) selector.\n\n Please note that whenever possible you should use {@link Locators#id} and {@link Locators#css} locators\n instead of XPath to make your tests more robust.",
    "examples": [
      "<caption>Example widget</caption>\n <div id=\"article\">\n     <h1>Title</h1>\n     <h2>Section 1</h2>\n     <h2>Section 2</h2>\n </div>",
      "<caption>Locating a single element</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n const title = Target.the('article title').located(by.xpath('//*[@id=\"article\"]/h1'));",
      "<caption>Locating multiple elements</caption>\n import { by, Target } from '@serenity-js/webdriverio';\n\n const title = Target.the('article title').located(by.xpath('//*[@id=\"article\"]/h2'));"
    ],
    "see": [
      "{@link Target}",
      "https://developer.mozilla.org/en-US/docs/Web/XPath",
      "https://webdriver.io/docs/selectors/#xpath"
    ],
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Locator}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "xpath",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Locator"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 626,
    "kind": "variable",
    "name": "by",
    "memberof": "src/screenplay/questions/locators.ts",
    "static": true,
    "longname": "src/screenplay/questions/locators.ts~by",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{by}",
    "description": null,
    "lineNumber": 368,
    "undocument": true,
    "type": {
      "types": [
        "src/screenplay/questions/locators.ts~Locators"
      ]
    }
  },
  {
    "__docId__": 627,
    "kind": "file",
    "name": "src/screenplay/questions/targets.ts",
    "content": "/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { Answerable, AnswersQuestions, Expectation, List, LogicError, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport type { Element, ElementArray } from 'webdriverio';\n\nimport { ElementArrayListAdapter } from './lists';\nimport { Locator } from './locators';\nimport { NestedTargetBuilder } from './NestedTargetBuilder';\nimport { TargetBuilder } from './TargetBuilder';\n\n/**\n * @desc\n *  A type alias representing a {@link @serenity-js/core/lib/screenplay/questions~List} of WebdriverIO Web elements.\n *\n * @public\n *\n * @see {@link @serenity-js/core/lib/screenplay/questions~List}\n *\n * @typedef {List<ElementArrayListAdapter, Promise<Element<'async'>>, Promise<ElementArray>>} TargetList\n */\nexport type TargetList = List<ElementArrayListAdapter, Promise<Element<'async'>>, Promise<ElementArray>>;\n\n/**\n * @desc\n *  Provides a convenient way to retrieve a single web element or multiple web elements,\n *  so that they can be used with Serenity/JS {@link @serenity-js/core/lib/screenplay~Interaction}s.\n *\n *  Check out the examples below, as well as the unit tests demonstrating the usage.\n *\n *  @example <caption>Imaginary website under test</caption>\n *   <body>\n *       <ul id=\"basket\">\n *           <li><a href=\"#\">Apple</a></li>\n *           <li><a href=\"#\">Banana</a></li>\n *           <li><a href=\"#\">Coconut</a></li>\n *           <li><a href=\"#\" class=\"has-discount\">Date</a></li>\n *       </ul>\n *       <div id=\"summary\">\n *           <strong class=\"out-of-stock\">Coconut</strong> is not available\n *       </div>\n *       <button type=\"submit\">Proceed to Checkout</button>\n *   </body>\n *\n *  @example <caption>Locating a single element</caption>\n *   import { by, Target, TargetElement } from '@serenity-js/webdriverio';\n *\n *   const proceedToCheckoutButton: TargetElement =\n *       Target.the('Proceed to Checkout button').located(by.css(`button[type='submit']`));\n *\n *  @example <caption>Locating multiple elements</caption>\n *   import { by, Target, TargetElements } from '@serenity-js/webdriverio';\n *\n *   const basketItems: TargetElements =\n *       Target.all('items in the basket').located(by.css('ul#basket li'));\n *\n *  @example <caption>Locating element relative to another element</caption>\n *   import { by, Target, TargetElement } from '@serenity-js/webdriverio';\n *\n *   const summary: TargetElement =\n *       Target.the('summary').located(by.id('message'));\n *\n *   const outOfStockItem: TargetElement =\n *       Target.the('out of stock item').of(summary).located(by.css('.out-of-stock'))\n *\n *  @example <caption>Filtering elements matched by a locator</caption>\n *   import { by, Target, Text } from '@serenity-js/webdriverio';\n *   import { endsWith } from '@serenity-js/assertions';\n *\n *   const basketItems =\n *       Target.all('items in the basket').located(by.css('ul#basket li'))\n *          .where(Text, endsWith('e'));    // Apple, Date\n *\n *  @example <caption>Counting items matched by a locator</caption>\n *   import { endsWith } from '@serenity-js/assertions';\n *   import { Question } from '@serenity-js/core';\n *   import { by, Target, Text } from '@serenity-js/webdriverio';\n *\n *   const basketItemsCount: Question<Promise<number>> =\n *       Target.all('items in the basket').located(by.css('ul#basket li'))\n *          .count()    // 4\n *\n *  @example <caption>Getting first item matched by a locator</caption>\n *   import { Question } from '@serenity-js/core';\n *   import { by, Target } from '@serenity-js/webdriverio';\n *   import { Element } from 'webdriverio';\n *\n *   const apple: Question<Promise<Element<'async'>>>  =\n *       Target.all('items in the basket').located(by.css('ul#basket li'))\n *          .first()\n *\n *  @example <caption>Getting last item matched by a locator</caption>\n *   import { Question } from '@serenity-js/core';\n *   import { by, Target } from '@serenity-js/webdriverio';\n *   import { endsWith } from '@serenity-js/assertions';\n *   import { Element } from 'webdriverio';\n *\n *   const date: Question<Promise<Element<'async'>>>  =\n *       Target.all('items in the basket').located(by.css('ul#basket li'))\n *          .last()\n *\n *  @example <caption>Getting nth item matched by a locator</caption>\n *   import { Question } from '@serenity-js/core';\n *   import { by, Target } from '@serenity-js/webdriverio';\n *   import { Element } from 'webdriverio';\n *\n *   const banana: Question<Promise<Element<'async'>>>  =\n *       Target.all('items in the basket').located(by.css('ul#basket li'))\n *          .get(1)\n *\n *  @example <caption>Using multiple filters and nested targets</caption>\n *   import { Question } from '@serenity-js/core';\n *   import { contain, endsWith } from '@serenity-js/assertions';\n *   import { by, CSSClasses, Target, Text } from '@serenity-js/webdriverio';\n *   import { Element } from 'webdriverio';\n *\n *   class Basket {\n *       static component = Target.the('basket').located(by.id('basket'));\n *\n *       static items     = Target.all('items').located(by.css('li'))\n *          .of(Basket.component);\n *\n *       static link      = Target.the('link').located(by.css('a'));\n *   }\n *\n *   const date: Question<Promise<Element<'async'>>>  =\n *       Basket.items\n *          .where(Text, endsWith('e'))\n *          .where(CSSClasses.of(Basket.link), contain('has-discount'))\n *          .first()\n *\n *  @example <caption>Clicking on an element</caption>\n *   import { actorCalled } from '@serenity-js/core';\n *   import { BrowseTheWeb, Click } from '@serenity-js/webdriverio';\n *\n *   actorCalled('Jane')\n *       .whoCan(BrowseTheWeb.using(browser))\n *       .attemptsTo(\n *           Click.on(proceedToCheckoutButton),\n *       );\n *\n *  @example <caption>Retrieving text of multiple elements and performing an assertion</caption>\n *   import { Ensure, contain } from '@serenity-js/assertions';\n *   import { actorCalled } from '@serenity-js/core';\n *   import { BrowseTheWeb, Text } from '@serenity-js/webdriverio';\n *\n *   const basketItemNames = Text.ofAll(basketItems);\n *\n *   actorCalled('Jane')\n *       .whoCan(BrowseTheWeb.using(browser))\n *       .attemptsTo(\n *           Ensure.that(basketItemNames, contain('Apple'))\n *       );\n *\n *  @example <caption>Waiting on an element</caption>\n *   import { actorCalled } from '@serenity-js/core';\n *   import { BrowseTheWeb, Wait, isClickable } from '@serenity-js/webdriverio';\n *\n *   actorCalled('Jane')\n *       .whoCan(BrowseTheWeb.using(browser))\n *       .attemptsTo(\n *           Wait.until(proceedToCheckoutButton, isClickable()),\n *       );\n */\nexport class Target {\n\n    /**\n     * @desc\n     *  Locates a single Web element\n     *\n     * @param {string} description\n     *  A human-readable name of the element, which will be used in the report\n     *\n     * @returns {TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement>}\n     */\n    static the(description: string): TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement> {\n        return {\n            located(locator: Locator): TargetElement {\n                return new TargetElement(`the ${ description }`, locator);\n            },\n\n            of(parent: Answerable<Element<'async'>>) {\n                return {\n                    located(locator: Locator): TargetNestedElement {\n                        return new TargetNestedElement(parent, new TargetElement(description, locator));\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @desc\n     *  Locates a group of Web elements\n     *\n     * @param {string} description\n     *  A human-readable name of the group of elements, which will be used in the report\n     *\n     * @returns {TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements>}\n     */\n    static all(description: string): TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements> {\n        return {\n            located(locator: Locator): TargetElements {\n                return new TargetElements(description, locator);\n            },\n\n            of(parent: Answerable<Element<'async'>>) {\n                return {\n                    located(locator: Locator): TargetNestedElements {\n                        return new TargetNestedElements(parent, new TargetElements(description, locator));\n                    }\n                }\n            }\n        }\n    }\n}\n\n/**\n * @desc\n *  You probably don't want to use this class directly. See {@link Target} instead.\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n *\n * @see {@link Target}\n */\nexport class TargetElements\n    extends Question<Promise<ElementArray>>\n    implements MetaQuestion<Answerable<Element<'async'>>, Promise<ElementArray>>\n{\n    private readonly list: List<ElementArrayListAdapter, Promise<Element<'async'>>, Promise<ElementArray>>;\n\n    constructor(\n        description: string,\n        private readonly locator: Locator,\n    ) {\n        super(description);\n        this.list = new List(new ElementArrayListAdapter(this));\n    }\n\n    of(parent: Answerable<Element<'async'>>): TargetNestedElements {\n        return new TargetNestedElements(parent, this);\n    }\n\n    count(): Question<Promise<number>> {\n        return this.list.count();\n    }\n\n    first(): Question<Promise<Element<'async'>>> {\n        return this.list.first()\n    }\n\n    last(): Question<Promise<Element<'async'>>> {\n        return this.list.last()\n    }\n\n    get(index: number): Question<Promise<Element<'async'>>> {\n        return this.list.get(index);\n    }\n\n    where<Answer_Type>(\n        question: MetaQuestion<Answerable<Element<'async'>>, Promise<Answer_Type> | Answer_Type>,\n        expectation: Expectation<any, Answer_Type>,\n    ): TargetList {\n        return this.list.where(question, expectation);\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<ElementArray> {\n        return this.locator.allMatching()\n            .describedAs(this.subject)\n            .answeredBy(actor);\n    }\n}\n\n/**\n * @desc\n *  You probably don't want to use this class directly. See {@link Target} instead.\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n *\n * @see {@link Target}\n */\nexport class TargetNestedElements\n    extends Question<Promise<ElementArray>>\n    implements MetaQuestion<Answerable<Element<'async'>>, Promise<ElementArray>>\n{\n    private readonly list: List<ElementArrayListAdapter, Promise<Element<'async'>>, Promise<ElementArray>>;\n\n    constructor(\n        private readonly parent: Answerable<Element<'async'>>,\n        private readonly children: Answerable<ElementArray>,\n    ) {\n        super(`${ children } of ${ parent }`);\n        this.list = new List(new ElementArrayListAdapter(this));\n    }\n\n    of(parent: Answerable<Element<'async'>>): Question<Promise<ElementArray>> {\n        return new TargetNestedElements(parent, this);\n    }\n\n    count(): Question<Promise<number>> {\n        return this.list.count();\n    }\n\n    first(): Question<Promise<Element<'async'>>> {\n        return this.list.first()\n    }\n\n    last(): Question<Promise<Element<'async'>>> {\n        return this.list.last()\n    }\n\n    get(index: number): Question<Promise<Element<'async'>>> {\n        return this.list.get(index);\n    }\n\n    where<Answer_Type>(\n        question: MetaQuestion<Answerable<Element<'async'>>, Promise<Answer_Type> | Answer_Type>,\n        expectation: Expectation<any, Answer_Type>,\n    ): TargetList {\n        return this.list.where(question, expectation);\n    }\n\n    async answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<ElementArray> {\n        const parent   = await actor.answer(this.parent);\n        const children = await actor.answer(this.children);\n\n        if (! parent) {\n            throw new LogicError(formatted `Couldn't find ${ this.parent }`);\n        }\n\n        return parent.$$(children.selector);\n    }\n}\n\n/**\n * @desc\n *  You probably don't want to use this class directly. See {@link Target} instead.\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n *\n * @see {@link Target}\n */\nexport class TargetElement\n    extends Question<Promise<Element<'async'>>>\n    implements MetaQuestion<Answerable<Element<'async'>>, Promise<Element<'async'>>>\n{\n    constructor(\n        description: string,\n        private readonly locator: Locator,\n    ) {\n        super(description);\n    }\n\n    of(parent: Answerable<Element<'async'>>): Question<Promise<Element<'async'>>> {\n        return new TargetNestedElement(parent, this);\n    }\n\n    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<Element<'async'>> {\n        return this.locator.firstMatching()\n            .describedAs(this.subject)\n            .answeredBy(actor);\n    }\n}\n\n/**\n * @desc\n *  You probably don't want to use this class directly. See {@link Target} instead.\n *\n * @extends {@serenity-js/core/lib/screenplay~Question}\n * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}\n *\n * @see {@link Target}\n */\nexport class TargetNestedElement\n    extends Question<Promise<Element<'async'>>>\n    implements MetaQuestion<Answerable<Element<'async'>>, Promise<Element<'async'>>>\n{\n    constructor(\n        private readonly parent: Answerable<Element<'async'>>,\n        private readonly child: Answerable<Element<'async'>>,\n    ) {\n        super(`${ child } of ${ parent }`);\n    }\n\n    of(parent: Answerable<Element<'async'>>): Question<Promise<Element<'async'>>> {\n        return new TargetNestedElement(parent, this);\n    }\n\n    async answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<Element<'async'>> {\n        const parent = await actor.answer(this.parent);\n        const child  = await actor.answer(this.child);\n\n        if (! parent) {\n            throw new LogicError(formatted `Couldn't find ${ this.parent }`);\n        }\n\n        return parent.$(child.selector);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/screenplay/questions/targets.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 628,
    "kind": "typedef",
    "name": "TargetList",
    "memberof": "src/screenplay/questions/targets.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets.ts~TargetList",
    "access": "public",
    "description": " A type alias representing a {@link @serenity-js/core/lib/screenplay/questions~List} of WebdriverIO Web elements.",
    "see": [
      "{@link @serenity-js/core/lib/screenplay/questions~List}"
    ],
    "lineNumber": 28,
    "type": {
      "types": [
        "List<ElementArrayListAdapter, Promise<Element<'async'>>, Promise<ElementArray>>"
      ],
      "optional": false,
      "name": "TargetList"
    }
  },
  {
    "__docId__": 629,
    "kind": "class",
    "name": "Target",
    "memberof": "src/screenplay/questions/targets.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets.ts~Target",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{Target}",
    "description": " Provides a convenient way to retrieve a single web element or multiple web elements,\n so that they can be used with Serenity/JS {@link @serenity-js/core/lib/screenplay~Interaction}s.\n\n Check out the examples below, as well as the unit tests demonstrating the usage.",
    "examples": [
      "<caption>Imaginary website under test</caption>\n  <body>\n      <ul id=\"basket\">\n          <li><a href=\"#\">Apple</a></li>\n          <li><a href=\"#\">Banana</a></li>\n          <li><a href=\"#\">Coconut</a></li>\n          <li><a href=\"#\" class=\"has-discount\">Date</a></li>\n      </ul>\n      <div id=\"summary\">\n          <strong class=\"out-of-stock\">Coconut</strong> is not available\n      </div>\n      <button type=\"submit\">Proceed to Checkout</button>\n  </body>",
      "<caption>Locating a single element</caption>\n  import { by, Target, TargetElement } from '@serenity-js/webdriverio';\n\n  const proceedToCheckoutButton: TargetElement =\n      Target.the('Proceed to Checkout button').located(by.css(`button[type='submit']`));",
      "<caption>Locating multiple elements</caption>\n  import { by, Target, TargetElements } from '@serenity-js/webdriverio';\n\n  const basketItems: TargetElements =\n      Target.all('items in the basket').located(by.css('ul#basket li'));",
      "<caption>Locating element relative to another element</caption>\n  import { by, Target, TargetElement } from '@serenity-js/webdriverio';\n\n  const summary: TargetElement =\n      Target.the('summary').located(by.id('message'));\n\n  const outOfStockItem: TargetElement =\n      Target.the('out of stock item').of(summary).located(by.css('.out-of-stock'))",
      "<caption>Filtering elements matched by a locator</caption>\n  import { by, Target, Text } from '@serenity-js/webdriverio';\n  import { endsWith } from '@serenity-js/assertions';\n\n  const basketItems =\n      Target.all('items in the basket').located(by.css('ul#basket li'))\n         .where(Text, endsWith('e'));    // Apple, Date",
      "<caption>Counting items matched by a locator</caption>\n  import { endsWith } from '@serenity-js/assertions';\n  import { Question } from '@serenity-js/core';\n  import { by, Target, Text } from '@serenity-js/webdriverio';\n\n  const basketItemsCount: Question<Promise<number>> =\n      Target.all('items in the basket').located(by.css('ul#basket li'))\n         .count()    // 4",
      "<caption>Getting first item matched by a locator</caption>\n  import { Question } from '@serenity-js/core';\n  import { by, Target } from '@serenity-js/webdriverio';\n  import { Element } from 'webdriverio';\n\n  const apple: Question<Promise<Element<'async'>>>  =\n      Target.all('items in the basket').located(by.css('ul#basket li'))\n         .first()",
      "<caption>Getting last item matched by a locator</caption>\n  import { Question } from '@serenity-js/core';\n  import { by, Target } from '@serenity-js/webdriverio';\n  import { endsWith } from '@serenity-js/assertions';\n  import { Element } from 'webdriverio';\n\n  const date: Question<Promise<Element<'async'>>>  =\n      Target.all('items in the basket').located(by.css('ul#basket li'))\n         .last()",
      "<caption>Getting nth item matched by a locator</caption>\n  import { Question } from '@serenity-js/core';\n  import { by, Target } from '@serenity-js/webdriverio';\n  import { Element } from 'webdriverio';\n\n  const banana: Question<Promise<Element<'async'>>>  =\n      Target.all('items in the basket').located(by.css('ul#basket li'))\n         .get(1)",
      "<caption>Using multiple filters and nested targets</caption>\n  import { Question } from '@serenity-js/core';\n  import { contain, endsWith } from '@serenity-js/assertions';\n  import { by, CSSClasses, Target, Text } from '@serenity-js/webdriverio';\n  import { Element } from 'webdriverio';\n\n  class Basket {\n      static component = Target.the('basket').located(by.id('basket'));\n\n      static items     = Target.all('items').located(by.css('li'))\n         .of(Basket.component);\n\n      static link      = Target.the('link').located(by.css('a'));\n  }\n\n  const date: Question<Promise<Element<'async'>>>  =\n      Basket.items\n         .where(Text, endsWith('e'))\n         .where(CSSClasses.of(Basket.link), contain('has-discount'))\n         .first()",
      "<caption>Clicking on an element</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { BrowseTheWeb, Click } from '@serenity-js/webdriverio';\n\n  actorCalled('Jane')\n      .whoCan(BrowseTheWeb.using(browser))\n      .attemptsTo(\n          Click.on(proceedToCheckoutButton),\n      );",
      "<caption>Retrieving text of multiple elements and performing an assertion</caption>\n  import { Ensure, contain } from '@serenity-js/assertions';\n  import { actorCalled } from '@serenity-js/core';\n  import { BrowseTheWeb, Text } from '@serenity-js/webdriverio';\n\n  const basketItemNames = Text.ofAll(basketItems);\n\n  actorCalled('Jane')\n      .whoCan(BrowseTheWeb.using(browser))\n      .attemptsTo(\n          Ensure.that(basketItemNames, contain('Apple'))\n      );",
      "<caption>Waiting on an element</caption>\n  import { actorCalled } from '@serenity-js/core';\n  import { BrowseTheWeb, Wait, isClickable } from '@serenity-js/webdriverio';\n\n  actorCalled('Jane')\n      .whoCan(BrowseTheWeb.using(browser))\n      .attemptsTo(\n          Wait.until(proceedToCheckoutButton, isClickable()),\n      );"
    ],
    "lineNumber": 178,
    "interface": false
  },
  {
    "__docId__": 630,
    "kind": "method",
    "name": "the",
    "memberof": "src/screenplay/questions/targets.ts~Target",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/targets.ts~Target.the",
    "access": "public",
    "description": " Locates a single Web element",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A human-readable name of the element, which will be used in the report"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetBuilder<TargetElement> & NestedTargetBuilder<TargetNestedElement>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "all",
    "memberof": "src/screenplay/questions/targets.ts~Target",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screenplay/questions/targets.ts~Target.all",
    "access": "public",
    "description": " Locates a group of Web elements",
    "lineNumber": 281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A human-readable name of the group of elements, which will be used in the report"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetBuilder<TargetElements> & NestedTargetBuilder<TargetNestedElements>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 632,
    "kind": "class",
    "name": "TargetElements",
    "memberof": "src/screenplay/questions/targets.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets.ts~TargetElements",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{TargetElements}",
    "description": " You probably don't want to use this class directly. See {@link Target} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 351,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 633,
    "kind": "member",
    "name": "list",
    "memberof": "src/screenplay/questions/targets.ts~TargetElements",
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElements#list",
    "access": "private",
    "description": " ",
    "lineNumber": 230,
    "type": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 634,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElements#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 368,
    "undocument": true
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElements#of",
    "access": "public",
    "description": " ",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetNestedElements"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "count",
    "memberof": "src/screenplay/questions/targets.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElements#count",
    "access": "public",
    "description": " ",
    "lineNumber": 244,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "first",
    "memberof": "src/screenplay/questions/targets.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElements#first",
    "access": "public",
    "description": " ",
    "lineNumber": 248,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "last",
    "memberof": "src/screenplay/questions/targets.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElements#last",
    "access": "public",
    "description": " ",
    "lineNumber": 252,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 640,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/questions/targets.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElements#get",
    "access": "public",
    "description": " ",
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/questions/targets.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElements#where",
    "access": "public",
    "description": " ",
    "lineNumber": 260,
    "params": [
      {
        "nullable": null,
        "types": [
          "MetaQuestion"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetList"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 642,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets.ts~TargetElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElements#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 643,
    "kind": "class",
    "name": "TargetNestedElements",
    "memberof": "src/screenplay/questions/targets.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElements",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{TargetNestedElements}",
    "description": " You probably don't want to use this class directly. See {@link Target} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 513,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 644,
    "kind": "member",
    "name": "list",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElements",
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElements#list",
    "access": "private",
    "description": " ",
    "lineNumber": 287,
    "type": {
      "nullable": null,
      "types": [
        "List"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 645,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElements#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 530,
    "undocument": true
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElements#of",
    "access": "public",
    "description": " ",
    "lineNumber": 297,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "count",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElements#count",
    "access": "public",
    "description": " ",
    "lineNumber": 301,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 649,
    "kind": "method",
    "name": "first",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElements#first",
    "access": "public",
    "description": " ",
    "lineNumber": 305,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "last",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElements#last",
    "access": "public",
    "description": " ",
    "lineNumber": 309,
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "get",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElements#get",
    "access": "public",
    "description": " ",
    "lineNumber": 313,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 652,
    "kind": "method",
    "name": "where",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElements",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElements#where",
    "access": "public",
    "description": " ",
    "lineNumber": 317,
    "params": [
      {
        "nullable": null,
        "types": [
          "MetaQuestion"
        ],
        "spread": false,
        "optional": false,
        "name": "question",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Expectation"
        ],
        "spread": false,
        "optional": false,
        "name": "expectation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TargetList"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 653,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElements",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElements#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 324,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 654,
    "kind": "class",
    "name": "TargetElement",
    "memberof": "src/screenplay/questions/targets.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets.ts~TargetElement",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{TargetElement}",
    "description": " You probably don't want to use this class directly. See {@link Target} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 680,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 655,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets.ts~TargetElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElement#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 684,
    "undocument": true
  },
  {
    "__docId__": 656,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets.ts~TargetElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElement#of",
    "access": "public",
    "description": " ",
    "lineNumber": 356,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 657,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets.ts~TargetElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetElement#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 658,
    "kind": "class",
    "name": "TargetNestedElement",
    "memberof": "src/screenplay/questions/targets.ts",
    "static": true,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElement",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/screenplay/questions",
    "importStyle": "{TargetNestedElement}",
    "description": " You probably don't want to use this class directly. See {@link Target} instead.",
    "see": [
      "{@link Target}"
    ],
    "lineNumber": 744,
    "interface": false,
    "extends": [
      "Question"
    ],
    "implements": [
      "MetaQuestion"
    ]
  },
  {
    "__docId__": 659,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElement#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 748,
    "undocument": true
  },
  {
    "__docId__": 660,
    "kind": "method",
    "name": "of",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElement#of",
    "access": "public",
    "description": " ",
    "lineNumber": 387,
    "params": [
      {
        "nullable": null,
        "types": [
          "Answerable"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Question"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "answeredBy",
    "memberof": "src/screenplay/questions/targets.ts~TargetNestedElement",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/screenplay/questions/targets.ts~TargetNestedElement#answeredBy",
    "access": "public",
    "description": " ",
    "lineNumber": 391,
    "params": [
      {
        "nullable": null,
        "types": [
          "AnswersQuestions & UsesAbilities"
        ],
        "spread": false,
        "optional": false,
        "name": "actor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 662,
    "kind": "file",
    "name": "src/stage/crew/index.ts",
    "content": "export * from './photographer';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/stage/crew/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 663,
    "kind": "file",
    "name": "src/stage/crew/photographer/Photographer.ts",
    "content": "import { LogicError } from '@serenity-js/core';\nimport { ActivityFinished, ActivityStarts, DomainEvent } from '@serenity-js/core/lib/events';\nimport { Stage, StageCrewMember } from '@serenity-js/core/lib/stage';\n\nimport { PhotoTakingStrategy } from './strategies';\n\n/**\n * @desc\n *  The Photographer is a {@link @serenity-js/core/lib/stage~StageCrewMember} who takes screenshots\n *  of the web browser that the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight is using.\n *\n * @example <caption>Assigning the Photographer to the Stage</caption>\n * // wdio.conf.ts\n * import { ArtifactArchiver } from '@serenity-js/core';\n * import { Photographer, TakePhotosOfFailures } from '@serenity-js/webdriverio';\n *\n * export const config = {\n *\n *     serenity: {\n *         crew: [\n *             ArtifactArchiver.storingArtifactsAt(process.cwd(), 'target/site/serenity'),\n *             Photographer.whoWill(TakePhotosOfFailures),\n *         ]\n *     },\n *\n *     // ... rest of the config omitted for brevity\n * };\n *\n * @example <caption>Taking photos upon failures only</caption>\n *\n * import { Photographer, TakePhotosOfFailures } from '@serenity-js/webdriverio';\n *\n * Photographer.whoWill(TakePhotosOfFailures)\n *\n * @example <caption>Taking photos of all the interactions</caption>\n *\n * import { Photographer, TakePhotosOfInteractions } from '@serenity-js/webdriverio';\n *\n * Photographer.whoWill(TakePhotosOfInteractions)\n *\n * @example <caption>Taking photos before and after all the interactions</caption>\n *\n * import { Photographer, TakePhotosBeforeAndAfterInteractions } from '@serenity-js/webdriverio';\n *\n * Photographer.whoWill(TakePhotosBeforeAndAfterInteractions)\n *\n * @see {@link @serenity-js/core/lib/stage~Stage}\n * @see {@link TakePhotosBeforeAndAfterInteractions}\n * @see {@link TakePhotosOfFailures}\n * @see {@link TakePhotosOfInteractions}\n */\nexport class Photographer implements StageCrewMember {\n\n    /**\n     * @desc\n     *  Instantiates a new {@link Photographer} configured to take photos (screenshots)\n     *  as per the specified {@link PhotoTakingStrategy}.\n     *\n     * @param {Function} strategy - A no-arg constructor function that instantiates a {@link PhotoTakingStrategy}.\n     * @returns {StageCrewMember}\n     */\n    static whoWill(strategy: new () => PhotoTakingStrategy): StageCrewMember {\n        return new Photographer(new strategy());\n    }\n\n    /**\n     * @param {PhotoTakingStrategy} photoTakingStrategy\n     * @param {Stage} stage\n     */\n    constructor(\n        private readonly photoTakingStrategy: PhotoTakingStrategy,\n        private stage?: Stage,\n    ) {\n    }\n\n    /**\n     * @desc\n     *  Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.\n     *\n     * @param {Stage} stage - An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to\n     * @returns {StageCrewMember} - A new instance of this {@link StageCrewMember}\n     */\n    assignedTo(stage: Stage): StageCrewMember {\n        return new Photographer(this.photoTakingStrategy, stage);\n    }\n\n    /**\n     * @desc\n     *  Handles {@link DomainEvent} objects emitted by the {@link Stage}\n     *  this {@link StageCrewMember} is assigned to.\n     *\n     * @param {DomainEvent} event\n     * @returns {void}\n     */\n    notifyOf(event: DomainEvent): void {\n        if (! this.stage) {\n            throw new LogicError(`Photographer needs to be assigned to the Stage before it can be notified of any DomainEvents`);\n        }\n\n        if (! this.stage.theShowHasStarted()) {\n            return void 0;\n        }\n\n        if (event instanceof ActivityStarts || event instanceof ActivityFinished) {\n            this.photoTakingStrategy.considerTakingPhoto(event, this.stage);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/stage/crew/photographer/Photographer.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 664,
    "kind": "class",
    "name": "Photographer",
    "memberof": "src/stage/crew/photographer/Photographer.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/stage/crew/photographer",
    "importStyle": "{Photographer}",
    "description": " The Photographer is a {@link @serenity-js/core/lib/stage~StageCrewMember} who takes screenshots\n of the web browser that the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight is using.",
    "examples": [
      "<caption>Assigning the Photographer to the Stage</caption>\n// wdio.conf.ts\nimport { ArtifactArchiver } from '@serenity-js/core';\nimport { Photographer, TakePhotosOfFailures } from '@serenity-js/webdriverio';\n\nexport const config = {\n\n    serenity: {\n        crew: [\n            ArtifactArchiver.storingArtifactsAt(process.cwd(), 'target/site/serenity'),\n            Photographer.whoWill(TakePhotosOfFailures),\n        ]\n    },\n\n    // ... rest of the config omitted for brevity\n};",
      "<caption>Taking photos upon failures only</caption>\n\nimport { Photographer, TakePhotosOfFailures } from '@serenity-js/webdriverio';\n\nPhotographer.whoWill(TakePhotosOfFailures)",
      "<caption>Taking photos of all the interactions</caption>\n\nimport { Photographer, TakePhotosOfInteractions } from '@serenity-js/webdriverio';\n\nPhotographer.whoWill(TakePhotosOfInteractions)",
      "<caption>Taking photos before and after all the interactions</caption>\n\nimport { Photographer, TakePhotosBeforeAndAfterInteractions } from '@serenity-js/webdriverio';\n\nPhotographer.whoWill(TakePhotosBeforeAndAfterInteractions)"
    ],
    "see": [
      "{@link @serenity-js/core/lib/stage~Stage}",
      "{@link TakePhotosBeforeAndAfterInteractions}",
      "{@link TakePhotosOfFailures}",
      "{@link TakePhotosOfInteractions}"
    ],
    "lineNumber": 59,
    "interface": false
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "whoWill",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer.whoWill",
    "access": "public",
    "description": " Instantiates a new {@link Photographer} configured to take photos (screenshots)\n as per the specified {@link PhotoTakingStrategy}.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StageCrewMember}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "strategy",
        "description": "A no-arg constructor function that instantiates a {@link PhotoTakingStrategy}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 666,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "PhotoTakingStrategy"
        ],
        "spread": false,
        "optional": false,
        "name": "photoTakingStrategy",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 667,
    "kind": "method",
    "name": "assignedTo",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer#assignedTo",
    "access": "public",
    "description": " Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StageCrewMember} - A new instance of this {@link StageCrewMember}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StageCrewMember"
      ],
      "spread": false,
      "description": "A new instance of this {@link StageCrewMember}"
    }
  },
  {
    "__docId__": 668,
    "kind": "method",
    "name": "notifyOf",
    "memberof": "src/stage/crew/photographer/Photographer.ts~Photographer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/Photographer.ts~Photographer#notifyOf",
    "access": "public",
    "description": " Handles {@link DomainEvent} objects emitted by the {@link Stage}\n this {@link StageCrewMember} is assigned to.",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 669,
    "kind": "file",
    "name": "src/stage/crew/photographer/index.ts",
    "content": "export * from './Photographer';\nexport * from './strategies';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/stage/crew/photographer/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 670,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts",
    "content": "import { Stage } from '@serenity-js/core';\nimport {\n    ActivityFinished,\n    ActivityRelatedArtifactGenerated,\n    ActivityStarts,\n    AsyncOperationAttempted,\n    AsyncOperationCompleted,\n    AsyncOperationFailed,\n    DomainEvent,\n} from '@serenity-js/core/lib/events';\nimport { CorrelationId, Description, Name, Photo } from '@serenity-js/core/lib/model';\nimport { Capabilities } from '@wdio/types';\n\nimport { BrowseTheWeb } from '../../../../screenplay';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots)\n *  of the {@link @serenity-js/core/lib/screenplay~Activity} performed\n *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n *  under specific conditions.\n *\n * @abstract\n */\nexport abstract class PhotoTakingStrategy {\n\n    /**\n     * @desc\n     *  Takes a photo of the web browser held by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.\n     *\n     * @param {@serenity-js/core/lib/events~ActivityStarts | @serenity-js/core/lib/events~ActivityFinished} event\n     * @param {@serenity-js/core/lib/stage~Stage} stage - the Stage that holds reference to the Actor in the spotlight\n     * @returns {void}\n     *\n     * @see {@link @serenity-js/core/lib/stage~Stage#theActorInTheSpotlight}\n     */\n    considerTakingPhoto(event: ActivityStarts | ActivityFinished, stage: Stage): void {\n        if (this.shouldTakeAPhotoOf(event)) {\n            let browseTheWeb: BrowseTheWeb;\n\n            try {\n                browseTheWeb = BrowseTheWeb.as(stage.theActorInTheSpotlight());\n            } catch {\n                return void 0;\n            }\n\n            const\n                id              = CorrelationId.create(),\n                nameSuffix      = this.photoNameFor(event),\n                // todo: test if this type def is really DesiredCapabilities when multi-capabilities are used\n                capabilities    = browseTheWeb.browser.capabilities as Capabilities.DesiredCapabilities;\n\n            stage.announce(new AsyncOperationAttempted(\n                new Description(`[Photographer:${ this.constructor.name }] Taking screenshot of '${ nameSuffix }'...`),\n                id,\n            ));\n\n            browseTheWeb.takeScreenshot().then(screenshot => {\n\n                const\n                    context   = [ capabilities.platformName, capabilities.browserName, capabilities.browserVersion ],\n                    photoName = this.combinedNameFrom(...context, nameSuffix);\n\n                stage.announce(new ActivityRelatedArtifactGenerated(\n                    event.sceneId,\n                    event.activityId,\n                    photoName,\n                    Photo.fromBase64(screenshot),\n                ));\n\n                stage.announce(new AsyncOperationCompleted(\n                    new Description(`[${ this.constructor.name }] Took screenshot of '${ nameSuffix }' on ${ context }`),\n                    id,\n                ));\n            }).catch(error => {\n                if (this.shouldIgnore(error)) {\n                    stage.announce(new AsyncOperationCompleted(\n                        new Description(`[${ this.constructor.name }] Aborted taking screenshot of '${ nameSuffix }' because of ${ error.constructor && error.constructor.name }`),\n                        id,\n                    ));\n                }\n                else {\n                    stage.announce(new AsyncOperationFailed(error, id));\n                }\n            });\n        }\n    }\n\n    protected abstract shouldTakeAPhotoOf(event: DomainEvent): boolean;\n\n    protected abstract photoNameFor(event: DomainEvent): string;\n\n    private combinedNameFrom(...parts: string[]): Name {\n        return new Name(parts.filter(v => !! v).join('-'));\n    }\n\n    private shouldIgnore(error: Error) {\n        // todo\n        // return error instanceof webdriver.NoSuchSessionError\n        //     || error instanceof webdriver.UnexpectedAlertOpenError\n        return false;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 671,
    "kind": "class",
    "name": "PhotoTakingStrategy",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/stage/crew/photographer/strategies",
    "importStyle": "{PhotoTakingStrategy}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots)\n of the {@link @serenity-js/core/lib/screenplay~Activity} performed\n by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n under specific conditions.",
    "lineNumber": 32,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "considerTakingPhoto",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy#considerTakingPhoto",
    "access": "public",
    "description": " Takes a photo of the web browser held by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.",
    "see": [
      "{@link @serenity-js/core/lib/stage~Stage#theActorInTheSpotlight}"
    ],
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ActivityStarts ",
          " @serenity-js/core/lib/events~ActivityFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Stage"
        ],
        "spread": false,
        "optional": false,
        "name": "stage",
        "description": "the Stage that holds reference to the Actor in the spotlight"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "combinedNameFrom",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy#combinedNameFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "parts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Name"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "shouldIgnore",
    "memberof": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/PhotoTakingStrategy.ts~PhotoTakingStrategy#shouldIgnore",
    "access": "private",
    "description": " ",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 675,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts",
    "content": "import { DomainEvent, InteractionFinished, InteractionStarts } from '@serenity-js/core/lib/events';\n\nimport { PhotoTakingStrategy } from './PhotoTakingStrategy';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots) both before and after\n *  every single {@link @serenity-js/core/lib/screenplay~Interaction} performed\n *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.\n *\n *  *Please note* that this strategy will result in _a lot_ of screenshots being taken,\n *  which will seriously affect the performance of your tests.\n *  For this reason, it's best to use it only for debugging purposes.\n *\n * @extends {PhotoTakingStrategy}\n */\nexport class TakePhotosBeforeAndAfterInteractions extends PhotoTakingStrategy {\n    protected shouldTakeAPhotoOf(event: DomainEvent): boolean {\n        return event instanceof InteractionStarts\n            || event instanceof InteractionFinished;\n    }\n\n    protected photoNameFor(event: InteractionStarts | InteractionFinished): string {\n        return event instanceof InteractionStarts\n            ? `Before ${ event.details.name.value }`\n            : `After ${ event.details.name.value }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 676,
    "kind": "class",
    "name": "TakePhotosBeforeAndAfterInteractions",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/stage/crew/photographer/strategies",
    "importStyle": "{TakePhotosBeforeAndAfterInteractions}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots) both before and after\n every single {@link @serenity-js/core/lib/screenplay~Interaction} performed\n by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight.\n\n *Please note* that this strategy will result in _a lot_ of screenshots being taken,\n which will seriously affect the performance of your tests.\n For this reason, it's best to use it only for debugging purposes.",
    "lineNumber": 24,
    "interface": false,
    "extends": [
      "PhotoTakingStrategy"
    ]
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "shouldTakeAPhotoOf",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions#shouldTakeAPhotoOf",
    "access": "protected",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 678,
    "kind": "method",
    "name": "photoNameFor",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.ts~TakePhotosBeforeAndAfterInteractions#photoNameFor",
    "access": "protected",
    "description": " ",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "InteractionStarts ",
          " InteractionFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 679,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts",
    "content": "import { DomainEvent, InteractionFinished } from '@serenity-js/core/lib/events';\nimport { ImplementationPending } from '@serenity-js/core/lib/model';\n\nimport { PhotoTakingStrategy } from './PhotoTakingStrategy';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n *  the {@link @serenity-js/core/lib/screenplay~Interaction} performed\n *  by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight results in an error.\n *\n *  This strategy works best when you are interested in the screenshots only when\n *  a scenario fails.\n *\n * @extends {PhotoTakingStrategy}\n */\nexport class TakePhotosOfFailures extends PhotoTakingStrategy {\n    protected shouldTakeAPhotoOf(event: DomainEvent): boolean {\n        return event instanceof InteractionFinished\n            && event.outcome.isWorseThan(ImplementationPending);\n    }\n\n    protected photoNameFor(event: InteractionFinished): string {\n        return event.details.name.value;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 680,
    "kind": "class",
    "name": "TakePhotosOfFailures",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/stage/crew/photographer/strategies",
    "importStyle": "{TakePhotosOfFailures}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n the {@link @serenity-js/core/lib/screenplay~Interaction} performed\n by the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight results in an error.\n\n This strategy works best when you are interested in the screenshots only when\n a scenario fails.",
    "lineNumber": 24,
    "interface": false,
    "extends": [
      "PhotoTakingStrategy"
    ]
  },
  {
    "__docId__": 681,
    "kind": "method",
    "name": "shouldTakeAPhotoOf",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures#shouldTakeAPhotoOf",
    "access": "protected",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 682,
    "kind": "method",
    "name": "photoNameFor",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfFailures.ts~TakePhotosOfFailures#photoNameFor",
    "access": "protected",
    "description": " ",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "InteractionFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 683,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts",
    "content": "import { DomainEvent, InteractionFinished } from '@serenity-js/core/lib/events';\n\nimport { PhotoTakingStrategy } from './PhotoTakingStrategy';\n\n/**\n * @desc\n *  Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n *  the the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n *  performs any {@link @serenity-js/core/lib/screenplay~Interaction}.\n *\n *  This strategy works best when you want the results of your automated tests\n *  to become comprehensive living documentation of your system.\n *\n *  *Please note* that taking screenshots affects the performance of your tests.\n *\n * @extends {PhotoTakingStrategy}\n */\nexport class TakePhotosOfInteractions extends PhotoTakingStrategy {\n    protected shouldTakeAPhotoOf(event: DomainEvent): boolean {\n        return event instanceof InteractionFinished;\n    }\n\n    protected photoNameFor(event: InteractionFinished): string {\n        return event.details.name.value;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 684,
    "kind": "class",
    "name": "TakePhotosOfInteractions",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts",
    "static": true,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/webdriverio/lib/stage/crew/photographer/strategies",
    "importStyle": "{TakePhotosOfInteractions}",
    "description": " Configures the {@link Photographer} to take photos (a.k.a. screenshots) when\n the the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight\n performs any {@link @serenity-js/core/lib/screenplay~Interaction}.\n\n This strategy works best when you want the results of your automated tests\n to become comprehensive living documentation of your system.\n\n *Please note* that taking screenshots affects the performance of your tests.",
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "PhotoTakingStrategy"
    ]
  },
  {
    "__docId__": 685,
    "kind": "method",
    "name": "shouldTakeAPhotoOf",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions#shouldTakeAPhotoOf",
    "access": "protected",
    "description": " ",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "DomainEvent"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 686,
    "kind": "method",
    "name": "photoNameFor",
    "memberof": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stage/crew/photographer/strategies/TakePhotosOfInteractions.ts~TakePhotosOfInteractions#photoNameFor",
    "access": "protected",
    "description": " ",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "InteractionFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 687,
    "kind": "file",
    "name": "src/stage/crew/photographer/strategies/index.ts",
    "content": "export * from './PhotoTakingStrategy';\nexport * from './TakePhotosBeforeAndAfterInteractions';\nexport * from './TakePhotosOfFailures';\nexport * from './TakePhotosOfInteractions';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/stage/crew/photographer/strategies/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 688,
    "kind": "file",
    "name": "src/stage/index.ts",
    "content": "export * from './crew';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/src/stage/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# Serenity/JS\n\n[Serenity/JS](https://serenity-js.org) is a framework designed to make acceptance and regression testing\nof modern full-stack applications faster, more collaborative and easier to scale.\n\nVisit [serenity-js.org](https://serenity-js.org/) for the [latest tutorials](https://serenity-js.org/handbook/)\nand [API docs](https://serenity-js.org/modules/), and follow [@SerenityJS](https://twitter.com/SerenityJS) and [@JanMolak](https://twitter.com/JanMolak) on Twitter for project updates.\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/SerenityJS?style=social)](https://twitter.com/@SerenityJS)\n[![Twitter Follow](https://img.shields.io/twitter/follow/JanMolak?style=social)](https://twitter.com/@JanMolak)\n[![Chat on Gitter](https://badges.gitter.im/serenity-js/Lobby.svg)](https://gitter.im/serenity-js/Lobby)\n\nSubscribe to [Serenity/JS YouTube channel](https://www.youtube.com/channel/UC0RdeVPyjtJopVHvlLrXd1Q) to get notified when new demos and video tutorials are available.\n\n### Learning Serenity/JS\n\nTo learn more about Serenity/JS, [follow the tutorial](https://serenity-js.org/handbook/thinking-in-serenity-js/index.html), [review the examples](https://github.com/serenity-js/serenity-js/tree/master/examples), and create your own test suite with [Serenity/JS template projects](https://github.com/serenity-js).\n\nIf you have any questions, join us on [Serenity/JS Community Chat](https://gitter.im/serenity-js/Lobby).\n\n## Serenity/JS WebdriverIO\n\n[`@serenity-js/webdriverio`](https://serenity-js.org/modules/webdriverio/) module is a [Screenplay Pattern](https://serenity-js.org/handbook/thinking-in-serenity-js/screenplay-pattern.html)-style adapter\nfor [WebdriverIO](https://webdriver.io/), that helps with testing Web-based and mobile apps.\n\n### Installation\n\nTo install this module, run the following command in your [WebdriverIO project directory](https://webdriver.io/docs/gettingstarted/):\n\n```bash\nnpm install --save-dev @serenity-js/{core,webdriverio}\n```\n\nNext, install one of the below test runner adapters.\n\n#### Usage with Cucumber.js\n\nTo use Serenity/JS WebdriverIO with Cucumber.js, install the following adapter:\n```bash\nnpm install --save-dev @serenity-js/cucumber\n```\n\n**Please note** that Serenity/JS WebdriverIO / Cucumber integration supports both [Serenity/JS reporting services](https://serenity-js.org/handbook/reporting/index.html) and [native Cucumber.js reporters](https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#built-in-formatters).\n\n#### Usage with Jasmine\n\nTo use Serenity/JS WebdriverIO with Jasmine, install the following adapter:\n```bash\nnpm install --save-dev @serenity-js/jasmine\n```\n\n#### Usage with Mocha\n\nTo use Serenity/JS WebdriverIO with Mocha, install the following adapter:\n```bash\nnpm install --save-dev @serenity-js/mocha\n```\n\n### Configuring Webdriverio\n\n```typescript\n// wdio.conf.ts\n\n// Import Serenity/JS reporting services, a.k.a. the \"Stage Crew Members\"\nimport { ArtifactArchiver } from '@serenity-js/core';\nimport { ConsoleReporter } from '@serenity-js/console-reporter';\nimport { SerenityBDDReporter } from '@serenity-js/serenity-bdd';\nimport { Photographer, TakePhotosOfFailures, WebdriverIOConfig } from '@serenity-js/webdriverio';\n\nexport const config: WebdriverIOConfig = {\n    // Tell WebdriverIO to use Serenity/JS framework\n    framework: '@serenity-js/webdriverio',\n\n    serenity: {\n        // Configure Serenity/JS to use an appropriate test runner adapter\n        runner: 'cucumber',\n        // runner: 'mocha',\n        // runner: 'jasmine',\n\n        // Register StageCrewMembers we've imported at the top of this file    \n        crew: [\n            ArtifactArchiver.storingArtifactsAt(process.cwd(), 'target/site/serenity'),\n            ConsoleReporter.forDarkTerminals(),\n            new SerenityBDDReporter(),\n            Photographer.whoWill(TakePhotosOfFailures),\n        ]\n    },\n\n    // configure Cucumber runner\n    cucumberOpts: {\n        // see the Cucumber configuration options below\n    },\n\n    // or Jasmine runner\n    jasmineOpts: {\n        // see the Jasmine configuration options below\n    },\n\n    // or Mocha runner\n    mochaOpts: {\n        // see the Mocha configuration options below\n    },\n\n    specs: [\n        // load Cucumber feature files\n        './features/**/*.feature',\n        // or Mocha/Jasmine spec files \n        // './spec/**/*.spec.ts',\n    ],\n    \n    // add any additional native WebdriverIO reports\n    // reporters: [\n    //     'spec',\n    // ],\n\n    // ... other WebdriverIO-specific configuration   \n};\n```\n\nLearn more about:\n- [Cucumber configuration options](https://serenity-js.org/modules/cucumber/class/src/cli/CucumberConfig.ts~CucumberConfig.html)\n- [Jasmine configuration options](https://serenity-js.org/modules/jasmine/class/src/adapter/JasmineConfig.ts~JasmineConfig.html)\n- [Mocha configuration options](https://serenity-js.org/modules/mocha/class/src/adapter/MochaConfig.ts~MochaConfig.html)\n- [WebdriverIO configuration file](https://webdriver.io/docs/configurationfile/)\n\n### Interacting with websites and web apps\n\n```typescript\nimport { actorCalled } from '@serenity-js/core';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { by, BrowseTheWeb, Navigate, Target, Text } from '@serenity-js/webdriverio';\n\nclass SerenityJSWebsite {\n    static header = Target.the('header').located(by.css('h1'));\n}\n\nactorCalled('Wendy')\n    .whoCan(\n        BrowseTheWeb.using(browser)\n    )\n    .attemptsTo(\n        Navigate.to('https://serenity-js.org'),\n        Ensure.that(\n            Text.of(SerenityJSWebsite.header), \n            equals('Next generation acceptance testing')\n        ),\n    )\n```\n\nTo learn more, check out the [example projects](https://github.com/serenity-js/serenity-js/tree/master/examples).\n\n### Template Repositories\n\nThe easiest way for you to start writing web-based acceptance tests using Serenity/JS, WebdriverIO and either [Mocha](https://mochajs.org/), [Cucumber](https://github.com/cucumber/cucumber-js) or [Jasmine](https://jasmine.github.io/) is by using one of the below template repositories:\n\n- [Serenity/JS, Mocha, and WebdriverIO template](https://github.com/serenity-js/serenity-js-mocha-webdriverio-template)\n- Serenity/JS, Cucumber, and WebdriverIO template (coming soon!)\n- Serenity/JS, Jasmine, and WebdriverIO template (coming soon!)\n\n## More coming soon!\n\nNew features, tutorials, and demos are coming soon, so follow us on Twitter and join the [Serenity/JS Community chat channel](https://gitter.im/serenity-js/Lobby) to stay up to date!\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/SerenityJS?style=social)](https://twitter.com/@SerenityJS)\n[![Twitter Follow](https://img.shields.io/twitter/follow/JanMolak?style=social)](https://twitter.com/@JanMolak)\n[![Chat on Gitter](https://badges.gitter.im/serenity-js/Lobby.svg)](https://gitter.im/serenity-js/Lobby)\n",
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@serenity-js/webdriverio\",\n  \"version\": \"2.33.8\",\n  \"description\": \"Serenity/JS reporter and Screenplay Pattern library for WebdriverIO\",\n  \"author\": {\n    \"name\": \"Jan Molak\",\n    \"email\": \"jan.molak@smartcodeltd.co.uk\",\n    \"url\": \"https://janmolak.com\"\n  },\n  \"funding\": {\n    \"url\": \"https://github.com/sponsors/serenity-js\"\n  },\n  \"homepage\": \"https://serenity-js.org\",\n  \"license\": \"Apache-2.0\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"keywords\": [\n    \"serenity-js\",\n    \"ui\",\n    \"frontend\",\n    \"bdd\",\n    \"tdd\",\n    \"test\",\n    \"testing\",\n    \"webdriverio\",\n    \"wdio\",\n    \"wdio-reporter\"\n  ],\n  \"scripts\": {\n    \"clean\": \"rimraf .nyc_output lib target\",\n    \"lint\": \"eslint --ext ts --config ../../.eslintrc.js .\",\n    \"lint:fix\": \"npm run lint -- --fix\",\n    \"test\": \"npm run test:mocha && npm run test:wdio\",\n    \"test:mocha\": \"nyc --report-dir ../../target/coverage/webdriverio/mocha mocha --config ../../.mocharc.yml 'spec/adapter/**/*.spec.*'\",\n    \"test:wdio\": \"cross-env PORT=8080 start-server-and-test test:wdio:start-server http://localhost:8080 test:wdio:run\",\n    \"test:wdio:start-server\": \"static-content-server\",\n    \"test:wdio:run\": \"nyc --report-dir ../../target/coverage/webdriverio/wdio wdio ./spec/wdio.conf.ts\",\n    \"wdio\": \"wdio ./spec/wdio.conf.ts\",\n    \"compile\": \"tsc --project tsconfig.json\",\n    \"site\": \"esdoc -c .esdoc.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/serenity-js/serenity-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/serenity-js/serenity-js/issues\"\n  },\n  \"engines\": {\n    \"node\": \"^12 || ^14 || ^16\",\n    \"npm\": \"^6 || ^7 || ^8\"\n  },\n  \"dependencies\": {\n    \"@serenity-js/core\": \"2.33.8\",\n    \"@wdio/reporter\": \"^7.19.7\",\n    \"@wdio/types\": \"^7.19.5\",\n    \"deepmerge\": \"^4.2.2\",\n    \"is-plain-object\": \"^5.0.0\",\n    \"tiny-types\": \"^1.17.0\"\n  },\n  \"peerDependencies\": {\n    \"@serenity-js/cucumber\": \"^2.33.0\",\n    \"@serenity-js/jasmine\": \"^2.33.0\",\n    \"@serenity-js/mocha\": \"^2.33.0\",\n    \"@wdio/cli\": \"^7.19.7\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@serenity-js/cucumber\": {\n      \"optional\": true\n    },\n    \"@serenity-js/jasmine\": {\n      \"optional\": true\n    },\n    \"@serenity-js/mocha\": {\n      \"optional\": true\n    }\n  },\n  \"devDependencies\": {\n    \"@documentation/esdoc-template\": \"2.0.0\",\n    \"@integration/testing-tools\": \"2.0.0\",\n    \"@integration/web-testing-tools\": \"2.0.0\",\n    \"@serenity-js/assertions\": \"2.33.8\",\n    \"@serenity-js/console-reporter\": \"2.33.8\",\n    \"@serenity-js/cucumber\": \"2.33.8\",\n    \"@serenity-js/jasmine\": \"2.33.8\",\n    \"@serenity-js/mocha\": \"2.33.8\",\n    \"@serenity-js/rest\": \"2.33.8\",\n    \"@types/mocha\": \"^9.1.1\",\n    \"@wdio/cli\": \"^7.19.7\",\n    \"@wdio/devtools-service\": \"^7.19.7\",\n    \"@wdio/dot-reporter\": \"^7.19.7\",\n    \"@wdio/local-runner\": \"^7.19.7\",\n    \"@wdio/mocha-framework\": \"^7.19.7\",\n    \"@wdio/spec-reporter\": \"^7.19.7\",\n    \"axios\": \"^0.21.4\",\n    \"cross-env\": \"^7.0.3\",\n    \"mocha\": \"^9.2.2\",\n    \"mocha-testdata\": \"^1.2.0\",\n    \"start-server-and-test\": \"^1.14.0\",\n    \"webdriverio\": \"^7.19.7\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"src/**/*.d.ts\",\n      \"lib\",\n      \"node_modules\",\n      \"spec\"\n    ],\n    \"extension\": [\n      \".ts\"\n    ],\n    \"require\": [],\n    \"reporter\": [\n      \"json\"\n    ],\n    \"cache\": true,\n    \"all\": false\n  }\n}\n",
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 689,
    "kind": "testFile",
    "name": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Clock, ConfigurationError, Serenity } from '@serenity-js/core';\nimport { ModuleLoader, Path, TestRunnerAdapter } from '@serenity-js/core/lib/io';\nimport { ExecutionIgnored, Outcome } from '@serenity-js/core/lib/model';\nimport Reporter from '@wdio/reporter';\nimport type { Capabilities, Reporters } from '@wdio/types';\nimport * as sinon from 'sinon';\nimport EventEmitter = require('events');\n\nimport { WebdriverIOFrameworkAdapterFactory } from '../../src/adapter';\nimport { InitialisesReporters, ProvidesWriteStream } from '../../src/adapter/reporter';\nimport { WebdriverIOConfig } from '../../src/adapter/WebdriverIOConfig';\n\ndescribe('WebdriverIOFrameworkAdapterFactory', () => {\n\n    const\n        cid     = '0-0',\n        specs   = [ '/users/jan/project/spec/example.spec.ts' ],\n        capabilities: Capabilities.RemoteCapability = { browserName: 'chrome' };\n\n    let serenity:       Serenity,\n        loader:         sinon.SinonStubbedInstance<ModuleLoader>,\n        baseReporter:   FakeBaseReporter,\n        factory:        WebdriverIOFrameworkAdapterFactory;\n\n    beforeEach(() => {\n        serenity        = new Serenity(new Clock());\n        loader          = sinon.createStubInstance(ModuleLoader);\n        baseReporter    = new FakeBaseReporter();\n        factory         = new WebdriverIOFrameworkAdapterFactory(\n            serenity,\n            loader,\n            Path.from(__dirname),\n        );\n    });\n\n    function defaultConfig(overrides: Partial<WebdriverIOConfig> = {}): WebdriverIOConfig {\n        return {\n            capabilities: [ capabilities ],\n            ...overrides,\n        }\n    }\n\n    describe('when initialising WebdriverIOFrameworkAdapter', () => {\n\n        /*\n         * WebdriverIO uses 'mocha' by default, so we do the same:\n         * - https://github.com/webdriverio/webdriverio/blob/44b5318a8893c032d7d4989079109782a2ce9a79/packages/wdio-config/src/constants.ts#L18\n         */\n        it('loads specs using @serenity-js/mocha adapter by default', async () => {\n\n            const config = defaultConfig();\n\n            loader.require.withArgs('@serenity-js/mocha/lib/adapter').returns({ MochaAdapter: FakeTestRunnerAdapter })\n\n            await factory.init(cid, config, specs, capabilities, baseReporter);\n\n            expect(FakeTestRunnerAdapter.loadedPathsToScenarios).to.deep.equal(specs);\n        });\n\n        it('loads specs using @serenity-js/mocha when configured to do so', async () => {\n\n            const config = defaultConfig({\n                serenity: {\n                    runner: 'mocha',\n                }\n            });\n\n            loader.require.withArgs('@serenity-js/mocha/lib/adapter').returns({ MochaAdapter: FakeTestRunnerAdapter })\n\n            await factory.init(cid, config, specs, capabilities, baseReporter);\n\n            expect(FakeTestRunnerAdapter.loadedPathsToScenarios).to.deep.equal(specs);\n        });\n\n        it('loads specs using @serenity-js/jasmine when configured to do so', async () => {\n\n            const config = defaultConfig({\n                serenity: {\n                    runner: 'jasmine',\n                }\n            });\n\n            loader.require.withArgs('@serenity-js/jasmine/lib/adapter').returns({ JasmineAdapter: FakeTestRunnerAdapter })\n\n            await factory.init(cid, config, specs, capabilities, baseReporter);\n\n            expect(FakeTestRunnerAdapter.loadedPathsToScenarios).to.deep.equal(specs);\n        });\n\n        // todo\n        it('loads specs using @serenity-js/cucumber when configured to do so');\n\n        it('complains when configured with an invalid runner', () => {\n            const config = defaultConfig({\n                serenity: {\n                    runner: 'invalid',\n                }\n            });\n\n            expect(() => factory.init(cid, config, specs, capabilities, baseReporter))\n                .to.throw(ConfigurationError, '\"invalid\" is not a supported test runner. Please use \"mocha\", \"jasmine\", or \"cucumber\"');\n        });\n    });\n\n    // https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-runner/src/reporter.ts#L127\n    class FakeBaseReporter extends EventEmitter implements ProvidesWriteStream, InitialisesReporters {\n        public output = '';\n        public _reporters = [];\n\n        getWriteStreamObject(reporter: string) {\n            return {\n                write: (content: string): void => {\n                    this.output += content;\n                }\n            };\n        }\n\n        initReporter(reporter: Reporters.ReporterEntry): Reporter {\n            const\n                ReporterClass   = reporter[0],\n                options         = reporter[1];\n\n            return new ReporterClass({\n                ...options,\n                writeStream: this.getWriteStreamObject(ReporterClass.name)\n            });\n        }\n    }\n\n    class FakeTestRunnerAdapter implements TestRunnerAdapter {\n\n        public static loadedPathsToScenarios: string[];\n\n        async load(pathsToScenarios: string[]): Promise<void> {\n            FakeTestRunnerAdapter.loadedPathsToScenarios = pathsToScenarios;\n        }\n\n        scenarioCount(): number {\n            return 1;\n        }\n\n        async run(): Promise<void> {\n            // no-op\n        }\n\n        successThreshold(): Outcome | { Code: number } {\n            return ExecutionIgnored;\n        }\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 690,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0",
    "access": null,
    "description": "WebdriverIOFrameworkAdapterFactory",
    "lineNumber": 17
  },
  {
    "__docId__": 691,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1",
    "access": null,
    "description": "when initialising WebdriverIOFrameworkAdapter",
    "lineNumber": 58
  },
  {
    "__docId__": 692,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1.it2",
    "access": null,
    "description": "loads specs using @serenity-js/mocha adapter by default",
    "lineNumber": 64
  },
  {
    "__docId__": 693,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1.it3",
    "access": null,
    "description": "loads specs using @serenity-js/mocha when configured to do so",
    "lineNumber": 75
  },
  {
    "__docId__": 694,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1.it4",
    "access": null,
    "description": "loads specs using @serenity-js/jasmine when configured to do so",
    "lineNumber": 90
  },
  {
    "__docId__": 695,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1.it5",
    "access": null,
    "description": "loads specs using @serenity-js/cucumber when configured to do so",
    "lineNumber": 106
  },
  {
    "__docId__": 696,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/WebdriverIOFrameworkAdapterFactory.spec.ts~describe0.describe1.it6",
    "access": null,
    "description": "complains when configured with an invalid runner",
    "lineNumber": 108
  },
  {
    "__docId__": 697,
    "kind": "testFile",
    "name": "spec/adapter/WebdriverIONotifier.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Cast, Clock, Duration, Stage, StageManager } from '@serenity-js/core';\nimport { given } from 'mocha-testdata';\n\nimport { WebdriverIONotifier } from '../../src/adapter/WebdriverIONotifier';\nimport {\n    cid,\n    executionCompromised,\n    executionFailedWithAssertionError,\n    executionFailedWithError,\n    executionIgnored,\n    executionSkipped,\n    executionSuccessful,\n    implementationPending,\n    retryableSceneDetected,\n    retryableSceneFinishedWith,\n    retryableSceneStarts,\n    scene1FinishedWith, scene1Id,\n    scene1Starts,\n    scene2FinishedWith,\n    scene2Starts,\n    successThreshold,\n    testRunFinished,\n    testRunFinishes,\n    testRunStarts,\n    testSuiteFinished,\n    testSuiteStarts,\n    when\n} from './fixtures';\nimport EventEmitter = require('events');\nimport sinon = require('sinon');\n\ndescribe('WebdriverIONotifier', () => {\n\n    const specs = [\n        '/users/jan/project/feature.spec.ts'\n    ];\n\n    let notifier: WebdriverIONotifier,\n        reporter: sinon.SinonStubbedInstance<EventEmitter>,\n        stage: Stage;\n\n    beforeEach(() => {\n\n        reporter = sinon.createStubInstance(EventEmitter);\n\n        stage = new Stage(\n            Cast.whereEveryoneCan(/* do nothing much */),\n            new StageManager(Duration.ofMilliseconds(250), new Clock())\n        );\n\n        notifier = new WebdriverIONotifier(\n            reporter,\n            successThreshold,\n            cid,\n            specs\n        );\n\n        stage.assign(notifier);\n    });\n\n    describe('failureCount()', () => {\n\n        given([{\n            description: 'no scenarios',\n            expectedFailureCount: 0,\n            events: []\n        }, {\n            description: 'all successful',\n            expectedFailureCount: 0,\n            events: [\n                scene1Starts,\n                scene1FinishedWith(executionSuccessful)\n            ]\n        }, {\n            description: 'one failure',\n            expectedFailureCount: 1,\n            events: [\n                scene1Starts,\n                scene1FinishedWith(executionFailedWithError)\n            ]\n        }, {\n            description: 'two failures',\n            expectedFailureCount: 2,\n            events: [\n                scene1Starts,\n                scene1FinishedWith(executionFailedWithError),\n                scene2Starts,\n                scene2FinishedWith(executionFailedWithError)\n            ]\n        }, {\n            description: 'failure and success',\n            expectedFailureCount: 1,\n            events: [\n                scene1Starts,\n                scene1FinishedWith(executionSuccessful),\n                scene2Starts,\n                scene2FinishedWith(executionFailedWithError)\n            ]\n        }]).it('returns the number of scenarios that failed', ({ events, expectedFailureCount }) => {\n            when(notifier).receives(\n                testRunStarts,\n                ...events,\n                testRunFinishes,\n                testRunFinished,\n            );\n\n            expect(notifier.failureCount()).to.equal(expectedFailureCount);\n        });\n\n        given([\n            { description: 'successful',        expectedFailureCount: 0, outcome: executionSuccessful },\n            { description: 'skipped',           expectedFailureCount: 0, outcome: executionSkipped },\n            { description: 'ignored',           expectedFailureCount: 0, outcome: executionIgnored },\n            { description: 'pending',           expectedFailureCount: 1, outcome: implementationPending },\n            { description: 'assertion failure', expectedFailureCount: 1, outcome: executionFailedWithAssertionError },\n            { description: 'error',             expectedFailureCount: 1, outcome: executionFailedWithError },\n            { description: 'compromised',       expectedFailureCount: 1, outcome: executionCompromised },\n        ]).it('counts results above the success threshold as successful', ({ expectedFailureCount, outcome }) => {\n            when(notifier).receives(\n                testRunStarts,\n                scene1Starts,\n                scene1FinishedWith(outcome),\n                testRunFinishes,\n                testRunFinished,\n            );\n\n            expect(notifier.failureCount()).to.equal(expectedFailureCount);\n        });\n\n        it('does not count retried scenarios', () => {\n            when(notifier).receives(\n                testRunStarts,\n                retryableSceneStarts(0),\n                retryableSceneDetected(0),\n                retryableSceneFinishedWith(0, executionIgnored),\n\n                retryableSceneStarts(1),\n                retryableSceneDetected(1),\n                retryableSceneFinishedWith(1, executionIgnored),\n\n                retryableSceneStarts(2),\n                retryableSceneDetected(2),\n                retryableSceneFinishedWith(2, executionSuccessful),\n\n                testRunFinishes,\n                testRunFinished,\n            );\n\n            expect(notifier.failureCount()).to.equal(0);\n        });\n    });\n\n    describe('notifications', () => {\n\n        it('emits events when a test suite starts and is finished', () => {\n            when(notifier).receives(\n                testRunStarts,\n                testSuiteStarts(0, 'Checkout'),\n                testSuiteFinished(0, 'Checkout', executionSuccessful),\n                testRunFinishes,\n                testRunFinished,\n            );\n\n            expect(reporter.emit.getCalls().map(_ => _.args)).to.deep.equal([\n                [\n                    'suite:start',\n                    {\n                        type: 'suite:start',\n                        uid: 'suite-0',\n                        cid,\n                        title: 'Checkout',\n                        fullTitle: 'Checkout',\n                        parent: '',\n                        file: 'payments/checkout.feature',\n                        specs,\n                        pending: false\n                    }\n                ],\n                [\n                    'suite:end',\n                    {\n                        type: 'suite:end',\n                        uid: 'suite-0',\n                        cid,\n                        title: 'Checkout',\n                        fullTitle: 'Checkout',\n                        parent: '',\n                        file: 'payments/checkout.feature',\n                        specs,\n                        pending: false,\n                        duration: 500\n                    }\n                ]\n            ])\n        });\n\n        it('emits events when a nested test suite starts and is finished', () => {\n            when(notifier).receives(\n                testRunStarts,\n                testSuiteStarts(0, 'Checkout'),\n                testSuiteStarts(1, 'Credit card payment'),\n                testSuiteFinished(1, 'Credit card payment', executionSuccessful),\n                testSuiteFinished(0, 'Checkout', executionSuccessful),\n                testRunFinishes,\n                testRunFinished,\n            );\n\n            expect(reporter.emit.getCalls().map(_ => _.args)).to.deep.equal([\n                [\n                    'suite:start',\n                    {\n                        type: 'suite:start',\n                        uid: 'suite-0',\n                        cid,\n                        title: 'Checkout',\n                        fullTitle: 'Checkout',\n                        parent: '',\n                        file: 'payments/checkout.feature',\n                        specs,\n                        pending: false\n                    }\n                ],\n                [\n                    'suite:start',\n                    {\n                        type: 'suite:start',\n                        uid: 'suite-1',\n                        cid,\n                        title: 'Credit card payment',\n                        fullTitle: 'Checkout Credit card payment',\n                        parent: 'Checkout',\n                        file: 'payments/checkout.feature',\n                        specs,\n                        pending: false\n                    }\n                ],\n                [\n                    'suite:end',\n                    {\n                        type: 'suite:end',\n                        uid: 'suite-1',\n                        cid,\n                        title: 'Credit card payment',\n                        fullTitle: 'Checkout Credit card payment',\n                        parent: 'Checkout',\n                        file: 'payments/checkout.feature',\n                        specs,\n                        pending: false,\n                        duration: 500\n                    }\n                ],\n                [\n                    'suite:end',\n                    {\n                        type: 'suite:end',\n                        uid: 'suite-0',\n                        cid,\n                        title: 'Checkout',\n                        fullTitle: 'Checkout',\n                        parent: '',\n                        file: 'payments/checkout.feature',\n                        specs,\n                        pending: false,\n                        duration: 500\n                    }\n                ]\n            ]);\n        });\n\n        it('emits events when a nested test starts and is finished', () => {\n            when(notifier).receives(\n                testRunStarts,\n                testSuiteStarts(0, 'Checkout'),\n                testSuiteStarts(1, 'Credit card payment'),\n                scene1Starts,\n                scene1FinishedWith(executionSuccessful),\n                testSuiteFinished(1, 'Credit card payment', executionSuccessful),\n                testSuiteFinished(0, 'Checkout', executionSuccessful),\n                testRunFinishes,\n                testRunFinished,\n            );\n\n            expect(reporter.emit.getCalls().map(_ => _.args)).to.deep.equal([\n                [\n                    'suite:start',\n                    {\n                        type: 'suite:start',\n                        uid: 'suite-0',\n                        cid,\n                        title: 'Checkout',\n                        fullTitle: 'Checkout',\n                        parent: '',\n                        file: 'payments/checkout.feature',\n                        specs,\n                        pending: false\n                    }\n                ],\n                [\n                    'suite:start',\n                    {\n                        type: 'suite:start',\n                        uid: 'suite-1',\n                        cid,\n                        title: 'Credit card payment',\n                        fullTitle: 'Checkout Credit card payment',\n                        parent: 'Checkout',\n                        file: 'payments/checkout.feature',\n                        specs,\n                        pending: false\n                    }\n                ],\n\n                [\n                    'test:start',\n                    {\n                        cid,\n                        file: 'payments/checkout.feature',\n                        fullTitle: 'Checkout Credit card payment Paying with a default card',\n                        parent: 'Credit card payment',\n                        pending: false,\n                        'specs': [\n                            '/users/jan/project/feature.spec.ts',\n                        ],\n                        title: 'Paying with a default card',\n                        type: 'test:start',\n                        uid: scene1Id.value,\n                    }\n                ],\n                [\n                    'test:pass',\n                    {\n                        cid,\n                        duration: 500,\n                        file: 'payments/checkout.feature',\n                        fullTitle: 'Checkout Credit card payment Paying with a default card',\n                        parent: 'Credit card payment',\n                        pending: false,\n                        'specs': [\n                            '/users/jan/project/feature.spec.ts',\n                        ],\n                        title: 'Paying with a default card',\n                        type: 'test:pass',\n                        uid: scene1Id.value,\n                    }\n                ],\n                [\n                    'test:end',\n                    {\n                        cid,\n                        duration: 500,\n                        file: 'payments/checkout.feature',\n                        fullTitle: 'Checkout Credit card payment Paying with a default card',\n                        parent: 'Credit card payment',\n                        pending: false,\n                        'specs': [\n                            '/users/jan/project/feature.spec.ts',\n                        ],\n                        title: 'Paying with a default card',\n                        type: 'test:end',\n                        uid: scene1Id.value,\n                    }\n                ],\n\n                [\n                    'suite:end',\n                    {\n                        type: 'suite:end',\n                        uid: 'suite-1',\n                        cid,\n                        title: 'Credit card payment',\n                        fullTitle: 'Checkout Credit card payment',\n                        parent: 'Checkout',\n                        file: 'payments/checkout.feature',\n                        specs,\n                        pending: false,\n                        duration: 500\n                    }\n                ],\n                [\n                    'suite:end',\n                    {\n                        type: 'suite:end',\n                        uid: 'suite-0',\n                        cid,\n                        title: 'Checkout',\n                        fullTitle: 'Checkout',\n                        parent: '',\n                        file: 'payments/checkout.feature',\n                        specs,\n                        pending: false,\n                        duration: 500\n                    }\n                ]\n            ]);\n        })\n    });\n})\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/adapter/WebdriverIONotifier.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 698,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "spec/adapter/WebdriverIONotifier.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/WebdriverIONotifier.spec.ts~describe7",
    "access": null,
    "description": "WebdriverIONotifier",
    "lineNumber": 36
  },
  {
    "__docId__": 699,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "spec/adapter/WebdriverIONotifier.spec.ts~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/WebdriverIONotifier.spec.ts~describe7.describe8",
    "access": null,
    "description": "failureCount()",
    "lineNumber": 65
  },
  {
    "__docId__": 700,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "spec/adapter/WebdriverIONotifier.spec.ts~describe7.describe8",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/WebdriverIONotifier.spec.ts~describe7.describe8.it9",
    "access": null,
    "description": "does not count retried scenarios",
    "lineNumber": 134
  },
  {
    "__docId__": 701,
    "kind": "test",
    "name": "describe10",
    "testId": 10,
    "memberof": "spec/adapter/WebdriverIONotifier.spec.ts~describe7",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/WebdriverIONotifier.spec.ts~describe7.describe10",
    "access": null,
    "description": "notifications",
    "lineNumber": 157
  },
  {
    "__docId__": 702,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "spec/adapter/WebdriverIONotifier.spec.ts~describe7.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/WebdriverIONotifier.spec.ts~describe7.describe10.it11",
    "access": null,
    "description": "emits events when a test suite starts and is finished",
    "lineNumber": 159
  },
  {
    "__docId__": 703,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "spec/adapter/WebdriverIONotifier.spec.ts~describe7.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/WebdriverIONotifier.spec.ts~describe7.describe10.it12",
    "access": null,
    "description": "emits events when a nested test suite starts and is finished",
    "lineNumber": 201
  },
  {
    "__docId__": 704,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "spec/adapter/WebdriverIONotifier.spec.ts~describe7.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/WebdriverIONotifier.spec.ts~describe7.describe10.it13",
    "access": null,
    "description": "emits events when a nested test starts and is finished",
    "lineNumber": 274
  },
  {
    "__docId__": 705,
    "kind": "testFile",
    "name": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect } from '@integration/testing-tools';\nimport { Clock, Serenity } from '@serenity-js/core';\nimport { SceneTagged } from '@serenity-js/core/lib/events';\nimport { BrowserTag, PlatformTag } from '@serenity-js/core/lib/model';\nimport { Capabilities } from '@wdio/types';\nimport { RunnerStart } from '@wdio/types/build/Options';\nimport { PassThrough } from 'stream';\n\nimport { BrowserCapabilitiesReporter } from '../../../src/adapter/reporter';\n\ndescribe('BrowserCapabilitiesReporter', () => {\n    \n    const\n        someTestStartEvent  = {},\n        now                 = new Date(0),\n        frozenClock         = new Clock(() => now);\n\n    let browserDetector: BrowserCapabilitiesReporter,\n        serenity: Serenity,\n        recorder: EventRecorder;\n    \n    beforeEach(() => {\n\n        serenity = new Serenity(frozenClock);\n        recorder = new EventRecorder();\n\n        serenity.configure({\n            crew: [ recorder ]\n        });\n\n        browserDetector = new BrowserCapabilitiesReporter({\n            serenity:       serenity,\n            writeStream:    new PassThrough(), // nothing gets printed to writeStream as this is not a \"real\" WebdriverIO reporter\n        });\n    });\n\n    describe('when working with a single browser/device', () => {\n\n        it('records browser and platform tags when the test run starts and emits them upon start of the scenario', () => {\n            \n            // record tags\n            browserDetector.emit('runner:start', runnerStart({\n                isMultiremote: false,\n                capabilities: {\n                    browserName:        'Chrome Headless',\n                    browserVersion:     '90.0.4430.212',\n                    platformName:       'darwin',\n                    platformVersion:    '20.4.0',\n                },\n            }));\n\n            // pretend a new scenario has started\n            const sceneId = serenity.assignNewSceneId();\n            \n            // trigger tag emission\n            browserDetector.emit('test:start', someTestStartEvent);\n\n            expect(recorder.events).to.have.lengthOf(2);\n            expect(recorder.events[0]).to.equal(new SceneTagged(\n                sceneId,\n                new BrowserTag('Chrome Headless', '90.0.4430.212'),\n                serenity.currentTime(),\n            ));\n            expect(recorder.events[1]).to.equal(new SceneTagged(\n                sceneId,\n                new PlatformTag('darwin', '20.4.0'),\n                serenity.currentTime(),\n            ));\n        });\n\n        it('emits the recorded tags whenever a new test scenario starts', () => {\n\n            // record tags\n            browserDetector.emit('runner:start', runnerStart({\n                isMultiremote: false,\n                capabilities: {\n                    browserName:        'Chrome Headless',\n                    browserVersion:     '90.0.4430.212',\n                    platformName:       'darwin',\n                    platformVersion:    '20.4.0',\n                },\n            }));\n\n            // pretend first scenario has started\n            const firstSceneId = serenity.assignNewSceneId();\n\n            // trigger tag emission\n            browserDetector.emit('test:start', someTestStartEvent);\n\n            expect(recorder.events).to.have.lengthOf(2);\n            expect(recorder.events[0]).to.equal(new SceneTagged(\n                firstSceneId,\n                new BrowserTag('Chrome Headless', '90.0.4430.212'),\n                serenity.currentTime(),\n            ));\n            expect(recorder.events[1]).to.equal(new SceneTagged(\n                firstSceneId,\n                new PlatformTag('darwin', '20.4.0'),\n                serenity.currentTime(),\n            ));\n\n            // pretend second scenario has started\n            const secondSceneId = serenity.assignNewSceneId();\n\n            // trigger tag emission again\n            browserDetector.emit('test:start', someTestStartEvent);\n\n            expect(recorder.events).to.have.lengthOf(4);\n            expect(recorder.events[2]).to.equal(new SceneTagged(\n                secondSceneId,\n                new BrowserTag('Chrome Headless', '90.0.4430.212'),\n                serenity.currentTime(),\n            ));\n            expect(recorder.events[3]).to.equal(new SceneTagged(\n                secondSceneId,\n                new PlatformTag('darwin', '20.4.0'),\n                serenity.currentTime(),\n            ));\n        });\n    });\n\n    describe('when working with multiple browsers/devices', () => {\n\n        it('emits only unique browser and platform tags', () => {\n\n            // record tags\n            browserDetector.emit('runner:start', runnerStart({\n                isMultiremote: true,\n                capabilities: {\n                    AliceMac: {\n                        browserName:        'Chrome Headless',\n                        browserVersion:     '90.0.4430.212',\n                        platformName:       'darwin',\n                        platformVersion:    '20.4.0',\n                    },\n                    BenWindows: {\n                        browserName:        'Chrome Headless',\n                        browserVersion:     '90.0.4430.212',\n                        os:                 'Windows',\n                        os_version:         '10'\n                    },\n                    CindyMobile: {\n                        deviceName:         'iPhone 6 Plus',\n                        platformVersion:    '9.2',\n                        platformName:       'iOS',\n                        app:                'sauce-storage:myApp.app',\n                    },\n                },\n            }));\n\n            // pretend a new scenario has started\n            const sceneId = serenity.assignNewSceneId();\n\n            // trigger tag emission\n            browserDetector.emit('test:start', someTestStartEvent);\n\n            expect(recorder.events).to.have.lengthOf(5);\n            expect(recorder.events[0]).to.equal(new SceneTagged(\n                sceneId,\n                new BrowserTag('Chrome Headless', '90.0.4430.212'),\n                serenity.currentTime(),\n            ));\n            expect(recorder.events[1]).to.equal(new SceneTagged(\n                sceneId,\n                new PlatformTag('darwin', '20.4.0'),\n                serenity.currentTime(),\n            ));\n            expect(recorder.events[2]).to.equal(new SceneTagged(\n                sceneId,\n                new PlatformTag('Windows', '10'),\n                serenity.currentTime(),\n            ));\n            expect(recorder.events[3]).to.equal(new SceneTagged(\n                sceneId,\n                new BrowserTag('myApp.app', 'iPhone 6 Plus'),\n                serenity.currentTime(),\n            ));\n            expect(recorder.events[4]).to.equal(new SceneTagged(\n                sceneId,\n                new PlatformTag('iOS', '9.2'),\n                serenity.currentTime(),\n            ));\n        });\n    });\n});\n\ntype MultiremoteCapabilities = Record<string, Capabilities.DesiredCapabilities | Capabilities.W3CCapabilities>;\n\n/**\n * Fixme: it looks like WDIO RunnerStart 7.4.2 implementation incorrectly defines MultiremoteCapabilities\n *  below is the correct representation of what the reporter actually receives\n */\ntype RunnerStartEvent = RunnerStart & { capabilities: Capabilities.DesiredCapabilities | Capabilities.W3CCapabilities | MultiremoteCapabilities }\n\nfunction runnerStart(overrides: Partial<RunnerStartEvent>): RunnerStartEvent {\n    return {\n        cid: '0-0',\n        isMultiremote: false,\n        sessionId: 'fake-session-id',\n        specs: [ '/path/to/fake.spec.ts' ],\n        instanceOptions: undefined,\n        capabilities: undefined,\n        config: undefined,\n        ...overrides\n    };\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 706,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14",
    "access": null,
    "description": "BrowserCapabilitiesReporter",
    "lineNumber": 13
  },
  {
    "__docId__": 707,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14.describe15",
    "access": null,
    "description": "when working with a single browser/device",
    "lineNumber": 39
  },
  {
    "__docId__": 708,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14.describe15.it16",
    "access": null,
    "description": "records browser and platform tags when the test run starts and emits them upon start of the scenario",
    "lineNumber": 41
  },
  {
    "__docId__": 709,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14.describe15.it17",
    "access": null,
    "description": "emits the recorded tags whenever a new test scenario starts",
    "lineNumber": 73
  },
  {
    "__docId__": 710,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14.describe18",
    "access": null,
    "description": "when working with multiple browsers/devices",
    "lineNumber": 124
  },
  {
    "__docId__": 711,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/BrowserCapabilitiesReporter.spec.ts~describe14.describe18.it19",
    "access": null,
    "description": "emits only unique browser and platform tags",
    "lineNumber": 126
  },
  {
    "__docId__": 712,
    "kind": "testFile",
    "name": "spec/adapter/reporter/OutputStreamBuffer.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\n\nimport { OutputStreamBuffer } from '../../../src/adapter/reporter';\n\ndescribe('OutputStreamBuffer', () => {\n\n    let buffer: OutputStreamBuffer;\n\n    beforeEach(() => {\n        buffer  = new OutputStreamBuffer('[prefix]');\n    });\n\n    it(`prefixes a line of content written to it`, () => {\n        buffer.write('Hello');\n        buffer.write(' ');\n        buffer.write('World');\n\n        expect(buffer.flush()).to.equal('[prefix] Hello World\\n');\n    });\n\n    it(`prefixes multi-line content`, () => {\n        buffer.write('first\\nsecond\\nthird');\n\n        expect(buffer.flush()).to.equal(`[prefix] first\\n[prefix] second\\n[prefix] third\\n`);\n    });\n\n    it(`clears the buffer when flushed`, () => {\n        buffer.write('Hello World!');\n        expect(buffer.flush()).to.equal('[prefix] Hello World!\\n');\n        expect(buffer.flush()).to.equal('[prefix] \\n');\n    });\n\n    it(`knows when content has been written to it`, () => {\n        expect(buffer.hasContent()).to.equal(false);\n\n        buffer.write('');\n        expect(buffer.hasContent()).to.equal(false);\n\n        buffer.write('hello!');\n        expect(buffer.hasContent()).to.equal(true);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/adapter/reporter/OutputStreamBuffer.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 713,
    "kind": "test",
    "name": "describe20",
    "testId": 20,
    "memberof": "spec/adapter/reporter/OutputStreamBuffer.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/reporter/OutputStreamBuffer.spec.ts~describe20",
    "access": null,
    "description": "OutputStreamBuffer",
    "lineNumber": 7
  },
  {
    "__docId__": 714,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "spec/adapter/reporter/OutputStreamBuffer.spec.ts~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/OutputStreamBuffer.spec.ts~describe20.it21",
    "access": null,
    "lineNumber": 15
  },
  {
    "__docId__": 715,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "spec/adapter/reporter/OutputStreamBuffer.spec.ts~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/OutputStreamBuffer.spec.ts~describe20.it22",
    "access": null,
    "lineNumber": 23
  },
  {
    "__docId__": 716,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "spec/adapter/reporter/OutputStreamBuffer.spec.ts~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/OutputStreamBuffer.spec.ts~describe20.it23",
    "access": null,
    "lineNumber": 29
  },
  {
    "__docId__": 717,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "spec/adapter/reporter/OutputStreamBuffer.spec.ts~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/OutputStreamBuffer.spec.ts~describe20.it24",
    "access": null,
    "lineNumber": 35
  },
  {
    "__docId__": 718,
    "kind": "testFile",
    "name": "spec/adapter/reporter/TagPrinter.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { BrowserTag, PlatformTag } from '@serenity-js/core/lib/model';\n\nimport { TagPrinter } from '../../../src/adapter/reporter';\n\ndescribe('TagPrinter', () => {\n\n    let tagPrinter: TagPrinter;\n    beforeEach(() => {\n        tagPrinter = new TagPrinter();\n    });\n\n    describe('when working with a mobile device', () => {\n\n        it('should tag browser and platform for mobile web browser', () => {\n            const tags = tagPrinter.tagsFor({\n                deviceName:         'iPhone 6 Plus',\n                platformVersion:    '9.2',\n                platformName:       'iOS',\n                browserName:        'Safari'\n            });\n\n            expect(tags).have.lengthOf(2);\n            expect(tags[0]).to.equal(new BrowserTag('Safari', 'iPhone 6 Plus'));\n            expect(tags[1]).to.equal(new PlatformTag('iOS', '9.2'));\n        });\n\n        it('should mark browser as \"unknown\" when information is missing', () => {\n            const tags = tagPrinter.tagsFor({\n                deviceName:         'iPhone 6 Plus',\n                platformVersion:    '9.2',\n                platformName:       'iOS'\n            });\n\n            expect(tags).have.lengthOf(2);\n            expect(tags[0]).to.equal(new BrowserTag('unknown', 'iPhone 6 Plus'));\n            expect(tags[1]).to.equal(new PlatformTag('iOS', '9.2'));\n        });\n\n        it('should tag the native app as \"browser\"', () => {\n            const tags = tagPrinter.tagsFor({\n                deviceName:         'iPhone 6 Plus',\n                platformVersion:    '9.2',\n                platformName:       'iOS',\n                app:                'sauce-storage:myApp.app'\n            });\n\n            expect(tags).have.lengthOf(2);\n            expect(tags[0]).to.equal(new BrowserTag('myApp.app', 'iPhone 6 Plus'));\n            expect(tags[1]).to.equal(new PlatformTag('iOS', '9.2'));\n        });\n\n        it('should tag a simulator', () => {\n            // https://appium.io/docs/en/writing-running-appium/caps/\n            const tags = tagPrinter.tagsFor({\n                automationName: 'XCUITest',\n                browserName: 'Safari',\n                deviceName: 'iPhone Simulator',\n                platformName: 'iOS',\n                platformVersion: undefined,\n                udid: undefined,\n            });\n\n            expect(tags).have.lengthOf(2);\n            expect(tags[0]).to.equal(new BrowserTag('Safari', 'iPhone Simulator'));\n            expect(tags[1]).to.equal(new PlatformTag('iOS'));\n        });\n    })\n\n    describe('when working with a single browser', () => {\n\n        it('should tag \"platform\" as unknown where the information is missing', () => {\n            const tags = tagPrinter.tagsFor({\n                browserName:    'chrome',\n                version:        '50',\n            });\n\n            expect(tags).have.lengthOf(2);\n            expect(tags[0]).to.equal(new BrowserTag('chrome', '50'));\n            expect(tags[1]).to.equal(new PlatformTag('unknown'));\n        });\n\n        it('should tag both browser and platform, where platformVersion is not available', () => {\n            const tags = tagPrinter.tagsFor({\n                browserName:    'chrome',\n                version:        '50',\n                platform:       'Windows 8.1'\n            });\n\n            expect(tags).have.lengthOf(2);\n            expect(tags[0]).to.equal(new BrowserTag('chrome', '50'));\n            expect(tags[1]).to.equal(new PlatformTag('Windows 8.1'));\n        });\n\n        it('should tag both browser and platform, where platformVersion is available', () => {\n            const tags = tagPrinter.tagsFor({\n                browserName:        'Chrome Headless',\n                browserVersion:     '90.0.4430.212',\n                platformName:       'darwin',\n                platformVersion:    '20.4.0',\n            });\n\n            expect(tags).have.lengthOf(2);\n            expect(tags[0]).to.equal(new BrowserTag('Chrome Headless', '90.0.4430.212'));\n            expect(tags[1]).to.equal(new PlatformTag('darwin', '20.4.0'));\n        });\n\n        describe('running on BrowserStack', () => {\n\n            it('should correctly describe desired capabilities when \"os\" is given', () => {\n                const tags = tagPrinter.tagsFor({\n                    browser:            'Chrome',\n                    browser_version:    '50',\n                    os:                 'Windows',\n                    os_version:         '10'\n                });\n\n                expect(tags).have.lengthOf(2);\n                expect(tags[0]).to.equal(new BrowserTag('Chrome', '50'));\n                expect(tags[1]).to.equal(new PlatformTag('Windows', '10'));\n            });\n\n            it('should tag \"platform\" as unknown where \"os\" is missing', () => {\n                const tags = tagPrinter.tagsFor({\n                    browser:            'Chrome',\n                    browser_version:    '50',\n                });\n\n                expect(tags).have.lengthOf(2);\n                expect(tags[0]).to.equal(new BrowserTag('Chrome', '50'));\n                expect(tags[1]).to.equal(new PlatformTag('unknown'));\n            });\n\n            it('should tag \"platform\" even when \"os_version\" is missing', () => {\n                const tags = tagPrinter.tagsFor({\n                    browser:            'Chrome',\n                    browser_version:    '50',\n                    os:                 'Windows',\n                });\n\n                expect(tags).have.lengthOf(2);\n                expect(tags[0]).to.equal(new BrowserTag('Chrome', '50'));\n                expect(tags[1]).to.equal(new PlatformTag('Windows'));\n            });\n        });\n\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/adapter/reporter/TagPrinter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 719,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25",
    "access": null,
    "description": "TagPrinter",
    "lineNumber": 8
  },
  {
    "__docId__": 720,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe26",
    "access": null,
    "description": "when working with a mobile device",
    "lineNumber": 15
  },
  {
    "__docId__": 721,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe26.it27",
    "access": null,
    "description": "should tag browser and platform for mobile web browser",
    "lineNumber": 17
  },
  {
    "__docId__": 722,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe26.it28",
    "access": null,
    "description": "should mark browser as \"unknown\" when information is missing",
    "lineNumber": 30
  },
  {
    "__docId__": 723,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe26.it29",
    "access": null,
    "description": "should tag the native app as \"browser\"",
    "lineNumber": 42
  },
  {
    "__docId__": 724,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe26",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe26.it30",
    "access": null,
    "description": "should tag a simulator",
    "lineNumber": 55
  },
  {
    "__docId__": 725,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31",
    "access": null,
    "description": "when working with a single browser",
    "lineNumber": 72
  },
  {
    "__docId__": 726,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31.it32",
    "access": null,
    "description": "should tag \"platform\" as unknown where the information is missing",
    "lineNumber": 74
  },
  {
    "__docId__": 727,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31.it33",
    "access": null,
    "description": "should tag both browser and platform, where platformVersion is not available",
    "lineNumber": 85
  },
  {
    "__docId__": 728,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31.it34",
    "access": null,
    "description": "should tag both browser and platform, where platformVersion is available",
    "lineNumber": 97
  },
  {
    "__docId__": 729,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31",
    "testDepth": 2,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31.describe35",
    "access": null,
    "description": "running on BrowserStack",
    "lineNumber": 110
  },
  {
    "__docId__": 730,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31.describe35",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31.describe35.it36",
    "access": null,
    "description": "should correctly describe desired capabilities when \"os\" is given",
    "lineNumber": 112
  },
  {
    "__docId__": 731,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31.describe35",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31.describe35.it37",
    "access": null,
    "description": "should tag \"platform\" as unknown where \"os\" is missing",
    "lineNumber": 125
  },
  {
    "__docId__": 732,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31.describe35",
    "testDepth": 3,
    "static": true,
    "longname": "spec/adapter/reporter/TagPrinter.spec.ts~describe25.describe31.describe35.it38",
    "access": null,
    "description": "should tag \"platform\" even when \"os_version\" is missing",
    "lineNumber": 136
  },
  {
    "__docId__": 733,
    "kind": "testFile",
    "name": "spec/expectations/isActive.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, not } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\n\nimport { by, Click, isActive, Navigate, Target, Wait } from '../../src';\n\ndescribe('isActive', function () {\n\n    const Page = {\n        activeInput:       Target.the('active input').located(by.id('active')),\n        inactiveInput:     Target.the('inactive input').located(by.id('inactive')),\n    };\n\n    beforeEach(() =>\n        actorCalled('Wendy').attemptsTo(\n            Navigate.to('/expectations/is-active/active_inactive_inputs.html'),\n        ));\n\n    /** @test {isActive} */\n    it('allows the actor flow to continue when the element is active', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Wait.until(Page.activeInput, not(isActive())),\n            Ensure.that(Page.activeInput, not(isActive())),\n            Click.on(Page.activeInput),\n            Wait.until(Page.activeInput, isActive()),\n            Ensure.that(Page.activeInput, isActive()),\n        )).to.be.fulfilled);\n\n    /** @test {isActive} */\n    it('breaks the actor flow when element is inactive', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Ensure.that(Page.inactiveInput, isActive()),\n        )).to.be.rejectedWith(AssertionError, `Expected the inactive input to become active`));\n\n    /** @test {isActive} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.activeInput, isActive()).toString())\n            .to.equal(`#actor ensures that the active input does become active`);\n    });\n\n    /** @test {isActive} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.activeInput, isActive()).toString())\n            .to.equal(`#actor waits up to 5s until the active input does become active`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/expectations/isActive.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 734,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "spec/expectations/isActive.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe39",
    "access": null,
    "description": "isActive",
    "lineNumber": 9
  },
  {
    "__docId__": 735,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "spec/expectations/isActive.spec.ts~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe39.it40",
    "access": null,
    "description": "allows the actor flow to continue when the element is active",
    "lineNumber": 22,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 736,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "spec/expectations/isActive.spec.ts~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe39.it41",
    "access": null,
    "description": "breaks the actor flow when element is inactive",
    "lineNumber": 32,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 737,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "spec/expectations/isActive.spec.ts~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe39.it42",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 38,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 738,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "spec/expectations/isActive.spec.ts~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isActive.spec.ts~describe39.it43",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 44,
    "testTargets": [
      "isActive"
    ]
  },
  {
    "__docId__": 739,
    "kind": "testFile",
    "name": "spec/expectations/isClickable.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\n\nimport { by, isClickable, Navigate, Target, Wait } from '../../src';\n\ndescribe('isClickable', function () {\n\n    const Page = {\n        enabledButton:     Target.the('enabled button').located(by.id('enabled')),\n        disabledButton:    Target.the('disabled button').located(by.id('disabled')),\n        hiddenButton:      Target.the('hidden button').located(by.id('hidden')),\n    };\n\n    beforeEach(() =>\n        actorCalled('Wendy').attemptsTo(\n            Navigate.to('/expectations/is-clickable/buttons.html'),\n        ));\n\n    /** @test {isClickable} */\n    it('allows the actor flow to continue when the element is clickable', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Wait.until(Page.enabledButton, isClickable()),\n            Ensure.that(Page.enabledButton, isClickable()),\n        )).to.be.fulfilled);\n\n    /** @test {isClickable} */\n    it('breaks the actor flow when element is disabled', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Ensure.that(Page.disabledButton, isClickable()),\n        )).to.be.rejectedWith(AssertionError, `Expected the disabled button to become clickable`));\n\n    /** @test {isClickable} */\n    it('breaks the actor flow when element is not visible', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Ensure.that(Page.hiddenButton, isClickable()),\n        )).to.be.rejectedWith(AssertionError, `Expected the hidden button to become clickable`));\n\n    /** @test {isClickable} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.enabledButton, isClickable()).toString())\n            .to.equal(`#actor ensures that the enabled button does become clickable`);\n    });\n\n    /** @test {isClickable} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.enabledButton, isClickable()).toString())\n            .to.equal(`#actor waits up to 5s until the enabled button does become clickable`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/expectations/isClickable.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 740,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "spec/expectations/isClickable.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe44",
    "access": null,
    "description": "isClickable",
    "lineNumber": 9
  },
  {
    "__docId__": 741,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "spec/expectations/isClickable.spec.ts~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe44.it45",
    "access": null,
    "description": "allows the actor flow to continue when the element is clickable",
    "lineNumber": 23,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 742,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "spec/expectations/isClickable.spec.ts~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe44.it46",
    "access": null,
    "description": "breaks the actor flow when element is disabled",
    "lineNumber": 30,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 743,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "spec/expectations/isClickable.spec.ts~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe44.it47",
    "access": null,
    "description": "breaks the actor flow when element is not visible",
    "lineNumber": 36,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 744,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "spec/expectations/isClickable.spec.ts~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe44.it48",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 42,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 745,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "spec/expectations/isClickable.spec.ts~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isClickable.spec.ts~describe44.it49",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 48,
    "testTargets": [
      "isClickable"
    ]
  },
  {
    "__docId__": 746,
    "kind": "testFile",
    "name": "spec/expectations/isEnabled.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\n\nimport { by, isEnabled, Navigate, Target, Wait } from '../../src';\n\ndescribe('isEnabled', function () {\n\n    const Page = {\n        enabledButton:     Target.the('enabled button').located(by.id('enabled')),\n        disabledButton:    Target.the('disabled button').located(by.id('disabled')),\n        hiddenButton:      Target.the('hidden button').located(by.id('hidden')),\n    };\n\n    beforeEach(() =>\n        actorCalled('Wendy').attemptsTo(\n            Navigate.to('/expectations/is-enabled/buttons.html'),\n        ));\n\n    /** @test {isEnabled} */\n    it('allows the actor flow to continue when the element is enabled', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Wait.until(Page.enabledButton, isEnabled()),\n            Ensure.that(Page.enabledButton, isEnabled()),\n        )).to.be.fulfilled);\n\n    /** @test {isEnabled} */\n    it('breaks the actor flow when element is disabled', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Ensure.that(Page.disabledButton, isEnabled()),\n        )).to.be.rejectedWith(AssertionError, `Expected the disabled button to become enabled`));\n\n    /** @test {isEnabled} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.enabledButton, isEnabled()).toString())\n            .to.equal(`#actor ensures that the enabled button does become enabled`);\n    });\n\n    /** @test {isEnabled} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.enabledButton, isEnabled()).toString())\n            .to.equal(`#actor waits up to 5s until the enabled button does become enabled`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/expectations/isEnabled.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 747,
    "kind": "test",
    "name": "describe50",
    "testId": 50,
    "memberof": "spec/expectations/isEnabled.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe50",
    "access": null,
    "description": "isEnabled",
    "lineNumber": 9
  },
  {
    "__docId__": 748,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe50",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe50.it51",
    "access": null,
    "description": "allows the actor flow to continue when the element is enabled",
    "lineNumber": 23,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 749,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe50",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe50.it52",
    "access": null,
    "description": "breaks the actor flow when element is disabled",
    "lineNumber": 30,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 750,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe50",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe50.it53",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 36,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 751,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "spec/expectations/isEnabled.spec.ts~describe50",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isEnabled.spec.ts~describe50.it54",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 42,
    "testTargets": [
      "isEnabled"
    ]
  },
  {
    "__docId__": 752,
    "kind": "testFile",
    "name": "spec/expectations/isPresent.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError, Duration } from '@serenity-js/core';\nimport { ErrorSerialiser } from '@serenity-js/core/lib/io';\n\nimport { by, isPresent, Navigate, Target, Wait } from '../../src';\n\ndescribe('isPresent', function () {\n\n    const Page = {\n        presentHeader:         Target.the('header').located(by.tagName('h1')),\n        nonExistentHeader:    Target.the('non-existent header').located(by.tagName('h2')),\n    };\n\n    beforeEach(() =>\n        actorCalled('Wendy').attemptsTo(\n            Navigate.to('/expectations/is-present/hello_world.html'),\n        ));\n\n    /** @test {isPresent} */\n    it('allows the actor flow to continue when the element is present in the DOM', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Wait.until(Page.presentHeader, isPresent()),\n            Ensure.that(Page.presentHeader, isPresent()),\n        )).to.be.fulfilled);\n\n    /** @test {isPresent} */\n    it('breaks the actor flow when element does not become present in the DOM', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Wait.upTo(Duration.ofMilliseconds(250)).until(Page.nonExistentHeader, isPresent()),\n        )).to.be.rejectedWith(AssertionError, `Waited 250ms for the non-existent header to become present`));\n\n    /** @test {isPresent} */\n    it('breaks the actor flow when element is not present in the DOM', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Ensure.that(Page.nonExistentHeader, isPresent()),\n        )).to.be.rejectedWith(AssertionError, `Expected the non-existent header to become present`));\n\n    /** @test {isPresent} */\n    it(`produces an assertion error that can be serialised with ErrorSerialiser`, () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Ensure.that(Page.nonExistentHeader, isPresent()),\n        )).to.be.rejectedWith(AssertionError, `Expected the non-existent header to become present`)\n            .then((error: AssertionError) => {\n                expect(ErrorSerialiser.serialise(error)).to.be.a('string');\n            }));\n\n    /** @test {isPresent} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.presentHeader, isPresent()).toString())\n            .to.equal(`#actor ensures that the header does become present`);\n    });\n\n    /** @test {isPresent} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.presentHeader, isPresent()).toString())\n            .to.equal(`#actor waits up to 5s until the header does become present`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/expectations/isPresent.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 753,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "spec/expectations/isPresent.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe55",
    "access": null,
    "description": "isPresent",
    "lineNumber": 10
  },
  {
    "__docId__": 754,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "spec/expectations/isPresent.spec.ts~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe55.it56",
    "access": null,
    "description": "allows the actor flow to continue when the element is present in the DOM",
    "lineNumber": 23,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 755,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "spec/expectations/isPresent.spec.ts~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe55.it57",
    "access": null,
    "description": "breaks the actor flow when element does not become present in the DOM",
    "lineNumber": 30,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 756,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "spec/expectations/isPresent.spec.ts~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe55.it58",
    "access": null,
    "description": "breaks the actor flow when element is not present in the DOM",
    "lineNumber": 36,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 757,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "spec/expectations/isPresent.spec.ts~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe55.it59",
    "access": null,
    "lineNumber": 42,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 758,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "spec/expectations/isPresent.spec.ts~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe55.it60",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 51,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 759,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "spec/expectations/isPresent.spec.ts~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isPresent.spec.ts~describe55.it61",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 57,
    "testTargets": [
      "isPresent"
    ]
  },
  {
    "__docId__": 760,
    "kind": "testFile",
    "name": "spec/expectations/isSelected.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\n\nimport { by, isSelected, Navigate, Target, Wait } from '../../src';\n\ndescribe('isSelected', function () {\n\n    const Languages = {\n        typeScript: Target.the('TypeScript option').located(by.css('select[name=\"languages\"] > option[value=\"TypeScript\"]')),\n        javaScript: Target.the('JavaScript option').located(by.css('select[name=\"languages\"] > option[value=\"JavaScript\"]')),\n        java:       Target.the('Java option').located(by.css('select[name=\"languages\"] > option[value=\"Java\"]')),\n    };\n\n    beforeEach(() =>\n        actorCalled('Wendy').attemptsTo(\n            Navigate.to('/expectations/is-selected/programming_languages.html'),\n        ));\n\n    /** @test {isSelected} */\n    it('allows the actor flow to continue when the element is selected', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Wait.until(Languages.typeScript, isSelected()),\n            Ensure.that(Languages.typeScript, isSelected()),\n        )).to.be.fulfilled);\n\n    /** @test {isSelected} */\n    it('breaks the actor flow when element is not selected', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Ensure.that(Languages.javaScript, isSelected()),\n        )).to.be.rejectedWith(AssertionError, `Expected the JavaScript option to become selected`));\n\n    /** @test {isSelected} */\n    it('breaks the actor flow when element is not present', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Ensure.that(Languages.java, isSelected()),\n        )).to.be.rejectedWith(AssertionError, `Expected the Java option to become selected (Can't call isSelected on element with selector \"select[name=\"languages\"] > option[value=\"Java\"]\" because element wasn't found)`));\n\n    /** @test {isSelected} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Languages.typeScript, isSelected()).toString())\n            .to.equal(`#actor ensures that the TypeScript option does become selected`);\n    });\n\n    /** @test {isSelected} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Languages.typeScript, isSelected()).toString())\n            .to.equal(`#actor waits up to 5s until the TypeScript option does become selected`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/expectations/isSelected.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 761,
    "kind": "test",
    "name": "describe62",
    "testId": 62,
    "memberof": "spec/expectations/isSelected.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe62",
    "access": null,
    "description": "isSelected",
    "lineNumber": 9
  },
  {
    "__docId__": 762,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "spec/expectations/isSelected.spec.ts~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe62.it63",
    "access": null,
    "description": "allows the actor flow to continue when the element is selected",
    "lineNumber": 23,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 763,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "spec/expectations/isSelected.spec.ts~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe62.it64",
    "access": null,
    "description": "breaks the actor flow when element is not selected",
    "lineNumber": 30,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 764,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "spec/expectations/isSelected.spec.ts~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe62.it65",
    "access": null,
    "description": "breaks the actor flow when element is not present",
    "lineNumber": 36,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 765,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "spec/expectations/isSelected.spec.ts~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe62.it66",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 42,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 766,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "spec/expectations/isSelected.spec.ts~describe62",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isSelected.spec.ts~describe62.it67",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 48,
    "testTargets": [
      "isSelected"
    ]
  },
  {
    "__docId__": 767,
    "kind": "testFile",
    "name": "spec/expectations/isVisible.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError } from '@serenity-js/core';\n\nimport { by, isVisible, Navigate, Target, Wait } from '../../src';\n\ndescribe('isVisible', function () {\n\n    const Page = {\n        visibleHeader:        Target.the('header').located(by.tagName('h1')),\n        invisibleHeader:      Target.the('invisible header').located(by.tagName('h2')),\n        nonExistentHeader:   Target.the('non-existent header').located(by.tagName('h3')),\n    };\n\n    beforeEach(() =>\n        actorCalled('Wendy').attemptsTo(\n            Navigate.to('/expectations/is-visible/visibility.html'),\n        ));\n\n    /** @test {isVisible} */\n    it('allows the actor flow to continue when the element is visible', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Wait.until(Page.visibleHeader, isVisible()),\n            Ensure.that(Page.visibleHeader, isVisible()),\n        )).to.be.fulfilled);\n\n    /** @test {isVisible} */\n    it('breaks the actor flow when element is not visible', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Ensure.that(Page.invisibleHeader, isVisible()),\n        )).to.be.rejectedWith(AssertionError, `Expected the invisible header to become visible`));\n\n    /** @test {isVisible} */\n    it('breaks the actor flow when element does not exist', () =>\n        expect(actorCalled('Wendy').attemptsTo(\n            Ensure.that(Page.nonExistentHeader, isVisible()),\n        )).to.be.rejectedWith(AssertionError, `Expected the non-existent header to become visible`));\n\n    /** @test {isVisible} */\n    it('contributes to a human-readable description of an assertion', () => {\n        expect(Ensure.that(Page.visibleHeader, isVisible()).toString())\n            .to.equal(`#actor ensures that the header does become visible`);\n    });\n\n    /** @test {isVisible} */\n    it('contributes to a human-readable description of a wait', () => {\n        expect(Wait.until(Page.visibleHeader, isVisible()).toString())\n            .to.equal(`#actor waits up to 5s until the header does become visible`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/expectations/isVisible.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 768,
    "kind": "test",
    "name": "describe68",
    "testId": 68,
    "memberof": "spec/expectations/isVisible.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe68",
    "access": null,
    "description": "isVisible",
    "lineNumber": 9
  },
  {
    "__docId__": 769,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "spec/expectations/isVisible.spec.ts~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe68.it69",
    "access": null,
    "description": "allows the actor flow to continue when the element is visible",
    "lineNumber": 23,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 770,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "spec/expectations/isVisible.spec.ts~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe68.it70",
    "access": null,
    "description": "breaks the actor flow when element is not visible",
    "lineNumber": 30,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 771,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "spec/expectations/isVisible.spec.ts~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe68.it71",
    "access": null,
    "description": "breaks the actor flow when element does not exist",
    "lineNumber": 36,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 772,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "spec/expectations/isVisible.spec.ts~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe68.it72",
    "access": null,
    "description": "contributes to a human-readable description of an assertion",
    "lineNumber": 42,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 773,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "spec/expectations/isVisible.spec.ts~describe68",
    "testDepth": 1,
    "static": true,
    "longname": "spec/expectations/isVisible.spec.ts~describe68.it73",
    "access": null,
    "description": "contributes to a human-readable description of a wait",
    "lineNumber": 48,
    "testTargets": [
      "isVisible"
    ]
  },
  {
    "__docId__": 774,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Clear.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, LogicError } from '@serenity-js/core';\n\nimport { by, Clear, Navigate, Target, Value } from '../../../src';\n\n/** @test {Clear} */\ndescribe('Clear', () => {\n\n    const Form = {\n        field: Target.the('input field').located(by.id('field')),\n    };\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an empty input', () =>\n        actorCalled('Bernie').attemptsTo(\n            Navigate.to('/screenplay/interactions/clear/empty_input_field.html'),\n\n            Clear.theValueOf(Form.field),\n\n            Ensure.that(Value.of(Form.field), equals('')),\n        ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('does not affect elements with no \"value\" attribute', () =>\n        actorCalled('Bernie').attemptsTo(\n            Navigate.to('/screenplay/interactions/clear/input_field_with_no_value.html'),\n\n            Ensure.that(Value.of(Form.field), equals('')),\n\n            Clear.theValueOf(Form.field),\n\n            Ensure.that(Value.of(Form.field), equals('')),\n        ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an input field', () =>\n        actorCalled('Bernie').attemptsTo(\n            Navigate.to('/screenplay/interactions/clear/input_field_with_value.html'),\n\n            Clear.theValueOf(Form.field),\n\n            Ensure.that(Value.of(Form.field), equals('')),\n        ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an number field', () =>\n        actorCalled('Bernie').attemptsTo(\n            Navigate.to('/screenplay/interactions/clear/number_input_field_with_value.html'),\n\n            Clear.theValueOf(Form.field),\n\n            Ensure.that(Value.of(Form.field), equals('')),\n        ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of a date field', () =>\n        actorCalled('Bernie').attemptsTo(\n            Navigate.to('/screenplay/interactions/clear/date_input_field_with_value.html'),\n\n            Clear.theValueOf(Form.field),\n\n            Ensure.that(Value.of(Form.field), equals('')),\n        ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('allows the actor to clear the value of an RTL input field', () =>\n        actorCalled('Bernie').attemptsTo(\n            Navigate.to('/screenplay/interactions/clear/input_field_with_value_rtl.html'),\n\n            Clear.theValueOf(Form.field),\n\n            Ensure.that(Value.of(Form.field), equals('')),\n        ));\n\n    /** @test {Clear} */\n    /** @test {Clear.theValueOf} */\n    it('complains if the element cannot be cleared', () =>\n        expect(\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to('/screenplay/interactions/clear/not_an_input_field.html'),\n\n                Clear.theValueOf(Form.field),\n            )\n        ).to.be.rejectedWith(LogicError, `The input field doesn't seem to have a 'value' attribute that could be cleared.`));\n\n    /** @test {Clear#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Clear.theValueOf(Form.field).toString())\n            .to.equal('#actor clears the value of the input field');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/Clear.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 775,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "access": null,
    "description": "Clear",
    "lineNumber": 11,
    "testTargets": [
      "Clear"
    ]
  },
  {
    "__docId__": 776,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it75",
    "access": null,
    "description": "allows the actor to clear the value of an empty input",
    "lineNumber": 19,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 777,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it76",
    "access": null,
    "description": "does not affect elements with no \"value\" attribute",
    "lineNumber": 30,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 778,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it77",
    "access": null,
    "description": "allows the actor to clear the value of an input field",
    "lineNumber": 43,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 779,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it78",
    "access": null,
    "description": "allows the actor to clear the value of an number field",
    "lineNumber": 54,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 780,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it79",
    "access": null,
    "description": "allows the actor to clear the value of a date field",
    "lineNumber": 65,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 781,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it80",
    "access": null,
    "description": "allows the actor to clear the value of an RTL input field",
    "lineNumber": 76,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 782,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it81",
    "access": null,
    "description": "complains if the element cannot be cleared",
    "lineNumber": 87,
    "testTargets": [
      "Clear.theValueOf"
    ]
  },
  {
    "__docId__": 783,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "spec/screenplay/interactions/Clear.spec.ts~describe74",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Clear.spec.ts~describe74.it82",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 97,
    "testTargets": [
      "Clear#toString"
    ]
  },
  {
    "__docId__": 784,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Click.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, not } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\n\nimport { by, Click, isSelected, Navigate, Target } from '../../../src';\n\n/** @test {Click} */\ndescribe('Click', () => {\n\n    const Form = {\n        checkbox: Target.the('checkbox').located(by.id('no-spam-please')),\n    };\n\n    /** @test {Click.on} */\n    it('allows the actor to click on an element', () =>\n        actorCalled('Wendy').attemptsTo(\n            Navigate.to('/screenplay/interactions/click/no_spam_form.html'),\n            Ensure.that(Form.checkbox, not(isSelected())),\n\n            Click.on(Form.checkbox),\n\n            Ensure.that(Form.checkbox, isSelected()),\n        ));\n\n    /** @test {Click#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Click.on(Form.checkbox).toString())\n            .to.equal('#actor clicks on the checkbox');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/Click.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 785,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "spec/screenplay/interactions/Click.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Click.spec.ts~describe83",
    "access": null,
    "description": "Click",
    "lineNumber": 10,
    "testTargets": [
      "Click"
    ]
  },
  {
    "__docId__": 786,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "spec/screenplay/interactions/Click.spec.ts~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Click.spec.ts~describe83.it84",
    "access": null,
    "description": "allows the actor to click on an element",
    "lineNumber": 17,
    "testTargets": [
      "Click.on"
    ]
  },
  {
    "__docId__": 787,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "spec/screenplay/interactions/Click.spec.ts~describe83",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Click.spec.ts~describe83.it85",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 28,
    "testTargets": [
      "Click#toString"
    ]
  },
  {
    "__docId__": 788,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/DoubleClick.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\n\nimport { by, DoubleClick, Navigate, Target, Text } from '../../../src';\n\ndescribe('DoubleClick', () => {\n\n    const interactiveElement = Target.the('interactive element').located(by.id('double-click-me'));\n\n    /** @test {DoubleClick} */\n    /** @test {DoubleClick.on} */\n    it('allows the actor to clear the value of a field', () =>\n        actorCalled('Bernie').attemptsTo(\n            Navigate.to('/screenplay/interactions/double-click/example.html'),\n\n            DoubleClick.on(interactiveElement),\n\n            Ensure.that(Text.of(interactiveElement), equals('done!')),\n        ));\n\n    /** @test {DoubleClick#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(DoubleClick.on(interactiveElement).toString())\n            .to.equal('#actor double-clicks on the interactive element');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/DoubleClick.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 789,
    "kind": "test",
    "name": "describe86",
    "testId": 86,
    "memberof": "spec/screenplay/interactions/DoubleClick.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/DoubleClick.spec.ts~describe86",
    "access": null,
    "description": "DoubleClick",
    "lineNumber": 9
  },
  {
    "__docId__": 790,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "spec/screenplay/interactions/DoubleClick.spec.ts~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/DoubleClick.spec.ts~describe86.it87",
    "access": null,
    "description": "allows the actor to clear the value of a field",
    "lineNumber": 15,
    "testTargets": [
      "DoubleClick.on"
    ]
  },
  {
    "__docId__": 791,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "spec/screenplay/interactions/DoubleClick.spec.ts~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/DoubleClick.spec.ts~describe86.it88",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 25,
    "testTargets": [
      "DoubleClick#toString"
    ]
  },
  {
    "__docId__": 792,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Enter.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\n\nimport { by, Enter, Navigate, Target, Value } from '../../../src';\n\n/** @test {Enter} */\ndescribe('Enter', () => {\n\n    const Form = {\n        field: Target.the('name field').located(by.id('field')),\n        result: Target.the('result').located(by.id('result')),\n    };\n\n    /** @test {Enter} */\n    /** @test {Enter.theValue} */\n    it('allows the actor to enter the value into an input field', () =>\n        actorCalled('Bernie').attemptsTo(\n            Navigate.to('/screenplay/interactions/enter/text_copier.html'),\n\n            Enter.theValue(actorCalled('Bernie').name).into(Form.field),\n\n            Ensure.that(Value.of(Form.field), equals(actorCalled('Bernie').name)),\n        ));\n\n    /** @test {Enter} */\n    /** @test {Enter.theValue} */\n    it('allows the actor to enter a sequence of keys into a number field', () =>\n        actorCalled('Bernie').attemptsTo(\n            Navigate.to('/screenplay/interactions/enter/text_copier.html'),\n\n            Enter.theValue('1', ['2', '3']).into(Form.field),\n\n            Ensure.that(Value.of(Form.field), equals('123')),\n        ));\n\n    /** @test {Enter#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Enter.theValue(actorCalled('Bernie').name).into(Form.field).toString())\n            .to.equal(`#actor enters 'Bernie' into the name field`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/Enter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 793,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe89",
    "access": null,
    "description": "Enter",
    "lineNumber": 10,
    "testTargets": [
      "Enter"
    ]
  },
  {
    "__docId__": 794,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts~describe89",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe89.it90",
    "access": null,
    "description": "allows the actor to enter the value into an input field",
    "lineNumber": 19,
    "testTargets": [
      "Enter.theValue"
    ]
  },
  {
    "__docId__": 795,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts~describe89",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe89.it91",
    "access": null,
    "description": "allows the actor to enter a sequence of keys into a number field",
    "lineNumber": 30,
    "testTargets": [
      "Enter.theValue"
    ]
  },
  {
    "__docId__": 796,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "spec/screenplay/interactions/Enter.spec.ts~describe89",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Enter.spec.ts~describe89.it92",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 40,
    "testTargets": [
      "Enter#toString"
    ]
  },
  {
    "__docId__": 797,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Hover.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\n\nimport { Attribute, by, Hover, Navigate, Target } from '../../../src';\n\n/** @test {Hover} */\ndescribe('Hover', function () {\n\n    const Page = {\n        header: Target.the('header').located(by.css('h1')),\n        link:   Target.the('link').located(by.css('a')),\n    };\n\n    /** @test {Hover.over} */\n    it('allows the actor to position the mouse cursor over a given target', () =>\n        actorCalled('Mickey').attemptsTo(\n            Navigate.to('/screenplay/interactions/hover/example.html'),\n\n            Ensure.that(Attribute.called('class').of(Page.link), equals('off')),\n\n            Hover.over(Page.link),\n            Ensure.that(Attribute.called('class').of(Page.link), equals('on')),\n\n            Hover.over(Page.header),\n            Ensure.that(Attribute.called('class').of(Page.link), equals('off')),\n        ));\n\n    /** @test {Hover#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Hover.over(Page.link).toString())\n            .to.equal(`#actor hovers the mouse over the link`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/Hover.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 798,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "spec/screenplay/interactions/Hover.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Hover.spec.ts~describe93",
    "access": null,
    "description": "Hover",
    "lineNumber": 10,
    "testTargets": [
      "Hover"
    ]
  },
  {
    "__docId__": 799,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "spec/screenplay/interactions/Hover.spec.ts~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Hover.spec.ts~describe93.it94",
    "access": null,
    "description": "allows the actor to position the mouse cursor over a given target",
    "lineNumber": 18,
    "testTargets": [
      "Hover.over"
    ]
  },
  {
    "__docId__": 800,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "spec/screenplay/interactions/Hover.spec.ts~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Hover.spec.ts~describe93.it95",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 32,
    "testTargets": [
      "Hover#toString"
    ]
  },
  {
    "__docId__": 801,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Navigate.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { endsWith, Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, TestCompromisedError } from '@serenity-js/core';\n\nimport { by, Navigate, Target, Text, Website } from '../../../src';\n\n/** @test {Navigate} */\ndescribe('Navigate', () => {\n\n    describe('to(url)', () => {\n\n        /** @test {Navigate.to} */\n        it('allows the actor to navigate to a desired destination', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/interactions/navigate/hello_world.html'),\n\n                Ensure.that(Text.of(Target.the('heading').located(by.css('h1'))), equals('Hello World')),\n            ));\n\n        /** @test {Navigate.to} */\n        it(`marks the test as compromised if the desired destination can't be reached`, () =>\n            expect(actorCalled('Wendy').attemptsTo(\n                Navigate.to('http://localhost:9999/invalid-destination'),\n            )).\n            to.be.rejectedWith(TestCompromisedError, `Couldn't navigate to http://localhost:9999/invalid-destination`).\n            then((error: TestCompromisedError) => {\n                expect(error.cause).to.be.instanceOf(Error)\n                expect(error.cause.message).to.include('net::ERR_CONNECTION_REFUSED at http://localhost:9999/invalid-destination')\n            })\n        );\n\n        /** @test {Navigate.to} */\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.to(`https://serenity-js.org`).toString())\n                .to.equal(`#actor navigates to 'https://serenity-js.org'`);\n        });\n    });\n\n    describe('back', () => {\n\n        /** @test {Navigate.back} */\n        it('allows the actor to navigate back in the browser history', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/interactions/navigate/first.html'),\n                Navigate.to('/screenplay/interactions/navigate/second.html'),\n\n                Navigate.back(),\n    \n                Ensure.that(Website.url(), endsWith('/first.html')),\n            ));\n\n        /** @test {Navigate.back} */\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.back().toString())\n                .to.equal(`#actor navigates back in the browser history`);\n        });\n    });\n\n    describe('forward', () => {\n\n        /** @test {Navigate.forward} */\n        it('allows the actor to navigate forward in the browser history', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/interactions/navigate/first.html'),\n                Navigate.to('/screenplay/interactions/navigate/second.html'),\n    \n                Navigate.back(),\n                Navigate.forward(),\n    \n                Ensure.that(Website.url(), endsWith('second.html')),\n            ));\n\n        /** @test {Navigate.forward} */\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.forward().toString())\n                .to.equal(`#actor navigates forward in the browser history`);\n        });\n    });\n\n    describe('reloadPage', () => {\n\n        /** @test {Navigate.reloadPage} */\n        it('allows the actor to navigate to a desired destination', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/interactions/navigate/reloaded.html'),\n    \n                Navigate.reloadPage(),\n    \n                Ensure.that(Text.of(Target.the('heading').located(by.id('h'))), equals('Reloaded')),\n            ));\n\n        /** @test {Navigate.reloadPage} */\n        /** @test {Navigate#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Navigate.reloadPage().toString())\n                .to.equal(`#actor reloads the page`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/Navigate.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 802,
    "kind": "test",
    "name": "describe96",
    "testId": 96,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96",
    "access": null,
    "description": "Navigate",
    "lineNumber": 10,
    "testTargets": [
      "Navigate"
    ]
  },
  {
    "__docId__": 803,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe97",
    "access": null,
    "description": "to(url)",
    "lineNumber": 12
  },
  {
    "__docId__": 804,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe97.it98",
    "access": null,
    "description": "allows the actor to navigate to a desired destination",
    "lineNumber": 15,
    "testTargets": [
      "Navigate.to"
    ]
  },
  {
    "__docId__": 805,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe97.it99",
    "access": null,
    "lineNumber": 23,
    "testTargets": [
      "Navigate.to"
    ]
  },
  {
    "__docId__": 806,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe97",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe97.it100",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 36,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 807,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe101",
    "access": null,
    "description": "back",
    "lineNumber": 42
  },
  {
    "__docId__": 808,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe101.it102",
    "access": null,
    "description": "allows the actor to navigate back in the browser history",
    "lineNumber": 45,
    "testTargets": [
      "Navigate.back"
    ]
  },
  {
    "__docId__": 809,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe101",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe101.it103",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 57,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 810,
    "kind": "test",
    "name": "describe104",
    "testId": 104,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe104",
    "access": null,
    "description": "forward",
    "lineNumber": 63
  },
  {
    "__docId__": 811,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe104",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe104.it105",
    "access": null,
    "description": "allows the actor to navigate forward in the browser history",
    "lineNumber": 66,
    "testTargets": [
      "Navigate.forward"
    ]
  },
  {
    "__docId__": 812,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe104",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe104.it106",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 79,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 813,
    "kind": "test",
    "name": "describe107",
    "testId": 107,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe107",
    "access": null,
    "description": "reloadPage",
    "lineNumber": 85
  },
  {
    "__docId__": 814,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe107.it108",
    "access": null,
    "description": "allows the actor to navigate to a desired destination",
    "lineNumber": 88,
    "testTargets": [
      "Navigate.reloadPage"
    ]
  },
  {
    "__docId__": 815,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe107",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Navigate.spec.ts~describe96.describe107.it109",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 99,
    "testTargets": [
      "Navigate#toString"
    ]
  },
  {
    "__docId__": 816,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Press.spec.ts",
    "content": "/* eslint-disable unicorn/consistent-function-scoping */\nimport 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, Check, Question, Task } from '@serenity-js/core';\nimport { formatted } from '@serenity-js/core/lib/io';\nimport { given } from 'mocha-testdata';\nimport { Element } from 'webdriverio';\n\nimport { by, Click, DoubleClick, Enter, Key, Navigate, Press, Target, Value } from '../../../src';\n\n/** @test {Press} */\ndescribe('Press', () => {\n\n    const InputBoxForm = {\n        textField:      Target.the('text field').located(by.id('input-box')),\n    };\n\n    const CopyAndPasteBoxesForm = {\n        source:         Target.the('source text field').located(by.id('source')),\n        destination:    Target.the('destination text field').located(by.id('destination')),\n    };\n\n    const OS = () => Question.about('operating system', actor => process.platform);\n\n    describe('single keys', () => {\n\n        /** @test {Press.the} */\n        it('allows the actor to enter keys individually into a field', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to('/screenplay/interactions/press/input_box.html'),\n\n                Press.the('a').in(InputBoxForm.textField),\n                Press.the('A').in(InputBoxForm.textField),\n\n                Ensure.that(Value.of(InputBoxForm.textField), equals('aA')),\n            ));\n    });\n\n    describe('key chords', function () {\n\n        /** @test {Press.the} */\n        it('allows the actor to use modifier keys', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to('/screenplay/interactions/press/input_box.html'),\n\n                Enter.theValue('hello').into(InputBoxForm.textField),\n                Press.the(Key.Shift, Key.ArrowLeft, Key.ArrowLeft, Key.ArrowLeft, Key.ArrowLeft).in(InputBoxForm.textField),\n                Press.the(Key.Backspace).in(InputBoxForm.textField),\n                Press.the('i').in(InputBoxForm.textField),\n\n                Ensure.that(Value.of(InputBoxForm.textField), equals('hi')),\n            ));\n\n        /** @test {Press.the} */\n        it('allows the actor to use keyboard shortcuts outside the context of any specific input box', async () => {\n\n            const Copy = () => Task.where(`#actor performs a \"copy\" operation`,\n                Check.whether(OS(), equals('darwin'))\n                    .andIfSo(Press.the(Key.Control, Key.Insert))\n                    .otherwise(Press.the(Key.Control, 'c')),\n            );\n\n            const Paste = () => Task.where(`#actor performs a \"paste\" operation`,\n                Check.whether(OS(), equals('darwin'))\n                    .andIfSo(Press.the(Key.Shift, Key.Insert))\n                    .otherwise(Press.the(Key.Control, 'v')),\n            );\n\n            await actorCalled('Bernie').attemptsTo(\n                Navigate.to('/screenplay/interactions/press/copy_and_paste_boxes.html'),\n\n                Enter.theValue('hi').into(CopyAndPasteBoxesForm.source),\n\n                // todo: SelectAll\n                Press.the(Key.Shift, Key.ArrowLeft, Key.ArrowLeft).in(CopyAndPasteBoxesForm.source),\n                // Press.the(Key.Meta, 'a').in(CopyAndPasteBoxesForm.source),\n\n                Copy(),\n\n                Click.on(CopyAndPasteBoxesForm.destination),\n\n                Paste(),\n\n                Ensure.that(Value.of(CopyAndPasteBoxesForm.destination), equals('hi')),\n            );\n        });\n\n        /** @test {Press.the} */\n        it('allows the actor to use keyboard shortcuts in the context of a specific input box', async () => {\n\n            const SelectValueOf = (field: Question<Promise<Element<'async'>>>) =>\n                Task.where(formatted `#actor selects the value of ${ field }`,\n                    Click.on(field),\n                    DoubleClick.on(field)\n                );\n\n            const CopyFrom = (field: Question<Promise<Element<'async'>>>) =>\n                Task.where(formatted `#actor performs a \"copy\" operation on ${ field }`,\n                    SelectValueOf(field),\n                    Check.whether(OS(), equals('darwin'))\n                        .andIfSo(Press.the(Key.Control, Key.Insert).in(field))\n                        .otherwise(Press.the(Key.Control, 'c').in(field)),\n                );\n\n            const PasteInto = (field: Question<Promise<Element<'async'>>>) =>\n                Task.where(formatted `#actor performs a \"paste\" operation on ${ field }`,\n                    Check.whether(OS(), equals('darwin'))\n                        .andIfSo(Press.the(Key.Shift, Key.Insert).in(field))\n                        .otherwise(Press.the(Key.Control, 'v').in(field)),\n                );\n\n            const LoseFocus = () =>\n                Task.where(`#actor makes sure their browser is not focused on any input box`,\n                    Press.the(Key.Escape),\n                )\n\n            await actorCalled('Bernie').attemptsTo(\n                Navigate.to('/screenplay/interactions/press/copy_and_paste_boxes.html'),\n\n                Enter.theValue('example').into(CopyAndPasteBoxesForm.source),\n                LoseFocus(),\n\n                CopyFrom(CopyAndPasteBoxesForm.source),\n\n                PasteInto(CopyAndPasteBoxesForm.destination),\n\n                Ensure.that(Value.of(CopyAndPasteBoxesForm.destination), equals('example')),\n            );\n        });\n    });\n\n    given([\n        {\n            description: 'single key, document context',\n            interaction: Press.the('a'),\n            expected:   `#actor presses key a`,\n        },\n        {\n            description: 'single key, element context',\n            interaction: Press.the('a').in(InputBoxForm.textField),\n            expected:   `#actor presses key a in the text field`,\n        },\n        {\n            description: 'sequence of keys, document context',\n            interaction: Press.the('a', 'b', 'c'),\n            expected:   `#actor presses keys a, b, c`,\n        },\n        {\n            description: 'sequence of keys, element context',\n            interaction: Press.the('a', 'b', 'c').in(InputBoxForm.textField),\n            expected:   `#actor presses keys a, b, c in the text field`,\n        },\n        {\n            description: 'keyboard shortcut, document context',\n            interaction: Press.the(Key.Meta, 'a'),\n            expected:   `#actor presses keys Meta-a`,\n        },\n        {\n            description: 'keyboard shortcut, element context',\n            interaction: Press.the(Key.Meta, 'a').in(InputBoxForm.textField),\n            expected:   `#actor presses keys Meta-a in the text field`,\n        },\n        {\n            description: 'complex shortcut, document context',\n            interaction: Press.the(Key.Meta, Key.Alt, 'a'),\n            expected:   `#actor presses keys Meta-Alt-a`,\n        },\n        {\n            description: 'complex shortcut, element context',\n            interaction: Press.the(Key.Meta, Key.Alt, 'a').in(InputBoxForm.textField),\n            expected:   `#actor presses keys Meta-Alt-a in the text field`,\n        },\n    ]).\n    it('provides a sensible description of the interaction being performed', ({ interaction, expected }) => {\n        expect(interaction.toString()).to.equal(expected);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/Press.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 817,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "spec/screenplay/interactions/Press.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe110",
    "access": null,
    "description": "Press",
    "lineNumber": 14,
    "testTargets": [
      "Press"
    ]
  },
  {
    "__docId__": 818,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe110.describe111",
    "access": null,
    "description": "single keys",
    "lineNumber": 27
  },
  {
    "__docId__": 819,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe110.describe111",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe110.describe111.it112",
    "access": null,
    "description": "allows the actor to enter keys individually into a field",
    "lineNumber": 30,
    "testTargets": [
      "Press.the"
    ]
  },
  {
    "__docId__": 820,
    "kind": "test",
    "name": "describe113",
    "testId": 113,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe110",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe110.describe113",
    "access": null,
    "description": "key chords",
    "lineNumber": 41
  },
  {
    "__docId__": 821,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe110.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe110.describe113.it114",
    "access": null,
    "description": "allows the actor to use modifier keys",
    "lineNumber": 44,
    "testTargets": [
      "Press.the"
    ]
  },
  {
    "__docId__": 822,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe110.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe110.describe113.it115",
    "access": null,
    "description": "allows the actor to use keyboard shortcuts outside the context of any specific input box",
    "lineNumber": 57,
    "testTargets": [
      "Press.the"
    ]
  },
  {
    "__docId__": 823,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "spec/screenplay/interactions/Press.spec.ts~describe110.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Press.spec.ts~describe110.describe113.it116",
    "access": null,
    "description": "allows the actor to use keyboard shortcuts in the context of a specific input box",
    "lineNumber": 91,
    "testTargets": [
      "Press.the"
    ]
  },
  {
    "__docId__": 824,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/RightClick.spec.ts",
    "content": "import 'mocha';\r\n\r\nimport { expect } from '@integration/testing-tools';\r\nimport { Ensure, equals } from '@serenity-js/assertions';\r\nimport { actorCalled } from '@serenity-js/core';\r\n\r\nimport { by, Navigate, RightClick, Target, Text} from '../../../src';\r\n\r\n/** @test {RightClick} */\r\ndescribe('RightClick', () => {\r\n\r\n    const Form = {\r\n        inputField: Target.the('input field').located(by.css('#field')),\r\n        result: Target.the('result').located(by.css('#result'))\r\n    };\r\n\r\n    /** @test {RightClick.on} */\r\n    it('allows the actor to click on an element', () => actorCalled('Bernie').attemptsTo(\r\n        Navigate.to('/screenplay/interactions/right-click/example.html'),\r\n\r\n        Ensure.that(Text.of(Form.result), equals('')),\r\n        RightClick.on(Form.inputField),\r\n        Ensure.that(Text.of(Form.result), equals('Test for right click.')),\r\n    ));\r\n\r\n    /** @test {RightClick#toString} */\r\n    it('provides a sensible description of the interaction being performed', () => {\r\n        expect(RightClick.on(Form.inputField).toString())\r\n            .to.equal('#actor right-clicks on the input field');\r\n    });\r\n});\r\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/RightClick.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 825,
    "kind": "test",
    "name": "describe117",
    "testId": 117,
    "memberof": "spec/screenplay/interactions/RightClick.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/RightClick.spec.ts~describe117",
    "access": null,
    "description": "RightClick",
    "lineNumber": 10,
    "testTargets": [
      "RightClick"
    ]
  },
  {
    "__docId__": 826,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "spec/screenplay/interactions/RightClick.spec.ts~describe117",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/RightClick.spec.ts~describe117.it118",
    "access": null,
    "description": "allows the actor to click on an element",
    "lineNumber": 18,
    "testTargets": [
      "RightClick.on"
    ]
  },
  {
    "__docId__": 827,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "spec/screenplay/interactions/RightClick.spec.ts~describe117",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/RightClick.spec.ts~describe117.it119",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 27,
    "testTargets": [
      "RightClick#toString"
    ]
  },
  {
    "__docId__": 828,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Scroll.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, isGreaterThan, isLessThan } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\n\nimport { by, ExecuteScript, LastScriptExecution, Navigate, Scroll, Target } from '../../../src';\nimport { pageFromTemplate } from '../../fixtures';\n\n/** @test {Scroll} */\ndescribe('Scroll', function () {\n\n    const aLongSpell = pageFromTemplate(`\n        <html>\n            <body style=\"margin:0; padding:0 0 1024px 0;\">\n                <input type=\"submit\" value=\"Cast!\" id=\"cast\" style=\"margin-top:10000px;\" />\n            </body>\n        </html>\n    `);\n\n    const Page = {\n        Execute_Button: Target.the('\"Cast!\" button').located(by.id('cast')),\n    };\n\n    /** @test {Scroll.to} */\n    it('allows the actor to scroll to a given target so that it appears in the viewport', () => actorCalled('Gandalf').attemptsTo(\n        Navigate.to(aLongSpell),\n\n        ExecuteScript.sync(`return arguments[0].getBoundingClientRect().top;`).withArguments(Page.Execute_Button),\n        Ensure.that(LastScriptExecution.result<number>(), isGreaterThan(9000)),\n\n        Scroll.to(Page.Execute_Button),\n\n        ExecuteScript.sync(`return arguments[0].getBoundingClientRect().top;`).withArguments(Page.Execute_Button),\n        Ensure.that(LastScriptExecution.result<number>(), isLessThan(9000)),\n    ));\n\n    /** @test {Scroll.to} */\n    /** @test {Scroll#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(Scroll.to(Page.Execute_Button).toString())\n            .to.equal(`#actor scrolls to the \"Cast!\" button`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/Scroll.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 829,
    "kind": "test",
    "name": "describe120",
    "testId": 120,
    "memberof": "spec/screenplay/interactions/Scroll.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Scroll.spec.ts~describe120",
    "access": null,
    "description": "Scroll",
    "lineNumber": 11,
    "testTargets": [
      "Scroll"
    ]
  },
  {
    "__docId__": 830,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "spec/screenplay/interactions/Scroll.spec.ts~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Scroll.spec.ts~describe120.it121",
    "access": null,
    "description": "allows the actor to scroll to a given target so that it appears in the viewport",
    "lineNumber": 26,
    "testTargets": [
      "Scroll.to"
    ]
  },
  {
    "__docId__": 831,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "spec/screenplay/interactions/Scroll.spec.ts~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Scroll.spec.ts~describe120.it122",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 40,
    "testTargets": [
      "Scroll#toString"
    ]
  },
  {
    "__docId__": 832,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/Wait.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, AssertionError, Duration } from '@serenity-js/core';\n\nimport { by, Navigate, Target, Text, Wait } from '../../../src';\n\n/** @test {Wait} */\ndescribe('Wait', () => {\n\n    const status = Target.the('header').located(by.id('status'));\n\n    describe('for', () => {\n\n        /** @test {Wait.for} */\n        it('pauses the actor flow for the length of an explicitly-set duration', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/interactions/wait/loader.html'),\n\n                Wait.for(Duration.ofMilliseconds(1500)),\n\n                Ensure.that(Text.of(status), equals('Ready!')),\n            ));\n\n        /** @test {Wait#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Wait.for(Duration.ofMilliseconds(300)).toString())\n                .to.equal(`#actor waits for 300ms`);\n        });\n    });\n\n    describe('until', () => {\n\n        /** @test {Wait.until} */\n        it('pauses the actor flow until the expectation is met', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/interactions/wait/loader.html'),\n\n                Wait.until(Text.of(status), equals('Ready!')),\n\n                Ensure.that(Text.of(status), equals('Ready!')),\n            ));\n\n        /** @test {Wait.upTo} */\n        /** @test {Wait.until} */\n        it('fails the actor flow when the timeout expires', () =>\n            expect(actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/interactions/wait/loader.html'),\n\n                Wait.upTo(Duration.ofMilliseconds(10)).until(Text.of(status), equals('Ready!')),\n            )).to.be.rejected.then((error: AssertionError) => {\n                expect(error).to.be.instanceOf(AssertionError);\n                expect(error.message).to.be.equal(`Waited 10ms for the text of the header to equal 'Ready!'`);\n                expect(error.actual).to.be.equal('Loading...');\n                expect(error.expected).to.be.equal('Ready!');\n\n                expect(error.cause.name).to.equal('Error');\n                expect(error.cause.message).to.match(/^Wait timed out after.*/);\n            }));\n\n        /** @test {Wait#toString} */\n        it('provides a sensible description of the interaction being performed', () => {\n            expect(Wait.upTo(Duration.ofMilliseconds(10)).until(Text.of(status), equals('Ready!')).toString())\n                .to.equal(`#actor waits up to 10ms until the text of the header does equal 'Ready!'`);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/Wait.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 833,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe123",
    "access": null,
    "description": "Wait",
    "lineNumber": 10,
    "testTargets": [
      "Wait"
    ]
  },
  {
    "__docId__": 834,
    "kind": "test",
    "name": "describe124",
    "testId": 124,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe124",
    "access": null,
    "description": "for",
    "lineNumber": 14
  },
  {
    "__docId__": 835,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe124",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe124.it125",
    "access": null,
    "description": "pauses the actor flow for the length of an explicitly-set duration",
    "lineNumber": 17,
    "testTargets": [
      "Wait.for"
    ]
  },
  {
    "__docId__": 836,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe124",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe124.it126",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 27,
    "testTargets": [
      "Wait#toString"
    ]
  },
  {
    "__docId__": 837,
    "kind": "test",
    "name": "describe127",
    "testId": 127,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe123",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe127",
    "access": null,
    "description": "until",
    "lineNumber": 33
  },
  {
    "__docId__": 838,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe127.it128",
    "access": null,
    "description": "pauses the actor flow until the expectation is met",
    "lineNumber": 36,
    "testTargets": [
      "Wait.until"
    ]
  },
  {
    "__docId__": 839,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe127.it129",
    "access": null,
    "description": "fails the actor flow when the timeout expires",
    "lineNumber": 47,
    "testTargets": [
      "Wait.until"
    ]
  },
  {
    "__docId__": 840,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/interactions/Wait.spec.ts~describe123.describe127.it130",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 63,
    "testTargets": [
      "Wait#toString"
    ]
  },
  {
    "__docId__": 841,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, Question, Serenity } from '@serenity-js/core';\nimport { ActivityFinished, ActivityRelatedArtifactGenerated, ActivityStarts, ArtifactGenerated } from '@serenity-js/core/lib/events';\nimport { TextData } from '@serenity-js/core/lib/model';\nimport { Clock } from '@serenity-js/core/lib/stage';\n\nimport { by, ExecuteScript, Navigate, Target, Value } from '../../../../src';\nimport { Actors } from '../../Actors';\n\n/** @test {ExecuteScript} */\ndescribe('ExecuteAsynchronousScript', function () {\n\n    class Sandbox {\n        static Input = Target.the('input field').located(by.id('name'));\n    }\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script', () =>\n        actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/input_field.html'),\n\n            ExecuteScript.async(`\n                var callback = arguments[arguments.length - 1];\n    \n                setTimeout(function () {\n                    document.getElementById('name').value = 'Joe';\n                    callback();\n                }, 100);\n            `),\n\n            Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n        ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script with a static argument', () =>\n        actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/input_field.html'),\n\n            ExecuteScript.async(`\n                var name = arguments[0];\n                var callback = arguments[arguments.length - 1];\n    \n                setTimeout(function () {\n                    document.getElementById('name').value = name;\n                    callback();\n                }, 100);\n            `).withArguments(actorCalled('Joe').name),\n\n            Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n        ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script with a promised argument', () =>\n        actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/input_field.html'),\n\n            ExecuteScript.async(`\n                var name = arguments[0];\n                var callback = arguments[arguments.length - 1];\n    \n                setTimeout(function () {\n                    document.getElementById('name').value = name;\n                    callback();\n                }, 100);\n            `).withArguments(Promise.resolve(actorCalled('Joe').name)),\n\n            Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n        ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('allows the actor to execute an asynchronous script with a Target argument', () =>\n        actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/input_field.html'),\n\n            ExecuteScript.async(`\n                var name = arguments[0];\n                var field = arguments[1];\n                var callback = arguments[arguments.length - 1];\n    \n                setTimeout(function () {\n                    field.value = name;\n                    callback();\n                }, 100);\n            `).withArguments(actorCalled('Joe').name, Sandbox.Input),\n\n            Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n        ));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    /** @test {ExecuteAsynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked without arguments', () => {\n        expect(ExecuteScript.async(`\n            arguments[arguments.length - 1]();\n        `).toString()).to.equal(`#actor executes an asynchronous script`);\n    });\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked with arguments', () => {\n        const arg3 = Question.about('arg number 3', actor => void 0);\n\n        expect(ExecuteScript.async(`arguments[arguments.length - 1]();`)\n            .withArguments(Promise.resolve('arg1'), 'arg2', arg3).toString(),\n        ).to.equal(`#actor executes an asynchronous script with arguments: [ a Promise, 'arg2', arg number 3 ]`);\n    });\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('complains if the script has failed', () =>\n        expect(actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/input_field.html'),\n\n            ExecuteScript.async(`\n                var callback = arguments[arguments.length - 1];\n    \n                throw new Error(\"something's not quite right here\");\n            `),\n        )).to.be.rejectedWith(Error, `something's not quite right here`));\n\n    /** @test {ExecuteScript.async} */\n    /** @test {ExecuteAsynchronousScript} */\n    it('emits the events so that the details of the script being executed can be reported', () => {\n        const frozenClock = new Clock(() => new Date('1970-01-01'));\n        const serenity = new Serenity(frozenClock);\n        const recorder = new EventRecorder();\n\n        serenity.configure({\n            actors: new Actors(),\n            crew: [ recorder ],\n        });\n\n        return serenity.theActorCalled('Ashwin').attemptsTo(\n            ExecuteScript.async(`arguments[arguments.length - 1]();`),\n        ).then(() => {\n            const events = recorder.events;\n\n            expect(events).to.have.lengthOf(3);\n            expect(events[ 0 ]).to.be.instanceOf(ActivityStarts);\n            expect(events[ 1 ]).to.be.instanceOf(ArtifactGenerated);\n            expect(events[ 2 ]).to.be.instanceOf(ActivityFinished);\n\n            const artifactGenerated = events[ 1 ] as ActivityRelatedArtifactGenerated;\n\n            expect(artifactGenerated.name.value).to.equal(`Script source`);\n\n            expect(artifactGenerated.artifact.equals(TextData.fromJSON({\n                contentType: 'text/javascript;charset=UTF-8',\n                data: 'arguments[arguments.length - 1]();',\n            }))).to.equal(true, JSON.stringify(artifactGenerated.artifact.toJSON()));\n\n            expect(artifactGenerated.timestamp.equals(frozenClock.now())).to.equal(true, artifactGenerated.timestamp.toString());\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 842,
    "kind": "test",
    "name": "describe131",
    "testId": 131,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131",
    "access": null,
    "description": "ExecuteAsynchronousScript",
    "lineNumber": 14,
    "testTargets": [
      "ExecuteScript"
    ]
  },
  {
    "__docId__": 843,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131.it132",
    "access": null,
    "description": "allows the actor to execute an asynchronous script",
    "lineNumber": 40,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 844,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131.it133",
    "access": null,
    "description": "allows the actor to execute an asynchronous script with a static argument",
    "lineNumber": 58,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 845,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131.it134",
    "access": null,
    "description": "allows the actor to execute an asynchronous script with a promised argument",
    "lineNumber": 77,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 846,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131.it135",
    "access": null,
    "description": "allows the actor to execute an asynchronous script with a Target argument",
    "lineNumber": 96,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 847,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131.it136",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked without arguments",
    "lineNumber": 117,
    "testTargets": [
      "ExecuteAsynchronousScript#toString"
    ]
  },
  {
    "__docId__": 848,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131.it137",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked with arguments",
    "lineNumber": 125,
    "testTargets": [
      "ExecuteAsynchronousScript#toString"
    ]
  },
  {
    "__docId__": 849,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131.it138",
    "access": null,
    "description": "complains if the script has failed",
    "lineNumber": 135,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 850,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteAsynchronousScript.spec.ts~describe131.it139",
    "access": null,
    "description": "emits the events so that the details of the script being executed can be reported",
    "lineNumber": 148,
    "testTargets": [
      "ExecuteAsynchronousScript"
    ]
  },
  {
    "__docId__": 851,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, LogicError } from '@serenity-js/core';\n\nimport { by, ExecuteScript, Navigate, Target, Text } from '../../../../src';\n\n/** @test {ExecuteScript} */\ndescribe('ExecuteScriptFromUrl', function () {\n\n    this.timeout(10 * 1000);\n\n    class Sandbox {\n        static Result = Target.the('sandbox result').located(by.id('result'));\n    }\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl} */\n    it('allows the actor to execute a script stored at a specific location', () =>\n        actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/execute_script_sandbox.html'),\n\n            ExecuteScript.from(`${ browser.config.baseUrl }/screenplay/interactions/execute-script/execute_script_sample.js`),\n\n            Ensure.that(Text.of(Sandbox.Result), equals('Script loaded successfully')),\n        ));\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl} */\n    it('complains if the script could not be loaded', () =>\n        expect(actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/execute_script_sandbox.html'),\n\n            ExecuteScript.from(`${ browser.config.baseUrl }/invalid.js`),\n        )).to.be.rejected\n            .then(error => {\n                expect(error).to.be.instanceOf(LogicError);\n                expect(error.message).to.match(new RegExp(`Couldn't load script from ${ browser.config.baseUrl }/invalid.js`))\n            })\n            .then(() => actorCalled('Joe').attemptsTo(\n                // todo: implement \"Browser\" questions\n                // Ensure.that(Browser.log(), containAtLeastOneItemThat(property('message', includes('invalid.js - Failed to load resource')))),\n            )));\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl} */\n    it('complains if the script has already been loaded', () =>\n        expect(actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/execute_script_sandbox.html'),\n\n            ExecuteScript.from(`${ browser.config.baseUrl }/screenplay/interactions/execute-script/execute_script_sample.js`),\n            ExecuteScript.from(`${ browser.config.baseUrl }/screenplay/interactions/execute-script/execute_script_sample.js`),\n        )).to.be.rejectedWith(LogicError, `Script from ${ browser.config.baseUrl }/screenplay/interactions/execute-script/execute_script_sample.js has already been loaded`));\n\n    /** @test {ExecuteScript.from} */\n    /** @test {ExecuteScriptFromUrl#toString} */\n    it('provides a sensible description of the interaction being performed', () => {\n        expect(ExecuteScript.from('https://localhost/script.js').toString())\n            .to.equal(`#actor executes a script from https://localhost/script.js`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 852,
    "kind": "test",
    "name": "describe140",
    "testId": 140,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe140",
    "access": null,
    "description": "ExecuteScriptFromUrl",
    "lineNumber": 10,
    "testTargets": [
      "ExecuteScript"
    ]
  },
  {
    "__docId__": 853,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe140.it141",
    "access": null,
    "description": "allows the actor to execute a script stored at a specific location",
    "lineNumber": 38,
    "testTargets": [
      "ExecuteScriptFromUrl"
    ]
  },
  {
    "__docId__": 854,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe140.it142",
    "access": null,
    "description": "complains if the script could not be loaded",
    "lineNumber": 49,
    "testTargets": [
      "ExecuteScriptFromUrl"
    ]
  },
  {
    "__docId__": 855,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe140.it143",
    "access": null,
    "description": "complains if the script has already been loaded",
    "lineNumber": 66,
    "testTargets": [
      "ExecuteScriptFromUrl"
    ]
  },
  {
    "__docId__": 856,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe140",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteScriptFromUrl.spec.ts~describe140.it144",
    "access": null,
    "description": "provides a sensible description of the interaction being performed",
    "lineNumber": 76,
    "testTargets": [
      "ExecuteScriptFromUrl#toString"
    ]
  },
  {
    "__docId__": 857,
    "kind": "testFile",
    "name": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect } from '@integration/testing-tools';\nimport { Ensure, equals, includes } from '@serenity-js/assertions';\nimport { actorCalled, Question, Serenity } from '@serenity-js/core';\nimport { ActivityFinished, ActivityRelatedArtifactGenerated, ActivityStarts, ArtifactGenerated } from '@serenity-js/core/lib/events';\nimport { TextData } from '@serenity-js/core/lib/model';\nimport { Clock } from '@serenity-js/core/lib/stage';\n\nimport { by, ExecuteScript, LastScriptExecution, Navigate, Target, Value } from '../../../../src';\nimport { Actors } from '../../Actors';\n\n/** @test {ExecuteScript} */\ndescribe('ExecuteSynchronousScript', function () {\n\n    class Sandbox {\n        static Input = Target.the('input field').located(by.id('name'));\n    }\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script', () =>\n        actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/input_field.html'),\n\n            ExecuteScript.sync(`\n                document.getElementById('name').value = 'Joe';\n            `),\n\n            Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n        ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {LastScriptExecution.result} */\n    it('allows the actor to retrieve the value returned by the script', () =>\n        actorCalled('Joe')\n            .attemptsTo(\n                ExecuteScript.sync('return navigator.userAgent'),\n                Ensure.that(LastScriptExecution.result<string>(), includes('Chrome')),\n            ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script with a static argument', () =>\n        actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/input_field.html'),\n\n            ExecuteScript.sync(`\n                var name = arguments[0];\n\n                document.getElementById('name').value = name;\n            `).withArguments(actorCalled('Joe').name),\n\n            Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n        ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script with a promised argument', () =>\n        actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/input_field.html'),\n\n            ExecuteScript.sync(`\n                var name = arguments[0];\n\n                document.getElementById('name').value = name;\n            `).withArguments(Promise.resolve(actorCalled('Joe').name)),\n\n            Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n        ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('allows the actor to execute a synchronous script with a Target argument', () =>\n        actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/input_field.html'),\n\n            ExecuteScript.sync(`\n                var name = arguments[0];\n                var field = arguments[1];\n\n                field.value = name;\n            `).withArguments(actorCalled('Joe').name, Sandbox.Input),\n\n            Ensure.that(Value.of(Sandbox.Input), equals(actorCalled('Joe').name)),\n        ));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {ExecuteSynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked without arguments', () => {\n        expect(ExecuteScript.sync(`\n            console.log('hello world');\n        `).toString()).to.equal(`#actor executes a synchronous script`);\n    });\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {ExecuteSynchronousScript#toString} */\n    it('provides a sensible description of the interaction being performed when invoked with arguments', () => {\n        const arg3 = Question.about('arg number 3', actor => void 0);\n\n        expect(ExecuteScript.sync(`console.log('hello world');`)\n            .withArguments(Promise.resolve('arg1'), 'arg2', arg3).toString(),\n        ).to.equal(`#actor executes a synchronous script with arguments: [ a Promise, 'arg2', arg number 3 ]`);\n    });\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    /** @test {LastScriptExecution} */\n    it('complains if the script has failed', () =>\n        expect(actorCalled('Joe').attemptsTo(\n            Navigate.to('/screenplay/interactions/execute-script/input_field.html'),\n\n            ExecuteScript.sync(`\n                    throw new Error(\"something's not quite right here\");\n                `),\n        )).to.be.rejectedWith(Error, `Evaluation failed: Error: something's not quite right here`));\n\n    /** @test {ExecuteScript.sync} */\n    /** @test {ExecuteSynchronousScript} */\n    it('emits the events so that the details of the script being executed can be reported', () => {\n        const frozenClock = new Clock(() => new Date('1970-01-01'));\n        const serenity = new Serenity(frozenClock);\n        const recorder = new EventRecorder();\n\n        serenity.configure({\n            actors: new Actors(),\n            crew: [ recorder ],\n        });\n\n        return serenity.theActorCalled('Ashwin').attemptsTo(\n            ExecuteScript.sync(`console.log('hello world');`),\n            // todo: implement \"Browser\" questions\n            // Ensure.that(Browser.log(), containAtLeastOneItemThat(property('message', includes('hello world')))),\n        ).then(() => {\n            const events = recorder.events;\n\n            expect(events[ 0 ]).to.be.instanceOf(ActivityStarts);\n            expect(events[ 1 ]).to.be.instanceOf(ArtifactGenerated);\n            expect(events[ 2 ]).to.be.instanceOf(ActivityFinished);\n\n            const artifactGenerated = events[ 1 ] as ActivityRelatedArtifactGenerated;\n\n            expect(artifactGenerated.name.value).to.equal(`Script source`);\n\n            expect(artifactGenerated.artifact.equals(TextData.fromJSON({\n                contentType: 'text/javascript;charset=UTF-8',\n                data: 'console.log(\\'hello world\\');',\n            }))).to.equal(true, JSON.stringify(artifactGenerated.artifact.toJSON()));\n\n            expect(artifactGenerated.timestamp.equals(frozenClock.now())).to.equal(true, artifactGenerated.timestamp.toString());\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 858,
    "kind": "test",
    "name": "describe145",
    "testId": 145,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145",
    "access": null,
    "description": "ExecuteSynchronousScript",
    "lineNumber": 14,
    "testTargets": [
      "ExecuteScript"
    ]
  },
  {
    "__docId__": 859,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145.it146",
    "access": null,
    "description": "allows the actor to execute a synchronous script",
    "lineNumber": 40,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 860,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145.it147",
    "access": null,
    "description": "allows the actor to retrieve the value returned by the script",
    "lineNumber": 54,
    "testTargets": [
      "LastScriptExecution.result"
    ]
  },
  {
    "__docId__": 861,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145.it148",
    "access": null,
    "description": "allows the actor to execute a synchronous script with a static argument",
    "lineNumber": 63,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 862,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145.it149",
    "access": null,
    "description": "allows the actor to execute a synchronous script with a promised argument",
    "lineNumber": 78,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 863,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145.it150",
    "access": null,
    "description": "allows the actor to execute a synchronous script with a Target argument",
    "lineNumber": 93,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 864,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145.it151",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked without arguments",
    "lineNumber": 110,
    "testTargets": [
      "ExecuteSynchronousScript#toString"
    ]
  },
  {
    "__docId__": 865,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145.it152",
    "access": null,
    "description": "provides a sensible description of the interaction being performed when invoked with arguments",
    "lineNumber": 119,
    "testTargets": [
      "ExecuteSynchronousScript#toString"
    ]
  },
  {
    "__docId__": 866,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145.it153",
    "access": null,
    "description": "complains if the script has failed",
    "lineNumber": 130,
    "testTargets": [
      "LastScriptExecution"
    ]
  },
  {
    "__docId__": 867,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/interactions/execute-script/ExecuteSynchronousScript.spec.ts~describe145.it154",
    "access": null,
    "description": "emits the events so that the details of the script being executed can be reported",
    "lineNumber": 141,
    "testTargets": [
      "ExecuteSynchronousScript"
    ]
  },
  {
    "__docId__": 868,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Attribute.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, LogicError } from '@serenity-js/core';\n\nimport { Attribute, by, Navigate, Target, Text } from '../../../src';\n\ndescribe('Attribute', () => {\n\n    describe('called', () => {\n\n        const dom = Target.the('DOM').located(by.tagName('html'));\n\n        /** @test {Attribute.called} */\n        it('allows the actor to read an attribute of a DOM element matching the locator', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/attribute/language.html'),\n\n                Ensure.that(Attribute.called('lang').of(dom), equals('en')),\n            ));\n\n        /** @test {Attribute.called} */\n        /** @test {Attribute#toString} */\n        it('produces a sensible description of the question being asked', () => {\n            expect(Attribute.called('lang').of(dom).toString())\n                .to.equal('\"lang\" attribute of the DOM');\n        });\n\n        /** @test {Attribute.called} */\n        it('complains if the target is not specified', () =>\n            expect(actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/attribute/language.html'),\n\n                Ensure.that(Attribute.called('lang'), equals('en')),\n            )).to.be.rejectedWith(LogicError, `Target not specified`));\n\n        const ItemsOfInterest = Target.all('items of interest').located(by.tagName('li'))\n            .where(Attribute.called('class'), equals('enabled'))\n\n        /** @test {Attribute.called} */\n        /** @test {Target.all} */\n        it('can be used to filter a list of elements', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/attribute/lists.html'),\n\n                Ensure.that(Text.ofAll(ItemsOfInterest), equals(['one', 'three'])),\n            ));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/questions/Attribute.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 869,
    "kind": "test",
    "name": "describe155",
    "testId": 155,
    "memberof": "spec/screenplay/questions/Attribute.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Attribute.spec.ts~describe155",
    "access": null,
    "description": "Attribute",
    "lineNumber": 9
  },
  {
    "__docId__": 870,
    "kind": "test",
    "name": "describe156",
    "testId": 156,
    "memberof": "spec/screenplay/questions/Attribute.spec.ts~describe155",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Attribute.spec.ts~describe155.describe156",
    "access": null,
    "description": "called",
    "lineNumber": 11
  },
  {
    "__docId__": 871,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "spec/screenplay/questions/Attribute.spec.ts~describe155.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Attribute.spec.ts~describe155.describe156.it157",
    "access": null,
    "description": "allows the actor to read an attribute of a DOM element matching the locator",
    "lineNumber": 16,
    "testTargets": [
      "Attribute.called"
    ]
  },
  {
    "__docId__": 872,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "spec/screenplay/questions/Attribute.spec.ts~describe155.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Attribute.spec.ts~describe155.describe156.it158",
    "access": null,
    "description": "produces a sensible description of the question being asked",
    "lineNumber": 25,
    "testTargets": [
      "Attribute#toString"
    ]
  },
  {
    "__docId__": 873,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "spec/screenplay/questions/Attribute.spec.ts~describe155.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Attribute.spec.ts~describe155.describe156.it159",
    "access": null,
    "description": "complains if the target is not specified",
    "lineNumber": 31,
    "testTargets": [
      "Attribute.called"
    ]
  },
  {
    "__docId__": 874,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "spec/screenplay/questions/Attribute.spec.ts~describe155.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Attribute.spec.ts~describe155.describe156.it160",
    "access": null,
    "description": "can be used to filter a list of elements",
    "lineNumber": 43,
    "testTargets": [
      "Target.all"
    ]
  },
  {
    "__docId__": 875,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Text.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, replace, toNumber, trim } from '@serenity-js/core';\n\nimport { by, Navigate, Target, Text } from '../../../src';\n\ndescribe('Text', () => {\n\n    describe('of', () => {\n\n        const header = Target.the('header').located(by.tagName('h1'));\n\n        /** @test {Text.of} */\n        it('allows the actor to read the text of the DOM element matching the locator', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/text/hello_world.html'),\n\n                Ensure.that(Text.of(header), equals('Hello World!')),\n            ));\n\n        /** @test {Text.of} */\n        /** @test {Text#toString} */\n        it('produces a sensible description of the question being asked', () => {\n            expect(Text.of(Target.the('header').located(by.tagName('h1'))).toString())\n                .to.equal('the text of the header');\n        });\n\n        describe('when mapping', () => {\n\n            /** @test {Text.of} */\n            /** @test {Text#map} */\n            it('allows for the answer to be mapped to another type', () =>\n                actorCalled('Wendy').attemptsTo(\n\n                    Navigate.to('/screenplay/questions/text/single_number_example.html'),\n\n                    Ensure.that(Text.of(header).map(toNumber()), equals(2)),\n                ));\n\n            /** @test {Text.of} */\n            /** @test {Text#map} */\n            it('allows for the transformations to be chained', () =>\n                actorCalled('Wendy').attemptsTo(\n\n                    Navigate.to('/screenplay/questions/text/date_example.html'),\n\n                    Ensure.that(\n                        Text.of(header).map(trim()).map(actor => value => new Date(value)), // eslint-disable-line unicorn/consistent-function-scoping\n                        equals(new Date('2020-09-11T19:53:18.160Z'))\n                    ),\n                ));\n        });\n    });\n\n    describe('ofAll', () => {\n\n        const Shopping_List_Items = Target.all('shopping list items').located(by.css('li'));\n\n        /** @test {Text.ofAll} */\n        it('allows the actor to read the text of all DOM elements matching the locator', () =>\n            actorCalled('Wendy').attemptsTo(\n\n                Navigate.to('/screenplay/questions/text/shopping_list.html'),\n\n                Ensure.that(Text.ofAll(Shopping_List_Items), equals(['milk', 'oats'])),\n            ));\n\n        // todo: relative questions\n\n        /** @test {Text.ofAll} */\n        it('allows for a question relative to another target to be asked', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/text/shopping_list.html'),\n\n                Ensure.that(\n                    Text.ofAll(Shopping_List_Items).of(Target.the('body').located(by.tagName('body'))),\n                    equals(['milk', 'oats'])\n                ),\n            ));\n\n        /** @test {Text.ofAll} */\n        /** @test {Text#toString} */\n        it('produces sensible description of the question being asked', () => {\n            expect(Text.ofAll(Shopping_List_Items).toString())\n                .to.equal('the text of shopping list items');       // todo: the text of ALL, of THE ?\n        });\n\n        /** @test {Text.ofAll} */\n        /** @test {Text#map} */\n        it('allows for the answer to be mapped', () =>\n            actorCalled('Wendy').attemptsTo(\n\n                Navigate.to('/screenplay/questions/text/percentages.html'),\n\n                Ensure.that(\n                    Text.ofAll(Target.all('possible answers').located(by.css('#answers li')))\n                        .map(trim())\n                        .map(replace('%', ''))\n                        .map(toNumber()),\n                    equals([6.67, 3.34])\n                ),\n            ));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/questions/Text.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 876,
    "kind": "test",
    "name": "describe161",
    "testId": 161,
    "memberof": "spec/screenplay/questions/Text.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161",
    "access": null,
    "description": "Text",
    "lineNumber": 9
  },
  {
    "__docId__": 877,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe162",
    "access": null,
    "description": "of",
    "lineNumber": 11
  },
  {
    "__docId__": 878,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe162.it163",
    "access": null,
    "description": "allows the actor to read the text of the DOM element matching the locator",
    "lineNumber": 16,
    "testTargets": [
      "Text.of"
    ]
  },
  {
    "__docId__": 879,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe162.it164",
    "access": null,
    "description": "produces a sensible description of the question being asked",
    "lineNumber": 25,
    "testTargets": [
      "Text#toString"
    ]
  },
  {
    "__docId__": 880,
    "kind": "test",
    "name": "describe165",
    "testId": 165,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161.describe162",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe162.describe165",
    "access": null,
    "description": "when mapping",
    "lineNumber": 30
  },
  {
    "__docId__": 881,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161.describe162.describe165",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe162.describe165.it166",
    "access": null,
    "description": "allows for the answer to be mapped to another type",
    "lineNumber": 34,
    "testTargets": [
      "Text#map"
    ]
  },
  {
    "__docId__": 882,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161.describe162.describe165",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe162.describe165.it167",
    "access": null,
    "description": "allows for the transformations to be chained",
    "lineNumber": 44,
    "testTargets": [
      "Text#map"
    ]
  },
  {
    "__docId__": 883,
    "kind": "test",
    "name": "describe168",
    "testId": 168,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe168",
    "access": null,
    "description": "ofAll",
    "lineNumber": 57
  },
  {
    "__docId__": 884,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe168.it169",
    "access": null,
    "description": "allows the actor to read the text of all DOM elements matching the locator",
    "lineNumber": 62,
    "testTargets": [
      "Text.ofAll"
    ]
  },
  {
    "__docId__": 885,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe168.it170",
    "access": null,
    "description": "allows for a question relative to another target to be asked",
    "lineNumber": 73,
    "testTargets": [
      "Text.ofAll"
    ]
  },
  {
    "__docId__": 886,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe168.it171",
    "access": null,
    "description": "produces sensible description of the question being asked",
    "lineNumber": 85,
    "testTargets": [
      "Text#toString"
    ]
  },
  {
    "__docId__": 887,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "spec/screenplay/questions/Text.spec.ts~describe161.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Text.spec.ts~describe161.describe168.it172",
    "access": null,
    "description": "allows for the answer to be mapped",
    "lineNumber": 92,
    "testTargets": [
      "Text#map"
    ]
  },
  {
    "__docId__": 888,
    "kind": "testFile",
    "name": "spec/screenplay/questions/Value.spec.ts",
    "content": "import 'mocha';\n\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled } from '@serenity-js/core';\n\nimport { by, Navigate, Target, Value } from '../../../src';\n\ndescribe('Value', () => {\n\n    describe('of', () => {\n\n        /** @test {Value} */\n        /** @test {Value.of} */\n        it('allows the actor to read the \"value\" attribute of a DOM element matching the locator', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to('/screenplay/questions/value/username_form.html'),\n\n                Ensure.that(Value.of(Target.the('username field').located(by.tagName('input'))), equals('jan-molak')),\n            ));\n\n        /** @test {Value} */\n        /** @test {Value#of} */\n        it('allows the actor to read the \"value\" attribute of a DOM element matching the locator', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to('/screenplay/questions/value/username_form.html'),\n\n                Ensure.that(Value.of(Target.the('username field').located(by.tagName('input'))), equals('jan-molak')),\n            ));\n\n        /** @test {Value} */\n        /** @test {Value#of} */\n        it('allows for a question relative to another target to be asked', () =>\n            actorCalled('Bernie').attemptsTo(\n                Navigate.to('/screenplay/questions/value/username_form.html'),\n\n                Ensure.that(\n                    Value.of(Target.the('username field').located(by.tagName('input')))\n                        .of(Target.the(`form`).located(by.tagName('form'))),\n                    equals('jan-molak'),\n                ),\n            ));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/questions/Value.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 889,
    "kind": "test",
    "name": "describe173",
    "testId": 173,
    "memberof": "spec/screenplay/questions/Value.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe173",
    "access": null,
    "description": "Value",
    "lineNumber": 8
  },
  {
    "__docId__": 890,
    "kind": "test",
    "name": "describe174",
    "testId": 174,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe173",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe173.describe174",
    "access": null,
    "description": "of",
    "lineNumber": 10
  },
  {
    "__docId__": 891,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe173.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe173.describe174.it175",
    "access": null,
    "description": "allows the actor to read the \"value\" attribute of a DOM element matching the locator",
    "lineNumber": 14,
    "testTargets": [
      "Value.of"
    ]
  },
  {
    "__docId__": 892,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe173.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe173.describe174.it176",
    "access": null,
    "description": "allows the actor to read the \"value\" attribute of a DOM element matching the locator",
    "lineNumber": 23,
    "testTargets": [
      "Value#of"
    ]
  },
  {
    "__docId__": 893,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "spec/screenplay/questions/Value.spec.ts~describe173.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/Value.spec.ts~describe173.describe174.it177",
    "access": null,
    "description": "allows for a question relative to another target to be asked",
    "lineNumber": 32,
    "testTargets": [
      "Value#of"
    ]
  },
  {
    "__docId__": 894,
    "kind": "testFile",
    "name": "spec/screenplay/questions/locators.spec.ts",
    "content": "import 'mocha';\n\nimport { Ensure, equals } from '@serenity-js/assertions';\nimport { actorCalled, Question } from '@serenity-js/core';\nimport type { Element, ElementArray } from 'webdriverio';\n\nimport { by, Locator, Navigate, Target, Text } from '../../../src';\n\ndescribe('by', () => {\n\n    describe('id', () => {\n\n        it('should retrieve a matching element', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/id_one.html'),\n\n                Ensure.that(Text.of(element(by.id('example'))), equals('Example')),\n            ));\n\n        it('should retrieve all matching elements', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/id_all.html'),\n\n                Ensure.that(Text.ofAll(elements(by.id('example'))), equals(['First Example', 'Second Example'])),\n            ));\n\n        // todo: test toString in context in which it's going to be used\n    });\n\n    describe('css', () => {\n\n        it('should retrieve a matching element', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/css_one.html'),\n\n                Ensure.that(Text.of(element(by.css('.example'))), equals('Example')),\n            ));\n\n        it('should retrieve all matching elements', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/css_all.html'),\n\n                Ensure.that(Text.ofAll(elements(by.css('.example'))), equals(['First Example', 'Second Example'])),\n            ));\n    });\n\n    describe('tagName', () => {\n\n        it('should retrieve a matching element', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/tag_name_one.html'),\n\n                Ensure.that(Text.of(element(by.tagName('li'))), equals('Example')),\n            ));\n\n        it('should retrieve all matching elements', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/tag_name_all.html'),\n\n                Ensure.that(Text.ofAll(elements(by.css('li'))), equals(['First Example', 'Second Example'])),\n            ));\n    });\n\n    describe('linkText', () => {\n\n        it('should retrieve a matching element', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/link_text_one.html'),\n\n                Ensure.that(Text.of(element(by.linkText('Serenity/JS'))), equals('Serenity/JS')),\n            ));\n\n        it('should retrieve all matching elements', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/link_text_all.html'),\n\n                Ensure.that(Text.ofAll(elements(by.linkText('Example'))), equals(['Example', 'Example'])),\n            ));\n    });\n\n    describe('partialLinkText', () => {\n\n        it('should retrieve a matching element', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/partial_link_text_one.html'),\n\n                Ensure.that(Text.of(element(by.partialLinkText('JS'))), equals('Serenity/JS')),\n            ));\n\n        it('should retrieve all matching elements', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/partial_link_text_all.html'),\n\n                Ensure.that(Text.ofAll(elements(by.partialLinkText('Serenity'))), equals(['Serenity/JS', 'Serenity BDD'])),\n            ));\n    });\n\n    describe('xpath', () => {\n\n        it('should retrieve a matching element', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/xpath_one.html'),\n\n                Ensure.that(Text.of(element(by.xpath('//li'))), equals('Example')),\n            ));\n\n        it('should retrieve all matching elements', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/locators/xpath_all.html'),\n\n                Ensure.that(Text.ofAll(elements(by.xpath('//li'))), equals(['First Example', 'Second Example'])),\n            ));\n    });\n});\n\nfunction element(locator: Locator): Question<Promise<Element<'async'>>> {\n    return Target.the('example element').located(locator);\n}\n\nfunction elements(locator: Locator): Question<Promise<ElementArray>> {\n    return Target.all('example elements').located(locator);\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/questions/locators.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 895,
    "kind": "test",
    "name": "describe178",
    "testId": 178,
    "memberof": "spec/screenplay/questions/locators.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178",
    "access": null,
    "description": "by",
    "lineNumber": 9
  },
  {
    "__docId__": 896,
    "kind": "test",
    "name": "describe179",
    "testId": 179,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe179",
    "access": null,
    "description": "id",
    "lineNumber": 11
  },
  {
    "__docId__": 897,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe179",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe179.it180",
    "access": null,
    "description": "should retrieve a matching element",
    "lineNumber": 13
  },
  {
    "__docId__": 898,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe179",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe179.it181",
    "access": null,
    "description": "should retrieve all matching elements",
    "lineNumber": 20
  },
  {
    "__docId__": 899,
    "kind": "test",
    "name": "describe182",
    "testId": 182,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe182",
    "access": null,
    "description": "css",
    "lineNumber": 30
  },
  {
    "__docId__": 900,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe182",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe182.it183",
    "access": null,
    "description": "should retrieve a matching element",
    "lineNumber": 32
  },
  {
    "__docId__": 901,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe182",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe182.it184",
    "access": null,
    "description": "should retrieve all matching elements",
    "lineNumber": 39
  },
  {
    "__docId__": 902,
    "kind": "test",
    "name": "describe185",
    "testId": 185,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe185",
    "access": null,
    "description": "tagName",
    "lineNumber": 47
  },
  {
    "__docId__": 903,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe185.it186",
    "access": null,
    "description": "should retrieve a matching element",
    "lineNumber": 49
  },
  {
    "__docId__": 904,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe185.it187",
    "access": null,
    "description": "should retrieve all matching elements",
    "lineNumber": 56
  },
  {
    "__docId__": 905,
    "kind": "test",
    "name": "describe188",
    "testId": 188,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe188",
    "access": null,
    "description": "linkText",
    "lineNumber": 64
  },
  {
    "__docId__": 906,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe188",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe188.it189",
    "access": null,
    "description": "should retrieve a matching element",
    "lineNumber": 66
  },
  {
    "__docId__": 907,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe188",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe188.it190",
    "access": null,
    "description": "should retrieve all matching elements",
    "lineNumber": 73
  },
  {
    "__docId__": 908,
    "kind": "test",
    "name": "describe191",
    "testId": 191,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe191",
    "access": null,
    "description": "partialLinkText",
    "lineNumber": 81
  },
  {
    "__docId__": 909,
    "kind": "test",
    "name": "it192",
    "testId": 192,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe191.it192",
    "access": null,
    "description": "should retrieve a matching element",
    "lineNumber": 83
  },
  {
    "__docId__": 910,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe191",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe191.it193",
    "access": null,
    "description": "should retrieve all matching elements",
    "lineNumber": 90
  },
  {
    "__docId__": 911,
    "kind": "test",
    "name": "describe194",
    "testId": 194,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe194",
    "access": null,
    "description": "xpath",
    "lineNumber": 98
  },
  {
    "__docId__": 912,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe194",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe194.it195",
    "access": null,
    "description": "should retrieve a matching element",
    "lineNumber": 100
  },
  {
    "__docId__": 913,
    "kind": "test",
    "name": "it196",
    "testId": 196,
    "memberof": "spec/screenplay/questions/locators.spec.ts~describe178.describe194",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/locators.spec.ts~describe178.describe194.it196",
    "access": null,
    "description": "should retrieve all matching elements",
    "lineNumber": 107
  },
  {
    "__docId__": 914,
    "kind": "testFile",
    "name": "spec/screenplay/questions/targets.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { contain, Ensure, equals, startsWith } from '@serenity-js/assertions';\nimport { actorCalled, Answerable } from '@serenity-js/core';\nimport { given } from 'mocha-testdata';\nimport type { Element } from 'webdriverio';\n\nimport { by, Click, CSSClasses, Navigate, Target, Text } from '../../../src';\n\n/**\n * @test {Target}\n */\ndescribe('Target', () => {\n\n    class ShoppingList {\n        static app = Target.the('shopping list app').located(by.id('shopping-list-app'));\n        static progress = Target.the('progress bar').located(by.css('.progress')).of(ShoppingList.app);\n        static numberOfItemsLeft = Target.the('number of items left').of(ShoppingList.progress).located(by.css('span'));\n\n        static header = Target.the('header').located(by.tagName('h1'));\n        static list = Target.the('shopping list').located(by.tagName('ul'));\n        static items = Target.all('items').of(ShoppingList.app).located(by.tagName('li'));\n        static boughtItems = Target.all('bought items').located(by.css('.bought')).of(ShoppingList.list);\n    }\n\n    describe('allows the actor to locate', () => {\n\n        /**\n         * @test {Target}\n         * @test {TargetElement}\n         */\n        it('a single web element matching the selector', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/targets/shopping_list.html'),\n\n                Ensure.that(Text.of(ShoppingList.header), equals('Shopping list')),\n            ));\n\n        /**\n         * @test {Target}\n         * @test {TargetElements}\n         */\n        it('all web elements matching the selector', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/targets/shopping_list.html'),\n\n                Ensure.that(Text.ofAll(ShoppingList.items), contain('oats')),\n            ));\n\n        /**\n         * @test {Target}\n         * @test {Target.the}\n         * @test {TargetNestedElement}\n         * @test {TargetNestedElement#of}\n         */\n        it('an element relative to another target', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/targets/shopping_list.html'),\n\n                Ensure.that(Text.of(ShoppingList.numberOfItemsLeft), equals('2')),\n            ));\n\n        /**\n         * @test {Target}\n         * @test {Target.all}\n         * @test {TargetNestedElements}\n         * @test {TargetNestedElements#of}\n         */\n        it('all elements relative to another target', () =>\n            actorCalled('Wendy').attemptsTo(\n                Navigate.to('/screenplay/questions/targets/shopping_list.html'),\n\n                Ensure.that(Text.ofAll(ShoppingList.boughtItems), equals([ 'coffee' ])),\n            ));\n    });\n\n    describe('provides a sensible description of', () => {\n\n        describe('an element that', () => {\n\n            /**\n             * @test {Target}\n             * @test {Target.the}\n             * @test {TargetElement}\n             */\n            it('is being targeted', () => {\n                expect(ShoppingList.header.toString())\n                    .to.equal('the header');\n            });\n\n            /**\n             * @test {Target}\n             * @test {Target.the}\n             * @test {TargetNestedElement}\n             * @test {TargetNestedElement#of}\n             */\n            it('is nested', () => {\n                expect(ShoppingList.numberOfItemsLeft.toString())\n                    .to.equal('number of items left of the progress bar of the shopping list app');\n            });\n        });\n\n        describe('elements that', () => {\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             * @test {TargetElements}\n             */\n            it('are being targeted', () => {\n                expect(ShoppingList.items.toString())\n                    .to.equal('items of the shopping list app');\n            });\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             * @test {TargetElements#of}\n             * @test {TargetNestedElements}\n             */\n            it('are nested', () => {\n                expect(ShoppingList.boughtItems.toString())\n                    .to.equal('bought items of the shopping list');\n            });\n        });\n    });\n\n    describe('when filtering a list of targets', () => {\n\n        class AdvancedShoppingList {\n            static Items = Target.all('shopping list items').located(by.css('li'));\n            static Item = Target.the('shopping list item').located(by.css('li'));\n            static Titles = Target.all('shopping list item titles').located(by.css('li span.item-name'));\n            static Item_Name = Target.the('item name').located(by.css('span.item-name'));\n            static Item_Names = Target.all('item names').located(by.css('span.item-name'));\n        }\n\n        describe('and no filters are applied', () => {\n\n            describe('lets the actor interact with the list of matching elements so that it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements#count}\n                 */\n                it('gets the number of items', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(AdvancedShoppingList.Titles.count(), equals(3)),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('picks all the items', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.ofAll(AdvancedShoppingList.Titles), contain('coconut milk')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 * @test {TargetElements#first}\n                 */\n                it('picks the first item', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.of(AdvancedShoppingList.Titles.first()), equals('oats')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 * @test {TargetElements#last}\n                 */\n                it('picks the last item', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.of(AdvancedShoppingList.Titles.last()), equals('coffee')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 * @test {TargetElements#get}\n                 */\n                it('picks the nth item', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.of(AdvancedShoppingList.Titles.get(1)), equals('coconut milk')),\n                    ));\n            });\n\n            describe('provides a sensible description when it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements#count}\n                 * @test {TargetElements#toString}\n                 */\n                it('returns the number of items', () =>\n                    expect(AdvancedShoppingList.Items.count().toString())\n                        .to.equal('the number of shopping list items'));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements#toString}\n                 */\n                it('picks all the items', () =>\n                    expect(AdvancedShoppingList.Items.toString())\n                        .to.equal('shopping list items'));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements#first}\n                 * @test {TargetElements#toString}\n                 */\n                it('picks the first item', () =>\n                    expect(AdvancedShoppingList.Items.first().toString())\n                        .to.equal('the first of shopping list items'));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements#last}\n                 * @test {TargetElements#toString}\n                 */\n                it('picks the last item', () =>\n                    expect(AdvancedShoppingList.Items.last().toString())\n                        .to.equal('the last of shopping list items'));\n\n                given([\n                    { description: '1st', index: 0 },\n                    { description: '2nd', index: 1 },\n                    { description: '3rd', index: 2 },\n                    { description: '4th', index: 3 },\n                    { description: '5th', index: 4 },\n                    { description: '10th', index: 9 },\n                    { description: '11th', index: 10 },\n                    { description: '20th', index: 19 },\n                    { description: '42nd', index: 41 },\n                    { description: '115th', index: 114 },\n                    { description: '1522nd', index: 1521 },\n                ]).it('picks the nth item', ({ description, index }) => {\n                    expect(AdvancedShoppingList.Items.get(index).toString())\n                        .to.equal(`the ${ description } of shopping list items`);\n                });\n            });\n        });\n\n        describe('and a filter is applied', () => {\n\n            const list = AdvancedShoppingList.Items.where(CSSClasses, contain('buy'));\n\n            describe('lets the actor filter the list of matching elements so that it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('gets the number of items', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(list.count(), equals(2)),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('picks all the items', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.ofAll(list), contain('coconut milk x')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('picks the first item', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.of(list.first()), startsWith('oats')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('picks the last item', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.of(list.last()), startsWith('coconut milk')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 * @test {TargetElements}\n                 */\n                it('picks the nth item', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.of(list.get(1)), startsWith('coconut milk')),\n                    ));\n            });\n\n            describe('provides a sensible description when it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('returns the number of items', () =>\n                    expect(list.count().toString())\n                        .to.equal(`the number of shopping list items where CSSClasses property does contain 'buy'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks all the items', () =>\n                    expect(list.toString())\n                        .to.equal(`shopping list items where CSSClasses property does contain 'buy'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the first item', () =>\n                    expect(list.first().toString())\n                        .to.equal(`the first of shopping list items where CSSClasses property does contain 'buy'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the last item', () =>\n                    expect(list.last().toString())\n                        .to.equal(`the last of shopping list items where CSSClasses property does contain 'buy'`));\n\n                given([\n                    { description: '1st', index: 0 },\n                    { description: '2nd', index: 1 },\n                    { description: '3rd', index: 2 },\n                    { description: '4th', index: 3 },\n                    { description: '5th', index: 4 },\n                    { description: '10th', index: 9 },\n                    { description: '11th', index: 10 },\n                    { description: '20th', index: 19 },\n                    { description: '42nd', index: 41 },\n                    { description: '115th', index: 114 },\n                    { description: '1522nd', index: 1521 },\n                ]).it('picks the nth item', ({ description, index }) => {\n                    expect(list.get(index).toString()).to.equal(`the ${ description } of shopping list items where CSSClasses property does contain 'buy'`);\n                });\n            });\n        });\n\n        describe('and multiple filters are applied', () => {\n\n            const list = AdvancedShoppingList.Items.where(CSSClasses, contain('buy')).where(Text, startsWith('coconut'));\n\n            describe('lets the actor filter the list of matching elements so that it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('gets the number of items', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(list.count(), equals(1)),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks all the items', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.ofAll(list), contain('coconut milk x')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the first item', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.of(list.first()), startsWith('coconut milk')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the last item', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.of(list.last()), startsWith('coconut milk')),\n                    ));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the nth item', () =>\n                    actorCalled('Wendy').attemptsTo(\n                        Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                        Ensure.that(Text.of(list.get(0)), startsWith('coconut milk')),\n                    ));\n            });\n\n            describe('provides a sensible description when it', () => {\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('returns the number of answers', () =>\n                    expect(list.count().toString())\n                        .to.equal(`the number of shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks all the items', () =>\n                    expect(list.toString())\n                        .to.equal(`shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the first item', () =>\n                    expect(list.first().toString())\n                        .to.equal(`the first of shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n                /**\n                 * @test {Target}\n                 * @test {Target.all}\n                 */\n                it('picks the last item', () =>\n                    expect(list.last().toString())\n                        .to.equal(`the last of shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`));\n\n                given([\n                    { description: '1st', index: 0 },\n                    { description: '2nd', index: 1 },\n                    { description: '3rd', index: 2 },\n                    { description: '4th', index: 3 },\n                    { description: '5th', index: 4 },\n                    { description: '10th', index: 9 },\n                    { description: '11th', index: 10 },\n                    { description: '20th', index: 19 },\n                    { description: '42nd', index: 41 },\n                    { description: '115th', index: 114 },\n                    { description: '1522nd', index: 1521 },\n                ]).it('picks the nth item', ({ description, index }) => {\n                    expect(list.get(index).toString())\n                        .to.equal(`the ${ description } of shopping list items where CSSClasses property does contain 'buy' and Text property does start with 'coconut'`);\n                });\n            });\n        });\n\n        describe('and interacting with elements on screen', () => {\n\n            const ItemCalled = (name: string) =>    // eslint-disable-line unicorn/consistent-function-scoping\n                AdvancedShoppingList.Items\n                    .where(Text.of(AdvancedShoppingList.Item_Name), equals(name))\n                    .first();\n\n            const ItemsLeftToBuy = () =>            // eslint-disable-line unicorn/consistent-function-scoping\n                AdvancedShoppingList.Items\n                    .where(CSSClasses, contain('buy'));\n\n            // eslint-disable-next-line unicorn/consistent-function-scoping\n            const LinkTo = (item: Answerable<Element<'async'>>) =>\n                Target.the('link to element').of(item).located(by.css('a'));\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             */\n            it('makes it easy for an actor to pick the element of interest', () =>\n                actorCalled('Wendy').attemptsTo(\n                    Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                    Click.on(LinkTo(ItemCalled('coffee'))),\n\n                    Ensure.that(CSSClasses.of(ItemCalled('coffee')), contain('buy')),\n                ));\n\n            /**\n             * @test {Target}\n             * @test {Target.all}\n             */\n            it('makes it easy for an actor to pick all elements of interest', () =>\n                actorCalled('Wendy').attemptsTo(\n                    Navigate.to('/screenplay/questions/targets/advanced_shopping_list.html'),\n\n                    Click.on(LinkTo(ItemCalled('coconut milk'))),\n                    Click.on(LinkTo(ItemCalled('coffee'))),\n\n                    Ensure.that(Text.ofAll(ItemsLeftToBuy()), equals([ 'oats x', 'coffee x' ])),\n                ));\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/screenplay/questions/targets.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 915,
    "kind": "test",
    "name": "describe197",
    "testId": 197,
    "memberof": "spec/screenplay/questions/targets.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197",
    "access": null,
    "description": "Target",
    "lineNumber": 14,
    "testTargets": [
      "Target"
    ]
  },
  {
    "__docId__": 916,
    "kind": "test",
    "name": "describe198",
    "testId": 198,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe198",
    "access": null,
    "description": "allows the actor to locate",
    "lineNumber": 111
  },
  {
    "__docId__": 917,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe198",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe198.it199",
    "access": null,
    "description": "a single web element matching the selector",
    "lineNumber": 117,
    "testTargets": [
      "Target",
      "TargetElement"
    ]
  },
  {
    "__docId__": 918,
    "kind": "test",
    "name": "it200",
    "testId": 200,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe198",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe198.it200",
    "access": null,
    "description": "all web elements matching the selector",
    "lineNumber": 128,
    "testTargets": [
      "Target",
      "TargetElements"
    ]
  },
  {
    "__docId__": 919,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe198",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe198.it201",
    "access": null,
    "description": "an element relative to another target",
    "lineNumber": 141,
    "testTargets": [
      "Target",
      "Target.the",
      "TargetNestedElement",
      "TargetNestedElement#of"
    ]
  },
  {
    "__docId__": 920,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe198",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe198.it202",
    "access": null,
    "description": "all elements relative to another target",
    "lineNumber": 154,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetNestedElements",
      "TargetNestedElements#of"
    ]
  },
  {
    "__docId__": 921,
    "kind": "test",
    "name": "describe203",
    "testId": 203,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe203",
    "access": null,
    "description": "provides a sensible description of",
    "lineNumber": 162
  },
  {
    "__docId__": 922,
    "kind": "test",
    "name": "describe204",
    "testId": 204,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe203",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe203.describe204",
    "access": null,
    "description": "an element that",
    "lineNumber": 164
  },
  {
    "__docId__": 923,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe203.describe204",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe203.describe204.it205",
    "access": null,
    "description": "is being targeted",
    "lineNumber": 171,
    "testTargets": [
      "Target",
      "Target.the",
      "TargetElement"
    ]
  },
  {
    "__docId__": 924,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe203.describe204",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe203.describe204.it206",
    "access": null,
    "description": "is nested",
    "lineNumber": 182,
    "testTargets": [
      "Target",
      "Target.the",
      "TargetNestedElement",
      "TargetNestedElement#of"
    ]
  },
  {
    "__docId__": 925,
    "kind": "test",
    "name": "describe207",
    "testId": 207,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe203",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe203.describe207",
    "access": null,
    "description": "elements that",
    "lineNumber": 188
  },
  {
    "__docId__": 926,
    "kind": "test",
    "name": "it208",
    "testId": 208,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe203.describe207",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe203.describe207.it208",
    "access": null,
    "description": "are being targeted",
    "lineNumber": 195,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 927,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe203.describe207",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe203.describe207.it209",
    "access": null,
    "description": "are nested",
    "lineNumber": 206,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#of",
      "TargetNestedElements"
    ]
  },
  {
    "__docId__": 928,
    "kind": "test",
    "name": "describe210",
    "testId": 210,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197",
    "testDepth": 1,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210",
    "access": null,
    "description": "when filtering a list of targets",
    "lineNumber": 213
  },
  {
    "__docId__": 929,
    "kind": "test",
    "name": "describe211",
    "testId": 211,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211",
    "access": null,
    "description": "and no filters are applied",
    "lineNumber": 285
  },
  {
    "__docId__": 930,
    "kind": "test",
    "name": "describe212",
    "testId": 212,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212",
    "access": null,
    "description": "lets the actor interact with the list of matching elements so that it",
    "lineNumber": 287
  },
  {
    "__docId__": 931,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212.it213",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 294,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#count"
    ]
  },
  {
    "__docId__": 932,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212.it214",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 306,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 933,
    "kind": "test",
    "name": "it215",
    "testId": 215,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212.it215",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 319,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements",
      "TargetElements#first"
    ]
  },
  {
    "__docId__": 934,
    "kind": "test",
    "name": "it216",
    "testId": 216,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212.it216",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 332,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements",
      "TargetElements#last"
    ]
  },
  {
    "__docId__": 935,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe212.it217",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 345,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements",
      "TargetElements#get"
    ]
  },
  {
    "__docId__": 936,
    "kind": "test",
    "name": "describe218",
    "testId": 218,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe218",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 353
  },
  {
    "__docId__": 937,
    "kind": "test",
    "name": "it219",
    "testId": 219,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe218",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe218.it219",
    "access": null,
    "description": "returns the number of items",
    "lineNumber": 361,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#count",
      "TargetElements#toString"
    ]
  },
  {
    "__docId__": 938,
    "kind": "test",
    "name": "it220",
    "testId": 220,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe218",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe218.it220",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 370,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#toString"
    ]
  },
  {
    "__docId__": 939,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe218",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe218.it221",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 380,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#first",
      "TargetElements#toString"
    ]
  },
  {
    "__docId__": 940,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe218",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe211.describe218.it222",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 390,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements#last",
      "TargetElements#toString"
    ]
  },
  {
    "__docId__": 941,
    "kind": "test",
    "name": "describe223",
    "testId": 223,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223",
    "access": null,
    "description": "and a filter is applied",
    "lineNumber": 413
  },
  {
    "__docId__": 942,
    "kind": "test",
    "name": "describe224",
    "testId": 224,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224",
    "access": null,
    "description": "lets the actor filter the list of matching elements so that it",
    "lineNumber": 417
  },
  {
    "__docId__": 943,
    "kind": "test",
    "name": "it225",
    "testId": 225,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224.it225",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 424,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 944,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224.it226",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 436,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 945,
    "kind": "test",
    "name": "it227",
    "testId": 227,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224.it227",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 448,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 946,
    "kind": "test",
    "name": "it228",
    "testId": 228,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224.it228",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 460,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 947,
    "kind": "test",
    "name": "it229",
    "testId": 229,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe224.it229",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 472,
    "testTargets": [
      "Target",
      "Target.all",
      "TargetElements"
    ]
  },
  {
    "__docId__": 948,
    "kind": "test",
    "name": "describe230",
    "testId": 230,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe230",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 480
  },
  {
    "__docId__": 949,
    "kind": "test",
    "name": "it231",
    "testId": 231,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe230",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe230.it231",
    "access": null,
    "description": "returns the number of items",
    "lineNumber": 486,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 950,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe230",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe230.it232",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 494,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 951,
    "kind": "test",
    "name": "it233",
    "testId": 233,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe230",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe230.it233",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 502,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 952,
    "kind": "test",
    "name": "it234",
    "testId": 234,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe230",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe223.describe230.it234",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 510,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 953,
    "kind": "test",
    "name": "describe235",
    "testId": 235,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235",
    "access": null,
    "description": "and multiple filters are applied",
    "lineNumber": 532
  },
  {
    "__docId__": 954,
    "kind": "test",
    "name": "describe236",
    "testId": 236,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236",
    "access": null,
    "description": "lets the actor filter the list of matching elements so that it",
    "lineNumber": 536
  },
  {
    "__docId__": 955,
    "kind": "test",
    "name": "it237",
    "testId": 237,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236.it237",
    "access": null,
    "description": "gets the number of items",
    "lineNumber": 542,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 956,
    "kind": "test",
    "name": "it238",
    "testId": 238,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236.it238",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 553,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 957,
    "kind": "test",
    "name": "it239",
    "testId": 239,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236.it239",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 564,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 958,
    "kind": "test",
    "name": "it240",
    "testId": 240,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236.it240",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 575,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 959,
    "kind": "test",
    "name": "it241",
    "testId": 241,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe236.it241",
    "access": null,
    "description": "picks the nth item",
    "lineNumber": 586,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 960,
    "kind": "test",
    "name": "describe242",
    "testId": 242,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe242",
    "access": null,
    "description": "provides a sensible description when it",
    "lineNumber": 594
  },
  {
    "__docId__": 961,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe242",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe242.it243",
    "access": null,
    "description": "returns the number of answers",
    "lineNumber": 600,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 962,
    "kind": "test",
    "name": "it244",
    "testId": 244,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe242",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe242.it244",
    "access": null,
    "description": "picks all the items",
    "lineNumber": 608,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 963,
    "kind": "test",
    "name": "it245",
    "testId": 245,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe242",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe242.it245",
    "access": null,
    "description": "picks the first item",
    "lineNumber": 616,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 964,
    "kind": "test",
    "name": "it246",
    "testId": 246,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe242",
    "testDepth": 4,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe235.describe242.it246",
    "access": null,
    "description": "picks the last item",
    "lineNumber": 624,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 965,
    "kind": "test",
    "name": "describe247",
    "testId": 247,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210",
    "testDepth": 2,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe247",
    "access": null,
    "description": "and interacting with elements on screen",
    "lineNumber": 647
  },
  {
    "__docId__": 966,
    "kind": "test",
    "name": "it248",
    "testId": 248,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe247",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe247.it248",
    "access": null,
    "description": "makes it easy for an actor to pick the element of interest",
    "lineNumber": 666,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 967,
    "kind": "test",
    "name": "it249",
    "testId": 249,
    "memberof": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe247",
    "testDepth": 3,
    "static": true,
    "longname": "spec/screenplay/questions/targets.spec.ts~describe197.describe210.describe247.it249",
    "access": null,
    "description": "makes it easy for an actor to pick all elements of interest",
    "lineNumber": 679,
    "testTargets": [
      "Target",
      "Target.all"
    ]
  },
  {
    "__docId__": 968,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/Photographer.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, givenFollowingEvents } from '@integration/testing-tools';\nimport { AssertionError, ImplementationPendingError, LogicError } from '@serenity-js/core';\nimport { SceneFinished, SceneStarts, TaskFinished, TaskStarts, TestRunFinished } from '@serenity-js/core/lib/events';\nimport { FileSystemLocation, Path } from '@serenity-js/core/lib/io';\nimport {\n    ActivityDetails,\n    Category,\n    CorrelationId,\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ExecutionIgnored,\n    ExecutionSkipped,\n    ExecutionSuccessful,\n    ImplementationPending,\n    Name,\n    Outcome,\n    ScenarioDetails,\n} from '@serenity-js/core/lib/model';\nimport { given } from 'mocha-testdata';\n\nimport { Photographer, TakePhotosOfFailures } from '../../../../src';\nimport { create } from './create';\n\ndescribe('Photographer', () => {\n\n    const\n        defaultCardScenario = new ScenarioDetails(\n            new Name('Paying with a default card'),\n            new Category('Online Checkout'),\n            new FileSystemLocation(\n                new Path(`payments/checkout.feature`),\n            ),\n        ),\n        pickACard = new ActivityDetails(new Name('Pick the default credit card')),\n        sceneId = new CorrelationId('a-scene-id'),\n        activityId = new CorrelationId('activity-id');\n\n    it('complains when sent DomainEvents before getting assigned to a Stage', () => {\n        const photographer = new Photographer(new TakePhotosOfFailures());\n        expect(() => photographer.notifyOf(new SceneStarts(sceneId, defaultCardScenario)))\n            .to.throw(LogicError, `Photographer needs to be assigned to the Stage before it can be notified of any DomainEvents`);\n    });\n\n    describe(`when there's no actor in the spotlight`, () => {\n\n        given(\n            new ExecutionSkipped(),\n            new ExecutionSuccessful(),\n        ).\n        it('doesn\\'t take a picture if everything goes well', (outcome: Outcome) => {\n            const { stage, recorder } = create();\n\n            const photographer = new Photographer(new TakePhotosOfFailures(), stage);\n            stage.assign(photographer);\n\n            givenFollowingEvents(\n                new SceneStarts(sceneId, defaultCardScenario),\n                new TaskStarts(sceneId, activityId, pickACard),\n                new TaskFinished(sceneId, activityId, pickACard, outcome),\n                new SceneFinished(sceneId, defaultCardScenario, outcome),\n                new TestRunFinished(),\n            ).areSentTo(photographer);\n\n            return stage.waitForNextCue().then(() => {\n                expect(recorder.events).to.have.lengthOf(0);\n            });\n        });\n\n        given(\n            { description: 'compromised',               outcome: new ExecutionCompromised(new Error('Database is down'))                                                },\n            { description: 'error',                     outcome: new ExecutionFailedWithError(new TypeError('Wrong type'))                                                          },\n            { description: 'assertion error',           outcome: new ExecutionFailedWithAssertionError(new AssertionError(`expected false to equal true`, false, true)) },\n            { description: 'implementation pending',    outcome: new ImplementationPending(new ImplementationPendingError('method missing'))                            },\n            { description: 'ignored',                   outcome: new ExecutionIgnored(new Error('Failed, retrying'))                                                    },\n        ).\n        it('does nothing, even when a problem occurs', ({ outcome }) => {\n            const { stage, recorder } = create();\n\n            const photographer = new Photographer(new TakePhotosOfFailures(), stage);\n            stage.assign(photographer);\n\n            givenFollowingEvents(\n                new SceneStarts(sceneId, defaultCardScenario),\n                new SceneFinished(sceneId, defaultCardScenario, outcome),\n                new TestRunFinished(),\n            ).areSentTo(photographer);\n\n            return stage.waitForNextCue().then(() => {\n                expect(recorder.events).to.have.lengthOf(0);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/stage/crew/photographer/Photographer.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 969,
    "kind": "test",
    "name": "describe250",
    "testId": 250,
    "memberof": "spec/stage/crew/photographer/Photographer.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/Photographer.spec.ts~describe250",
    "access": null,
    "description": "Photographer",
    "lineNumber": 27
  },
  {
    "__docId__": 970,
    "kind": "test",
    "name": "it251",
    "testId": 251,
    "memberof": "spec/stage/crew/photographer/Photographer.spec.ts~describe250",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/Photographer.spec.ts~describe250.it251",
    "access": null,
    "description": "complains when sent DomainEvents before getting assigned to a Stage",
    "lineNumber": 41
  },
  {
    "__docId__": 971,
    "kind": "test",
    "name": "describe252",
    "testId": 252,
    "memberof": "spec/stage/crew/photographer/Photographer.spec.ts~describe250",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/Photographer.spec.ts~describe250.describe252",
    "access": null,
    "lineNumber": 47
  },
  {
    "__docId__": 972,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { Duration } from '@serenity-js/core';\nimport { ActivityFinished, ActivityRelatedArtifactGenerated, ActivityStarts, ArtifactGenerated, AsyncOperationAttempted, DomainEvent } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Photo } from '@serenity-js/core/lib/model';\nimport { Stage } from '@serenity-js/core/lib/stage';\n\nimport { Photographer, TakePhotosBeforeAndAfterInteractions } from '../../../../../src/stage';\nimport { create } from '../create';\nimport { Perform } from '../fixtures';\n\ndescribe('Photographer', function () {\n\n    this.timeout(60 * 1000);\n\n    describe('when instructed to take photos before and after all interactions', () => {\n\n        let photographer: Photographer,\n            stage: Stage,\n            recorder: EventRecorder;\n\n        beforeEach(() => {\n            const testSubject = create(Duration.ofSeconds(10));\n            stage = testSubject.stage;\n            recorder = testSubject.recorder;\n\n            photographer = new Photographer(new TakePhotosBeforeAndAfterInteractions(), stage);\n            stage.assign(photographer);\n        });\n\n        it('takes a before and after photo when the interaction goes well', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                const events = stringified(recorder.events);\n\n                PickEvent.from(recorder.events)\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'Before Betty succeeds \\(#1\\)'...$/);\n                    })\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'After Betty succeeds \\(#1\\)'...$/);\n                    });\n            })));\n\n        it('takes a photo when a problem occurs', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                const events = stringified(recorder.events);\n\n                PickEvent.from(recorder.events)\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'Before Betty fails due to Error'...$/);\n                    })\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'After Betty fails due to Error'...$/);\n                    });\n            })));\n\n        it('takes a photo before and after Interaction, even though nested tasks might all be marked as failing', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.taskWith(\n                    Perform.taskWith(\n                        Perform.interactionThatFailsWith(TypeError),\n                    ),\n                ),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                const events = stringified(recorder.events);\n\n                PickEvent.from(recorder.events)\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'Before Betty fails due to TypeError'...$/);\n                    })\n                    .next(AsyncOperationAttempted, event => {\n                        expect(event.taskDescription.value, events).to.match(/Taking screenshot of 'After Betty fails due to TypeError'...$/);\n                    });\n            })));\n\n        it('takes two photos per interaction', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n                Perform.interactionThatSucceeds(2),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                let cid1: CorrelationId,\n                    cid2: CorrelationId;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityStarts, event => { cid1 = event.activityId; })\n                    .next(ActivityStarts, event => { cid2 = event.activityId; });\n\n                const\n                    firstActivityEvents  = recorder.events.filter(withCorrelationIdOf(cid1)),\n                    secondActivityEvents = recorder.events.filter(withCorrelationIdOf(cid2));\n\n                expect(firstActivityEvents).to.have.lengthOf(4);\n                expect(secondActivityEvents).to.have.lengthOf(4);\n\n                PickEvent.from(firstActivityEvents)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Before Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/After Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n\n                PickEvent.from(secondActivityEvents)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Before Betty succeeds \\(#2\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/After Betty succeeds \\(#2\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('includes the browser context in the name of the emitted artifact', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().\n            then(() => {\n\n                const capabilities = browser.capabilities;\n                const events = stringified(recorder.events);\n\n                PickEvent.from(recorder.events)\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value, events).to.equal(\n                            `${ capabilities.platformName }-${ capabilities.browserName }-${ capabilities.browserVersion }-Before Betty succeeds (#1)`,\n                        );\n                        expect(event.artifact, events).to.be.instanceof(Photo);\n                    })\n                    .next(ArtifactGenerated, event => {\n                        expect(event.name.value, events).to.equal(\n                            `${ capabilities.platformName }-${ capabilities.browserName }-${ capabilities.browserVersion }-After Betty succeeds (#1)`,\n                        );\n                        expect(event.artifact, events).to.be.instanceof(Photo);\n                    });\n            })));\n    });\n});\n\nfunction stringified(events: DomainEvent[]): string {\n    return JSON.stringify(events.map(event => event.toJSON()), undefined, 4);\n}\n\nfunction withCorrelationIdOf(cid: CorrelationId) {\n    return (event: DomainEvent) => {\n        const activityId = (event as ActivityRelatedArtifactGenerated | ActivityStarts | ActivityFinished).activityId;\n\n        return activityId && cid.equals(activityId);\n    };\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 973,
    "kind": "test",
    "name": "describe253",
    "testId": 253,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253",
    "access": null,
    "description": "Photographer",
    "lineNumber": 13
  },
  {
    "__docId__": 974,
    "kind": "test",
    "name": "describe254",
    "testId": 254,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254",
    "access": null,
    "description": "when instructed to take photos before and after all interactions",
    "lineNumber": 17
  },
  {
    "__docId__": 975,
    "kind": "test",
    "name": "it255",
    "testId": 255,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254.it255",
    "access": null,
    "description": "takes a before and after photo when the interaction goes well",
    "lineNumber": 32
  },
  {
    "__docId__": 976,
    "kind": "test",
    "name": "it256",
    "testId": 256,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254.it256",
    "access": null,
    "description": "takes a photo when a problem occurs",
    "lineNumber": 48
  },
  {
    "__docId__": 977,
    "kind": "test",
    "name": "it257",
    "testId": 257,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254.it257",
    "access": null,
    "description": "takes a photo before and after Interaction, even though nested tasks might all be marked as failing",
    "lineNumber": 64
  },
  {
    "__docId__": 978,
    "kind": "test",
    "name": "it258",
    "testId": 258,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254.it258",
    "access": null,
    "description": "takes two photos per interaction",
    "lineNumber": 84
  },
  {
    "__docId__": 979,
    "kind": "test",
    "name": "it259",
    "testId": 259,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosBeforeAndAfterInteractions.spec.ts~describe253.describe254.it259",
    "access": null,
    "description": "includes the browser context in the name of the emitted artifact",
    "lineNumber": 125
  },
  {
    "__docId__": 980,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { ActivityRelatedArtifactGenerated, ActivityStarts } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Photo } from '@serenity-js/core/lib/model';\nimport { Stage } from '@serenity-js/core/lib/stage';\n\nimport { Photographer, TakePhotosOfFailures } from '../../../../../src';\nimport { create } from '../create';\nimport { Perform } from '../fixtures';\n\ndescribe('Photographer', () => {\n\n    describe('when instructed to take a photo of failed interactions,', () => {\n\n        let photographer: Photographer,\n            stage: Stage,\n            recorder: EventRecorder;\n\n        beforeEach(() => {\n            const sut = create();\n            stage = sut.stage;\n            recorder = sut.recorder;\n\n            photographer = new Photographer(new TakePhotosOfFailures(), stage);\n            stage.assign(photographer);\n        });\n\n        it('does nothing if everything goes well', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n                expect(recorder.events).to.have.lengthOf(2);    // Interaction starts and finishes\n            })));\n\n        it('takes a photo when a problem occurs', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to Error$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it(`correlates the photo with the activity it is concerning`, () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                let activityId: CorrelationId;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityStarts, event => {\n                        activityId = event.activityId;\n                    })\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.activityId).to.equal(activityId);\n                    });\n            })));\n\n        it('takes only one picture, even though nested tasks might all be marked as failing', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.taskWith(\n                    Perform.taskWith(\n                        Perform.interactionThatFailsWith(TypeError),\n                    ),\n                ),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to TypeError$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it(`includes the browser context in the name of the emitted artifact`, () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().\n            then(() => {\n\n                const capabilities = browser.capabilities;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.equal(\n                            `${ capabilities.platformName }-${ capabilities.browserName }-${ capabilities.browserVersion }-Betty fails due to Error`,\n                        );\n                    });\n            })));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 981,
    "kind": "test",
    "name": "describe260",
    "testId": 260,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260",
    "access": null,
    "description": "Photographer",
    "lineNumber": 12
  },
  {
    "__docId__": 982,
    "kind": "test",
    "name": "describe261",
    "testId": 261,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261",
    "access": null,
    "description": "when instructed to take a photo of failed interactions,",
    "lineNumber": 14
  },
  {
    "__docId__": 983,
    "kind": "test",
    "name": "it262",
    "testId": 262,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261.it262",
    "access": null,
    "description": "does nothing if everything goes well",
    "lineNumber": 29
  },
  {
    "__docId__": 984,
    "kind": "test",
    "name": "it263",
    "testId": 263,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261.it263",
    "access": null,
    "description": "takes a photo when a problem occurs",
    "lineNumber": 36
  },
  {
    "__docId__": 985,
    "kind": "test",
    "name": "it264",
    "testId": 264,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261.it264",
    "access": null,
    "lineNumber": 48
  },
  {
    "__docId__": 986,
    "kind": "test",
    "name": "it265",
    "testId": 265,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261.it265",
    "access": null,
    "description": "takes only one picture, even though nested tasks might all be marked as failing",
    "lineNumber": 64
  },
  {
    "__docId__": 987,
    "kind": "test",
    "name": "it266",
    "testId": 266,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfFailures.spec.ts~describe260.describe261.it266",
    "access": null,
    "lineNumber": 80
  },
  {
    "__docId__": 988,
    "kind": "testFile",
    "name": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { ActivityRelatedArtifactGenerated, ActivityStarts, InteractionFinished, InteractionStarts } from '@serenity-js/core/lib/events';\nimport { CorrelationId, Photo } from '@serenity-js/core/lib/model';\nimport { Stage } from '@serenity-js/core/lib/stage';\n\nimport { Photographer, TakePhotosOfInteractions } from '../../../../../src';\nimport { create } from '../create';\nimport { Perform } from '../fixtures';\n\ndescribe('Photographer', () => {\n\n    describe('when instructed to take a photo of all interactions', () => {\n\n        let photographer: Photographer,\n            stage: Stage,\n            recorder: EventRecorder;\n\n        beforeEach(() => {\n            const testSubject = create();\n            stage = testSubject.stage;\n            recorder = testSubject.recorder;\n\n            photographer = new Photographer(new TakePhotosOfInteractions(), stage);\n            stage.assign(photographer);\n        });\n\n        it('takes a photo when the interaction goes well', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('takes a photo when a problem occurs', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to Error$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it(`correlates the photo with the activity it's concerning`, () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatFailsWith(Error),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                let activityId: CorrelationId;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityStarts, event => {\n                        activityId = event.activityId;\n                    })\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.activityId).to.equal(activityId);\n                    });\n            })));\n\n        it('takes only one photo, even though nested tasks might all be marked as failing', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.taskWith(\n                    Perform.taskWith(\n                        Perform.interactionThatFailsWith(TypeError),\n                    ),\n                ),\n            )).to.be.rejected.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty fails due to TypeError$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('takes one photo per interaction', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n                Perform.interactionThatSucceeds(2),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty succeeds \\(#1\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    })\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.match(/Betty succeeds \\(#2\\)$/);\n                        expect(event.artifact).to.be.instanceof(Photo);\n                    });\n            })));\n\n        it('includes the browser context in the name of the emitted artifact', () =>\n            expect(stage.theActorCalled('Betty').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().\n            then(() => {\n\n                const capabilities = browser.capabilities;\n\n                PickEvent.from(recorder.events)\n                    .next(ActivityRelatedArtifactGenerated, event => {\n                        expect(event.name.value).to.equal(\n                            `${ capabilities.platformName }-${ capabilities.browserName }-${ capabilities.browserVersion }-Betty succeeds (#1)`,\n                        );\n                    });\n            })));\n\n        it(`does not attempt to take a photo if the actor in the spotlight can't BrowseTheWeb`, () =>\n            expect(stage.theActorCalled('Adam').attemptsTo(\n                Perform.interactionThatSucceeds(1),\n            )).to.be.fulfilled.then(() => stage.waitForNextCue().then(() => {\n\n                expect(recorder.events.length).to.equal(2);\n                expect(recorder.events[0]).to.be.instanceOf(InteractionStarts);\n                expect(recorder.events[1]).to.be.instanceOf(InteractionFinished);\n\n                // no artifacts generated for an actor with no ability to BrowseTheWeb\n            })));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/webdriverio/spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 989,
    "kind": "test",
    "name": "describe267",
    "testId": 267,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267",
    "access": null,
    "description": "Photographer",
    "lineNumber": 12
  },
  {
    "__docId__": 990,
    "kind": "test",
    "name": "describe268",
    "testId": 268,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267",
    "testDepth": 1,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268",
    "access": null,
    "description": "when instructed to take a photo of all interactions",
    "lineNumber": 14
  },
  {
    "__docId__": 991,
    "kind": "test",
    "name": "it269",
    "testId": 269,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268.it269",
    "access": null,
    "description": "takes a photo when the interaction goes well",
    "lineNumber": 29
  },
  {
    "__docId__": 992,
    "kind": "test",
    "name": "it270",
    "testId": 270,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268.it270",
    "access": null,
    "description": "takes a photo when a problem occurs",
    "lineNumber": 41
  },
  {
    "__docId__": 993,
    "kind": "test",
    "name": "it271",
    "testId": 271,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268.it271",
    "access": null,
    "lineNumber": 53
  },
  {
    "__docId__": 994,
    "kind": "test",
    "name": "it272",
    "testId": 272,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268.it272",
    "access": null,
    "description": "takes only one photo, even though nested tasks might all be marked as failing",
    "lineNumber": 69
  },
  {
    "__docId__": 995,
    "kind": "test",
    "name": "it273",
    "testId": 273,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268.it273",
    "access": null,
    "description": "takes one photo per interaction",
    "lineNumber": 85
  },
  {
    "__docId__": 996,
    "kind": "test",
    "name": "it274",
    "testId": 274,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268.it274",
    "access": null,
    "description": "includes the browser context in the name of the emitted artifact",
    "lineNumber": 102
  },
  {
    "__docId__": 997,
    "kind": "test",
    "name": "it275",
    "testId": 275,
    "memberof": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268",
    "testDepth": 2,
    "static": true,
    "longname": "spec/stage/crew/photographer/strategies/TakePhotosOfInteractions.spec.ts~describe267.describe268.it275",
    "access": null,
    "lineNumber": 118
  }
]