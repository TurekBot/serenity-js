[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "AxiosError",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L85",
    "longname": "AxiosError",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "AxiosInstance",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L130",
    "longname": "AxiosInstance",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "AxiosRequestConfig",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L44",
    "longname": "AxiosRequestConfig",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "AxiosPromise",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L94",
    "longname": "AxiosPromise",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "AxiosResponse",
    "externalLink": "https://github.com/axios/axios/blob/v0.21.1/index.d.ts#L76",
    "longname": "AxiosResponse",
    "memberof": "src/.imports-from-axios.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "longname": "Proxy",
    "memberof": "src/.imports-from-mdn.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "ProtractorConfig",
    "externalLink": "https://github.com/angular/protractor/blob/master/lib/config.ts",
    "longname": "protractor~ProtractorConfig",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "Runner",
    "externalLink": "https://github.com/angular/protractor/blob/master/lib/runner.ts",
    "longname": "protractor~Runner",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "ElementArrayFinder",
    "externalLink": "https://www.protractortest.org/#/api?view=ElementArrayFinder",
    "longname": "ElementArrayFinder",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "ElementFinder",
    "externalLink": "https://www.protractortest.org/#/api?view=ElementFinder",
    "longname": "ElementFinder",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "ProtractorBrowser",
    "externalLink": "https://www.protractortest.org/#/api?view=ProtractorBrowser",
    "longname": "ProtractorBrowser",
    "memberof": "src/.imports-from-protractor.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "Actions",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/input_exports_Actions.html",
    "longname": "selenium-webdriver~Actions",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "AlertPromise",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_AlertPromise.html",
    "longname": "selenium-webdriver~AlertPromise",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "By",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/by_exports_By.html",
    "longname": "selenium-webdriver~By",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "Capabilities",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_Capabilities.html",
    "longname": "selenium-webdriver~Capabilities",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "Key",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_Key.html",
    "longname": "selenium-webdriver~Key",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Navigation",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_Navigation.html",
    "longname": "selenium-webdriver~Navigation",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "Options",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/ie_exports_Options.html",
    "longname": "selenium-webdriver~Options",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "WebElement",
    "externalLink": "https://www.selenium.dev/selenium/docs/api/javascript/module/selenium-webdriver/index_exports_WebElement.html",
    "longname": "selenium-webdriver~WebElement",
    "memberof": "src/.imports-from-selenium-webdriver.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "Serenity",
    "externalLink": "/modules/core/class/src/Serenity.ts~Serenity.html",
    "longname": "@serenity-js/core~Serenity",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "SerenityConfig",
    "externalLink": "/modules/core/class/src/SerenityConfig.ts~SerenityConfig.html",
    "longname": "@serenity-js/core~SerenityConfig",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "AssertionError",
    "externalLink": "/modules/core/class/src/errors/AssertionError.ts~AssertionError.html",
    "longname": "@serenity-js/core/lib/errors~AssertionError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "ConfigurationError",
    "externalLink": "/modules/core/class/src/errors/ConfigurationError.ts~ConfigurationError.html",
    "longname": "@serenity-js/core/lib/errors~ConfigurationError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "ImplementationPendingError",
    "externalLink": "/modules/core/class/src/errors/ImplementationPendingError.ts~ImplementationPendingError.html",
    "longname": "@serenity-js/core/lib/errors~ImplementationPendingError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "LogicError",
    "externalLink": "/modules/core/class/src/errors/LogicError.ts~LogicError.html",
    "longname": "@serenity-js/core/lib/errors~LogicError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "RuntimeError",
    "externalLink": "/modules/core/class/src/errors/RuntimeError.ts~RuntimeError.html",
    "longname": "@serenity-js/core/lib/errors~RuntimeError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "TestCompromisedError",
    "externalLink": "/modules/core/class/src/errors/TestCompromisedError.ts~TestCompromisedError.html",
    "longname": "@serenity-js/core/lib/errors~TestCompromisedError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "UnknownError",
    "externalLink": "/modules/core/class/src/errors/UnknownError.ts~UnknownError.html",
    "longname": "@serenity-js/core/lib/errors~UnknownError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "ActivityFinished",
    "externalLink": "/modules/core/class/src/events/ActivityFinished.ts~ActivityFinished.html",
    "longname": "@serenity-js/core/lib/events~ActivityFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "ActivityRelatedArtifactArchived",
    "externalLink": "/modules/core/class/src/events/ActivityRelatedArtifactArchived.ts~ActivityRelatedArtifactArchived.html",
    "longname": "@serenity-js/core/lib/events~ActivityRelatedArtifactArchived",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "ActivityRelatedArtifactGenerated",
    "externalLink": "/modules/core/class/src/events/ActivityRelatedArtifactGenerated.ts~ActivityRelatedArtifactGenerated.html",
    "longname": "@serenity-js/core/lib/events~ActivityRelatedArtifactGenerated",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "ActivityStarts",
    "externalLink": "/modules/core/class/src/events/ActivityStarts.ts~ActivityStarts.html",
    "longname": "@serenity-js/core/lib/events~ActivityStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "ArtifactArchived",
    "externalLink": "/modules/core/class/src/events/ArtifactArchived.ts~ArtifactArchived.html",
    "longname": "@serenity-js/core/lib/events~ArtifactArchived",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "ArtifactGenerated",
    "externalLink": "/modules/core/class/src/events/ArtifactGenerated.ts~ArtifactGenerated.html",
    "longname": "@serenity-js/core/lib/events~ArtifactGenerated",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "AsyncOperationAttempted",
    "externalLink": "/modules/core/class/src/events/AsyncOperationAttempted.ts~AsyncOperationAttempted.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationAttempted",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "AsyncOperationCompleted",
    "externalLink": "/modules/core/class/src/events/AsyncOperationCompleted.ts~AsyncOperationCompleted.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationCompleted",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "AsyncOperationFailed",
    "externalLink": "/modules/core/class/src/events/AsyncOperationFailed.ts~AsyncOperationFailed.html",
    "longname": "@serenity-js/core/lib/events~AsyncOperationFailed",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "BusinessRuleDetected",
    "externalLink": "/modules/core/class/src/events/BusinessRuleDetected.ts~BusinessRuleDetected.html",
    "longname": "@serenity-js/core/lib/events~BusinessRuleDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "DomainEvent",
    "externalLink": "/modules/core/class/src/events/DomainEvent.ts~DomainEvent.html",
    "longname": "@serenity-js/core/lib/events~DomainEvent",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "FeatureNarrativeDetected",
    "externalLink": "/modules/core/class/src/events/FeatureNarrativeDetected.ts~FeatureNarrativeDetected.html",
    "longname": "@serenity-js/core/lib/events~FeatureNarrativeDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "InteractionFinished",
    "externalLink": "/modules/core/class/src/events/InteractionFinished.ts~InteractionFinished.html",
    "longname": "@serenity-js/core/lib/events~InteractionFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "InteractionStarts",
    "externalLink": "/modules/core/class/src/events/InteractionStarts.ts~InteractionStarts.html",
    "longname": "@serenity-js/core/lib/events~InteractionStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "RetryableSceneDetected",
    "externalLink": "/modules/core/class/src/events/RetryableSceneDetected.ts~RetryableSceneDetected.html",
    "longname": "@serenity-js/core/lib/events~RetryableSceneDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "external",
    "name": "SceneBackgroundDetected",
    "externalLink": "/modules/core/class/src/events/SceneBackgroundDetected.ts~SceneBackgroundDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneBackgroundDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 49,
    "kind": "external",
    "name": "SceneDescriptionDetected",
    "externalLink": "/modules/core/class/src/events/SceneDescriptionDetected.ts~SceneDescriptionDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneDescriptionDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 50,
    "kind": "external",
    "name": "SceneFinished",
    "externalLink": "/modules/core/class/src/events/SceneFinished.ts~SceneFinished.html",
    "longname": "@serenity-js/core/lib/events~SceneFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 51,
    "kind": "external",
    "name": "SceneFinishes",
    "externalLink": "/modules/core/class/src/events/SceneFinishes.ts~SceneFinishes.html",
    "longname": "@serenity-js/core/lib/events~SceneFinishes",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 52,
    "kind": "external",
    "name": "SceneParametersDetected",
    "externalLink": "/modules/core/class/src/events/SceneParametersDetected.ts~SceneParametersDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneParametersDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 53,
    "kind": "external",
    "name": "SceneSequenceDetected",
    "externalLink": "/modules/core/class/src/events/SceneSequenceDetected.ts~SceneSequenceDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneSequenceDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 54,
    "kind": "external",
    "name": "SceneStarts",
    "externalLink": "/modules/core/class/src/events/SceneStarts.ts~SceneStarts.html",
    "longname": "@serenity-js/core/lib/events~SceneStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 55,
    "kind": "external",
    "name": "SceneTagged",
    "externalLink": "/modules/core/class/src/events/SceneTagged.ts~SceneTagged.html",
    "longname": "@serenity-js/core/lib/events~SceneTagged",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 56,
    "kind": "external",
    "name": "SceneTemplateDetected",
    "externalLink": "/modules/core/class/src/events/SceneTemplateDetected.ts~SceneTemplateDetected.html",
    "longname": "@serenity-js/core/lib/events~SceneTemplateDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 57,
    "kind": "external",
    "name": "TaskFinished",
    "externalLink": "/modules/core/class/src/events/TaskFinished.ts~TaskFinished.html",
    "longname": "@serenity-js/core/lib/events~TaskFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 58,
    "kind": "external",
    "name": "TaskStarts",
    "externalLink": "/modules/core/class/src/events/TaskStarts.ts~TaskStarts.html",
    "longname": "@serenity-js/core/lib/events~TaskStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 59,
    "kind": "external",
    "name": "TestRunFinished",
    "externalLink": "/modules/core/class/src/events/TestRunFinished.ts~TestRunFinished.html",
    "longname": "@serenity-js/core/lib/events~TestRunFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 60,
    "kind": "external",
    "name": "TestRunFinishes",
    "externalLink": "/modules/core/class/src/events/TestRunFinishes.ts~TestRunFinishes.html",
    "longname": "@serenity-js/core/lib/events~TestRunFinishes",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 61,
    "kind": "external",
    "name": "TestRunStarts",
    "externalLink": "/modules/core/class/src/events/TestRunStarts.ts~TestRunStarts.html",
    "longname": "@serenity-js/core/lib/events~TestRunStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 62,
    "kind": "external",
    "name": "TestRunnerDetected",
    "externalLink": "/modules/core/class/src/events/TestRunnerDetected.ts~TestRunnerDetected.html",
    "longname": "@serenity-js/core/lib/events~TestRunnerDetected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 63,
    "kind": "external",
    "name": "TestSuiteFinished",
    "externalLink": "/modules/core/class/src/events/TestSuiteFinished.ts~TestSuiteFinished.html",
    "longname": "@serenity-js/core/lib/events~TestSuiteFinished",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 64,
    "kind": "external",
    "name": "TestSuiteStarts",
    "externalLink": "/modules/core/class/src/events/TestSuiteStarts.ts~TestSuiteStarts.html",
    "longname": "@serenity-js/core/lib/events~TestSuiteStarts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "name": "serenity",
    "externalLink": "/modules/core/variable/src/instance.ts~serenity.html",
    "longname": "@serenity-js/core~serenity",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "name": "configure",
    "externalLink": "/modules/core/function/index.html#static-function-configure",
    "longname": "@serenity-js/core~configure",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "name": "engage",
    "externalLink": "/modules/core/function/index.html#static-function-engage",
    "longname": "@serenity-js/core~engage",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "name": "actorCalled",
    "externalLink": "/modules/core/function/index.html#static-function-actorCalled",
    "longname": "@serenity-js/core~actorCalled",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "name": "actorInTheSpotlight",
    "externalLink": "/modules/core/function/index.html#static-function-actorInTheSpotlight",
    "longname": "@serenity-js/core~actorInTheSpotlight",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "name": "AssertionReportDiffer",
    "externalLink": "/modules/core/class/src/io/AssertionReportDiffer.ts~AssertionReportDiffer.html",
    "longname": "@serenity-js/core/lib/io~AssertionReportDiffer",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "name": "Config",
    "externalLink": "/modules/core/class/src/io/Config.ts~Config.html",
    "longname": "@serenity-js/core/lib/io~Config",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "name": "SerialisedError",
    "externalLink": "/modules/core/class/src/io/ErrorSerialiser.ts~SerialisedError.html",
    "longname": "@serenity-js/core/lib/io~SerialisedError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "name": "ErrorSerialiser",
    "externalLink": "/modules/core/class/src/io/ErrorSerialiser.ts~ErrorSerialiser.html",
    "longname": "@serenity-js/core/lib/io~ErrorSerialiser",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "name": "FileFinder",
    "externalLink": "/modules/core/class/src/io/FileFinder.ts~FileFinder.html",
    "longname": "@serenity-js/core/lib/io~FileFinder",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "name": "FileSystem",
    "externalLink": "/modules/core/class/src/io/FileSystem.ts~FileSystem.html",
    "longname": "@serenity-js/core/lib/io~FileSystem",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "name": "FileSystemLocation",
    "externalLink": "/modules/core/class/src/io/FileSystemLocation.ts~FileSystemLocation.html",
    "longname": "@serenity-js/core/lib/io~FileSystemLocation",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "name": "ModuleLoader",
    "externalLink": "/modules/core/class/src/io/ModuleLoader.ts~ModuleLoader.html",
    "longname": "@serenity-js/core/lib/io~ModuleLoader",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "name": "OutputStream",
    "externalLink": "/modules/core/class/src/io/OutputStream.ts~OutputStream.html",
    "longname": "@serenity-js/core/lib/io~OutputStream",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "name": "Path",
    "externalLink": "/modules/core/class/src/io/Path.ts~Path.html",
    "longname": "@serenity-js/core/lib/io~Path",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "name": "TestRunnerAdapter",
    "externalLink": "/modules/core/class/src/io/TestRunnerAdapter.ts~TestRunnerAdapter.html",
    "longname": "@serenity-js/core/lib/io~TestRunnerAdapter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "name": "Version",
    "externalLink": "/modules/core/class/src/io/Version.ts~Version.html",
    "longname": "@serenity-js/core/lib/io~Version",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "name": "Mappable",
    "externalLink": "/modules/core/class/src/io/collections/mappable.ts~Mappable.html",
    "longname": "@serenity-js/core/lib/io/collections~Mappable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "name": "isMappable",
    "externalLink": "/modules/core/function/index.html#static-function-isMappable",
    "longname": "@serenity-js/core/lib/io/collections~isMappable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "Reducible",
    "externalLink": "/modules/core/class/src/io/collections/reducible.ts~Reducible.html",
    "longname": "@serenity-js/core/lib/io/collections~Reducible",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "commaSeparated",
    "externalLink": "/modules/core/function/index.html#static-function-commaSeparated",
    "longname": "@serenity-js/core/lib/io~commaSeparated",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "formatted",
    "externalLink": "/modules/core/function/index.html#static-function-formatted",
    "longname": "@serenity-js/core/lib/io~formatted",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "name": "inspected",
    "externalLink": "/modules/core/function/index.html#static-function-inspected",
    "longname": "@serenity-js/core/lib/io~inspected",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "name": "stringify",
    "externalLink": "/modules/core/function/index.html#static-function-stringify",
    "longname": "@serenity-js/core/lib/io/json~stringify",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "name": "parse",
    "externalLink": "/modules/core/function/index.html#static-function-parse",
    "longname": "@serenity-js/core/lib/io/json~parse",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "name": "has",
    "externalLink": "/modules/core/function/index.html#static-function-has",
    "longname": "@serenity-js/core/lib/io/reflection~has",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "name": "trimmed",
    "externalLink": "/modules/core/function/index.html#static-function-trimmed",
    "longname": "@serenity-js/core/lib/io~trimmed",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "name": "ActivityDetails",
    "externalLink": "/modules/core/class/src/model/ActivityDetails.ts~ActivityDetails.html",
    "longname": "@serenity-js/core/lib/model~ActivityDetails",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "name": "Artifact",
    "externalLink": "/modules/core/class/src/model/Artifact.ts~Artifact.html",
    "longname": "@serenity-js/core/lib/model~Artifact",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "name": "BusinessRule",
    "externalLink": "/modules/core/class/src/model/BusinessRule.ts~BusinessRule.html",
    "longname": "@serenity-js/core/lib/model~BusinessRule",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "name": "Category",
    "externalLink": "/modules/core/class/src/model/Category.ts~Category.html",
    "longname": "@serenity-js/core/lib/model~Category",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "name": "CorrelationId",
    "externalLink": "/modules/core/class/src/model/CorrelationId.ts~CorrelationId.html",
    "longname": "@serenity-js/core/lib/model~CorrelationId",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "name": "Description",
    "externalLink": "/modules/core/class/src/model/Description.ts~Description.html",
    "longname": "@serenity-js/core/lib/model~Description",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "name": "Duration",
    "externalLink": "/modules/core/class/src/model/Duration.ts~Duration.html",
    "longname": "@serenity-js/core/lib/model~Duration",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "name": "Name",
    "externalLink": "/modules/core/class/src/model/Name.ts~Name.html",
    "longname": "@serenity-js/core/lib/model~Name",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "name": "ScenarioDetails",
    "externalLink": "/modules/core/class/src/model/ScenarioDetails.ts~ScenarioDetails.html",
    "longname": "@serenity-js/core/lib/model~ScenarioDetails",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "name": "ScenarioParameters",
    "externalLink": "/modules/core/class/src/model/ScenarioParameters.ts~ScenarioParameters.html",
    "longname": "@serenity-js/core/lib/model~ScenarioParameters",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "name": "TestSuiteDetails",
    "externalLink": "/modules/core/class/src/model/TestSuiteDetails.ts~TestSuiteDetails.html",
    "longname": "@serenity-js/core/lib/model~TestSuiteDetails",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "name": "Timestamp",
    "externalLink": "/modules/core/class/src/model/Timestamp.ts~Timestamp.html",
    "longname": "@serenity-js/core/lib/model~Timestamp",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "name": "AssertionReport",
    "externalLink": "/modules/core/class/src/model/artifacts/AssertionReport.ts~AssertionReport.html",
    "longname": "@serenity-js/core/lib/model/artifacts~AssertionReport",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "name": "RequestAndResponse",
    "externalLink": "/modules/core/class/src/model/artifacts/HTTPRequestResponse.ts~RequestAndResponse.html",
    "longname": "@serenity-js/core/lib/model/artifacts~RequestAndResponse",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "name": "HTTPRequestResponse",
    "externalLink": "/modules/core/class/src/model/artifacts/HTTPRequestResponse.ts~HTTPRequestResponse.html",
    "longname": "@serenity-js/core/lib/model/artifacts~HTTPRequestResponse",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "name": "JSONData",
    "externalLink": "/modules/core/class/src/model/artifacts/JSONData.ts~JSONData.html",
    "longname": "@serenity-js/core/lib/model/artifacts~JSONData",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "name": "LogEntry",
    "externalLink": "/modules/core/class/src/model/artifacts/LogEntry.ts~LogEntry.html",
    "longname": "@serenity-js/core/lib/model/artifacts~LogEntry",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "name": "Photo",
    "externalLink": "/modules/core/class/src/model/artifacts/Photo.ts~Photo.html",
    "longname": "@serenity-js/core/lib/model/artifacts~Photo",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "name": "TestReport",
    "externalLink": "/modules/core/class/src/model/artifacts/TestReport.ts~TestReport.html",
    "longname": "@serenity-js/core/lib/model/artifacts~TestReport",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "name": "TextData",
    "externalLink": "/modules/core/class/src/model/artifacts/TextData.ts~TextData.html",
    "longname": "@serenity-js/core/lib/model/artifacts~TextData",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "name": "SerialisedOutcome",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~SerialisedOutcome.html",
    "longname": "@serenity-js/core/lib/model~SerialisedOutcome",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "name": "Outcome",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~Outcome.html",
    "longname": "@serenity-js/core/lib/model~Outcome",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "name": "ProblemIndication",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ProblemIndication.html",
    "longname": "@serenity-js/core/lib/model~ProblemIndication",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "name": "ExecutionCompromised",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionCompromised.html",
    "longname": "@serenity-js/core/lib/model~ExecutionCompromised",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "name": "ExecutionFailedWithError",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionFailedWithError.html",
    "longname": "@serenity-js/core/lib/model~ExecutionFailedWithError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "name": "ExecutionFailedWithAssertionError",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionFailedWithAssertionError.html",
    "longname": "@serenity-js/core/lib/model~ExecutionFailedWithAssertionError",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "name": "ImplementationPending",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ImplementationPending.html",
    "longname": "@serenity-js/core/lib/model~ImplementationPending",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "name": "ExecutionIgnored",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionIgnored.html",
    "longname": "@serenity-js/core/lib/model~ExecutionIgnored",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "name": "ExecutionSkipped",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionSkipped.html",
    "longname": "@serenity-js/core/lib/model~ExecutionSkipped",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "name": "ExecutionSuccessful",
    "externalLink": "/modules/core/class/src/model/outcomes.ts~ExecutionSuccessful.html",
    "longname": "@serenity-js/core/lib/model~ExecutionSuccessful",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "name": "ArbitraryTag",
    "externalLink": "/modules/core/class/src/model/tags/ArbitraryTag.ts~ArbitraryTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ArbitraryTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "name": "BrowserTag",
    "externalLink": "/modules/core/class/src/model/tags/BrowserTag.ts~BrowserTag.html",
    "longname": "@serenity-js/core/lib/model/tags~BrowserTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "name": "CapabilityTag",
    "externalLink": "/modules/core/class/src/model/tags/CapabilityTag.ts~CapabilityTag.html",
    "longname": "@serenity-js/core/lib/model/tags~CapabilityTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "name": "ContextTag",
    "externalLink": "/modules/core/class/src/model/tags/ContextTag.ts~ContextTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ContextTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "name": "ExecutionRetriedTag",
    "externalLink": "/modules/core/class/src/model/tags/ExecutionRetriedTag.ts~ExecutionRetriedTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ExecutionRetriedTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "name": "FeatureTag",
    "externalLink": "/modules/core/class/src/model/tags/FeatureTag.ts~FeatureTag.html",
    "longname": "@serenity-js/core/lib/model/tags~FeatureTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "name": "IssueTag",
    "externalLink": "/modules/core/class/src/model/tags/IssueTag.ts~IssueTag.html",
    "longname": "@serenity-js/core/lib/model/tags~IssueTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "name": "ManualTag",
    "externalLink": "/modules/core/class/src/model/tags/ManualTag.ts~ManualTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ManualTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "name": "PlatformTag",
    "externalLink": "/modules/core/class/src/model/tags/PlatformTag.ts~PlatformTag.html",
    "longname": "@serenity-js/core/lib/model/tags~PlatformTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "name": "Tag",
    "externalLink": "/modules/core/class/src/model/tags/Tag.ts~Tag.html",
    "longname": "@serenity-js/core/lib/model/tags~Tag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "name": "ThemeTag",
    "externalLink": "/modules/core/class/src/model/tags/ThemeTag.ts~ThemeTag.html",
    "longname": "@serenity-js/core/lib/model/tags~ThemeTag",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "name": "Ability",
    "externalLink": "/modules/core/class/src/screenplay/Ability.ts~Ability.html",
    "longname": "@serenity-js/core/lib/screenplay~Ability",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "name": "AbilityType",
    "externalLink": "/modules/core/class/src/screenplay/AbilityType.ts~AbilityType.html",
    "longname": "@serenity-js/core/lib/screenplay~AbilityType",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "name": "Activity",
    "externalLink": "/modules/core/class/src/screenplay/Activity.ts~Activity.html",
    "longname": "@serenity-js/core/lib/screenplay~Activity",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "name": "Interaction",
    "externalLink": "/modules/core/class/src/screenplay/Interaction.ts~Interaction.html",
    "longname": "@serenity-js/core/lib/screenplay~Interaction",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "name": "Question",
    "externalLink": "/modules/core/class/src/screenplay/Question.ts~Question.html",
    "longname": "@serenity-js/core/lib/screenplay~Question",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "name": "Task",
    "externalLink": "/modules/core/class/src/screenplay/Task.ts~Task.html",
    "longname": "@serenity-js/core/lib/screenplay~Task",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "name": "Discardable",
    "externalLink": "/modules/core/class/src/screenplay/abilities/Discardable.ts~Discardable.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~Discardable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "name": "Initialisable",
    "externalLink": "/modules/core/class/src/screenplay/abilities/Initialisable.ts~Initialisable.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~Initialisable",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "name": "TakeNotes",
    "externalLink": "/modules/core/class/src/screenplay/abilities/TakeNotes.ts~TakeNotes.html",
    "longname": "@serenity-js/core/lib/screenplay/abilities~TakeNotes",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "name": "Actor",
    "externalLink": "/modules/core/class/src/screenplay/actor/Actor.ts~Actor.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~Actor",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "name": "AnswersQuestions",
    "externalLink": "/modules/core/class/src/screenplay/actor/AnswersQuestions.ts~AnswersQuestions.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~AnswersQuestions",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "name": "CanHaveAbilities",
    "externalLink": "/modules/core/class/src/screenplay/actor/CanHaveAbilities.ts~CanHaveAbilities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~CanHaveAbilities",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "name": "CollectsArtifacts",
    "externalLink": "/modules/core/class/src/screenplay/actor/CollectsArtifacts.ts~CollectsArtifacts.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~CollectsArtifacts",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "name": "PerformsActivities",
    "externalLink": "/modules/core/class/src/screenplay/actor/PerformsActivities.ts~PerformsActivities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~PerformsActivities",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "name": "UsesAbilities",
    "externalLink": "/modules/core/class/src/screenplay/actor/UsesAbilities.ts~UsesAbilities.html",
    "longname": "@serenity-js/core/lib/screenplay/actor~UsesAbilities",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 148,
    "kind": "external",
    "name": "Log",
    "externalLink": "/modules/core/class/src/screenplay/interactions/Log.ts~Log.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~Log",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 149,
    "kind": "external",
    "name": "See",
    "externalLink": "/modules/core/class/src/screenplay/interactions/See.ts~See.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~See",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "name": "TakeNote",
    "externalLink": "/modules/core/class/src/screenplay/interactions/TakeNote.ts~TakeNote.html",
    "longname": "@serenity-js/core/lib/screenplay/interactions~TakeNote",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 151,
    "kind": "external",
    "name": "Check",
    "externalLink": "/modules/core/class/src/screenplay/questions/Check.ts~Check.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Check",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 152,
    "kind": "external",
    "name": "Expectation",
    "externalLink": "/modules/core/class/src/screenplay/questions/Expectation.ts~Expectation.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Expectation",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 153,
    "kind": "external",
    "name": "List",
    "externalLink": "/modules/core/class/src/screenplay/questions/List.ts~List.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~List",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "name": "MetaQuestion",
    "externalLink": "/modules/core/class/src/screenplay/questions/MetaQuestion.ts~MetaQuestion.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~MetaQuestion",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "name": "Note",
    "externalLink": "/modules/core/class/src/screenplay/questions/Note.ts~Note.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Note",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "name": "Property",
    "externalLink": "/modules/core/class/src/screenplay/questions/Property.ts~Property.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Property",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "name": "Transform",
    "externalLink": "/modules/core/class/src/screenplay/questions/Transform.ts~Transform.html",
    "longname": "@serenity-js/core/lib/screenplay/questions~Transform",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "name": "ExpectationMet",
    "externalLink": "/modules/core/class/src/screenplay/questions/expectations/ExpectationMet.ts~ExpectationMet.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/expectations~ExpectationMet",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "name": "ExpectationNotMet",
    "externalLink": "/modules/core/class/src/screenplay/questions/expectations/ExpectationNotMet.ts~ExpectationNotMet.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/expectations~ExpectationNotMet",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "name": "ExpectationOutcome",
    "externalLink": "/modules/core/class/src/screenplay/questions/expectations/ExpectationOutcome.ts~ExpectationOutcome.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/expectations~ExpectationOutcome",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "name": "ArrayListAdapter",
    "externalLink": "/modules/core/class/src/screenplay/questions/lists/ArrayListAdapter.ts~ArrayListAdapter.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/lists~ArrayListAdapter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 162,
    "kind": "external",
    "name": "ListAdapter",
    "externalLink": "/modules/core/class/src/screenplay/questions/lists/ListAdapter.ts~ListAdapter.html",
    "longname": "@serenity-js/core/lib/screenplay/questions/lists~ListAdapter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 163,
    "kind": "external",
    "name": "append",
    "externalLink": "/modules/core/function/index.html#static-function-append",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~append",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 164,
    "kind": "external",
    "name": "normalize",
    "externalLink": "/modules/core/function/index.html#static-function-normalize",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~normalize",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 165,
    "kind": "external",
    "name": "replace",
    "externalLink": "/modules/core/function/index.html#static-function-replace",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~replace",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 166,
    "kind": "external",
    "name": "slice",
    "externalLink": "/modules/core/function/index.html#static-function-slice",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~slice",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 167,
    "kind": "external",
    "name": "split",
    "externalLink": "/modules/core/function/index.html#static-function-split",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~split",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 168,
    "kind": "external",
    "name": "toLocaleLowerCase",
    "externalLink": "/modules/core/function/index.html#static-function-toLocaleLowerCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toLocaleLowerCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 169,
    "kind": "external",
    "name": "toLocaleUpperCase",
    "externalLink": "/modules/core/function/index.html#static-function-toLocaleUpperCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toLocaleUpperCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 170,
    "kind": "external",
    "name": "toLowerCase",
    "externalLink": "/modules/core/function/index.html#static-function-toLowerCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toLowerCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 171,
    "kind": "external",
    "name": "toNumber",
    "externalLink": "/modules/core/function/index.html#static-function-toNumber",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toNumber",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 172,
    "kind": "external",
    "name": "toUpperCase",
    "externalLink": "/modules/core/function/index.html#static-function-toUpperCase",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~toUpperCase",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 173,
    "kind": "external",
    "name": "trim",
    "externalLink": "/modules/core/function/index.html#static-function-trim",
    "longname": "@serenity-js/core/lib/screenplay/questions/mappings/string~trim",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 174,
    "kind": "external",
    "name": "q",
    "externalLink": "/modules/core/function/index.html#static-function-q",
    "longname": "@serenity-js/core/lib/screenplay/questions~q",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 175,
    "kind": "external",
    "name": "Loop",
    "externalLink": "/modules/core/class/src/screenplay/tasks/Loop.ts~Loop.html",
    "longname": "@serenity-js/core/lib/screenplay/tasks~Loop",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 176,
    "kind": "external",
    "name": "Cast",
    "externalLink": "/modules/core/class/src/stage/Cast.ts~Cast.html",
    "longname": "@serenity-js/core/lib/stage~Cast",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 177,
    "kind": "external",
    "name": "Clock",
    "externalLink": "/modules/core/class/src/stage/Clock.ts~Clock.html",
    "longname": "@serenity-js/core/lib/stage~Clock",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 178,
    "kind": "external",
    "name": "DressingRoom",
    "externalLink": "/modules/core/class/src/stage/DressingRoom.ts~DressingRoom.html",
    "longname": "@serenity-js/core/lib/stage~DressingRoom",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 179,
    "kind": "external",
    "name": "ListensToDomainEvents",
    "externalLink": "/modules/core/class/src/stage/ListensToDomainEvents.ts~ListensToDomainEvents.html",
    "longname": "@serenity-js/core/lib/stage~ListensToDomainEvents",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 180,
    "kind": "external",
    "name": "Stage",
    "externalLink": "/modules/core/class/src/stage/Stage.ts~Stage.html",
    "longname": "@serenity-js/core/lib/stage~Stage",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 181,
    "kind": "external",
    "name": "StageCrewMember",
    "externalLink": "/modules/core/class/src/stage/StageCrewMember.ts~StageCrewMember.html",
    "longname": "@serenity-js/core/lib/stage~StageCrewMember",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "external",
    "name": "StageCrewMemberBuilder",
    "externalLink": "/modules/core/class/src/stage/StageCrewMemberBuilder.ts~StageCrewMemberBuilder.html",
    "longname": "@serenity-js/core/lib/stage~StageCrewMemberBuilder",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 183,
    "kind": "external",
    "name": "StageCrewMemberBuilderDependencies",
    "externalLink": "/modules/core/class/src/stage/StageCrewMemberBuilderDependencies.ts~StageCrewMemberBuilderDependencies.html",
    "longname": "@serenity-js/core/lib/stage~StageCrewMemberBuilderDependencies",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 184,
    "kind": "external",
    "name": "StageManager",
    "externalLink": "/modules/core/class/src/stage/StageManager.ts~StageManager.html",
    "longname": "@serenity-js/core/lib/stage~StageManager",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 185,
    "kind": "external",
    "name": "WithStage",
    "externalLink": "/modules/core/class/src/stage/WithStage.ts~WithStage.html",
    "longname": "@serenity-js/core/lib/stage~WithStage",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 186,
    "kind": "external",
    "name": "ArtifactArchiver",
    "externalLink": "/modules/core/class/src/stage/crew/artifact-archiver/ArtifactArchiver.ts~ArtifactArchiver.html",
    "longname": "@serenity-js/core/lib/stage/crew/artifact-archiver~ArtifactArchiver",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 187,
    "kind": "external",
    "name": "StreamReporter",
    "externalLink": "/modules/core/class/src/stage/crew/stream-reporter/StreamReporter.ts~StreamReporter.html",
    "longname": "@serenity-js/core/lib/stage/crew/stream-reporter~StreamReporter",
    "memberof": "src/.imports-from-serenity-js-core.js",
    "static": true,
    "access": "public",
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 189,
    "kind": "external",
    "name": "JSONObject",
    "externalLink": "https://jan-molak.github.io/tiny-types/file/src/types/json.ts.html",
    "longname": "tiny-types~JSONObject",
    "memberof": "src/.imports-from-tiny-types.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 190,
    "kind": "external",
    "name": "TinyType",
    "externalLink": "https://jan-molak.github.io/tiny-types/class/src/TinyType.ts~TinyType.html",
    "longname": "tiny-types~TinyType",
    "memberof": "src/.imports-from-tiny-types.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 192,
    "kind": "external",
    "name": "ElementArray",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/types.ts",
    "longname": "@wdio/types~ElementArray",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 193,
    "kind": "external",
    "name": "Browser",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/types.ts",
    "longname": "@wdio/types~Browser",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 194,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/webdriverio/src/types.ts",
    "longname": "@wdio/types~Element",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 195,
    "kind": "external",
    "name": "Options.TestRunner",
    "externalLink": "https://github.com/webdriverio/webdriverio/blob/main/packages/wdio-types/src/Options.ts",
    "longname": "@wdio/types~Options.TestRunner",
    "memberof": "src/.imports-from-webdriverio.js",
    "static": true,
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/cli/CucumberCLIAdapter.ts",
    "content": "/* istanbul ignore file covered in integration tests */\nimport { FileSystem, ModuleLoader, TestRunnerAdapter, Version } from '@serenity-js/core/lib/io';\nimport { ExecutionIgnored, ImplementationPending, Outcome } from '@serenity-js/core/lib/model';\nimport * as path from 'path';   // eslint-disable-line unicorn/import-style\n\nimport { CucumberConfig } from './CucumberConfig';\nimport { CucumberOptions } from './CucumberOptions';\nimport { OutputDescriptor, SerenityFormatterOutput } from './output';\n\n/**\n * @desc\n *  Allows for programmatic execution of Cucumber test scenarios.\n *\n * @implements {@serenity-js/core/lib/io~TestRunnerAdapter}\n */\nexport class CucumberCLIAdapter implements TestRunnerAdapter {\n\n    private pathsToScenarios: string[] = [];\n\n    private readonly options: CucumberOptions;\n\n    /**\n     * @param {@serenity-js/core/lib/io~Config<CucumberConfig>} config\n     * @param {@serenity-js/core/lib/io~ModuleLoader} loader\n     * @param {SerenityFormatterOutput} output\n     *\n     * @see {@link CucumberConfig}\n     */\n    constructor(\n        config: CucumberConfig,\n        private readonly loader: ModuleLoader,\n        fileSystem: FileSystem,\n        private readonly output: SerenityFormatterOutput,\n    ) {\n        this.options = new CucumberOptions(fileSystem, config);\n    }\n\n    /**\n     * @desc\n     *  Scenario success threshold for this test runner, calculated based on {@link CucumberConfig}\n     *\n     * @returns {Outcome | { Code: number }}\n     */\n    successThreshold(): Outcome | { Code: number } {\n        return this.options.isStrict()\n            ? ExecutionIgnored\n            : ImplementationPending;\n    }\n\n    /**\n     * @desc\n     *  Loads feature files.\n     *\n     * @param {string[]} pathsToScenarios\n     *  Absolute or relative paths to feature files\n     *\n     * @returns {Promise<void>}\n     */\n    async load(pathsToScenarios: string[]): Promise<void> {\n        this.pathsToScenarios = pathsToScenarios.map(maybeAbsolutePathToScenario => {\n            // Ensure paths provided to Cucumber are relative\n            // see https://github.com/cucumber/cucumber-js/issues/1900\n            return path.isAbsolute(maybeAbsolutePathToScenario)\n                ? path.relative(this.loader.cwd, maybeAbsolutePathToScenario)\n                : maybeAbsolutePathToScenario;\n        });\n\n        // todo: implement loading, so parsing feature files to determine how many executable we have\n    }\n\n    /**\n     * @desc\n     *  Returns the number of loaded scenarios\n     *\n     * @throws {@serenity-js/core/lib/errors~LogicError}\n     *  If called before `load`\n     *\n     * @returns {number}\n     */\n    scenarioCount(): number {\n        // todo: we should count the actual executable scenarios to avoid launching a WebdriverIO worked\n        //  for a feature file without any scenarios.\n        return this.pathsToScenarios.length;\n\n        // if (this.totalScenarios === undefined) {\n        //     throw new LogicError('Make sure to call `load` before calling `scenarioCount`');\n        // }\n        //\n        // return this.totalScenarios;\n    }\n\n    /**\n     * @desc\n     *  Instructs Cucumber to execute feature files located at `pathsToScenarios`\n     *\n     * @returns {Promise<void>}\n     */\n    async run(): Promise<void> {\n        const version = this.loader.hasAvailable('@cucumber/cucumber')\n            ? this.loader.versionOf('@cucumber/cucumber')\n            : this.loader.versionOf('cucumber');\n\n        const serenityListener = this.loader.resolve('@serenity-js/cucumber');\n\n        return this.runScenarios(version, serenityListener, this.pathsToScenarios);\n    }\n\n    private runScenarios(version: Version, serenityListener: string, pathsToScenarios: string[]): Promise<void> {\n        const argv = this.options.asArgumentsForCucumber(version);\n\n        if (version.isAtLeast(new Version('7.0.0'))) {\n            return this.runWithCucumber7(argv, serenityListener, pathsToScenarios);\n        }\n\n        if (version.isAtLeast(new Version('3.0.0'))) {\n            return this.runWithCucumber3to6(argv, serenityListener, pathsToScenarios);\n        }\n\n        if (version.isAtLeast(new Version('2.0.0'))) {\n            return this.runWithCucumber2(argv, serenityListener, pathsToScenarios);\n        }\n\n        return this.runWithCucumber0to1(argv, serenityListener, pathsToScenarios);\n    }\n\n    private runWithCucumber7(argv: string[], pathToSerenityListener: string, pathsToScenarios: string[]): Promise<void> {\n        const cucumber  = this.loader.require('@cucumber/cucumber');\n        const output    = this.output.get();\n\n        return new cucumber.Cli({\n            argv:   argv.concat('--format', `${ pathToSerenityListener }:${ output.value() }`, ...pathsToScenarios),\n            cwd:    this.loader.cwd,\n            stdout: process.stdout,\n        })\n        .run()\n        .then(cleanUpAndPassThrough(output), cleanUpAndReThrow(output));\n    }\n\n    private runWithCucumber3to6(argv: string[], pathToSerenityListener: string, pathsToScenarios: string[]): Promise<void> {\n        const cucumber  = this.loader.require('cucumber');\n        const output    = this.output.get();\n\n        return new cucumber.Cli({\n            argv:   argv.concat('--format', `${ pathToSerenityListener }:${ output.value() }`, ...pathsToScenarios),\n            cwd:    this.loader.cwd,\n            stdout: process.stdout,\n        })\n        .run()\n        .then(cleanUpAndPassThrough(output), cleanUpAndReThrow(output));\n    }\n\n    private runWithCucumber2(argv: string[], pathToSerenityListener: string, pathsToScenarios: string[]): Promise<void> {\n        const cucumber = this.loader.require('cucumber');\n\n        return new cucumber.Cli({\n            argv:   argv.concat('--require', pathToSerenityListener, ...pathsToScenarios),\n            cwd:    this.loader.cwd,\n            stdout: process.stdout,\n        }).run();\n    }\n\n    private runWithCucumber0to1(argv: string[], pathToSerenityListener: string, pathsToScenarios: string[]): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.loader.require('cucumber')\n                .Cli(argv.concat('--require', pathToSerenityListener, ...pathsToScenarios))\n                .run((wasSuccessful: boolean) => resolve());\n        })\n    }\n}\n\n/**\n * @private\n */\nfunction cleanUpAndPassThrough<T>(output: OutputDescriptor): (result: T) => Promise<T> {\n    return (result: T) => {\n        return output.cleanUp()\n            .then(() => result);\n    }\n}\n\n/**\n * @private\n */\nfunction cleanUpAndReThrow(output: OutputDescriptor): (error: Error) => Promise<void> {\n    return (error: Error) => {\n        return output.cleanUp()\n            .then(() => {\n                throw error;\n            }, ignoredError => {\n                throw error;\n            });\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/CucumberCLIAdapter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "CucumberCLIAdapter",
    "memberof": "src/cli/CucumberCLIAdapter.ts",
    "static": true,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/cucumber/lib/cli",
    "importStyle": "{CucumberCLIAdapter}",
    "description": " Allows for programmatic execution of Cucumber test scenarios.",
    "lineNumber": 23,
    "interface": false,
    "implements": [
      "TestRunnerAdapter"
    ]
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "pathsToScenarios",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#pathsToScenarios",
    "access": "private",
    "description": " ",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "options",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#options",
    "access": "private",
    "description": " ",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "CucumberOptions"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#constructor",
    "access": "public",
    "description": "",
    "see": [
      "{@link CucumberConfig}"
    ],
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "Config<CucumberConfig>"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ModuleLoader"
        ],
        "spread": false,
        "optional": false,
        "name": "loader",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "SerenityFormatterOutput"
        ],
        "spread": false,
        "optional": false,
        "name": "output",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "successThreshold",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#successThreshold",
    "access": "public",
    "description": " Scenario success threshold for this test runner, calculated based on {@link CucumberConfig}",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Outcome | { Code: number }}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Outcome ",
        " { Code: number }"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "load",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#load",
    "access": "public",
    "description": " Loads feature files.",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "pathsToScenarios",
        "description": "Absolute or relative paths to feature files"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "scenarioCount",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#scenarioCount",
    "access": "public",
    "description": " Returns the number of loaded scenarios",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "LogicError"
        ],
        "description": "If called before `load`"
      }
    ],
    "params": []
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "run",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#run",
    "access": "public",
    "description": " Instructs Cucumber to execute feature files located at `pathsToScenarios`",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "runScenarios",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#runScenarios",
    "access": "private",
    "description": " ",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "Version"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "serenityListener",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "pathsToScenarios",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "runWithCucumber7",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#runWithCucumber7",
    "access": "private",
    "description": " ",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pathToSerenityListener",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "pathsToScenarios",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "runWithCucumber3to6",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#runWithCucumber3to6",
    "access": "private",
    "description": " ",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pathToSerenityListener",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "pathsToScenarios",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "runWithCucumber2",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#runWithCucumber2",
    "access": "private",
    "description": " ",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pathToSerenityListener",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "pathsToScenarios",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "runWithCucumber0to1",
    "memberof": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberCLIAdapter.ts~CucumberCLIAdapter#runWithCucumber0to1",
    "access": "private",
    "description": " ",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pathToSerenityListener",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "pathsToScenarios",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "cleanUpAndPassThrough",
    "memberof": "src/cli/CucumberCLIAdapter.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/CucumberCLIAdapter.ts~cleanUpAndPassThrough",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/cli/CucumberCLIAdapter.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 356,
    "ignore": true,
    "params": [
      {
        "name": "output",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "cleanUpAndReThrow",
    "memberof": "src/cli/CucumberCLIAdapter.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/CucumberCLIAdapter.ts~cleanUpAndReThrow",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/cli/CucumberCLIAdapter.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 377,
    "ignore": true,
    "params": [
      {
        "name": "output",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/cli/CucumberConfig.ts",
    "content": "/**\n * @desc\n *  Configuration options to be passed to [Cucumber CLI](https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md).\n *  You can specify the options using either camelCase (i.e. `retryTagFilter`) or kebab-case (i.e. `retry-tag-filter`)\n *  as Serenity/JS will convert them to an appropriate format for you.\n *\n * @public\n */\nexport interface CucumberConfig {\n\n    /**\n     * @desc\n     *  Enable/disable colors in output. Cucumber 1.x only!\n     *  For Cucumber 2.x and above use `formatOptions: { colorsEnabled: false }`\n     *\n     *  **Please note** For Cucumber 2.x and above use the {@link CucumberConfig#formatOptions} instead.\n     *\n     * @example <caption>Disable colors in output in Cucumber 1.x</caption>\n     *  colors: false\n     *\n     * @example <caption>Disable colors in output in Cucumber 2.x and above</caption>\n     *  formatOptions: { colorsEnabled: false }\n     *\n     * @type {string}\n     * @see https://github.com/cucumber/cucumber-js/blob/1.x/lib/cucumber/cli.js#L38\n     * @version 1.x\n     */\n    colors?: boolean\n\n    /**\n     * @desc\n     *  Step definitions and support files can be written in languages that transpile to JavaScript.\n     *  To do set the `compiler` option to <file_extension>:<module_name>\n     *\n     *  **Please note** For Cucumber 4.x and above use the {@link CucumberConfig#require} option instead.\n     *\n     * @example <caption>Enable TypeScript support in Cucumber 1.x - 3.x</caption>\n     *  compiler: 'ts:ts-node/register'\n     *\n     * @type {string}\n     * @see https://github.com/cucumber/cucumber-js/blob/3.x/docs/cli.md#transpilers\n     * @version 1.x - 3.x\n     */\n    compiler?: string;\n\n    /**\n     * @desc\n     *  Specify additional output formats, optionally supply PATH to redirect formatter output\n     *\n     * @type {string[] | string}\n     * @see https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#formats\n     */\n    format?: string[] | string;\n\n    /**\n     * @desc\n     *  Provide options for formatters\n     *\n     * @example <caption>Cucumber 1.x</caption>\n     *  formatOptions: JSON.stringify({ option: 'value' })\n     *\n     * @type {object|string}\n     * @see https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#format-options\n     */\n    formatOptions?: object | string;    // eslint-disable-line @typescript-eslint/ban-types\n\n    /**\n     * @desc\n     *  Only execute the scenarios with name matching the expression.\n     *\n     * @type {string}\n     * @see https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#running-specific-features\n     */\n    name?: string[];\n\n    /**\n     * @desc\n     *  In order to store and reuse commonly used CLI options,\n     *  you can add a `cucumber.js` file to your project root directory.\n     *  The file should export an object where the key is the profile name\n     *  and the value is a string of CLI options.\n     *\n     *  The profile can be applied with -p <NAME> or --profile <NAME>.\n     *  This will prepend the profile's CLI options to the ones provided by the command line.\n     *  Multiple profiles can be specified at a time.\n     *\n     *  If no profile is specified and a profile named default exists,\n     *  it will be applied.\n     *\n     * @type {string}\n     * @see https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#profiles\n     */\n    profile?: string[];\n\n    /**\n     * @desc\n     *  The number of times to retry a failing scenario before marking it as failed.\n     *\n     * @example <caption>Cucumber 7.x</caption>\n     *  retry: 3\n     *\n     * @type {number}\n     * @see https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#retry-failing-tests\n     *\n     * @version 7.x\n     */\n    retry?: number;\n\n    /**\n     * @desc\n     *  Relative path to an output file produced by Cucumber.js [`rerun` formatter](https://github.com/cucumber/cucumber-js/blob/master/features/rerun_formatter.feature).\n     *  Please note that the name of the output file *must* start with an `@` symbol.\n     *\n     * @example <caption>Saving details of failed scenarios to @rerun-output.txt</caption>\n     *  format: [ 'rerun:@rerun-output.txt' ]\n     *\n     * @example <caption>Re-running scenarios saved to @rerun-output.txt</caption>\n     *  rerun: '@rerun-output.txt'\n     */\n    rerun?: string;\n\n    /**\n     * @desc\n     *  Only retry tests matching the given [tag expression](https://github.com/cucumber/cucumber/tree/master/tag-expressions).\n     *\n     * @example <caption>Cucumber 7.x</caption>\n     *  retry: 3,\n     *  retryTagFilter: '@flaky',\n     *\n     * @type {string}\n     * @see  https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#retry-failing-tests\n     *\n     * @version 7.x\n     */\n    retryTagFilter?: string\n\n    /**\n     * @desc\n     *  Require files or node modules before executing features\n     *\n     * @example <caption>Enable TypeScript support in Cucumber 4.x and above</caption>\n     *  require: 'ts:ts-node/register'\n     *\n     * @type {string}\n     * @see https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#requiring-support-files\n     */\n    require?: string[];\n\n    /**\n     * @desc\n     *  Only run scenarios that match the given tags.\n     *\n     *  **Please note**: Cucumber 1.x requires the `tags` option to be an array of Cucumber tags,\n     *  while Cucumber 2.x and above uses a `string` with a [tag expression](https://github.com/cucumber/cucumber/tree/master/tag-expressions).\n     *\n     * @example <caption>Cucumber 1.x</caption>\n     * // Run all scenarios tagged with `@smoketest`, but not with `@wip`:\n     * tag: [ '@smoketest', '~@wip' ]\n     *\n     * @example <caption>Cucumber >= 2.x</caption>\n     * // Run all scenarios tagged with `@smoketest`, but not with `@wip`:\n     * tag: '@smoketest and not @wip'\n     *\n     * @type {string[]|string}\n     * @see https://github.com/cucumber/cucumber-js/blob/1.x/docs/cli.md#tags\n     * @see https://github.com/cucumber/cucumber-js/blob/2.x/docs/cli.md#tags\n     * @see https://github.com/cucumber/cucumber/tree/master/tag-expressions\n     */\n    tags?: string[] | string;\n\n    /**\n     * @desc\n     *  Fail if there are any undefined or pending steps\n     *\n     * @type {boolean}\n     * @see https://github.com/angular/protractor/blob/e5a5d59fcabe15860b30944e714bbd8e81ceaeae/docs/frameworks.md#using-cucumber\n     */\n    strict?: boolean;\n\n    /**\n     * @desc\n     *  Provide parameters that will be passed to the world constructor\n     *\n     * @example <caption>worldParameters as string</caption>\n     *  worldParameters: JSON.stringify({ isDev: process.env.NODE_ENV !== 'production' })\n     *\n     * @example <caption>worldParameters as object</caption>\n     *  worldParameters: { isDev: process.env.NODE_ENV !== 'production' }\n     *\n     * @type {object | string}\n     * @see https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#world-parameters\n     */\n    worldParameters?: object | string;  // eslint-disable-line @typescript-eslint/ban-types\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/CucumberConfig.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "class",
    "name": "CucumberConfig",
    "memberof": "src/cli/CucumberConfig.ts",
    "static": true,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/cucumber/lib/cli",
    "importStyle": "{CucumberConfig}",
    "description": " Configuration options to be passed to [Cucumber CLI](https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md).\n You can specify the options using either camelCase (i.e. `retryTagFilter`) or kebab-case (i.e. `retry-tag-filter`)\n as Serenity/JS will convert them to an appropriate format for you.",
    "lineNumber": 16,
    "interface": true
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "colors",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#colors",
    "access": "public",
    "description": " Enable/disable colors in output. Cucumber 1.x only!\n For Cucumber 2.x and above use `formatOptions: { colorsEnabled: false }`\n\n **Please note** For Cucumber 2.x and above use the {@link CucumberConfig#formatOptions} instead.",
    "examples": [
      "<caption>Disable colors in output in Cucumber 1.x</caption>\n colors: false",
      "<caption>Disable colors in output in Cucumber 2.x and above</caption>\n formatOptions: { colorsEnabled: false }"
    ],
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/1.x/lib/cucumber/cli.js#L38"
    ],
    "lineNumber": 46,
    "version": "1.x",
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "compiler",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#compiler",
    "access": "public",
    "description": " Step definitions and support files can be written in languages that transpile to JavaScript.\n To do set the `compiler` option to <file_extension>:<module_name>\n\n **Please note** For Cucumber 4.x and above use the {@link CucumberConfig#require} option instead.",
    "examples": [
      "<caption>Enable TypeScript support in Cucumber 1.x - 3.x</caption>\n compiler: 'ts:ts-node/register'"
    ],
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/3.x/docs/cli.md#transpilers"
    ],
    "lineNumber": 73,
    "version": "1.x - 3.x",
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "format",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#format",
    "access": "public",
    "description": " Specify additional output formats, optionally supply PATH to redirect formatter output",
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#formats"
    ],
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "string[] ",
        " string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "formatOptions",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#formatOptions",
    "access": "public",
    "description": " Provide options for formatters",
    "examples": [
      "<caption>Cucumber 1.x</caption>\n formatOptions: JSON.stringify({ option: 'value' })"
    ],
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#format-options"
    ],
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": [
        "object",
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "name",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#name",
    "access": "public",
    "description": " Only execute the scenarios with name matching the expression.",
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#running-specific-features"
    ],
    "lineNumber": 136,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "profile",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#profile",
    "access": "public",
    "description": " In order to store and reuse commonly used CLI options,\n you can add a `cucumber.js` file to your project root directory.\n The file should export an object where the key is the profile name\n and the value is a string of CLI options.\n\n The profile can be applied with -p <NAME> or --profile <NAME>.\n This will prepend the profile's CLI options to the ones provided by the command line.\n Multiple profiles can be specified at a time.\n\n If no profile is specified and a profile named default exists,\n it will be applied.",
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#profiles"
    ],
    "lineNumber": 166,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "retry",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#retry",
    "access": "public",
    "description": " The number of times to retry a failing scenario before marking it as failed.",
    "examples": [
      "<caption>Cucumber 7.x</caption>\n retry: 3"
    ],
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#retry-failing-tests"
    ],
    "lineNumber": 191,
    "version": "7.x",
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "rerun",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#rerun",
    "access": "public",
    "description": " Relative path to an output file produced by Cucumber.js [`rerun` formatter](https://github.com/cucumber/cucumber-js/blob/master/features/rerun_formatter.feature).\n Please note that the name of the output file *must* start with an `@` symbol.",
    "examples": [
      "<caption>Saving details of failed scenarios to @rerun-output.txt</caption>\n format: [ 'rerun:@rerun-output.txt' ]",
      "<caption>Re-running scenarios saved to @rerun-output.txt</caption>\n rerun: '@rerun-output.txt'"
    ],
    "lineNumber": 215,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "retryTagFilter",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#retryTagFilter",
    "access": "public",
    "description": " Only retry tests matching the given [tag expression](https://github.com/cucumber/cucumber/tree/master/tag-expressions).",
    "examples": [
      "<caption>Cucumber 7.x</caption>\n retry: 3,\n retryTagFilter: '@flaky',"
    ],
    "see": [
      " https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#retry-failing-tests"
    ],
    "lineNumber": 241,
    "version": "7.x",
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "require",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#require",
    "access": "public",
    "description": " Require files or node modules before executing features",
    "examples": [
      "<caption>Enable TypeScript support in Cucumber 4.x and above</caption>\n require: 'ts:ts-node/register'"
    ],
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#requiring-support-files"
    ],
    "lineNumber": 264,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "tags",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#tags",
    "access": "public",
    "description": " Only run scenarios that match the given tags.\n\n **Please note**: Cucumber 1.x requires the `tags` option to be an array of Cucumber tags,\n while Cucumber 2.x and above uses a `string` with a [tag expression](https://github.com/cucumber/cucumber/tree/master/tag-expressions).",
    "examples": [
      "<caption>Cucumber 1.x</caption>\n// Run all scenarios tagged with `@smoketest`, but not with `@wip`:\ntag: [ '@smoketest', '~@wip' ]",
      "<caption>Cucumber >= 2.x</caption>\n// Run all scenarios tagged with `@smoketest`, but not with `@wip`:\ntag: '@smoketest and not @wip'"
    ],
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/1.x/docs/cli.md#tags",
      "https://github.com/cucumber/cucumber-js/blob/2.x/docs/cli.md#tags",
      "https://github.com/cucumber/cucumber/tree/master/tag-expressions"
    ],
    "lineNumber": 297,
    "type": {
      "nullable": null,
      "types": [
        "string[]",
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "strict",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#strict",
    "access": "public",
    "description": " Fail if there are any undefined or pending steps",
    "see": [
      "https://github.com/angular/protractor/blob/e5a5d59fcabe15860b30944e714bbd8e81ceaeae/docs/frameworks.md#using-cucumber"
    ],
    "lineNumber": 317,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "worldParameters",
    "memberof": "src/cli/CucumberConfig.ts~CucumberConfig",
    "static": false,
    "longname": "src/cli/CucumberConfig.ts~CucumberConfig#worldParameters",
    "access": "public",
    "description": " Provide parameters that will be passed to the world constructor",
    "examples": [
      "<caption>worldParameters as string</caption>\n worldParameters: JSON.stringify({ isDev: process.env.NODE_ENV !== 'production' })",
      "<caption>worldParameters as object</caption>\n worldParameters: { isDev: process.env.NODE_ENV !== 'production' }"
    ],
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#world-parameters"
    ],
    "lineNumber": 343,
    "type": {
      "nullable": null,
      "types": [
        "object ",
        " string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "src/cli/CucumberFormat.ts",
    "content": "import { ensure, isNotBlank,isString } from 'tiny-types';\n\n/**\n * @desc\n *  Represents a Cucumber.js formatter\n *\n * @see https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#built-in-formatters\n */\nexport class CucumberFormat {\n    public readonly formatter: string;\n    public readonly output: string;\n\n    /**\n     * @param {string} value\n     *  Cucumber format expression, like `pretty` or `json:out.json`\n     */\n    constructor(public readonly value: string) {\n        [ this.formatter, this.output ] = CucumberFormat.split(\n            ensure('format', value, isString(), isNotBlank())\n        );\n    }\n\n    /**\n     * @see https://github.com/cucumber/cucumber-js/blob/master/src/cli/option_splitter.ts\n     * @param {string} format\n     * @private {string[]}\n     */\n    private static split(format: string): [string, string] {\n        const parts = format.split(/([^A-Z]):(?!\\\\)/);\n\n        const result = parts.reduce((memo: string[], part: string, i: number) => {\n            if (partNeedsRecombined(i)) {\n                memo.push(parts.slice(i, i + 2).join(''));\n            }\n\n            return memo;\n        }, []);\n\n        if (result.length === 1) {\n            result.push('');\n        }\n\n        return result as [string, string];\n    }\n}\n\n/**]\n * @private\n */\nfunction partNeedsRecombined(i: number): boolean {\n    return i % 2 === 0;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/CucumberFormat.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "class",
    "name": "CucumberFormat",
    "memberof": "src/cli/CucumberFormat.ts",
    "static": true,
    "longname": "src/cli/CucumberFormat.ts~CucumberFormat",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/cucumber/lib/cli",
    "importStyle": "{CucumberFormat}",
    "description": " Represents a Cucumber.js formatter",
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/master/docs/cli.md#built-in-formatters"
    ],
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "formatter",
    "memberof": "src/cli/CucumberFormat.ts~CucumberFormat",
    "static": false,
    "longname": "src/cli/CucumberFormat.ts~CucumberFormat#formatter",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "output",
    "memberof": "src/cli/CucumberFormat.ts~CucumberFormat",
    "static": false,
    "longname": "src/cli/CucumberFormat.ts~CucumberFormat#output",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 233,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cli/CucumberFormat.ts~CucumberFormat",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberFormat.ts~CucumberFormat#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Cucumber format expression, like `pretty` or `json:out.json`"
      }
    ]
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "split",
    "memberof": "src/cli/CucumberFormat.ts~CucumberFormat",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/CucumberFormat.ts~CucumberFormat.split",
    "access": "private",
    "description": "",
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/master/src/cli/option_splitter.ts"
    ],
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "format",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "partNeedsRecombined",
    "memberof": "src/cli/CucumberFormat.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/CucumberFormat.ts~partNeedsRecombined",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/cli/CucumberFormat.ts",
    "importStyle": null,
    "description": "] ",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "src/cli/CucumberOptions.ts",
    "content": "import { FileSystem, Path, Version } from '@serenity-js/core/lib/io';\n\nimport { CucumberConfig } from './CucumberConfig';\n\n/**\n * @private\n */\nexport class CucumberOptions {\n    constructor(\n        private readonly fileSystem: FileSystem,\n        private readonly config: CucumberConfig,\n    ) {\n    }\n\n    isStrict(): boolean {\n        return this.asBoolean('strict', true);\n    }\n\n    asArgumentsForCucumber(version: Version): string[] {\n\n        return Object.keys(this.config)\n            .reduce(\n                (acc, option: keyof CucumberConfig) =>\n                    isNotEmpty(this.config[option])\n                        ? acc.concat(this.optionToValues(option, this.config[option], version))\n                        : acc,\n\n                // Cucumber ignores the first two arguments anyway, but let's add them for completeness\n                //  https://github.com/cucumber/cucumber-js/blob/d74bc45ba98132bdd0af62e0e52d1fe9ff017006/src/cli/helpers.js#L15\n                [ 'node', 'cucumber-js' ],\n            )\n            .concat(this.config.rerun && this.fileSystem.exists(Path.from(this.config.rerun)) ? this.config.rerun : []);\n    }\n\n    private optionToValues<O extends keyof CucumberConfig>(option: O, value: CucumberConfig[O], version: Version): string[] {\n        const cliOption = this.asCliOptionName(option);\n\n        switch (true) {\n            case cliOption === 'tags' && version.isAtLeast(new Version('2.0.0')) && value !== false:\n                return this.valuesToArgs(cliOption, this.tagsToCucumberExpressions(listOf(value as string | string[])));\n            case cliOption === 'rerun':\n                return [];  // ignore since we're appending the rerun file anyway\n            case typeof value === 'boolean':\n                return listOf(this.flagToArg(cliOption, value as boolean));\n            case this.isObject(value):\n                return this.valuesToArgs(cliOption, JSON.stringify(value, undefined, 0));\n            default:\n                return this.valuesToArgs(cliOption, listOf(value as string | string[]));\n        }\n    }\n\n    private asBoolean<K extends keyof CucumberConfig>(key: K, defaultValue: boolean): boolean {\n        if (typeof this.config[key] === 'boolean') {\n            return this.config[key] as boolean;\n        }\n\n        if (typeof this.config[negated(key)] === 'boolean') {\n            return ! this.config[negated(key)] as boolean;\n        }\n\n        return defaultValue;\n    }\n\n    private isObject(value: any): value is object { // eslint-disable-line @typescript-eslint/ban-types\n        return typeof value === 'object'\n            && Array.isArray(value) === false\n            && Object.prototype.toString.call(value) === '[object Object]';\n    }\n\n    /**\n     * @desc\n     *  Converts camelCase option names to kebab-case.\n     *\n     * @param {string} option\n     * @returns {string}\n     *\n     * @private\n     */\n    private asCliOptionName(option: string): string {\n        return option\n            .replace(/([\\da-z]|(?=[A-Z]))([A-Z])/g, '$1-$2')\n            .toLowerCase();\n    }\n\n    private tagsToCucumberExpressions(tags: string[]): string {\n        return tags.filter(tag => !! tag.replace)\n                .map(tag => tag.replace(/~/g, 'not '))\n                .join(' and ');\n    }\n\n    private flagToArg(option: string, value: boolean): string {\n        switch (true) {\n            case !! value:\n                return `--${ option }`;\n            case isNegated(option) && ! value:\n                return `--${ option.replace(/^no-/, '') }`;\n            default:\n                return `--no-${ option }`;\n        }\n    }\n\n    private valuesToArgs(option: string, values: string | string[]): string[] {\n        return listOf(values)\n            .map(value => [ `--${ option }`, value])\n            .reduce((acc, tuple) => acc.concat(tuple), []);\n    }\n}\n\nfunction isNegated(optionName: string) {\n    return optionName.startsWith('no-');\n}\n\n// this method will need to be smarter if it was to be public, i.e. to avoid double negatives like noStrict=false\nfunction negated(name: string) {\n    return 'no' + name.charAt(0).toUpperCase() + name.slice(1);\n}\n\nfunction isNotEmpty(value: any): boolean {\n    return value !== undefined\n        && value !== null\n        && value !== ''\n        && ! (Array.isArray(value) && value.length === 0);\n}\n\nfunction listOf<T>(valueOrValues: T | T[]): T[] {\n    return [].concat(valueOrValues).filter(isNotEmpty);\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/CucumberOptions.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "class",
    "name": "CucumberOptions",
    "memberof": "src/cli/CucumberOptions.ts",
    "static": true,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/cli/CucumberOptions.ts",
    "importStyle": "{CucumberOptions}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 238,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cli/CucumberOptions.ts~CucumberOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "isStrict",
    "memberof": "src/cli/CucumberOptions.ts~CucumberOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions#isStrict",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "asArgumentsForCucumber",
    "memberof": "src/cli/CucumberOptions.ts~CucumberOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions#asArgumentsForCucumber",
    "access": "public",
    "description": " ",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Version"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "optionToValues",
    "memberof": "src/cli/CucumberOptions.ts~CucumberOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions#optionToValues",
    "access": "private",
    "description": " ",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "O"
        ],
        "spread": false,
        "optional": false,
        "name": "option",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Version"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "asBoolean",
    "memberof": "src/cli/CucumberOptions.ts~CucumberOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions#asBoolean",
    "access": "private",
    "description": " ",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "K"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "isObject",
    "memberof": "src/cli/CucumberOptions.ts~CucumberOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions#isObject",
    "access": "private",
    "description": " ",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "asCliOptionName",
    "memberof": "src/cli/CucumberOptions.ts~CucumberOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions#asCliOptionName",
    "access": "private",
    "description": " Converts camelCase option names to kebab-case.",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "option",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "tagsToCucumberExpressions",
    "memberof": "src/cli/CucumberOptions.ts~CucumberOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions#tagsToCucumberExpressions",
    "access": "private",
    "description": " ",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "flagToArg",
    "memberof": "src/cli/CucumberOptions.ts~CucumberOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions#flagToArg",
    "access": "private",
    "description": " ",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "option",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "valuesToArgs",
    "memberof": "src/cli/CucumberOptions.ts~CucumberOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/CucumberOptions.ts~CucumberOptions#valuesToArgs",
    "access": "private",
    "description": " ",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "option",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "isNegated",
    "memberof": "src/cli/CucumberOptions.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/CucumberOptions.ts~isNegated",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/cli/CucumberOptions.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "optionName",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "negated",
    "memberof": "src/cli/CucumberOptions.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/CucumberOptions.ts~negated",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/cli/CucumberOptions.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "isNotEmpty",
    "memberof": "src/cli/CucumberOptions.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/CucumberOptions.ts~isNotEmpty",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/cli/CucumberOptions.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 251,
    "kind": "function",
    "name": "listOf",
    "memberof": "src/cli/CucumberOptions.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cli/CucumberOptions.ts~listOf",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/cli/CucumberOptions.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "T ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "valueOrValues",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "src/cli/index.ts",
    "content": "/* istanbul ignore file covered in integration tests */\nexport * from './CucumberCLIAdapter';\nexport * from './CucumberConfig';\nexport * from './CucumberFormat';\nexport * from './output';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "src/cli/output/OutputDescriptor.ts",
    "content": "/**\n * @package\n */\nexport interface OutputDescriptor {\n    value(): string;\n    cleanUp(): Promise<void>;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/output/OutputDescriptor.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "class",
    "name": "OutputDescriptor",
    "memberof": "src/cli/output/OutputDescriptor.ts",
    "static": true,
    "longname": "src/cli/output/OutputDescriptor.ts~OutputDescriptor",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/cli/output/OutputDescriptor.ts",
    "importStyle": "{OutputDescriptor}",
    "description": "",
    "lineNumber": 11,
    "interface": true,
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "file",
    "name": "src/cli/output/SerenityFormatterOutput.ts",
    "content": "import { OutputDescriptor } from './OutputDescriptor';\n\n/**\n * @package\n */\nexport interface SerenityFormatterOutput {\n    get(): OutputDescriptor;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/output/SerenityFormatterOutput.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "class",
    "name": "SerenityFormatterOutput",
    "memberof": "src/cli/output/SerenityFormatterOutput.ts",
    "static": true,
    "longname": "src/cli/output/SerenityFormatterOutput.ts~SerenityFormatterOutput",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/cli/output/SerenityFormatterOutput.ts",
    "importStyle": "{SerenityFormatterOutput}",
    "description": "",
    "lineNumber": 13,
    "interface": true,
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "src/cli/output/StandardOutput.ts",
    "content": "import { OutputDescriptor } from './OutputDescriptor';\nimport { SerenityFormatterOutput } from './SerenityFormatterOutput';\nimport { StandardOutputDescriptor } from './StandardOutputDescriptor';\n\n/**\n * @package\n */\nexport class StandardOutput implements SerenityFormatterOutput {\n    get(): OutputDescriptor {\n        return new StandardOutputDescriptor();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/output/StandardOutput.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "class",
    "name": "StandardOutput",
    "memberof": "src/cli/output/StandardOutput.ts",
    "static": true,
    "longname": "src/cli/output/StandardOutput.ts~StandardOutput",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/cli/output/StandardOutput.ts",
    "importStyle": "{StandardOutput}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "get",
    "memberof": "src/cli/output/StandardOutput.ts~StandardOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/output/StandardOutput.ts~StandardOutput#get",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "return": {
      "nullable": null,
      "types": [
        "OutputDescriptor"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 260,
    "kind": "file",
    "name": "src/cli/output/StandardOutputDescriptor.ts",
    "content": "import { OutputDescriptor } from './OutputDescriptor';\n\n/**\n * @private\n */\nexport class StandardOutputDescriptor implements OutputDescriptor {\n    value(): string {\n        return '';\n    }\n\n    cleanUp(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/output/StandardOutputDescriptor.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "class",
    "name": "StandardOutputDescriptor",
    "memberof": "src/cli/output/StandardOutputDescriptor.ts",
    "static": true,
    "longname": "src/cli/output/StandardOutputDescriptor.ts~StandardOutputDescriptor",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/cli/output/StandardOutputDescriptor.ts",
    "importStyle": "{StandardOutputDescriptor}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "value",
    "memberof": "src/cli/output/StandardOutputDescriptor.ts~StandardOutputDescriptor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/output/StandardOutputDescriptor.ts~StandardOutputDescriptor#value",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "cleanUp",
    "memberof": "src/cli/output/StandardOutputDescriptor.ts~StandardOutputDescriptor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/output/StandardOutputDescriptor.ts~StandardOutputDescriptor#cleanUp",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 264,
    "kind": "file",
    "name": "src/cli/output/TempFileOutput.ts",
    "content": "/* eslint-disable unicorn/prevent-abbreviations */\nimport { FileSystem } from '@serenity-js/core/lib/io';\n\nimport { OutputDescriptor } from './OutputDescriptor';\nimport { SerenityFormatterOutput } from './SerenityFormatterOutput';\nimport { TempFileOutputDescriptor } from './TempFileOutputDescriptor';\n\n/**\n * @package\n */\nexport class TempFileOutput implements SerenityFormatterOutput {    // eslint-disable-line unicorn/prevent-abbreviations\n    constructor(private readonly fs: FileSystem) {\n    }\n\n    get(): OutputDescriptor {\n        return new TempFileOutputDescriptor(this.fs);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/output/TempFileOutput.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "class",
    "name": "TempFileOutput",
    "memberof": "src/cli/output/TempFileOutput.ts",
    "static": true,
    "longname": "src/cli/output/TempFileOutput.ts~TempFileOutput",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/cli/output/TempFileOutput.ts",
    "importStyle": "{TempFileOutput}",
    "description": "",
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 266,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cli/output/TempFileOutput.ts~TempFileOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/output/TempFileOutput.ts~TempFileOutput#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "get",
    "memberof": "src/cli/output/TempFileOutput.ts~TempFileOutput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/output/TempFileOutput.ts~TempFileOutput#get",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "return": {
      "nullable": null,
      "types": [
        "OutputDescriptor"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 268,
    "kind": "file",
    "name": "src/cli/output/TempFileOutputDescriptor.ts",
    "content": "/* eslint-disable unicorn/prevent-abbreviations */\nimport { FileSystem, Path } from '@serenity-js/core/lib/io';\n\nimport { OutputDescriptor } from './OutputDescriptor';\n\n/**\n * @desc\n *  Cucumber.js allows max 1 formatter per output\n *      - https://github.com/cucumber/cucumber-js/blob/625fab034eea768bf74f7a46993a57182204ddf6/src/cli/index.ts#L83-L140\n *  and doesn't allow to write to \\\\.\\NUL on Windows (equivalent of *nix /dev/null) because of the check in OptionSplitter\n *      - https://github.com/cucumber/cucumber-js/blob/625fab034eea768bf74f7a46993a57182204ddf6/src/cli/option_splitter.ts#L3\n *  so instead I create a dummy temp file, which is deleted when the test run is finished.\n *\n * @package\n */\nexport class TempFileOutputDescriptor implements OutputDescriptor {  // eslint-disable-line unicorn/prevent-abbreviations\n    private readonly path: Path;\n\n    constructor(private readonly fileSystem: FileSystem) {\n        this.path = this.fileSystem.tempFilePath('serenity-');\n    }\n\n    value(): string {\n        return this.path.value;\n    }\n\n    cleanUp(): Promise<void> {\n        return this.fileSystem.remove(this.path);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/output/TempFileOutputDescriptor.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 269,
    "kind": "class",
    "name": "TempFileOutputDescriptor",
    "memberof": "src/cli/output/TempFileOutputDescriptor.ts",
    "static": true,
    "longname": "src/cli/output/TempFileOutputDescriptor.ts~TempFileOutputDescriptor",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/cli/output/TempFileOutputDescriptor.ts",
    "importStyle": "{TempFileOutputDescriptor}",
    "description": " Cucumber.js allows max 1 formatter per output\n     - https://github.com/cucumber/cucumber-js/blob/625fab034eea768bf74f7a46993a57182204ddf6/src/cli/index.ts#L83-L140\n and doesn't allow to write to \\\\.\\NUL on Windows (equivalent of *nix /dev/null) because of the check in OptionSplitter\n     - https://github.com/cucumber/cucumber-js/blob/625fab034eea768bf74f7a46993a57182204ddf6/src/cli/option_splitter.ts#L3\n so instead I create a dummy temp file, which is deleted when the test run is finished.",
    "lineNumber": 23,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "path",
    "memberof": "src/cli/output/TempFileOutputDescriptor.ts~TempFileOutputDescriptor",
    "static": false,
    "longname": "src/cli/output/TempFileOutputDescriptor.ts~TempFileOutputDescriptor#path",
    "access": "private",
    "description": " ",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Path"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/cli/output/TempFileOutputDescriptor.ts~TempFileOutputDescriptor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/output/TempFileOutputDescriptor.ts~TempFileOutputDescriptor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "value",
    "memberof": "src/cli/output/TempFileOutputDescriptor.ts~TempFileOutputDescriptor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/output/TempFileOutputDescriptor.ts~TempFileOutputDescriptor#value",
    "access": "public",
    "description": " ",
    "lineNumber": 23,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "cleanUp",
    "memberof": "src/cli/output/TempFileOutputDescriptor.ts~TempFileOutputDescriptor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/cli/output/TempFileOutputDescriptor.ts~TempFileOutputDescriptor#cleanUp",
    "access": "public",
    "description": " ",
    "lineNumber": 27,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 275,
    "kind": "file",
    "name": "src/cli/output/index.ts",
    "content": "export * from './OutputDescriptor';\nexport * from './SerenityFormatterOutput';\nexport * from './StandardOutput';\nexport * from './TempFileOutput';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/cli/output/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 276,
    "kind": "file",
    "name": "src/errors/AmbiguousStepDefinitionError.ts",
    "content": "import { RuntimeError } from '@serenity-js/core/lib/errors';\n\n/**\n * @desc\n *  Thrown when more than one Cucumber step definition matches\n *  a Cucumber step.\n *\n * @extends {@serenity-js/core/lib/errors~RuntimeError}\n */\nexport class AmbiguousStepDefinitionError extends RuntimeError {\n    constructor(message: string, cause?: Error) {\n        super(AmbiguousStepDefinitionError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/errors/AmbiguousStepDefinitionError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "class",
    "name": "AmbiguousStepDefinitionError",
    "memberof": "src/errors/AmbiguousStepDefinitionError.ts",
    "static": true,
    "longname": "src/errors/AmbiguousStepDefinitionError.ts~AmbiguousStepDefinitionError",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/cucumber/lib/errors",
    "importStyle": "{AmbiguousStepDefinitionError}",
    "description": " Thrown when more than one Cucumber step definition matches\n a Cucumber step.",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "RuntimeError"
    ]
  },
  {
    "__docId__": 278,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors/AmbiguousStepDefinitionError.ts~AmbiguousStepDefinitionError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors/AmbiguousStepDefinitionError.ts~AmbiguousStepDefinitionError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 279,
    "kind": "file",
    "name": "src/errors/index.ts",
    "content": "export * from './AmbiguousStepDefinitionError';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/errors/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "src/index.ts",
    "content": "import { serenity } from '@serenity-js/core';\nimport { ModuleLoader, Version } from '@serenity-js/core/lib/io';\n\nconst loader = new ModuleLoader(process.cwd());\n\nconst version = loader.hasAvailable('@cucumber/cucumber')\n    ? loader.versionOf('@cucumber/cucumber')\n    : loader.versionOf('cucumber');\n\nexport = version.isAtLeast(new Version('7.0.0'))\n    ? require('./listeners/messages').createListener(serenity, loader)  // eslint-disable-line @typescript-eslint/no-var-requires\n    : require('./listeners/legacy').createListener(serenity, loader)    // eslint-disable-line @typescript-eslint/no-var-requires\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "variable",
    "name": "loader",
    "memberof": "src/index.ts",
    "static": true,
    "longname": "src/index.ts~loader",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/index.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "variable",
    "name": "version",
    "memberof": "src/index.ts",
    "static": true,
    "longname": "src/index.ts~version",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/index.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "file",
    "name": "src/listeners/legacy/CucumberEventProtocolAdapter.ts",
    "content": "import { AssertionError, ImplementationPendingError, TestCompromisedError } from '@serenity-js/core/lib/errors';\nimport { ErrorSerialiser, FileSystemLocation, Path } from '@serenity-js/core/lib/io';\nimport {\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ExecutionSkipped,\n    ExecutionSuccessful,\n    ImplementationPending,\n    Name,\n    Outcome,\n} from '@serenity-js/core/lib/model';\nimport { ensure, isDefined } from 'tiny-types';\n\nimport { AmbiguousStepDefinitionError } from '../../errors';\nimport { CucumberFormatterOptions } from './CucumberFormatterOptions';\nimport { Dependencies } from './Dependencies';\nimport { Feature, Hook, Scenario, ScenarioOutline, Step } from './gherkin';\n\ninterface Location {\n    uri: string;\n    line: number;\n}\n\ninterface StepLocations {\n    actionLocation?: Location;\n    sourceLocation?: Location;\n}\n\n/**\n * @private\n */\nexport function cucumberEventProtocolAdapter({ serenity, notifier, mapper, cache }: Dependencies) { // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n    return class CucumberEventProtocolAdapter {\n\n        // note: exported class expression can't have private properties\n        public readonly log: any;\n\n        constructor({ eventBroadcaster, log }: CucumberFormatterOptions) {\n            this.log = log;\n\n            eventBroadcaster.on('gherkin-document', ({ uri, document }) => {\n                ensure('gherkin-document :: uri', uri, isDefined());\n                ensure('gherkin-document :: document', document, isDefined());\n\n                const path = new Path(uri);\n                cache.set(path, mapper.map(document, path));    // eslint-disable-line unicorn/no-array-method-this-argument\n            });\n\n            eventBroadcaster.on('test-case-prepared', ({ steps, sourceLocation }: {\n                steps: StepLocations[],\n                sourceLocation: Location,\n            }) => {\n                ensure('test-case-prepared :: steps', steps, isDefined());\n                ensure('test-case-prepared :: sourceLocation', sourceLocation, isDefined());\n\n                const\n                    path = new Path(sourceLocation.uri),\n                    map = cache.get(path),\n                    scenario = map.get(Scenario).onLine(sourceLocation.line);\n\n                if (scenario.outline) {\n                    const outline = map.get(ScenarioOutline).onLine(scenario.outline.line);\n\n                    map.set(new ScenarioOutline(\n                        outline.location,\n                        outline.name,\n                        outline.description,\n                        outline.steps,\n                        outline.parameters,\n                    )).onLine(scenario.outline.line);\n                }\n\n                map.set(new Scenario(\n                    scenario.location,\n                    scenario.name,\n                    scenario.description,\n                    interleaveStepsAndHooks(scenario.steps, steps),\n                    scenario.tags,\n                    scenario.outline,\n                )).onLine(sourceLocation.line);\n            });\n\n            eventBroadcaster.on('test-case-started', ({ sourceLocation }) => {\n                ensure('test-case-started :: sourceLocation', sourceLocation, isDefined());\n\n                const\n                    map = cache.get(new Path(sourceLocation.uri)),\n                    scenario = map.get(Scenario).onLine(sourceLocation.line),\n                    sceneId = serenity.assignNewSceneId();\n\n                if (scenario.outline) {\n                    const outline = map.get(ScenarioOutline).onLine(scenario.outline.line);\n                    notifier.outlineDetected(sceneId, scenario, outline, map.getFirst(Feature));\n                }\n\n                notifier.scenarioStarts(sceneId, scenario, map.getFirst(Feature));\n            });\n\n            eventBroadcaster.on('test-step-started', ({ index, testCase }) => {\n\n                ensure('test-step-started :: index', index, isDefined());\n                ensure('test-step-started :: testCase', testCase, isDefined());\n\n                const\n                    map      = cache.get(new Path(testCase.sourceLocation.uri)),\n                    scenario = map.get(Scenario).onLine(testCase.sourceLocation.line),\n                    step     = scenario.steps[index];\n\n                if (step instanceof Step) { // ignore hooks\n                    notifier.stepStarts(step);\n                }\n            });\n\n            eventBroadcaster.on('test-step-finished', ({ index, result, testCase }) => {\n\n                ensure('test-step-finished :: index', index, isDefined());\n                ensure('test-step-finished :: result', result, isDefined());\n                ensure('test-step-finished :: testCase', testCase, isDefined());\n\n                const\n                    map      = cache.get(new Path(testCase.sourceLocation.uri)),\n                    scenario = map.get(Scenario).onLine(testCase.sourceLocation.line),\n                    step     = scenario.steps[index];\n\n                if (step instanceof Step) { // ignore hooks\n                    notifier.stepFinished(step, this.outcomeFrom(result));\n                }\n            });\n\n            eventBroadcaster.on('test-case-finished', ({ result, sourceLocation }) => {\n\n                ensure('test-case-finished :: result', result, isDefined());\n                ensure('test-case-finished :: sourceLocation', sourceLocation, isDefined());\n\n                const\n                    map             = cache.get(new Path(sourceLocation.uri)),\n                    scenario        = map.get(Scenario).onLine(sourceLocation.line),\n                    nonHookSteps    = scenario.steps.filter(step => step instanceof Step);\n\n                const outcome: Outcome = nonHookSteps.length > 0\n                    ? this.outcomeFrom(result)\n                    : new ImplementationPending(new ImplementationPendingError(`\"${ scenario.name.value }\" has no test steps`));\n\n                notifier.scenarioFinished(scenario, map.getFirst(Feature), outcome);\n            });\n        }\n\n        outcomeFrom(result: { duration: number, exception: string | Error, status: string }): Outcome {\n            const error = !! result.exception && this.errorFrom(result.exception);\n\n            switch (result.status) {\n                case 'undefined':\n                    return new ImplementationPending(new ImplementationPendingError('Step not implemented'));\n\n                case 'ambiguous':\n                case 'failed':\n                    switch (true) {\n                        case error instanceof AssertionError:       return new ExecutionFailedWithAssertionError(error as AssertionError);\n                        case error instanceof TestCompromisedError: return new ExecutionCompromised(error as TestCompromisedError);\n                        default:                                    return new ExecutionFailedWithError(error);\n                    }\n\n                case 'pending':\n                    return new ImplementationPending(new ImplementationPendingError('Step not implemented'));\n\n                case 'passed':\n                    return new ExecutionSuccessful();\n\n                case 'skipped':\n                    return new ExecutionSkipped();\n            }\n\n        }\n\n        errorFrom(exception: Error | string): Error {\n            switch (true) {\n                case exception instanceof Error:\n                    return exception as Error;\n                case typeof exception === 'string' && exception.startsWith('Multiple step definitions match'):\n                    return new AmbiguousStepDefinitionError(exception as string);\n                default:\n                    return ErrorSerialiser.deserialiseFromStackTrace(exception as string);\n            }\n        }\n    };\n}\n\n/**\n * @private\n */\nfunction interleaveStepsAndHooks(steps: Step[], stepsLocations: StepLocations[]): Array<Step | Hook> {\n    const\n        isAHook = (stepLocations: StepLocations) =>\n            stepLocations.actionLocation && ! stepLocations.sourceLocation,\n        matching  = (location: StepLocations) =>\n            (step: Step) =>\n                step.location.path.equals(new Path(location.sourceLocation.uri)) &&\n                step.location.line === location.sourceLocation.line;\n\n    return stepsLocations.map(location =>\n        isAHook(location)\n            ?   new Hook(new FileSystemLocation(new Path(location.actionLocation.uri), location.actionLocation.line), new Name('Setup'))\n            :   steps.find(matching(location)),\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/CucumberEventProtocolAdapter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 284,
    "kind": "function",
    "name": "cucumberEventProtocolAdapter",
    "memberof": "src/listeners/legacy/CucumberEventProtocolAdapter.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/legacy/CucumberEventProtocolAdapter.ts~cucumberEventProtocolAdapter",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/CucumberEventProtocolAdapter.ts",
    "importStyle": "{cucumberEventProtocolAdapter}",
    "description": "",
    "lineNumber": 100,
    "ignore": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"serenity\": *, \"notifier\": *, \"mapper\": *, \"cache\": *}"
        ],
        "defaultRaw": {
          "serenity": null,
          "notifier": null,
          "mapper": null,
          "cache": null
        },
        "defaultValue": "{\"serenity\":null,\"notifier\":null,\"mapper\":null,\"cache\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "function",
    "name": "interleaveStepsAndHooks",
    "memberof": "src/listeners/legacy/CucumberEventProtocolAdapter.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/legacy/CucumberEventProtocolAdapter.ts~interleaveStepsAndHooks",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/CucumberEventProtocolAdapter.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 364,
    "ignore": true,
    "params": [
      {
        "name": "steps",
        "types": [
          "*"
        ]
      },
      {
        "name": "stepsLocations",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "file",
    "name": "src/listeners/legacy/CucumberFormatterOptions.ts",
    "content": "import { EventEmitter } from 'events';\n\n/**\n * @private\n */\nexport interface CucumberFormatterOptions {\n    colorFns: any;\n    cwd: any;\n    eventDataCollector: any;\n    eventBroadcaster: EventEmitter;\n    log: typeof process.stdout.write;\n    snippetBuilder: any;\n    stream: any;\n    supportCodeLibrary: any;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/CucumberFormatterOptions.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "class",
    "name": "CucumberFormatterOptions",
    "memberof": "src/listeners/legacy/CucumberFormatterOptions.ts",
    "static": true,
    "longname": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/CucumberFormatterOptions.ts",
    "importStyle": "{CucumberFormatterOptions}",
    "description": "",
    "lineNumber": 13,
    "interface": true,
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "colorFns",
    "memberof": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions",
    "static": false,
    "longname": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions#colorFns",
    "access": "public",
    "description": " ",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "cwd",
    "memberof": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions",
    "static": false,
    "longname": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions#cwd",
    "access": "public",
    "description": " ",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "eventDataCollector",
    "memberof": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions",
    "static": false,
    "longname": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions#eventDataCollector",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "eventBroadcaster",
    "memberof": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions",
    "static": false,
    "longname": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions#eventBroadcaster",
    "access": "public",
    "description": " ",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "EventEmitter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "log",
    "memberof": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions",
    "static": false,
    "longname": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions#log",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "snippetBuilder",
    "memberof": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions",
    "static": false,
    "longname": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions#snippetBuilder",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "stream",
    "memberof": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions",
    "static": false,
    "longname": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions#stream",
    "access": "public",
    "description": " ",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "supportCodeLibrary",
    "memberof": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions",
    "static": false,
    "longname": "src/listeners/legacy/CucumberFormatterOptions.ts~CucumberFormatterOptions#supportCodeLibrary",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 296,
    "kind": "file",
    "name": "src/listeners/legacy/Dependencies.ts",
    "content": "import { Serenity } from '@serenity-js/core';\nimport { Path } from '@serenity-js/core/lib/io';\n\nimport { Cache, FeatureFileLoader, FeatureFileMap, FeatureFileMapper } from './gherkin';\nimport { Notifier, ResultMapper } from './notifier';\n\n/**\n * @private\n */\nexport interface Dependencies {\n    serenity: Serenity;\n    notifier: Notifier;\n    mapper: FeatureFileMapper;\n    resultMapper: ResultMapper\n    cache: Cache<Path, FeatureFileMap>;\n    loader: FeatureFileLoader;\n    cucumber: any;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/Dependencies.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 297,
    "kind": "class",
    "name": "Dependencies",
    "memberof": "src/listeners/legacy/Dependencies.ts",
    "static": true,
    "longname": "src/listeners/legacy/Dependencies.ts~Dependencies",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/Dependencies.ts",
    "importStyle": "{Dependencies}",
    "description": "",
    "lineNumber": 17,
    "interface": true,
    "ignore": true
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "serenity",
    "memberof": "src/listeners/legacy/Dependencies.ts~Dependencies",
    "static": false,
    "longname": "src/listeners/legacy/Dependencies.ts~Dependencies#serenity",
    "access": "public",
    "description": " ",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Serenity"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "notifier",
    "memberof": "src/listeners/legacy/Dependencies.ts~Dependencies",
    "static": false,
    "longname": "src/listeners/legacy/Dependencies.ts~Dependencies#notifier",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Notifier"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "mapper",
    "memberof": "src/listeners/legacy/Dependencies.ts~Dependencies",
    "static": false,
    "longname": "src/listeners/legacy/Dependencies.ts~Dependencies#mapper",
    "access": "public",
    "description": " ",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "FeatureFileMapper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "resultMapper",
    "memberof": "src/listeners/legacy/Dependencies.ts~Dependencies",
    "static": false,
    "longname": "src/listeners/legacy/Dependencies.ts~Dependencies#resultMapper",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "ResultMapper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "cache",
    "memberof": "src/listeners/legacy/Dependencies.ts~Dependencies",
    "static": false,
    "longname": "src/listeners/legacy/Dependencies.ts~Dependencies#cache",
    "access": "public",
    "description": " ",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Cache"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "loader",
    "memberof": "src/listeners/legacy/Dependencies.ts~Dependencies",
    "static": false,
    "longname": "src/listeners/legacy/Dependencies.ts~Dependencies#loader",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "FeatureFileLoader"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "cucumber",
    "memberof": "src/listeners/legacy/Dependencies.ts~Dependencies",
    "static": false,
    "longname": "src/listeners/legacy/Dependencies.ts~Dependencies#cucumber",
    "access": "public",
    "description": " ",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 305,
    "kind": "file",
    "name": "src/listeners/legacy/cucumber-0.ts",
    "content": "import { Path } from '@serenity-js/core/lib/io';\n\nimport { AmbiguousStepDefinitionError } from '../../errors';\nimport { Dependencies } from './Dependencies';\nimport { Feature, FeatureFileMap, Scenario, ScenarioOutline, Step } from './gherkin';\n\nexport = function ({ serenity, notifier, resultMapper, loader, cache }: Dependencies) {\n    return function (): void {\n        this.registerHandler('BeforeFeatures', () => {\n            notifier.testRunStarts();\n        });\n\n        this.registerHandler('BeforeFeature', function (feature, callback) {\n            loader.load(get(feature, 'uri').as(Path))\n                .then(_ => callback(), error => callback(error));\n        });\n\n        this.registerHandler('BeforeScenario', function (scenario) {\n            const\n                path  = get(scenario, 'uri').as(Path),\n                line  = get(scenario, 'line').value() as number,\n                lines = get(scenario, 'lines').value() as number[],\n                isOutline = lines.length === 2;\n\n            const\n                sceneId = serenity.assignNewSceneId(),\n                map = cache.get(path);\n\n            if (isOutline) {\n                notifier.outlineDetected(sceneId, map.get(Scenario).onLine(line), map.get(ScenarioOutline).onLine(lines[ 1 ]), map.getFirst(Feature));\n            }\n\n            notifier.scenarioStarts(sceneId, map.get(Scenario).onLine(line), map.getFirst(Feature));\n        });\n\n        this.registerHandler('BeforeStep', function (step) {\n            if (shouldIgnore(step)) {\n                return void 0;\n            }\n\n            const\n                scenario = get(step, 'scenario').value(),\n                path     = get(scenario, 'uri').as(Path);\n\n            notifier.stepStarts(findStepMatching(step, cache.get(path)));\n        });\n\n        this.registerHandler('StepResult', function (result) {\n            const\n                step     = get(result, 'step').value(),\n                scenario = get(step, 'scenario').value(),\n                path     = get(scenario, 'uri').as(Path);\n\n            if (shouldIgnore(step)) {\n                return void 0;\n            }\n\n            notifier.stepFinished(findStepMatching(step, cache.get(path)), resultMapper.outcomeFor(\n                get(result, 'status').value(),\n                get(result, 'failureException').value() || ambiguousStepsDetectedIn(result),\n            ));\n        });\n\n        this.registerHandler('ScenarioResult', function (result, callback) {\n\n            const\n                scenario = get(result, 'scenario').value(),\n                path     = get(scenario, 'uri').as(Path),\n                line     = get(scenario, 'line').value() as number,\n                outcome  = resultMapper.outcomeFor(\n                    get(result, 'status').value(),\n                    get(result, 'failureException').value()\n                );\n\n            const map = cache.get(path);\n\n            notifier.scenarioFinishes(map.get(Scenario).onLine(line), map.getFirst(Feature), outcome);\n\n            serenity.waitForNextCue()\n                .then(\n                    () => {\n                        notifier.scenarioFinished(map.get(Scenario).onLine(line), map.getFirst(Feature), outcome);\n                        callback();\n                    },\n                    error => {\n                        notifier.scenarioFinished(map.get(Scenario).onLine(line), map.getFirst(Feature), outcome);\n                        callback(error);\n                    });\n        });\n\n        this.registerHandler('AfterFeatures', (features, callback) => {\n            notifier.testRunFinishes();\n\n            serenity.waitForNextCue()\n                .then(() => notifier.testRunFinished())\n                .then(() => callback(), error => callback(error));\n        });\n    };\n};\n\nfunction get(object, property) {\n    const getter = 'get' + property.charAt(0).toUpperCase() + property.slice(1);\n\n    const value = object[getter]\n        ? object[getter]()\n        : object[property];\n\n    return ({\n        as: function<T>(type: new (v: any) => T): T {  // ESDoc doesn't understand generic anonymous functions\n            return new type(value);\n        },\n        value: () => value,\n    });\n}\n\nfunction is(object, property): boolean {\n    const getter = 'is' + property.charAt(0).toUpperCase() + property.slice(1);\n    return object[getter] ? object[getter]() : object[getter];\n}\n\nfunction findStepMatching(step, map: FeatureFileMap): Step {\n    const\n        stepLine     = get(step, 'line').value() as number,\n        scenario     = get(step, 'scenario').value(),\n        path         = get(scenario, 'uri').as(Path),\n        scenarioLine = get(scenario, 'line').value() as number;\n\n    const matchedStep = map.get(Scenario).onLine(scenarioLine).steps.find(s => s.location.line === stepLine);\n\n    if (! matchedStep) {\n        throw new Error(`No step was found in ${ path } on line ${ stepLine }. This looks like a bug.`);\n    }\n\n    return matchedStep;\n}\n\nfunction ambiguousStepsDetectedIn(result): Error | undefined {\n    const ambiguousStepDefinitions = get(result, 'ambiguousStepDefinitions').value() || [];\n\n    if (ambiguousStepDefinitions.length === 0) {\n        return void 0;\n    }\n\n    return ambiguousStepDefinitions\n        .map(step => `${ get(step, 'pattern').value().toString() } - ${ get(step, 'uri').value() }:${ get(step, 'line').value() }`)\n        .reduce((error: Error, issue) => {\n            error.message += `\\n${issue}`;\n            return error;\n        }, new AmbiguousStepDefinitionError('Multiple step definitions match:'));\n}\n\nfunction shouldIgnore(step): boolean {\n    return is(step, 'hidden')                                       // cucumber 0-1\n        || (step.constructor && step.constructor.name === 'Hook');  // cucumber 2\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/cucumber-0.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 306,
    "kind": "function",
    "name": "get",
    "memberof": "src/listeners/legacy/cucumber-0.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/legacy/cucumber-0.ts~get",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/cucumber-0.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "{\"as\": *, \"value\": *}"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "function",
    "name": "is",
    "memberof": "src/listeners/legacy/cucumber-0.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/legacy/cucumber-0.ts~is",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/cucumber-0.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 308,
    "kind": "function",
    "name": "findStepMatching",
    "memberof": "src/listeners/legacy/cucumber-0.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/legacy/cucumber-0.ts~findStepMatching",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/cucumber-0.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "FeatureFileMap"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Step"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 309,
    "kind": "function",
    "name": "ambiguousStepsDetectedIn",
    "memberof": "src/listeners/legacy/cucumber-0.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/legacy/cucumber-0.ts~ambiguousStepsDetectedIn",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/cucumber-0.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error ",
        " undefined"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "function",
    "name": "shouldIgnore",
    "memberof": "src/listeners/legacy/cucumber-0.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/legacy/cucumber-0.ts~shouldIgnore",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/cucumber-0.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 311,
    "kind": "file",
    "name": "src/listeners/legacy/cucumber-1.ts",
    "content": "export = require('./cucumber-0');\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/cucumber-1.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "src/listeners/legacy/cucumber-2.ts",
    "content": "import { Dependencies } from './Dependencies';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport = function ({ serenity, notifier, resultMapper, loader, cucumber, cache }: Dependencies) {\n    const adapter = require('./cucumber-0');    // eslint-disable-line  @typescript-eslint/no-var-requires\n\n    cucumber.defineSupportCode(support =>\n        adapter({ serenity, notifier, resultMapper, loader, cucumber, cache }).call(support)\n    );\n\n    return function () {\n        // no-op\n    };\n};\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/cucumber-2.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "file",
    "name": "src/listeners/legacy/cucumber-3.ts",
    "content": "import { cucumberEventProtocolAdapter } from './CucumberEventProtocolAdapter';\nimport { Dependencies } from './Dependencies';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport = function (dependencies: Dependencies) {\n\n    dependencies.cucumber.defineSupportCode(({ BeforeAll, After, AfterAll }) => {\n        BeforeAll(function () {\n            dependencies.notifier.testRunStarts();\n        });\n\n        After(function (event) {\n            dependencies.notifier.currentScenarioFinishes(\n                dependencies.resultMapper.outcomeFor(\n                    event.result.status,\n                    event.result.exception,\n                )\n            );\n\n            return dependencies.serenity.waitForNextCue();\n        });\n\n        AfterAll(function () {\n            dependencies.notifier.testRunFinishes();\n\n            return dependencies.serenity.waitForNextCue()\n                .then(() => {\n                    dependencies.notifier.testRunFinished();\n                });\n        });\n    });\n\n    return cucumberEventProtocolAdapter(dependencies);\n};\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/cucumber-3.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 314,
    "kind": "file",
    "name": "src/listeners/legacy/cucumber-4.ts",
    "content": "import { cucumberEventProtocolAdapter } from './CucumberEventProtocolAdapter';\nimport { Dependencies } from './Dependencies';\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport = function (dependencies: Dependencies) {\n    const { BeforeAll, After, AfterAll } = dependencies.cucumber;\n\n    BeforeAll(function () {\n        dependencies.notifier.testRunStarts();\n    });\n\n    After(function (event) {\n        dependencies.notifier.currentScenarioFinishes(\n            dependencies.resultMapper.outcomeFor(\n                event.result.status,\n                event.result.exception,\n            )\n        );\n\n        return dependencies.serenity.waitForNextCue();\n    });\n\n    AfterAll(function () {\n        dependencies.notifier.testRunFinishes();\n\n        return dependencies.serenity.waitForNextCue()\n            .then(() => {\n                dependencies.notifier.testRunFinished();\n            });\n    });\n\n    return cucumberEventProtocolAdapter(dependencies);\n};\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/cucumber-4.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "file",
    "name": "src/listeners/legacy/cucumber-5.ts",
    "content": "export = require('./cucumber-4');\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/cucumber-5.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 316,
    "kind": "file",
    "name": "src/listeners/legacy/cucumber-6.ts",
    "content": "export = require('./cucumber-4');\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/cucumber-6.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 317,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/constructables.ts",
    "content": "export type Constructor<T> = new (...args: any[]) => T;\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/constructables.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/Cache.ts",
    "content": "import { TinyType } from 'tiny-types';\n\nimport { UnableToRetrieveFeatureFileMap } from './errors';\n\n/**\n * @private\n */\nexport class Cache<Key extends TinyType, Value> {\n    constructor(private store: { [id: string]: Value } = {}) {\n    }\n\n    set(key: Key, value: Value): void {\n        this.store[this.idOf(key)] = value;\n    }\n\n    get(key: Key): Value {\n        if (! this.store[this.idOf(key)]) {\n            throw new UnableToRetrieveFeatureFileMap(\n                `Make sure you cache a value under ${ key.toString() } before trying to retrieve it`,\n            );\n        }\n\n        return this.store[this.idOf(key)];\n    }\n\n    has(key: Key): boolean {\n        return !! this.store[this.idOf(key)];\n    }\n\n    size(): number {\n        return Object.keys(this.store).length;\n    }\n\n    clear(): void {\n        this.store = {};\n    }\n\n    private idOf(key: Key): string {\n        return key.toString();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/Cache.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "class",
    "name": "Cache",
    "memberof": "src/listeners/legacy/gherkin/feature-files/Cache.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/feature-files/Cache.ts",
    "importStyle": "{Cache}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 320,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "set",
    "memberof": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache#set",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Key"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Value"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "get",
    "memberof": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache#get",
    "access": "public",
    "description": " ",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Key"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Value"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "has",
    "memberof": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache#has",
    "access": "public",
    "description": " ",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Key"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "size",
    "memberof": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache#size",
    "access": "public",
    "description": " ",
    "lineNumber": 30,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "clear",
    "memberof": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache#clear",
    "access": "public",
    "description": " ",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "store",
    "memberof": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache",
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache#store",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "idOf",
    "memberof": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/Cache.ts~Cache#idOf",
    "access": "private",
    "description": " ",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Key"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 328,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/FeatureFileLoader.ts",
    "content": "import { Path } from '@serenity-js/core/lib/io';\n\nimport { Cache } from './Cache';\nimport { FeatureFileMap } from './FeatureFileMap';\nimport { FeatureFileMapper } from './FeatureFileMapper';\nimport { FeatureFileParser } from './FeatureFileParser';\n\n/**\n * @private\n */\nexport class FeatureFileLoader {\n    constructor(\n        private readonly parser: FeatureFileParser,\n        private readonly mapper: FeatureFileMapper,\n        private readonly cache: Cache<Path, FeatureFileMap> = new Cache(),\n    ) {\n    }\n\n    load(path: Path): Promise<FeatureFileMap> {\n        if (this.cache.has(path)) {\n            return Promise.resolve(this.cache.get(path));\n        }\n\n        return this.parser.parse(path)\n            .then(document => this.mapper.map(document, path))  // eslint-disable-line unicorn/no-array-method-this-argument\n            .then(map => {\n                this.cache.set(path, map);\n                return this.cache.get(path);\n            });\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/FeatureFileLoader.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 329,
    "kind": "class",
    "name": "FeatureFileLoader",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileLoader.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileLoader.ts~FeatureFileLoader",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/feature-files/FeatureFileLoader.ts",
    "importStyle": "{FeatureFileLoader}",
    "description": "",
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 330,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileLoader.ts~FeatureFileLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileLoader.ts~FeatureFileLoader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "load",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileLoader.ts~FeatureFileLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileLoader.ts~FeatureFileLoader#load",
    "access": "public",
    "description": " ",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts",
    "content": "/* eslint-disable @typescript-eslint/ban-types */\n\nimport { Constructor } from '../constructables';\nimport { ItemNotFoundError } from './errors';\n\n/**\n * @private\n */\nexport class FeatureFileMap {\n\n    constructor(private readonly map: { [line: number]: object } = {}) {\n    }\n\n    set(item: object) {   // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n        return ({\n            onLine: (line: number): FeatureFileMap => {\n                this.map[line] = item;\n\n                return this;\n            },\n        });\n    }\n\n    get<T>(type: Constructor<T>) {  // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n        return ({\n            onLine: (line: number): T => {\n                const found = this.map[line];\n\n                if (! found) {\n                    throw new ItemNotFoundError(`Nothing was found on line ${ line }`);\n                }\n\n                if (! (found instanceof type))  {\n                    throw new ItemNotFoundError(`Item on line ${ line } is a ${ found.constructor.name }, not a ${ type.name }`);\n                }\n\n                return found as T;\n            },\n        });\n    }\n\n    getFirst<T>(type: Constructor<T>): T {\n        const\n            items = Object.keys(this.map).map(line => this.map[line]),\n            found = items.find(value => value instanceof type);\n\n        if (! found) {\n            const existingTypes = items.map(item => item.constructor.name).join(', ') || 'no items.';\n\n            throw new ItemNotFoundError(`Didn't find any ${ type.name } amongst ${ existingTypes }`);\n        }\n\n        return found;\n    }\n\n    size(): number {\n        return Object.keys(this.map).length;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "class",
    "name": "FeatureFileMap",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts",
    "importStyle": "{FeatureFileMap}",
    "description": "",
    "lineNumber": 16,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 334,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "set",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap#set",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"onLine\": *}"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "get",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap#get",
    "access": "public",
    "description": " ",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Constructor"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"onLine\": *}"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "getFirst",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap#getFirst",
    "access": "public",
    "description": " ",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Constructor"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "T"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "size",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMap.ts~FeatureFileMap#size",
    "access": "public",
    "description": " ",
    "lineNumber": 56,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 339,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts",
    "content": "import { FileSystemLocation, Path } from '@serenity-js/core/lib/io';\nimport { Description, Name, ScenarioParameters, Tag, Tags } from '@serenity-js/core/lib/model';\n\nimport { Background, Feature, Scenario, ScenarioOutline, Step } from '../model';\nimport * as nodes from '../nodes';\nimport { FeatureFileMap } from './FeatureFileMap';\n\n/**\n * @private\n */\nexport class FeatureFileMapper {\n    map(document: nodes.GherkinDocument, path: Path): FeatureFileMap {\n\n        const map = new FeatureFileMap();\n\n        if (! (document && document.feature)) {\n            return map;\n        }\n\n        let background: Background;\n\n        document.feature.children.forEach(scenarioDefinition => {\n            switch (scenarioDefinition.type) {\n\n                case 'Background':\n\n                    background = new Background(\n                        new FileSystemLocation(\n                            path,\n                            scenarioDefinition.location.line,\n                            scenarioDefinition.location.column,\n                        ),\n                        new Name(scenarioDefinition.name),\n                        scenarioDefinition.description && new Description(scenarioDefinition.description),\n                        scenarioDefinition.steps.map(step => this.asStep(path, step)),\n                    );\n\n                    map.set(background).onLine(scenarioDefinition.location.line);\n\n                    break;\n\n                case 'Scenario':\n\n                    map.set(new Scenario(\n                        new FileSystemLocation(\n                            path,\n                            scenarioDefinition.location.line,\n                            scenarioDefinition.location.column,\n                        ),\n                        new Name(scenarioDefinition.name),\n                        scenarioDefinition.description && new Description(scenarioDefinition.description),\n                        (background ? background.steps : []).concat(scenarioDefinition.steps.map(step => this.asStep(path, step))),\n                        this.tagsFrom(document.feature.tags, scenarioDefinition.tags),\n                    )).onLine(scenarioDefinition.location.line);\n\n                    break;\n\n                case 'ScenarioOutline': {\n\n                    const\n                        outline = scenarioDefinition as nodes.ScenarioOutline,\n                        parameters: { [line: number]: ScenarioParameters } = {};\n\n                    // @see https://github.com/cucumber/gherkin-javascript/blob/v5.1.0/lib/gherkin/pickles/compiler.js#L45\n                    outline.examples.filter(e => e.tableHeader !== undefined).forEach(examples => {\n\n                        const\n                            exampleSetName = new Name(examples.name),\n                            exampleSetDescription = new Description(examples.description || ''),\n                            variableCells = examples.tableHeader.cells;\n\n                        examples.tableBody.forEach(values => {\n                            const\n                                valueCells = values.cells,\n                                steps = background ? background.steps : [];\n\n                            outline.steps.forEach(scenarioOutlineStep => {\n                                const\n                                    interpolatedStepText = this.interpolate(scenarioOutlineStep.text, variableCells, valueCells),\n                                    interpolatedStepArgument = this.interpolateStepArgument(scenarioOutlineStep.argument, variableCells, valueCells);\n\n                                steps.push(new Step(\n                                    new FileSystemLocation(\n                                        path,\n                                        scenarioOutlineStep.location.line,\n                                        scenarioOutlineStep.location.column,\n                                    ),\n                                    new Name([\n                                        scenarioOutlineStep.keyword,\n                                        interpolatedStepText,\n                                        interpolatedStepArgument,\n                                    ].filter(_ => !!_).join('')),\n                                ));\n                            });\n\n                            const scenarioParameters = variableCells\n                                .map((cell, i) => ({ [cell.value]: valueCells[i].value }))\n                                .reduce((acc, current) => {\n                                    // ESDoc doesn't understand object spreads\n                                    return Object.assign(\n                                        {},\n                                        acc,\n                                        current,\n                                    );\n                                }, {});\n\n                            parameters[values.location.line] = new ScenarioParameters(\n                                exampleSetName,\n                                exampleSetDescription,\n                                scenarioParameters,\n                            );\n\n                            map.set(new Scenario(\n                                new FileSystemLocation(\n                                    path,\n                                    values.location.line,\n                                    values.location.column,\n                                ),\n                                new Name(outline.name),\n                                outline.description && new Description(outline.description),\n                                steps,\n                                this.tagsFrom(document.feature.tags, outline.tags, examples.tags),\n                                new FileSystemLocation(\n                                    path,\n                                    outline.location.line,\n                                    outline.location.column,\n                                ),\n                            )).onLine(values.location.line);\n                        });\n                    });\n\n                    map.set(new ScenarioOutline(\n                        new FileSystemLocation(\n                            path,\n                            outline.location.line,\n                            outline.location.column,\n                        ),\n                        new Name(outline.name),\n                        outline.description && new Description(outline.description),\n                        (background ? background.steps : []).concat(outline.steps.map(step => this.asStep(path, step, [], []))),\n                        parameters,\n                    )).onLine(scenarioDefinition.location.line);\n\n                    break;\n                }\n            }\n        });\n\n        map.set(new Feature(\n            new FileSystemLocation(\n                path,\n                document.feature.location.line,\n                document.feature.location.column,\n            ),\n            new Name(document.feature.name),\n            document.feature.description && new Description(document.feature.description),\n            background,\n        )).onLine(document.feature.location.line);\n\n        return map;\n    }\n\n    private asStep(path: Path, step: nodes.Step, variableCells: nodes.TableCell[] = [], valueCells: nodes.TableCell[] = []): Step {\n        return new Step(\n            new FileSystemLocation(\n                path,\n                step.location.line,\n                step.location.column,\n            ),\n            new Name([\n                step.keyword,\n                step.text,\n                this.interpolateStepArgument(step.argument, variableCells, valueCells),\n            ].filter(_ => !!_).join('')),\n        );\n    }\n\n    private tagsFrom(...listsOfTags: nodes.Tag[][]): Tag[] {\n        return flattened(\n            flattened(listsOfTags).map(tag => Tags.from(tag.name)),\n        );\n    }\n\n    private interpolateStepArgument(argument: nodes.StepArgument, variableCells: nodes.TableCell[], valueCells: nodes.TableCell[]): string {\n        switch (true) {\n            case argument && argument.type === 'DocString':\n                return '\\n' + this.interpolate((argument as nodes.DocString).content, variableCells, valueCells) ;\n            case argument && argument.type === 'DataTable':\n                return '\\n' + this.interpolate(\n                    (argument as nodes.DataTable).rows\n                        .map(row => `| ${ row.cells.map(cell => cell.value).join(' | ') } |`)\n                        .join('\\n'),\n                    variableCells,\n                    valueCells,\n                );\n            default:\n                return '';\n        }\n    }\n\n    // @see https://github.com/cucumber/gherkin-javascript/blob/v5.1.0/lib/gherkin/pickles/compiler.js#L115\n    private interpolate(text: string, variableCells: nodes.TableCell[], valueCells: nodes.TableCell[]) {\n        variableCells.forEach((variableCell, n) => {\n            const valueCell = valueCells[n];\n            const search = new RegExp('<' + variableCell.value + '>', 'g');\n            // JS Specific - dollar sign needs to be escaped with another dollar sign\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\n            const replacement = valueCell.value.replace(new RegExp('\\\\$', 'g'), '$$$$');\n            text = text.replace(search, replacement);\n        });\n        return text;\n    }\n}\n\n/**\n * @private\n */\nfunction flattened<T>(listsOfLists: T[][]): T[] {\n    return listsOfLists.reduce((acc, list) => acc.concat(list), []);\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 340,
    "kind": "class",
    "name": "FeatureFileMapper",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts",
    "importStyle": "{FeatureFileMapper}",
    "description": "",
    "lineNumber": 18,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "map",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper#map",
    "access": "public",
    "description": " ",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "document",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FeatureFileMap"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "asStep",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper#asStep",
    "access": "private",
    "description": " ",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "variableCells",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "valueCells",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Step"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "tagsFrom",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper#tagsFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "listsOfTags",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "interpolateStepArgument",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper#interpolateStepArgument",
    "access": "private",
    "description": " ",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "argument",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "variableCells",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "valueCells",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "interpolate",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~FeatureFileMapper#interpolate",
    "access": "private",
    "description": " ",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "variableCells",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "valueCells",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "function",
    "name": "flattened",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts~flattened",
    "access": "private",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/feature-files/FeatureFileMapper.ts",
    "importStyle": null,
    "description": "",
    "lineNumber": 315,
    "ignore": true,
    "params": [
      {
        "name": "listsOfLists",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/FeatureFileParser.ts",
    "content": "import { Path } from '@serenity-js/core/lib/io';\nimport * as fs from 'fs';\n\nimport { GherkinDocument } from '../nodes';\nimport { UnableToParseFeatureFileError, UnableToReadFeatureFileError } from './errors';\n\n/**\n * @private\n */\nexport class FeatureFileParser {\n    constructor(private readonly gherkinParser: { parse: (feature: string) => GherkinDocument }) {\n    }\n\n    parse(uri: Path): Promise<GherkinDocument> {\n        return new Promise((resolve, reject) => {\n            fs.readFile(uri.value, (error: NodeJS.ErrnoException | undefined, data: Buffer) => {\n                if (error) {\n                    return reject(\n                        new UnableToReadFeatureFileError(`Could not read feature file at \"${ uri.value }\"`, error),\n                    );\n                }\n\n                try {\n                    return resolve(this.gherkinParser.parse(data.toString('utf8')));\n                }\n                catch (parseError) {\n                    return reject(\n                        new UnableToParseFeatureFileError(`Could not parse feature file at \"${ uri.value }\"`, parseError),\n                    );\n                }\n            });\n        });\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/FeatureFileParser.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 348,
    "kind": "class",
    "name": "FeatureFileParser",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileParser.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileParser.ts~FeatureFileParser",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/feature-files/FeatureFileParser.ts",
    "importStyle": "{FeatureFileParser}",
    "description": "",
    "lineNumber": 17,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 349,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileParser.ts~FeatureFileParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileParser.ts~FeatureFileParser#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "parse",
    "memberof": "src/listeners/legacy/gherkin/feature-files/FeatureFileParser.ts~FeatureFileParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/FeatureFileParser.ts~FeatureFileParser#parse",
    "access": "public",
    "description": " ",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Path"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 351,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/errors/ItemNotFoundError.ts",
    "content": "import { RuntimeError } from '@serenity-js/core/lib/errors';\n\n/**\n * @private\n */\nexport class ItemNotFoundError extends RuntimeError {\n    constructor(message: string, cause?: Error) {\n        super(ItemNotFoundError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/errors/ItemNotFoundError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "ItemNotFoundError",
    "memberof": "src/listeners/legacy/gherkin/feature-files/errors/ItemNotFoundError.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/feature-files/errors/ItemNotFoundError.ts~ItemNotFoundError",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/feature-files/errors/ItemNotFoundError.ts",
    "importStyle": "{ItemNotFoundError}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "@serenity-js/core/lib/errors~RuntimeError"
    ],
    "ignore": true
  },
  {
    "__docId__": 353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/feature-files/errors/ItemNotFoundError.ts~ItemNotFoundError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/errors/ItemNotFoundError.ts~ItemNotFoundError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 354,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/errors/UnableToParseFeatureFileError.ts",
    "content": "import { RuntimeError } from '@serenity-js/core/lib/errors';\n\n/**\n * @private\n */\nexport class UnableToParseFeatureFileError extends RuntimeError {\n    constructor(message: string, cause?: Error) {\n        super(UnableToParseFeatureFileError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/errors/UnableToParseFeatureFileError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "class",
    "name": "UnableToParseFeatureFileError",
    "memberof": "src/listeners/legacy/gherkin/feature-files/errors/UnableToParseFeatureFileError.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/feature-files/errors/UnableToParseFeatureFileError.ts~UnableToParseFeatureFileError",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/feature-files/errors/UnableToParseFeatureFileError.ts",
    "importStyle": "{UnableToParseFeatureFileError}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "@serenity-js/core/lib/errors~RuntimeError"
    ],
    "ignore": true
  },
  {
    "__docId__": 356,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/feature-files/errors/UnableToParseFeatureFileError.ts~UnableToParseFeatureFileError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/errors/UnableToParseFeatureFileError.ts~UnableToParseFeatureFileError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 357,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/errors/UnableToReadFeatureFileError.ts",
    "content": "import { RuntimeError } from '@serenity-js/core/lib/errors';\n\n/**\n * @private\n */\nexport class UnableToReadFeatureFileError extends RuntimeError {\n    constructor(message: string, cause?: Error) {\n        super(UnableToReadFeatureFileError, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/errors/UnableToReadFeatureFileError.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 358,
    "kind": "class",
    "name": "UnableToReadFeatureFileError",
    "memberof": "src/listeners/legacy/gherkin/feature-files/errors/UnableToReadFeatureFileError.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/feature-files/errors/UnableToReadFeatureFileError.ts~UnableToReadFeatureFileError",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/feature-files/errors/UnableToReadFeatureFileError.ts",
    "importStyle": "{UnableToReadFeatureFileError}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "@serenity-js/core/lib/errors~RuntimeError"
    ],
    "ignore": true
  },
  {
    "__docId__": 359,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/feature-files/errors/UnableToReadFeatureFileError.ts~UnableToReadFeatureFileError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/errors/UnableToReadFeatureFileError.ts~UnableToReadFeatureFileError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 360,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/errors/UnableToRetrieveFeatureFileMap.ts",
    "content": "import { RuntimeError } from '@serenity-js/core/lib/errors';\n\n/**\n * @private\n */\nexport class UnableToRetrieveFeatureFileMap extends RuntimeError {\n    constructor(message: string, cause?: Error) {\n        super(UnableToRetrieveFeatureFileMap, message, cause);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/errors/UnableToRetrieveFeatureFileMap.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 361,
    "kind": "class",
    "name": "UnableToRetrieveFeatureFileMap",
    "memberof": "src/listeners/legacy/gherkin/feature-files/errors/UnableToRetrieveFeatureFileMap.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/feature-files/errors/UnableToRetrieveFeatureFileMap.ts~UnableToRetrieveFeatureFileMap",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/feature-files/errors/UnableToRetrieveFeatureFileMap.ts",
    "importStyle": "{UnableToRetrieveFeatureFileMap}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "@serenity-js/core/lib/errors~RuntimeError"
    ],
    "ignore": true
  },
  {
    "__docId__": 362,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/feature-files/errors/UnableToRetrieveFeatureFileMap.ts~UnableToRetrieveFeatureFileMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/feature-files/errors/UnableToRetrieveFeatureFileMap.ts~UnableToRetrieveFeatureFileMap#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 363,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/errors/index.ts",
    "content": "export * from './ItemNotFoundError';\nexport * from './UnableToParseFeatureFileError';\nexport * from './UnableToReadFeatureFileError';\nexport * from './UnableToRetrieveFeatureFileMap';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/errors/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 364,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/feature-files/index.ts",
    "content": "export * from './Cache';\nexport * from './FeatureFileLoader';\nexport * from './FeatureFileMap';\nexport * from './FeatureFileMapper';\nexport * from './FeatureFileParser';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/feature-files/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 365,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/index.ts",
    "content": "export * from './feature-files';\nexport * from './model';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 366,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/model/Background.ts",
    "content": "import { FileSystemLocation } from '@serenity-js/core/lib/io';\nimport { Description, Name } from '@serenity-js/core/lib/model';\n\nimport { FeatureFileNode } from './FeatureFileNode';\nimport { Step } from './Step';\n\n/**\n * @private\n */\nexport class Background extends FeatureFileNode {\n    constructor(\n        location: FileSystemLocation,\n        name: Name,\n        public readonly description: Description,\n        public readonly steps: Step[],\n    ) {\n        super(location, name);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/model/Background.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 367,
    "kind": "class",
    "name": "Background",
    "memberof": "src/listeners/legacy/gherkin/model/Background.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/model/Background.ts~Background",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/model/Background.ts",
    "importStyle": "{Background}",
    "description": "",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "src/listeners/legacy/gherkin/model/FeatureFileNode.js~FeatureFileNode"
    ],
    "ignore": true
  },
  {
    "__docId__": 368,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/model/Background.ts~Background",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/model/Background.ts~Background#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 369,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/model/Feature.ts",
    "content": "import { FileSystemLocation } from '@serenity-js/core/lib/io';\nimport { Description, Name } from '@serenity-js/core/lib/model';\n\nimport { Background } from './Background';\nimport { FeatureFileNode } from './FeatureFileNode';\n\n/**\n * @private\n */\nexport class Feature extends FeatureFileNode {\n    constructor(\n        location: FileSystemLocation,\n        name: Name,\n        public readonly description: Description,\n        public readonly background?: Background,\n    ) {\n        super(location, name);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/model/Feature.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 370,
    "kind": "class",
    "name": "Feature",
    "memberof": "src/listeners/legacy/gherkin/model/Feature.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/model/Feature.ts~Feature",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/model/Feature.ts",
    "importStyle": "{Feature}",
    "description": "",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "src/listeners/legacy/gherkin/model/FeatureFileNode.js~FeatureFileNode"
    ],
    "ignore": true
  },
  {
    "__docId__": 371,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/model/Feature.ts~Feature",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/model/Feature.ts~Feature#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 372,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/model/FeatureFileNode.ts",
    "content": "import { FileSystemLocation } from '@serenity-js/core/lib/io';\nimport { Name } from '@serenity-js/core/lib/model';\nimport { TinyType } from 'tiny-types';\n\n/**\n * @private\n */\nexport abstract class FeatureFileNode extends TinyType {\n    constructor(\n        public readonly location: FileSystemLocation,\n        public readonly name: Name,\n    ) {\n        super();\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/model/FeatureFileNode.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 373,
    "kind": "class",
    "name": "FeatureFileNode",
    "memberof": "src/listeners/legacy/gherkin/model/FeatureFileNode.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/model/FeatureFileNode.ts~FeatureFileNode",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/model/FeatureFileNode.ts",
    "importStyle": "{FeatureFileNode}",
    "description": "",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "tiny-types~TinyType"
    ],
    "ignore": true
  },
  {
    "__docId__": 374,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/model/FeatureFileNode.ts~FeatureFileNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/model/FeatureFileNode.ts~FeatureFileNode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 375,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/model/Hook.ts",
    "content": "import { FeatureFileNode } from './FeatureFileNode';\n\n/**\n * @private\n */\nexport class Hook extends FeatureFileNode {\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/model/Hook.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 376,
    "kind": "class",
    "name": "Hook",
    "memberof": "src/listeners/legacy/gherkin/model/Hook.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/model/Hook.ts~Hook",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/model/Hook.ts",
    "importStyle": "{Hook}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/listeners/legacy/gherkin/model/FeatureFileNode.js~FeatureFileNode"
    ],
    "ignore": true
  },
  {
    "__docId__": 377,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/model/Scenario.ts",
    "content": "import { FileSystemLocation } from '@serenity-js/core/lib/io';\nimport { Description, Name, Tag } from '@serenity-js/core/lib/model';\n\nimport { FeatureFileNode } from './FeatureFileNode';\nimport { Hook } from './Hook';\nimport { Step } from './Step';\n\n/**\n * @private\n */\nexport class Scenario extends FeatureFileNode {\n    constructor(\n        location: FileSystemLocation,\n        name: Name,\n        public readonly description: Description,\n        public readonly steps: Array<Step | Hook>,\n        public readonly tags: Tag[] = [],\n        public readonly outline?: FileSystemLocation,\n    ) {\n        super(location, name);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/model/Scenario.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 378,
    "kind": "class",
    "name": "Scenario",
    "memberof": "src/listeners/legacy/gherkin/model/Scenario.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/model/Scenario.ts~Scenario",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/model/Scenario.ts",
    "importStyle": "{Scenario}",
    "description": "",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "src/listeners/legacy/gherkin/model/FeatureFileNode.js~FeatureFileNode"
    ],
    "ignore": true
  },
  {
    "__docId__": 379,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/model/Scenario.ts~Scenario",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/model/Scenario.ts~Scenario#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 380,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/model/ScenarioOutline.ts",
    "content": "import { FileSystemLocation } from '@serenity-js/core/lib/io';\nimport { Description, Name, ScenarioParameters } from '@serenity-js/core/lib/model';\n\nimport { FeatureFileNode } from './FeatureFileNode';\nimport { Step } from './Step';\n\n/**\n * @private\n */\nexport class ScenarioOutline extends FeatureFileNode {\n    constructor(\n        location: FileSystemLocation,\n        name: Name,\n        public readonly description: Description,\n        public readonly steps: Step[],\n        public readonly parameters: { [line: number]: ScenarioParameters },\n    ) {\n        super(location, name);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/model/ScenarioOutline.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 381,
    "kind": "class",
    "name": "ScenarioOutline",
    "memberof": "src/listeners/legacy/gherkin/model/ScenarioOutline.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/model/ScenarioOutline.ts~ScenarioOutline",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/model/ScenarioOutline.ts",
    "importStyle": "{ScenarioOutline}",
    "description": "",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "src/listeners/legacy/gherkin/model/FeatureFileNode.js~FeatureFileNode"
    ],
    "ignore": true
  },
  {
    "__docId__": 382,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/gherkin/model/ScenarioOutline.ts~ScenarioOutline",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/gherkin/model/ScenarioOutline.ts~ScenarioOutline#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 383,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/model/Step.ts",
    "content": "import { FeatureFileNode } from './FeatureFileNode';\n\n/**\n * @private\n */\nexport class Step extends FeatureFileNode {\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/model/Step.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 384,
    "kind": "class",
    "name": "Step",
    "memberof": "src/listeners/legacy/gherkin/model/Step.ts",
    "static": true,
    "longname": "src/listeners/legacy/gherkin/model/Step.ts~Step",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/gherkin/model/Step.ts",
    "importStyle": "{Step}",
    "description": "",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/listeners/legacy/gherkin/model/FeatureFileNode.js~FeatureFileNode"
    ],
    "ignore": true
  },
  {
    "__docId__": 385,
    "kind": "file",
    "name": "src/listeners/legacy/gherkin/model/index.ts",
    "content": "export * from './Background';\nexport * from './Feature';\nexport * from './FeatureFileNode';\nexport * from './Hook';\nexport * from './Scenario';\nexport * from './ScenarioOutline';\nexport * from './Step';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/gherkin/model/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 386,
    "kind": "file",
    "name": "src/listeners/legacy/index.ts",
    "content": "import { ConfigurationError, Serenity } from '@serenity-js/core';\nimport { ModuleLoader, Path } from '@serenity-js/core/lib/io';\n\nimport Gherkin = require('gherkin');\n\nimport { Cache, FeatureFileLoader, FeatureFileMap, FeatureFileMapper, FeatureFileParser } from './gherkin';\nimport { Notifier, ResultMapper } from './notifier';\n\n/**\n * @desc\n *  Creates a listener for Cucumber.js 0.x-6.x\n *\n * @param {@serenity-js/core/lib~Serenity} serenity\n * @param {@serenity-js/core/lib/io~ModuleLoader} moduleLoader\n * @returns {cucumber~Formatter}\n */\nexport function createListener(serenity: Serenity, moduleLoader: ModuleLoader): any {\n\n    const version  = moduleLoader.versionOf('cucumber');\n\n    try {\n        const\n            cucumber        = moduleLoader.require('cucumber'),\n            notifier        = new Notifier(serenity),\n            mapper          = new FeatureFileMapper(),\n            resultMapper    = new ResultMapper(),\n            cache           = new Cache<Path, FeatureFileMap>(),\n            loader          = new FeatureFileLoader(\n                new FeatureFileParser(new Gherkin.Parser()),\n                mapper,\n                cache,\n            );\n\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        return require(`./cucumber-${ version.major() }`)({\n            serenity,\n            notifier,\n            mapper,\n            resultMapper,\n            cache,\n            loader,\n            cucumber,\n        });\n    }\n    catch (error) {\n        throw new ConfigurationError(`Cucumber version ${ version.toString() } is not supported yet.`, error);\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 387,
    "kind": "function",
    "name": "createListener",
    "memberof": "src/listeners/legacy/index.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/legacy/index.ts~createListener",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/cucumber/lib/listeners/legacy",
    "importStyle": "{createListener}",
    "description": " Creates a listener for Cucumber.js 0.x-6.x",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{cucumber~Formatter}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Serenity"
        ],
        "spread": false,
        "optional": false,
        "name": "serenity",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ModuleLoader"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleLoader",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Formatter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 388,
    "kind": "file",
    "name": "src/listeners/legacy/notifier/Notifier.ts",
    "content": "import {\n    DomainEvent,\n    FeatureNarrativeDetected,\n    SceneDescriptionDetected,\n    SceneFinished,\n    SceneFinishes,\n    SceneParametersDetected,\n    SceneSequenceDetected,\n    SceneStarts,\n    SceneTagged,\n    SceneTemplateDetected,\n    TaskFinished,\n    TaskStarts,\n    TestRunFinished,\n    TestRunFinishes,\n    TestRunnerDetected, TestRunStarts,\n} from '@serenity-js/core/lib/events';\nimport { ActivityDetails, CapabilityTag, Category, CorrelationId, Description, FeatureTag, Name, Outcome, ScenarioDetails, Tag, ThemeTag } from '@serenity-js/core/lib/model';\nimport { Serenity } from '@serenity-js/core/lib/Serenity';\n\nimport { Feature, FeatureFileNode, Scenario, ScenarioOutline, Step } from '../gherkin';\n\nfunction notEmpty<T>(list: T[]) {\n    return list.filter(item => !! item);\n}\n\n/**\n * @private\n */\nexport class Notifier {\n    private currentSceneId: CorrelationId;\n    private currentScenario: ScenarioDetails;\n    private currentStepActivityId: CorrelationId;\n\n    constructor(private readonly serenity: Serenity) {\n    }\n\n    testRunStarts(): void {\n        this.emit(\n            new TestRunStarts(this.serenity.currentTime()),\n        );\n    }\n\n    outlineDetected(sceneId: CorrelationId, scenario: Scenario, outline: ScenarioOutline, feature: Feature): void {\n        const\n            outlineDetails  = this.detailsOf(outline, feature),\n            scenarioDetails = this.detailsOf(scenario, feature),\n            template        = outline.steps.map(step => step.name.value).join('\\n');\n\n        this.emit(...notEmpty([\n            new SceneSequenceDetected(sceneId, outlineDetails, this.serenity.currentTime()),\n            new SceneTemplateDetected(sceneId, new Description(template), this.serenity.currentTime()),\n            new SceneParametersDetected(\n                sceneId,\n                scenarioDetails,\n                outline.parameters[ scenario.location.line ],\n                this.serenity.currentTime(),\n            ),\n        ]));\n    }\n\n    scenarioStarts(sceneId: CorrelationId, scenario: Scenario, feature: Feature): void {\n        this.currentSceneId = sceneId;\n\n        const details = this.detailsOf(scenario, feature);\n\n        this.currentScenario = details;\n\n        // todo: emit SceneBackgroundDetected?\n\n        this.emit(...notEmpty([\n            new SceneStarts(this.currentSceneId, details, this.serenity.currentTime()),\n            feature.description && new FeatureNarrativeDetected(this.currentSceneId, feature.description, this.serenity.currentTime()),\n            new TestRunnerDetected(this.currentSceneId, new Name('Cucumber'), this.serenity.currentTime()),\n            ...this.scenarioHierarchyTagsFor(feature).map(tag => new SceneTagged(this.currentSceneId, tag, this.serenity.currentTime())),\n            !! scenario.description && new SceneDescriptionDetected(this.currentSceneId, scenario.description, this.serenity.currentTime()),\n            ...scenario.tags.map(tag => new SceneTagged(this.currentSceneId, tag, this.serenity.currentTime())),\n        ]));\n    }\n\n    stepStarts(step: Step): void {\n        this.currentStepActivityId = this.serenity.assignNewActivityId();\n\n        this.emit(\n            new TaskStarts(\n                this.currentSceneId,\n                this.currentStepActivityId,\n                new ActivityDetails(step.name),\n                this.serenity.currentTime()\n            ),\n        );\n    }\n\n    stepFinished(step: Step, outcome: Outcome): void {\n        this.emit(\n            new TaskFinished(\n                this.currentSceneId,\n                this.currentStepActivityId,\n                new ActivityDetails(step.name),\n                outcome,\n                this.serenity.currentTime(),\n            ),\n        );\n    }\n\n    scenarioFinishes(scenario: Scenario, feature: Feature, outcome: Outcome): void {\n        this.emitSceneFinishes(this.detailsOf(scenario, feature), outcome);\n    }\n\n    currentScenarioFinishes(outcome: Outcome): void {\n        this.emitSceneFinishes(this.currentScenario, outcome);\n    }\n\n    scenarioFinished(scenario: Scenario, feature: Feature, outcome: Outcome): void {\n        const details = this.detailsOf(scenario, feature);\n\n        this.emit(\n            new SceneFinished(\n                this.currentSceneId,\n                details,\n                outcome,\n                this.serenity.currentTime(),\n            ),\n        );\n    }\n\n    testRunFinishes(): void {\n        this.emit(\n            new TestRunFinishes(this.serenity.currentTime()),\n        );\n    }\n\n    testRunFinished(): void {\n        this.emit(\n            new TestRunFinished(this.serenity.currentTime()),\n        );\n    }\n\n    private emitSceneFinishes(details: ScenarioDetails, outcome: Outcome): void {\n        this.emit(\n            new SceneFinishes(\n                this.currentSceneId,\n                details,\n                outcome,\n                this.serenity.currentTime(),\n            ),\n        );\n    }\n\n    private detailsOf(scenario: FeatureFileNode, feature: Feature): ScenarioDetails {\n        return new ScenarioDetails(\n            scenario.name,\n            new Category(feature.name.value),\n            scenario.location,\n        );\n    }\n\n    private scenarioHierarchyTagsFor(feature: Feature): Tag[] {\n        const\n            directories     = notEmpty(feature.location.path.directory().split()),\n            featuresIndex   = directories.indexOf('features'),\n            hierarchy       = [ ...directories.slice(featuresIndex + 1), feature.name.value ] as string[];\n\n        const [ featureName, capabilityName, themeName ]: string[] = hierarchy.reverse();\n\n        return notEmpty([\n            themeName       && new ThemeTag(themeName),\n            capabilityName  && new CapabilityTag(capabilityName),\n            feature         && new FeatureTag(featureName),\n        ]);\n    }\n\n    private emit(...events: DomainEvent[]) {\n        events.forEach(event => this.serenity.announce(event));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/notifier/Notifier.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 389,
    "kind": "function",
    "name": "notEmpty",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~notEmpty",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/notifier/Notifier.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "class",
    "name": "Notifier",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts",
    "static": true,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "access": "private",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/notifier/Notifier.ts",
    "importStyle": "{Notifier}",
    "description": "",
    "lineNumber": 46,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "currentSceneId",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#currentSceneId",
    "access": "private",
    "description": " ",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "currentScenario",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#currentScenario",
    "access": "private",
    "description": " ",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "ScenarioDetails"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "currentStepActivityId",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#currentStepActivityId",
    "access": "private",
    "description": " ",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 394,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "testRunStarts",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#testRunStarts",
    "access": "public",
    "description": " ",
    "lineNumber": 38,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "outlineDetected",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#outlineDetected",
    "access": "public",
    "description": " ",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "CorrelationId"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Scenario"
        ],
        "spread": false,
        "optional": false,
        "name": "scenario",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ScenarioOutline"
        ],
        "spread": false,
        "optional": false,
        "name": "outline",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Feature"
        ],
        "spread": false,
        "optional": false,
        "name": "feature",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "scenarioStarts",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#scenarioStarts",
    "access": "public",
    "description": " ",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "CorrelationId"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Scenario"
        ],
        "spread": false,
        "optional": false,
        "name": "scenario",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Feature"
        ],
        "spread": false,
        "optional": false,
        "name": "feature",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "stepStarts",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#stepStarts",
    "access": "public",
    "description": " ",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "Step"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "stepFinished",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#stepFinished",
    "access": "public",
    "description": " ",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Step"
        ],
        "spread": false,
        "optional": false,
        "name": "step",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Outcome"
        ],
        "spread": false,
        "optional": false,
        "name": "outcome",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "scenarioFinishes",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#scenarioFinishes",
    "access": "public",
    "description": " ",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "Scenario"
        ],
        "spread": false,
        "optional": false,
        "name": "scenario",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Feature"
        ],
        "spread": false,
        "optional": false,
        "name": "feature",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Outcome"
        ],
        "spread": false,
        "optional": false,
        "name": "outcome",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "currentScenarioFinishes",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#currentScenarioFinishes",
    "access": "public",
    "description": " ",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "Outcome"
        ],
        "spread": false,
        "optional": false,
        "name": "outcome",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "scenarioFinished",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#scenarioFinished",
    "access": "public",
    "description": " ",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Scenario"
        ],
        "spread": false,
        "optional": false,
        "name": "scenario",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Feature"
        ],
        "spread": false,
        "optional": false,
        "name": "feature",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Outcome"
        ],
        "spread": false,
        "optional": false,
        "name": "outcome",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "testRunFinishes",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#testRunFinishes",
    "access": "public",
    "description": " ",
    "lineNumber": 127,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "testRunFinished",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#testRunFinished",
    "access": "public",
    "description": " ",
    "lineNumber": 133,
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "emitSceneFinishes",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#emitSceneFinishes",
    "access": "private",
    "description": " ",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "ScenarioDetails"
        ],
        "spread": false,
        "optional": false,
        "name": "details",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Outcome"
        ],
        "spread": false,
        "optional": false,
        "name": "outcome",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "detailsOf",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#detailsOf",
    "access": "private",
    "description": " ",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "FeatureFileNode"
        ],
        "spread": false,
        "optional": false,
        "name": "scenario",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Feature"
        ],
        "spread": false,
        "optional": false,
        "name": "feature",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ScenarioDetails"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "scenarioHierarchyTagsFor",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#scenarioHierarchyTagsFor",
    "access": "private",
    "description": " ",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "Feature"
        ],
        "spread": false,
        "optional": false,
        "name": "feature",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "emit",
    "memberof": "src/listeners/legacy/notifier/Notifier.ts~Notifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/Notifier.ts~Notifier#emit",
    "access": "private",
    "description": " ",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 412,
    "kind": "file",
    "name": "src/listeners/legacy/notifier/ResultMapper.ts",
    "content": "import { AssertionError, ImplementationPendingError, TestCompromisedError } from '@serenity-js/core';\nimport {\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ExecutionSkipped,\n    ExecutionSuccessful,\n    ImplementationPending,\n    Outcome,\n} from '@serenity-js/core/lib/model';\n\nimport { AmbiguousStepDefinitionError } from '../../../errors';\n\n/**\n * @package\n */\nexport class ResultMapper {\n    outcomeFor(status: string, maybeError: Error | string | undefined): Outcome {\n        const error = this.errorFrom(maybeError);\n\n        if (error && /timed out/.test(error.message)) {\n            return new ExecutionFailedWithError(error);\n        }\n\n        switch (true) {\n            case status === 'undefined':\n                return new ImplementationPending(new ImplementationPendingError('Step not implemented'));\n\n            case status === 'ambiguous':\n                if (! error) {\n                    // Only the step result contains the \"ambiguous step def error\", the scenario itself doesn't\n                    return new ExecutionFailedWithError(new AmbiguousStepDefinitionError('Multiple step definitions match'));\n                }\n\n                return new ExecutionFailedWithError(error);\n\n            case status === 'failed':\n                switch (true) {\n                    case error instanceof AssertionError:       return new ExecutionFailedWithAssertionError(error as AssertionError);\n                    case error instanceof TestCompromisedError: return new ExecutionCompromised(error as TestCompromisedError);\n                    default:                                    return new ExecutionFailedWithError(error);\n                }\n\n            case status === 'pending':\n                return new ImplementationPending(new ImplementationPendingError('Step not implemented'));\n\n            case status === 'passed':\n                return new ExecutionSuccessful();\n\n            case status === 'skipped':\n                return new ExecutionSkipped();\n        }\n\n    }\n\n    errorFrom(error: Error | string | undefined): Error | undefined {\n        switch (typeof error) {\n            case 'string':   return new Error(error as string);\n            case 'object':   return error as Error;\n            case 'function': return error as Error;\n            default:         return void 0;\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/notifier/ResultMapper.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "class",
    "name": "ResultMapper",
    "memberof": "src/listeners/legacy/notifier/ResultMapper.ts",
    "static": true,
    "longname": "src/listeners/legacy/notifier/ResultMapper.ts~ResultMapper",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/legacy/notifier/ResultMapper.ts",
    "importStyle": "{ResultMapper}",
    "description": "",
    "lineNumber": 24,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "outcomeFor",
    "memberof": "src/listeners/legacy/notifier/ResultMapper.ts~ResultMapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/ResultMapper.ts~ResultMapper#outcomeFor",
    "access": "public",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Error ",
          " undefined ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeError",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Outcome"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "errorFrom",
    "memberof": "src/listeners/legacy/notifier/ResultMapper.ts~ResultMapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/legacy/notifier/ResultMapper.ts~ResultMapper#errorFrom",
    "access": "public",
    "description": " ",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error ",
          " undefined ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Error ",
        " undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 416,
    "kind": "file",
    "name": "src/listeners/legacy/notifier/index.ts",
    "content": "export * from './Notifier';\nexport * from './ResultMapper';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/legacy/notifier/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 417,
    "kind": "file",
    "name": "src/listeners/messages/CucumberMessagesListener.ts",
    "content": "// import type { Formatter, formatterHelpers } from '@cucumber/cucumber';\nimport { Envelope, IdGenerator, TestStepResult } from '@cucumber/messages';\nimport { Serenity } from '@serenity-js/core';\nimport { DomainEvent, TestRunFinished, TestRunFinishes, TestRunStarts } from '@serenity-js/core/lib/events';\nimport { ModuleLoader } from '@serenity-js/core/lib/io';\n\nimport { CucumberMessagesParser } from './parser/CucumberMessagesParser';\nimport { IParsedTestStep } from './types/cucumber';\n\nexport = function (serenity: Serenity, moduleLoader: ModuleLoader) {    // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n\n    const\n        { Formatter, formatterHelpers } = moduleLoader.require('@cucumber/cucumber'),\n        TestCaseHookDefinition          = moduleLoader.require('@cucumber/cucumber/lib/models/test_case_hook_definition').default;\n\n    return class CucumberMessagesListener extends Formatter {\n        static readonly fakeInternalAfterHookUri = '/internal/serenity-js/cucumber';\n\n        readonly parser: CucumberMessagesParser;\n\n        log: (buffer: string | Uint8Array) => void;\n        supportCodeLibrary: any;\n\n        constructor(options) {\n            super(options);\n\n            this.parser = new CucumberMessagesParser(\n                serenity,\n                formatterHelpers,\n                options,\n                (step: IParsedTestStep) =>\n                    step?.actionLocation?.uri !== CucumberMessagesListener.fakeInternalAfterHookUri,\n            );\n\n            this.addAfterHook((message: { testCaseStartedId: string, result: TestStepResult }) => {\n                this.emit(this.parser.parseTestCaseFinishes(message));\n\n                return serenity.waitForNextCue();\n            });\n\n            options.eventBroadcaster.on('envelope', (envelope: Envelope) => {\n                // this.log('> [cucumber] ' + JSON.stringify(envelope) + '\\n');\n\n                switch (true) {\n                    case !! envelope.testRunStarted:\n                        return this.emit(new TestRunStarts(serenity.currentTime()));\n\n                    case !! envelope.testCaseStarted:\n                        return this.emit(\n                            this.parser.parseTestCaseStarted(envelope.testCaseStarted),\n                        );\n\n                    case !! envelope.testStepStarted:\n                        return this.emit(\n                            this.parser.parseTestStepStarted(envelope.testStepStarted),\n                        );\n\n                    case !! envelope.testStepFinished:\n                        return this.emit(\n                            this.parser.parseTestStepFinished(envelope.testStepFinished),\n                        );\n\n                    case !! envelope.testCaseFinished:\n                        return this.emit(\n                            this.parser.parseTestCaseFinished(envelope.testCaseFinished),\n                        );\n                }\n            });\n        }\n\n        public async finished(): Promise<void> {\n            this.emit(new TestRunFinishes(serenity.currentTime()));\n\n            await serenity.waitForNextCue();\n            await super.finished();\n\n            this.emit(new TestRunFinished(serenity.currentTime()));\n        }\n\n        addAfterHook(code: (...args: any) => Promise<void> | void) {\n            this.supportCodeLibrary.afterTestCaseHookDefinitions.unshift(\n                new TestCaseHookDefinition({\n                    code,\n                    id:     IdGenerator.uuid()(),\n                    line:   0,\n                    uri:    CucumberMessagesListener.fakeInternalAfterHookUri,\n                    options: {},\n                }),\n            );\n        }\n\n        emit(events: DomainEvent[] | DomainEvent): void {\n            [].concat(events).forEach(event => serenity.announce(event));\n        }\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/messages/CucumberMessagesListener.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 418,
    "kind": "file",
    "name": "src/listeners/messages/index.ts",
    "content": "import { Serenity } from '@serenity-js/core';\nimport { ModuleLoader } from '@serenity-js/core/lib/io';\nimport cucumberMessagesListener = require('./CucumberMessagesListener');\n\n/**\n * @desc\n *  Creates a listener for Cucumber.js v7.x and above\n *\n * @param {@serenity-js/core/lib~Serenity} serenity\n * @param {@serenity-js/core/lib/io~ModuleLoader} moduleLoader\n * @returns {@cucumber/cucumber~Formatter}\n */\nexport function createListener(serenity: Serenity, moduleLoader: ModuleLoader): any {\n    return cucumberMessagesListener(\n        serenity,\n        moduleLoader,\n    );\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/messages/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 419,
    "kind": "function",
    "name": "createListener",
    "memberof": "src/listeners/messages/index.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/messages/index.ts~createListener",
    "access": "public",
    "export": true,
    "importPath": "@serenity-js/cucumber/lib/listeners/messages",
    "importStyle": "{createListener}",
    "description": " Creates a listener for Cucumber.js v7.x and above",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{@cucumber/cucumber~Formatter}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Serenity"
        ],
        "spread": false,
        "optional": false,
        "name": "serenity",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ModuleLoader"
        ],
        "spread": false,
        "optional": false,
        "name": "moduleLoader",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Formatter"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 420,
    "kind": "file",
    "name": "src/listeners/messages/parser/CucumberMessagesParser.ts",
    "content": "import { GherkinDocument, Location, Pickle, TestCaseFinished, TestCaseStarted, TestStepFinished, TestStepResult, TestStepStarted } from '@cucumber/messages';\nimport { TestStepResultStatus } from '@cucumber/messages';\nimport { AssertionError, ImplementationPendingError, Serenity, TestCompromisedError } from '@serenity-js/core';\nimport {\n    BusinessRuleDetected,\n    DomainEvent,\n    FeatureNarrativeDetected,\n    RetryableSceneDetected,\n    SceneDescriptionDetected,\n    SceneFinished,\n    SceneFinishes,\n    SceneParametersDetected,\n    SceneSequenceDetected,\n    SceneStarts,\n    SceneTagged,\n    SceneTemplateDetected,\n    TaskFinished,\n    TaskStarts,\n    TestRunnerDetected,\n} from '@serenity-js/core/lib/events';\nimport { ErrorSerialiser, FileSystemLocation, Path } from '@serenity-js/core/lib/io';\nimport {\n    ActivityDetails,\n    ArbitraryTag,\n    BusinessRule,\n    CapabilityTag,\n    Category,\n    CorrelationId,\n    Description,\n    ExecutionCompromised,\n    ExecutionFailedWithAssertionError,\n    ExecutionFailedWithError,\n    ExecutionRetriedTag,\n    ExecutionSkipped,\n    ExecutionSuccessful,\n    FeatureTag,\n    ImplementationPending,\n    Name,\n    Outcome,\n    ScenarioDetails,\n    ScenarioParameters,\n    Tag,\n    Tags,\n    ThemeTag,\n} from '@serenity-js/core/lib/model';\n\nimport { EventDataCollector, IParsedTestStep, ITestCaseAttempt } from '../types/cucumber';\nimport { TestStepFormatter } from './TestStepFormatter';\nimport { ExtractedScenario, ExtractedScenarioOutline } from './types';\n\n/**\n * @package\n */\nexport class CucumberMessagesParser {\n    private readonly testStepFormatter = new TestStepFormatter();\n\n    private currentScenario: ScenarioDetails;\n    private currentStepActivityId: CorrelationId;\n\n    private readonly cwd: string;\n    private readonly eventDataCollector: any;\n    private readonly snippetBuilder: any;\n    private readonly supportCodeLibrary: any;\n\n    constructor(\n        private readonly serenity: Serenity,\n        private readonly formatterHelpers: any,     // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n        formatterOptionsAndDependencies: {\n            cwd: string,\n            eventDataCollector: EventDataCollector,\n            snippetBuilder: any,\n            supportCodeLibrary: any,\n        },\n        private readonly shouldReportStep: (parsedTestStep: IParsedTestStep) => boolean,\n    ) {\n        this.cwd                = formatterOptionsAndDependencies.cwd;\n        this.eventDataCollector = formatterOptionsAndDependencies.eventDataCollector;\n        this.snippetBuilder     = formatterOptionsAndDependencies.snippetBuilder;\n        this.supportCodeLibrary = formatterOptionsAndDependencies.supportCodeLibrary;\n    }\n\n    parseTestCaseStarted(message: TestCaseStarted): DomainEvent[] {\n        const\n            testCaseAttempt = this.eventDataCollector.getTestCaseAttempt(message.id),\n            currentSceneId = this.serenity.assignNewSceneId();\n\n        this.currentScenario = this.scenarioDetailsFor(\n            testCaseAttempt.gherkinDocument,\n            testCaseAttempt.pickle,\n            this.formatterHelpers.PickleParser.getPickleLocation(testCaseAttempt),\n        );\n\n        return [\n            ...this.extract(this.outlineFrom(testCaseAttempt), outline => [\n                new SceneSequenceDetected(currentSceneId, outline.details, this.serenity.currentTime()),\n                new SceneTemplateDetected(currentSceneId, outline.template, this.serenity.currentTime()),\n                new SceneParametersDetected(\n                    currentSceneId,\n                    this.currentScenario,\n                    outline.parameters,\n                    this.serenity.currentTime(),\n                ),\n            ]),\n\n            ...this.extract(this.scenarioFrom(testCaseAttempt), ({ featureDescription, rule, scenarioDescription, tags, testRunnerName }) => [\n                new SceneStarts(currentSceneId, this.currentScenario, this.serenity.currentTime()),\n                featureDescription && new FeatureNarrativeDetected(currentSceneId, featureDescription, this.serenity.currentTime()),\n                new TestRunnerDetected(currentSceneId, testRunnerName, this.serenity.currentTime()),\n                !! scenarioDescription && new SceneDescriptionDetected(currentSceneId, scenarioDescription, this.serenity.currentTime()),\n                !! rule && new BusinessRuleDetected(currentSceneId, this.currentScenario, rule, this.serenity.currentTime()),\n                ...tags.map(tag => new SceneTagged(currentSceneId, tag, this.serenity.currentTime())),\n            ]),\n        ];\n    }\n\n    parseTestStepStarted(message: TestStepStarted): DomainEvent[] {\n        return this.extract(this.stepFrom(message), step => {\n            this.currentStepActivityId = this.serenity.assignNewActivityId();\n\n            if (this.shouldReportStep(step)) {\n                return new TaskStarts(\n                    this.serenity.currentSceneId(),\n                    this.currentStepActivityId,\n                    this.activityDetailsFor(step),\n                    this.serenity.currentTime()\n                )\n            }\n        });\n    }\n\n    parseTestStepFinished(message: TestStepStarted): DomainEvent[] {\n        return this.extract(this.stepFrom(message), step => {\n            if (this.shouldReportStep(step)) {\n                return new TaskFinished(\n                    this.serenity.currentSceneId(),\n                    this.currentStepActivityId,\n                    this.activityDetailsFor(step),\n                    this.outcomeFrom(step.result, step),\n                    this.serenity.currentTime()\n                );\n            }\n        })\n    }\n\n    parseTestCaseFinishes(hookMessage: { testCaseStartedId: string, result: TestStepResult }): DomainEvent {\n        return new SceneFinishes(\n            this.serenity.currentSceneId(),\n            this.currentScenario,\n            this.outcomeFrom(hookMessage.result),\n            this.serenity.currentTime()\n        );\n    }\n\n    parseTestCaseFinished(message: TestCaseFinished): DomainEvent[] {\n        const\n            testCaseAttempt = this.eventDataCollector.getTestCaseAttempt(message.testCaseStartedId),\n            currentSceneId  = this.serenity.currentSceneId();\n\n        return this.extract(this.scenarioOutcomeFrom(testCaseAttempt), ({ outcome, willBeRetried, tags }) => [\n            willBeRetried ? new RetryableSceneDetected(currentSceneId, this.serenity.currentTime()) : undefined,\n            ...tags.map(tag => new SceneTagged(currentSceneId, tag, this.serenity.currentTime())),\n            new SceneFinished(\n                currentSceneId,\n                this.currentScenario,\n                outcome,\n                this.serenity.currentTime()\n            ),\n        ]);\n    }\n\n    // ---\n\n    private extract<T>(maybeValue: T | undefined, fn: (value: T) => DomainEvent[] | DomainEvent | void): DomainEvent[] {\n        return (maybeValue !== undefined)\n            ? [].concat(fn(maybeValue)).filter(item => !! item)\n            : [];\n    }\n\n    private scenarioDetailsFor(gherkinDocument: GherkinDocument, pickle: Pickle, location: Location): ScenarioDetails {\n        return new ScenarioDetails(\n            new Name(pickle.name),\n            new Category(gherkinDocument.feature.name),\n            new FileSystemLocation(\n                new Path(gherkinDocument.uri),\n                location.line,\n                location.column,\n            ),\n        );\n    }\n\n    private outlineFrom(testCaseAttempt: ITestCaseAttempt): ExtractedScenarioOutline {\n        const\n            { gherkinDocument, pickle } = testCaseAttempt,\n            gherkinScenarioMap = this.formatterHelpers.GherkinDocumentParser.getGherkinScenarioMap(gherkinDocument);\n\n        if (gherkinScenarioMap[pickle.astNodeIds[0]].examples.length === 0) {\n            return; // this is not an outline, skip it\n        }\n\n        const outline   = gherkinScenarioMap[pickle.astNodeIds[0]];\n        const details   = this.scenarioDetailsFor(gherkinDocument, outline, outline.location);\n        const template  = new Description(outline.steps.map(step => this.testStepFormatter.format(step.keyword, step.text, step)).join('\\n'));\n\n        const examples = flatten(\n            outline.examples.map(exampleSet =>\n                exampleSet.tableBody.map(row => ({\n                    header: exampleSet.tableHeader,\n                    row,\n                    name: exampleSet.name,\n                    description: exampleSet.description,\n                }))\n            ),\n        ).map((example: any) => ({\n            rowId:          example.row.id,\n            name:           example.name.trim(),\n            description:    example.description.trim(),\n            values:         example.header.cells\n                .map(cell => cell.value)\n                .reduce((values, header, i) => {\n                    values[header] = example.row.cells[i].value;\n                    return values;\n                }, {}),\n        }));\n\n        const parameters = examples.find(example => example.rowId === pickle.astNodeIds[pickle.astNodeIds.length - 1]);\n\n        return {\n            details, template, parameters: new ScenarioParameters(new Name(parameters.name), new Description(parameters.description), parameters.values),\n        };\n    }\n\n    private scenarioFrom({ gherkinDocument, pickle }: ITestCaseAttempt): ExtractedScenario {\n        const\n            gherkinScenarioMap      = this.formatterHelpers.GherkinDocumentParser.getGherkinScenarioMap(gherkinDocument),\n            gherkinExampleRuleMap   = this.formatterHelpers.GherkinDocumentParser.getGherkinExampleRuleMap(gherkinDocument),\n            scenarioDescription     = this.formatterHelpers.PickleParser.getScenarioDescription({ gherkinScenarioMap, pickle }),\n            scenarioTags: Tag[]     = flatten<Tag>(pickle.tags.map(tag => Tags.from(tag.name))),\n            rule                    = gherkinExampleRuleMap[pickle.astNodeIds[0]];\n\n        return {\n            featureDescription:     gherkinDocument.feature.description && new Description(gherkinDocument.feature.description),\n            scenarioDescription:    scenarioDescription && new Description(scenarioDescription),\n            rule:                   rule && new BusinessRule(new Name(rule.name), new Description(rule.description.trim())),\n            testRunnerName:         new Name('Cucumber'),\n            tags:                   this.scenarioHierarchyTagsFor(gherkinDocument, pickle).concat(scenarioTags),\n        };\n    }\n\n    private scenarioHierarchyTagsFor(gherkinDocument: GherkinDocument, pickle: Pickle): Tag[] {\n        const\n            directories = new Path(pickle.uri).directory().split(),\n            featuresIndex = directories.indexOf('features'),\n            hierarchy = [...directories.slice(featuresIndex + 1), gherkinDocument.feature.name];\n\n        const [featureName, capabilityName, themeName]: string[] = hierarchy.reverse();\n\n        return notEmpty([\n            themeName && new ThemeTag(themeName),\n            capabilityName && new CapabilityTag(capabilityName),\n            new FeatureTag(featureName),\n        ]);\n    }\n\n    private stepFrom(message: TestStepStarted | TestStepFinished) {\n        const { testCaseStartedId, testStepId } = message;\n\n        const testCaseAttempt = this.eventDataCollector.getTestCaseAttempt(testCaseStartedId);\n\n        const index = testCaseAttempt.testCase.testSteps.findIndex(step => step.id === testStepId);\n\n        return this.parseTestCaseAttempt(testCaseAttempt).testSteps[index];\n    }\n\n    private parseTestCaseAttempt(testCaseAttempt: ITestCaseAttempt) {\n        // todo: workaround for https://github.com/cucumber/cucumber-js/pull/1531\n        //  can be removed when the above PR is merged\n        testCaseAttempt.testCase.testSteps.forEach(step => {\n            if (! testCaseAttempt.stepResults[step.id]) {\n                testCaseAttempt.stepResults[step.id] = { duration: { seconds: 0, nanos: 0 }, status: TestStepResultStatus.UNKNOWN, willBeRetried: false };\n            }\n        });\n        // ---\n\n        return this.formatterHelpers.parseTestCaseAttempt({\n            cwd: this.cwd,\n            testCaseAttempt,\n            snippetBuilder: this.snippetBuilder,\n            supportCodeLibrary: this.supportCodeLibrary,\n        });\n    }\n\n    private activityDetailsFor(parsedTestStep: IParsedTestStep): ActivityDetails {\n        return new ActivityDetails(new Name(this.testStepFormatter.format(parsedTestStep.keyword, parsedTestStep.text, parsedTestStep.argument)));\n    }\n\n    private outcomeFrom(worstResult: TestStepResult, ...steps: IParsedTestStep[]): Outcome {\n\n        const Status = TestStepResultStatus;\n\n        // todo: how does it treat failed but retryable scenarios?\n\n        switch (worstResult.status) {\n            case Status.SKIPPED:\n                return new ExecutionSkipped();\n\n            case Status.UNDEFINED: {\n                const snippets = steps\n                    .filter(step => step.result.status === Status.UNDEFINED)\n                    .map(step => step.snippet);\n\n                const message = snippets.length > 0\n                    ? ['Step implementation missing:', ...snippets].join('\\n\\n')\n                    : 'Step implementation missing';\n\n                return new ImplementationPending(new ImplementationPendingError(message));\n            }\n\n            case Status.PENDING:\n                return new ImplementationPending(new ImplementationPendingError('Step implementation pending'));\n\n            case Status.AMBIGUOUS:\n            case Status.FAILED: {\n                const error = ErrorSerialiser.deserialiseFromStackTrace(worstResult.message);\n                if (error instanceof AssertionError) {\n                    return new ExecutionFailedWithAssertionError(error);\n                }\n                if (error instanceof TestCompromisedError) {\n                    return new ExecutionCompromised(error);\n                }\n                return new ExecutionFailedWithError(error);\n            }\n\n            case Status.UNKNOWN:\n                // ignore\n            case Status.PASSED: // eslint-disable-line no-fallthrough\n                return new ExecutionSuccessful();\n        }\n    }\n\n    private scenarioOutcomeFrom(testCaseAttempt: ITestCaseAttempt): { outcome: Outcome, willBeRetried: boolean, tags: Tag[] } {\n        const parsed = this.formatterHelpers.parseTestCaseAttempt({\n            cwd: this.cwd,\n            snippetBuilder: this.snippetBuilder,\n            supportCodeLibrary: this.supportCodeLibrary,\n            testCaseAttempt\n        });\n\n        const worstStepResult   = parsed.testCase.worstTestStepResult;\n        const willBeRetried     = worstStepResult.willBeRetried;\n        const outcome           = this.outcomeFrom(worstStepResult, ...parsed.testSteps);\n\n        const tags = [];\n\n        if (testCaseAttempt.attempt > 0 || willBeRetried) {\n            tags.push(new ArbitraryTag('retried'));\n        }\n\n        if (testCaseAttempt.attempt > 0) {\n            tags.push(new ExecutionRetriedTag(testCaseAttempt.attempt));\n        }\n\n        return { outcome, willBeRetried, tags };\n    }\n}\n\nfunction flatten<T>(listOfLists: T[][]): T[] {\n    return listOfLists.reduce((acc, current) => acc.concat(current), []);\n}\n\nfunction notEmpty<T>(list: T[]) {\n    return list.filter(item => !!item);\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/messages/parser/CucumberMessagesParser.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 421,
    "kind": "class",
    "name": "CucumberMessagesParser",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts",
    "static": true,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/messages/parser/CucumberMessagesParser.ts",
    "importStyle": "{CucumberMessagesParser}",
    "description": "",
    "lineNumber": 61,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "testStepFormatter",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#testStepFormatter",
    "access": "private",
    "description": " ",
    "lineNumber": 55,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "currentScenario",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#currentScenario",
    "access": "private",
    "description": " ",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "ScenarioDetails"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "currentStepActivityId",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#currentStepActivityId",
    "access": "private",
    "description": " ",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "CorrelationId"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 425,
    "kind": "member",
    "name": "cwd",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#cwd",
    "access": "private",
    "description": " ",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "eventDataCollector",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#eventDataCollector",
    "access": "private",
    "description": " ",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "snippetBuilder",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#snippetBuilder",
    "access": "private",
    "description": " ",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "supportCodeLibrary",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#supportCodeLibrary",
    "access": "private",
    "description": " ",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 429,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "parseTestCaseStarted",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#parseTestCaseStarted",
    "access": "public",
    "description": " ",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestCaseStarted"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "parseTestStepStarted",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#parseTestStepStarted",
    "access": "public",
    "description": " ",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestStepStarted"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "parseTestStepFinished",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#parseTestStepFinished",
    "access": "public",
    "description": " ",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestStepStarted"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "parseTestCaseFinishes",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#parseTestCaseFinishes",
    "access": "public",
    "description": " ",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "hookMessage",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DomainEvent"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "parseTestCaseFinished",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#parseTestCaseFinished",
    "access": "public",
    "description": " ",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestCaseFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "extract",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#extract",
    "access": "private",
    "description": " ",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "T ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "scenarioDetailsFor",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#scenarioDetailsFor",
    "access": "private",
    "description": " ",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "GherkinDocument"
        ],
        "spread": false,
        "optional": false,
        "name": "gherkinDocument",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Pickle"
        ],
        "spread": false,
        "optional": false,
        "name": "pickle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Location"
        ],
        "spread": false,
        "optional": false,
        "name": "location",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ScenarioDetails"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "outlineFrom",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#outlineFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 191,
    "params": [
      {
        "nullable": null,
        "types": [
          "ITestCaseAttempt"
        ],
        "spread": false,
        "optional": false,
        "name": "testCaseAttempt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExtractedScenarioOutline"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "scenarioFrom",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#scenarioFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "ITestCaseAttempt"
        ],
        "spread": false,
        "optional": false,
        "name": "undefined",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ExtractedScenario"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "scenarioHierarchyTagsFor",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#scenarioHierarchyTagsFor",
    "access": "private",
    "description": " ",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "GherkinDocument"
        ],
        "spread": false,
        "optional": false,
        "name": "gherkinDocument",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Pickle"
        ],
        "spread": false,
        "optional": false,
        "name": "pickle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "stepFrom",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#stepFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 264,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestStepStarted ",
          " TestStepFinished"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "parseTestCaseAttempt",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#parseTestCaseAttempt",
    "access": "private",
    "description": " ",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "ITestCaseAttempt"
        ],
        "spread": false,
        "optional": false,
        "name": "testCaseAttempt",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "activityDetailsFor",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#activityDetailsFor",
    "access": "private",
    "description": " ",
    "lineNumber": 292,
    "params": [
      {
        "nullable": null,
        "types": [
          "IParsedTestStep"
        ],
        "spread": false,
        "optional": false,
        "name": "parsedTestStep",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ActivityDetails"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "outcomeFrom",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#outcomeFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 296,
    "params": [
      {
        "nullable": null,
        "types": [
          "TestStepResult"
        ],
        "spread": false,
        "optional": false,
        "name": "worstResult",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "steps",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Outcome"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "scenarioOutcomeFrom",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~CucumberMessagesParser#scenarioOutcomeFrom",
    "access": "private",
    "description": " ",
    "lineNumber": 340,
    "params": [
      {
        "nullable": null,
        "types": [
          "ITestCaseAttempt"
        ],
        "spread": false,
        "optional": false,
        "name": "testCaseAttempt",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 451,
    "kind": "function",
    "name": "flatten",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~flatten",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/listeners/messages/parser/CucumberMessagesParser.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 366,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "listOfLists",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "UNKNOWN"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 452,
    "kind": "function",
    "name": "notEmpty",
    "memberof": "src/listeners/messages/parser/CucumberMessagesParser.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/listeners/messages/parser/CucumberMessagesParser.ts~notEmpty",
    "access": "public",
    "export": false,
    "importPath": "@serenity-js/cucumber/src/listeners/messages/parser/CucumberMessagesParser.ts",
    "importStyle": null,
    "description": " ",
    "lineNumber": 370,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "file",
    "name": "src/listeners/messages/parser/TestStepFormatter.ts",
    "content": "import { PickleDocString, PickleTable } from '@cucumber/messages';\nimport Table = require('cli-table3');\n\n/**\n * @package\n */\nexport class TestStepFormatter {\n\n    public format(keyword: string, text = '', argument?: {\n        docString?: PickleDocString,\n        dataTable?: PickleTable,\n    }): string {\n        return [\n            keyword,\n            text,\n            argument && this.formatStepArgument(argument),\n        ].join('').trim();\n    }\n\n    private formatStepArgument(argument: {\n        docString?: PickleDocString,\n        dataTable?: PickleTable,\n    }): string {\n\n        if (argument.docString) {\n            return this.formatDocString(argument.docString);\n        }\n\n        if (argument.dataTable) {\n            return this.formatDataTable(argument.dataTable);\n        }\n\n        return '';\n    }\n\n    private formatDocString(docString: PickleDocString): string {\n        return `\\n${ docString.content }`;\n    }\n\n    private formatDataTable(dataTable: PickleTable): string {\n        const table = new Table({\n            chars: {\n                bottom: '',\n                'bottom-left': '',\n                'bottom-mid': '',\n                'bottom-right': '',\n                left: '|',\n                'left-mid': '',\n                mid: '',\n                'mid-mid': '',\n                middle: '|',\n                right: '|',\n                'right-mid': '',\n                top: '',\n                'top-left': '',\n                'top-mid': '',\n                'top-right': '',\n            },\n            style: {\n                border: [],\n                'padding-left': 1,\n                'padding-right': 1,\n            },\n        });\n\n        const rows = dataTable.rows.map(row =>\n            row.cells.map(cell =>\n                cell.value.replace(/\\\\\\\\/g, '\\\\\\\\\\\\\\\\').replace(/\\\\n/g, '\\\\\\\\n')\n            )\n        );\n\n        table.push(...rows);\n\n        return `\\n${ table.toString() }`;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/messages/parser/TestStepFormatter.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 454,
    "kind": "class",
    "name": "TestStepFormatter",
    "memberof": "src/listeners/messages/parser/TestStepFormatter.ts",
    "static": true,
    "longname": "src/listeners/messages/parser/TestStepFormatter.ts~TestStepFormatter",
    "access": "package",
    "export": true,
    "importPath": "@serenity-js/cucumber/src/listeners/messages/parser/TestStepFormatter.ts",
    "importStyle": "{TestStepFormatter}",
    "description": "",
    "lineNumber": 14,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "format",
    "memberof": "src/listeners/messages/parser/TestStepFormatter.ts~TestStepFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/TestStepFormatter.ts~TestStepFormatter#format",
    "access": "public",
    "description": " ",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keyword",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "argument",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "formatStepArgument",
    "memberof": "src/listeners/messages/parser/TestStepFormatter.ts~TestStepFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/TestStepFormatter.ts~TestStepFormatter#formatStepArgument",
    "access": "private",
    "description": " ",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "UNKNOWN"
        ],
        "spread": false,
        "optional": false,
        "name": "argument",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "formatDocString",
    "memberof": "src/listeners/messages/parser/TestStepFormatter.ts~TestStepFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/TestStepFormatter.ts~TestStepFormatter#formatDocString",
    "access": "private",
    "description": " ",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "PickleDocString"
        ],
        "spread": false,
        "optional": false,
        "name": "docString",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "formatDataTable",
    "memberof": "src/listeners/messages/parser/TestStepFormatter.ts~TestStepFormatter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/listeners/messages/parser/TestStepFormatter.ts~TestStepFormatter#formatDataTable",
    "access": "private",
    "description": " ",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "PickleTable"
        ],
        "spread": false,
        "optional": false,
        "name": "dataTable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 459,
    "kind": "file",
    "name": "src/listeners/messages/parser/types/ExtractedScenario.ts",
    "content": "import { BusinessRule, Description, Name, Tag } from '@serenity-js/core/lib/model';\n\nexport interface ExtractedScenario {\n    featureDescription?: Description;\n    rule?: BusinessRule;\n    scenarioDescription?: Description;\n    testRunnerName: Name;\n    tags: Tag[];\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/messages/parser/types/ExtractedScenario.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 460,
    "kind": "file",
    "name": "src/listeners/messages/parser/types/ExtractedScenarioOutline.ts",
    "content": "import { Description, ScenarioDetails, ScenarioParameters } from '@serenity-js/core/lib/model';\n\nexport interface ExtractedScenarioOutline {\n    details: ScenarioDetails;\n    template: Description;\n    parameters: ScenarioParameters;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/messages/parser/types/ExtractedScenarioOutline.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 461,
    "kind": "file",
    "name": "src/listeners/messages/parser/types/index.ts",
    "content": "/* istanbul ignore file */\nexport * from './ExtractedScenario';\nexport * from './ExtractedScenarioOutline';\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/src/listeners/messages/parser/types/index.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# Serenity/JS\n\n[Serenity/JS](https://serenity-js.org) is a Node.js framework designed to make acceptance and regression testing\nof modern full-stack applications faster, more collaborative and easier to scale.\n\nVisit [serenity-js.org](https://serenity-js.org/) for the [latest tutorials](https://serenity-js.org/handbook/)\nand [API docs](https://serenity-js.org/modules/), and follow [@SerenityJS](https://twitter.com/SerenityJS) and [@JanMolak](https://twitter.com/JanMolak) on Twitter for project updates.\n\n### Learning Serenity/JS\n\nTo learn more about Serenity/JS, check out the video below, read the [tutorial](https://serenity-js.org/handbook/thinking-in-serenity-js/index.html), review the [examples](https://github.com/serenity-js/serenity-js/tree/master/examples), and create your own test suite with [Serenity/JS template projects](https://github.com/serenity-js).\n\nIf you have any questions, join us on [Serenity/JS Community Chat](https://gitter.im/serenity-js/Lobby).\n\n[![Full-Stack Acceptance Testing with Serenity/JS and the Screenplay Pattern](https://img.youtube.com/vi/djPMf-n93Rw/0.jpg)](https://www.youtube.com/watch?v=djPMf-n93Rw)\n\n## Serenity/JS Cucumber\n\n[`@serenity-js/cucumber`](https://serenity-js.org/modules/cucumber/) contains a set of adapters you register with [Cucumber CLI runners](https://github.com/cucumber/cucumber-js/) to enable integration and reporting between Cucumber.js and Serenity/JS.\n\n**Please note:** To use Cucumber and Serenity/JS to execute web-based acceptance tests, you should register Serenity/JS Cucumber adapter using Protractor configuration file. \n\nLearn more about integrating Serenity/JS Cucumber:\n- with [Protractor and Cucumber.js](https://serenity-js.org/handbook/integration/serenityjs-and-protractor.html#integrating-protractor-with-serenity-js-and-cucumber),\n- with [Cucumber.js](https://serenity-js.org/handbook/integration/serenityjs-and-cucumber.html).\n\n### Installation\n\nTo install this module, run:\n```\nnpm install --save-dev @serenity-js/{cucumber,core}\n```\n\nThis module reports test scenarios executed by **any version of Cucumber.js**, from 0.x to 7.x, which you need to install\nseparately.\n\nTo install [Cucumber 7.x](https://www.npmjs.com/package/@cucumber/cucumber), run:\n```\nnpm install --save-dev @cucumber/cucumber \n```\n\nTo install [Cucumber 6.x](https://www.npmjs.com/package/cucumber) or earlier, run:\n```\nnpm install --save-dev cucumber \n```\n\n### Command line usage\n\n#### Cucumber 7.x\n\n```\ncucumber-js --format @serenity-js/cucumber \\\n    --require ./features/support/setup.js \\\n    --require ./features/step_definitions/sample.steps.js \n```\n\n#### Cucumber 3.x to 6.x\n\n```\ncucumber-js --format node_modules/@serenity-js/cucumber \\\n    --require ./features/support/setup.js \\\n    --require ./features/step_definitions/sample.steps.js \n```\n\n#### Cucumber 0.x to 2.x\n\n```\ncucumber-js --require=node_modules/@serenity-js/cucumber/lib/index.js \\\n    --require ./features/support/setup.js \\\n    --require ./features/step_definitions/sample.steps.js \n```\n\n### Configuration\n\nWhen used with a configuration file written in JavaScript:\n\n```javascript\n// features/support/setup.js\n\nconst { configure } = require('@serenity-js/core');\n\nconfigure({\n    // ... configure Serenity/JS \n});\n```\n\nWhen used with a configuration file written in TypeScript:\n\n```typescript\n// features/support/setup.ts\n\nimport { configure } from '@serenity-js/core';\n\nconfigure({\n    // ... configure Serenity/JS \n});\n```\n\n### Integration\n\nThis module can be integrated with:\n- [`@serenity-js/serenity-bdd`](https://serenity-js.org/modules/serenity-bdd) to produce HTML reports and living documentation,\n- [`@serenity-js/console-reporter`](https://serenity-js.org/modules/console-reporter) to print test execution reports to your computer terminal,\n- [`@serenity-js/protractor`](https://serenity-js.org/modules/protractor) to implement Cucumber scenarios interacting with Web applications.\n\nLearn more about [Serenity/JS Modules](https://serenity-js.org/modules).\n",
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@serenity-js/cucumber\",\n  \"version\": \"2.33.6\",\n  \"description\": \"Serenity/JS adapter for Cucumber test runners version 1.x - 7.x\",\n  \"author\": {\n    \"name\": \"Jan Molak\",\n    \"email\": \"jan.molak@smartcodeltd.co.uk\",\n    \"url\": \"https://janmolak.com\"\n  },\n  \"funding\": {\n    \"url\": \"https://github.com/sponsors/serenity-js\"\n  },\n  \"homepage\": \"https://serenity-js.org\",\n  \"license\": \"Apache-2.0\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"main\": \"lib/index.js\",\n  \"typings\": \"lib/index.d.ts\",\n  \"keywords\": [\n    \"serenity-js\",\n    \"cucumber\",\n    \"tdd\",\n    \"bdd\",\n    \"test\",\n    \"testing\"\n  ],\n  \"scripts\": {\n    \"clean\": \"rimraf .nyc_output lib target\",\n    \"lint\": \"eslint --ext ts --config ../../.eslintrc.js .\",\n    \"lint:fix\": \"npm run lint -- --fix\",\n    \"test\": \"nyc --report-dir ../../target/coverage/cucumber mocha --config ../../.mocharc.yml --timeout 30000 'spec/**/*.spec.*'\",\n    \"compile\": \"tsc --project tsconfig.json\",\n    \"site\": \"esdoc -c .esdoc.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/serenity-js/serenity-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/serenity-js/serenity-js/issues\"\n  },\n  \"engines\": {\n    \"node\": \"^12 || ^14 || ^16\",\n    \"npm\": \"^6 || ^7 || ^8\"\n  },\n  \"dependencies\": {\n    \"@cucumber/messages\": \"^16.0.1\",\n    \"@serenity-js/core\": \"2.33.6\",\n    \"cli-table3\": \"^0.6.2\",\n    \"colors\": \"1.4.0\",\n    \"gherkin\": \"5.1.0\",\n    \"tiny-types\": \"^1.17.0\"\n  },\n  \"peerDependencies\": {\n    \"@cucumber/cucumber\": \"^7.3.2\",\n    \"cucumber\": \"^1.3.3 || ^2.3.1 || ^3.2.1 || ^4.2.1 || ^5.0.0 || ^6.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@cucumber/cucumber\": {\n      \"optional\": true\n    },\n    \"cucumber\": {\n      \"optional\": true\n    }\n  },\n  \"devDependencies\": {\n    \"@cucumber/cucumber\": \"^7.3.2\",\n    \"@documentation/esdoc-template\": \"2.0.0\",\n    \"@integration/testing-tools\": \"2.0.0\",\n    \"@types/chai\": \"^4.3.1\",\n    \"@types/mocha\": \"^9.1.0\",\n    \"mocha\": \"^9.2.2\",\n    \"ts-node\": \"^10.7.0\",\n    \"typescript\": \"^4.6.3\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/**/*.ts\"\n    ],\n    \"exclude\": [\n      \"src/**/*.d.ts\",\n      \"src/listeners/legacy/cucumber-*.ts\",\n      \"lib\",\n      \"node_modules\",\n      \"spec\"\n    ],\n    \"extension\": [\n      \".ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ],\n    \"reporter\": [\n      \"json\"\n    ],\n    \"cache\": true,\n    \"all\": true\n  }\n}\n",
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 462,
    "kind": "testFile",
    "name": "spec/cli/CucumberCLIAdapter.spec.ts",
    "content": "import 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { configure } from '@serenity-js/core';\nimport {\n    ActivityFinished,\n    ActivityStarts,\n    SceneFinished,\n    SceneFinishes,\n    SceneStarts,\n    SceneTagged,\n    TestRunFinished,\n    TestRunFinishes,\n    TestRunnerDetected,\n    TestRunStarts,\n} from '@serenity-js/core/lib/events';\nimport { FileSystem, ModuleLoader, Path, trimmed } from '@serenity-js/core/lib/io';\nimport { ExecutionSuccessful, FeatureTag, Name, Timestamp } from '@serenity-js/core/lib/model';\nimport { given } from 'mocha-testdata';\nimport * as path from 'path';   // eslint-disable-line unicorn/import-style\n\n// eslint-disable-next-line unicorn/prevent-abbreviations\nimport { CucumberCLIAdapter, CucumberConfig, SerenityFormatterOutput, StandardOutput, TempFileOutput } from '../../src/cli';\n\nconst { stdout } = require('test-console'); // eslint-disable-line @typescript-eslint/no-var-requires\n\n/** @test {CucumberCLIAdapter} */\ndescribe('CucumberCLIAdapter', function () {\n\n    this.timeout(5000);\n\n    let recorder: EventRecorder;\n\n    const rootDirectory = Path.from(__dirname);\n\n    beforeEach(() => {\n        recorder = new EventRecorder();\n\n        configure({\n            crew: [ recorder ]\n        });\n    });\n\n    describe('registers @serenity-js/cucumber and', () => {\n\n        given<Example>([ {\n            description: 'no custom formats => default output',\n            config: { formatOptions: { colorsEnabled: false } },\n            expectedOutput: trimmed`\n                | ..\n                |\n                | 1 scenario (1 passed)\n                | 1 step (1 passed)\n            `\n        }, {\n            description: 'custom formats => custom output',\n            config: {\n                format: [ 'usage' ],\n                formatOptions: { colorsEnabled: false }\n            },\n            expectedOutput: 'Pattern / Text'\n        } ]).\n        it('runs together with native Cucumber formatters, when configured to print to a temp file', ({ config, expectedOutput }: Example) =>\n            run(config, new TempFileOutput(new FileSystem(rootDirectory)))\n                .then(output => {\n                    expect(output).to.include(expectedOutput);\n\n                    PickEvent.from(recorder.events)\n                        .next(TestRunStarts,       event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                        .next(SceneStarts,         event => {\n                            expect(event.details.name).to.equal(new Name('A passing scenario'))\n                            expect(event.details.location.path.value).to.match(/features\\/passing_scenario.feature$/)\n                            expect(event.details.location.line).to.equal(3);\n                            expect(event.details.location.column).to.equal(3);\n                        })\n                        .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                        .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('A passing feature')))\n                        .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that passes')))\n                        .next(ActivityFinished,    event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                        .next(SceneFinishes,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                        .next(SceneFinished,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                        .next(TestRunFinishes,     event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                        .next(TestRunFinished,     event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                    ;\n                })\n        );\n\n        given<Example>([ {\n            description: 'no custom formats => no output',\n            config: {},\n            expectedOutput: ''\n        }, {\n            description: 'custom formats => no output',\n            config: {\n                format: 'usage'\n            },\n            expectedOutput: ''\n        } ]).\n        it('takes precedence over native the standard output formatters, if configured to do so', ({ config, expectedOutput }: Example) =>\n            run(config, new StandardOutput()).then(output => {\n                expect(output).to.equal('');\n\n                PickEvent.from(recorder.events)\n                    .next(TestRunStarts,       event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                    .next(SceneStarts,         event => {\n                        expect(event.details.name).to.equal(new Name('A passing scenario'))\n                        expect(event.details.location.path.value).to.match(/features\\/passing_scenario.feature$/)\n                        expect(event.details.location.line).to.equal(3);\n                        expect(event.details.location.column).to.equal(3);\n                    })\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('A passing feature')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that passes')))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                    .next(SceneFinished,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                    .next(TestRunFinishes,     event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                    .next(TestRunFinished,     event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                ;\n            })\n        )\n    });\n\n    class LocalModuleLoader extends ModuleLoader {\n        resolve(moduleId: string): string {\n            if (moduleId === '@serenity-js/cucumber') {\n                return super.resolve(path.resolve(__dirname, '../../src'));\n            }\n\n            return super.resolve(moduleId);\n        }\n    }\n\n    // eslint-disable-next-line unicorn/consistent-function-scoping\n    function clearRequireCache(pattern: string) {\n        Object.keys(require.cache)\n            .filter(key => key.includes(pattern))\n            .forEach(function (key) {\n                delete require.cache[key];\n            });\n    }\n\n    async function run(config: CucumberConfig, output: SerenityFormatterOutput): Promise<string> {\n        clearRequireCache('steps.ts');\n\n        const adapter = new CucumberCLIAdapter(\n            {\n                ...config,\n                require: [ path.resolve(__dirname, 'features/step_definitions/steps.ts') ],\n            },\n            new LocalModuleLoader(rootDirectory.value),\n            new FileSystem(rootDirectory),\n            output\n        );\n\n        const inspect = stdout.inspect();\n\n        await adapter.load([ 'features/passing_scenario.feature' ])\n\n        return adapter\n            .run()\n            .then(() => {\n                inspect.restore();\n                return inspect.output.join('');\n            }, error => {\n                inspect.restore();\n                throw error;\n            });\n    }\n\n    interface Example {\n        description: string;\n        config: CucumberConfig;\n        expectedOutput: string;\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/cli/CucumberCLIAdapter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "spec/cli/CucumberCLIAdapter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/cli/CucumberCLIAdapter.spec.ts~describe0",
    "access": null,
    "description": "CucumberCLIAdapter",
    "lineNumber": 28,
    "testTargets": [
      "CucumberCLIAdapter"
    ]
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "spec/cli/CucumberCLIAdapter.spec.ts~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "spec/cli/CucumberCLIAdapter.spec.ts~describe0.describe1",
    "access": null,
    "description": "registers @serenity-js/cucumber and",
    "lineNumber": 44
  },
  {
    "__docId__": 465,
    "kind": "testFile",
    "name": "spec/cli/CucumberFormat.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { given } from 'mocha-testdata';\n\nimport { CucumberFormat } from '../../src/cli';\n\n/** @test {CucumberFormat} */\ndescribe('CucumberFormat', () => {\n\n    given([ {\n        description:    `outputs to standard output on Unix`,\n        format:         '../custom/formatter',\n        formatter:      '../custom/formatter',\n        output:         '',\n    }, {\n        description:    'outputs to standard output on Windows',\n        format:         'C:\\\\custom\\\\formatter',\n        formatter:      'C:\\\\custom\\\\formatter',\n        output:         '',\n    }, {\n        description:    'uses relative unix paths to describe the location of both the formatter and its output',\n        format:         '../custom/formatter:../formatter/output.txt',\n        formatter:      '../custom/formatter',\n        output:         '../formatter/output.txt',\n    }, {\n        description:    'uses absolute unix paths to describe the location of both the formatter and its output',\n        format:         '/custom/formatter:/formatter/output.txt',\n        formatter:      '/custom/formatter',\n        output:         '/formatter/output.txt',\n    }, {\n        description:    'uses absolute Windows paths to describe the location of both the formatter and its output',\n        format:         'C:\\\\custom\\\\formatter:C:\\\\formatter\\\\output.txt',\n        formatter:      'C:\\\\custom\\\\formatter',\n        output:         'C:\\\\formatter\\\\output.txt',\n    } ]).\n    it('represents native Cucumber format that', ({ format, formatter, output }) => {\n        const cucumberFormat = new CucumberFormat(format);\n\n        expect(cucumberFormat.value).to.equal(format);\n        expect(cucumberFormat.formatter).to.equal(formatter);\n        expect(cucumberFormat.output).to.equal(output);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/cli/CucumberFormat.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "describe2",
    "testId": 2,
    "memberof": "spec/cli/CucumberFormat.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/cli/CucumberFormat.spec.ts~describe2",
    "access": null,
    "description": "CucumberFormat",
    "lineNumber": 9,
    "testTargets": [
      "CucumberFormat"
    ]
  },
  {
    "__docId__": 467,
    "kind": "testFile",
    "name": "spec/cli/CucumberOptions.spec.ts",
    "content": "/* eslint-disable unicorn/no-null */\nimport 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { FileSystem, Path, Version } from '@serenity-js/core/lib/io';\nimport { given } from 'mocha-testdata';\n\nimport { CucumberOptions } from '../../src/cli/CucumberOptions';\n\n/** @test {CucumberOptions} */\ndescribe('CucumberOptions', () => {\n\n    describe('strict mode', () => {\n\n        given([\n            new Version('1.0.0'),\n            new Version('2.0.0'),\n            new Version('3.0.0'),\n            new Version('4.0.0'),\n            new Version('5.0.0'),\n        ]).\n        it('is strict by default', (majorVersion: Version) => {\n            const options = new CucumberOptions(dummyFS(), { });\n\n            expect(options.isStrict()).to.equal(true);\n\n            expect(options.asArgumentsForCucumber(majorVersion)).to.deep.equal(['node', 'cucumber-js']);\n        });\n\n        given([\n            new Version('1.0.0'),\n            new Version('2.0.0'),\n            new Version('3.0.0'),\n            new Version('4.0.0'),\n            new Version('5.0.0'),\n        ]).\n        it('can be explicitly enabled', (majorVersion: Version) => {\n            const options = new CucumberOptions(dummyFS(), { strict: true });\n\n            expect(options.isStrict()).to.equal(true);\n\n            expect(options.asArgumentsForCucumber(majorVersion)).to.deep.equal(['node', 'cucumber-js', '--strict']);\n        });\n\n        given([\n            new Version('1.0.0'),\n            new Version('2.0.0'),\n            new Version('3.0.0'),\n            new Version('4.0.0'),\n            new Version('5.0.0'),\n        ]).\n        it('can be disabled', (majorVersion: Version) => {\n            const options = new CucumberOptions(dummyFS(), { strict: false });\n\n            expect(options.isStrict()).to.equal(false);\n\n            expect(options.asArgumentsForCucumber(majorVersion)).to.deep.equal(['node', 'cucumber-js', '--no-strict']);\n        });\n\n        given([\n            new Version('1.0.0'),\n            new Version('2.0.0'),\n            new Version('3.0.0'),\n            new Version('4.0.0'),\n            new Version('5.0.0'),\n        ]).\n        it('can be disabled via cucumberOpts.noStrict', (majorVersion: Version) => {\n            const options = new CucumberOptions(dummyFS(), { noStrict: true } as any);\n\n            expect(options.isStrict()).to.equal(false);\n\n            expect(options.asArgumentsForCucumber(majorVersion)).to.deep.equal(['node', 'cucumber-js', '--no-strict']);\n        });\n\n    });\n\n    describe('when used to produce command line arguments for Cucumber CLI', () => {\n\n        given([\n            new Version('1.0.0'),\n            new Version('2.0.0'),\n            new Version('3.0.0'),\n            new Version('4.0.0'),\n            new Version('5.0.0'),\n        ]).\n        it('returns no additional arguments when the config is empty', (majorVersion: Version) => {\n            const options = new CucumberOptions(dummyFS(), {});\n\n            expect(options.asArgumentsForCucumber(majorVersion)).to.deep.equal(['node', 'cucumber-js']);\n        });\n\n        /**\n         * @see https://github.com/cucumber/cucumber-js/blob/main/features/rerun_formatter.feature\n          */\n        describe('rerun formatter', () => {\n\n            it('adds the rerun formatter', () => {\n                const options = new CucumberOptions(dummyFS(), {\n                    format: 'rerun=@rerun.txt',\n                });\n\n                expect(options.asArgumentsForCucumber(new Version('7.0.0'))).to.deep.equal(\n                    ['node', 'cucumber-js', '--format', 'rerun=@rerun.txt'],\n                );\n            });\n\n            it('appends the rerun file', () => {\n                const options = new CucumberOptions(fsWithRerunFile(true), {\n                    format: 'rerun=@rerun.txt',\n                    rerun: '@rerun.txt'\n                });\n\n                expect(options.asArgumentsForCucumber(new Version('7.0.0'))).to.deep.equal(\n                    ['node', 'cucumber-js', '--format', 'rerun=@rerun.txt', '@rerun.txt'],\n                );\n            });\n\n            it('does not append the rerun file when it does not exist', () => {\n                const options = new CucumberOptions(fsWithRerunFile(false), {\n                    format: 'rerun=@rerun.txt',\n                    rerun: '@rerun.txt'\n                });\n\n                expect(options.asArgumentsForCucumber(new Version('7.0.0'))).to.deep.equal(\n                    ['node', 'cucumber-js', '--format', 'rerun=@rerun.txt'],\n                );\n            });\n        });\n\n        describe('tags', () => {\n\n            const emptyTags = [\n                {   description: 'empty string',            tags: '',                   },\n                {   description: 'null',                    tags: null,                 },\n                {   description: 'undefined',               tags: undefined,            },\n                {   description: 'empty list',              tags: [],                   },\n                {   description: 'list with empty values',  tags: ['', null, undefined] },\n            ];\n\n            given(emptyTags).it('ignores empty tags when generating tag expressions (>=2.x)', ({ tags }) => {\n                const options = new CucumberOptions(dummyFS(), { tags });\n\n                expect(options.asArgumentsForCucumber(new Version('2.0.0'))).to.deep.equal([\n                    'node', 'cucumber-js',\n                ]);\n            });\n\n            given(emptyTags).it('ignores empty tags when working with Cucumber 1.x', ({ tags }) => {\n                const options = new CucumberOptions(dummyFS(), { tags });\n\n                expect(options.asArgumentsForCucumber(new Version('2.0.0'))).to.deep.equal([\n                    'node', 'cucumber-js',\n                ]);\n            });\n\n            given([\n                new Version('2.0.0'),\n                new Version('3.0.0'),\n            ]).\n            it('converts a list of tags into a Cucumber expression for Cucumber 2.x and newer', (majorVersion: Version) => {\n                const options = new CucumberOptions(dummyFS(), {\n                    tags: [\n                        '@smoke-test',\n                        '~@wip',\n                        'not @failing and ~@flaky',\n                    ],\n                });\n\n                expect(options.asArgumentsForCucumber(majorVersion)).to.deep.equal([\n                    'node', 'cucumber-js', '--tags', '@smoke-test and not @wip and not @failing and not @flaky',\n                ]);\n            });\n\n            it('passes the tags individually to Cucumber 1.x', () => {\n                const options = new CucumberOptions(dummyFS(), {\n                    tags: [\n                        '@smoke-test',\n                        '~@wip',\n                        '~@failing',\n                    ],\n                });\n\n                expect(options.asArgumentsForCucumber(new Version('1.0.0'))).to.deep.equal([\n                    'node', 'cucumber-js', '--tags', '@smoke-test', '--tags', '~@wip', '--tags', '~@failing',\n                ]);\n            });\n        });\n\n        describe('flags', () => {\n\n            given([\n                { description: 'backtrace off',    option: 'backtrace',    state: false,  expected: '--no-backtrace'   },\n                { description: 'backtrace on',     option: 'backtrace',    state: true,   expected: '--backtrace'      },\n                { description: 'dry-run off',      option: 'dry-run',      state: false,  expected: '--no-dry-run'     },\n                { description: 'dry-run on',       option: 'dry-run',      state: true,   expected: '--dry-run'        },\n                { description: 'exit off',         option: 'exit',         state: false,  expected: '--no-exit'        },\n                { description: 'exit on',          option: 'exit',         state: true,   expected: '--exit'           },\n                { description: 'fail-fast off',    option: 'fail-fast',    state: false,  expected: '--no-fail-fast'   },\n                { description: 'fail-fast on',     option: 'fail-fast',    state: true,   expected: '--fail-fast'      },\n                { description: 'strict off',       option: 'strict',       state: false,  expected: '--no-strict'      },\n                { description: 'strict on',        option: 'strict',       state: true,   expected: '--strict'         },\n                { description: 'colors off',       option: 'colors',       state: false,  expected: '--no-colors'      },\n                { description: 'colors on',        option: 'colors',       state: true,   expected: '--colors'         },\n            ]).\n            it('correctly interprets boolean options', ({ option, state, expected }) => {\n                const options = new CucumberOptions(dummyFS(), {\n                    [option]: state,\n                });\n\n                expect(options.asArgumentsForCucumber(new Version('5.0.0'))).to.deep.equal([\n                    'node', 'cucumber-js', expected,\n                ]);\n            });\n\n            given([\n                { description: 'backtrace off',    option: 'no-backtrace',    state: true,  expected: '--no-backtrace'   },\n                { description: 'backtrace on',     option: 'no-backtrace',    state: false, expected: '--backtrace'      },\n                { description: 'dry-run off',      option: 'no-dry-run',      state: true,  expected: '--no-dry-run'     },\n                { description: 'dry-run on',       option: 'no-dry-run',      state: false, expected: '--dry-run'        },\n                { description: 'exit off',         option: 'no-exit',         state: true,  expected: '--no-exit'        },\n                { description: 'exit on',          option: 'no-exit',         state: false, expected: '--exit'           },\n                { description: 'fail-fast off',    option: 'no-fail-fast',    state: true,  expected: '--no-fail-fast'   },\n                { description: 'fail-fast on',     option: 'no-fail-fast',    state: false, expected: '--fail-fast'      },\n                { description: 'strict off',       option: 'no-strict',       state: true,  expected: '--no-strict'      },\n                { description: 'strict on',        option: 'no-strict',       state: false, expected: '--strict'         },\n                { description: 'colors off',       option: 'no-colors',       state: true,  expected: '--no-colors'      },\n                { description: 'colors on',        option: 'no-colors',       state: false, expected: '--colors'         },\n            ]).\n            it('correctly interprets negated boolean options', ({ option, state, expected }) => {\n                const options = new CucumberOptions(dummyFS(), {\n                    [option]: state,\n                });\n\n                expect(options.asArgumentsForCucumber(new Version('5.0.0'))).to.deep.equal([\n                    'node', 'cucumber-js', expected,\n                ]);\n            });\n        });\n\n        describe('other options', () => {\n\n            given([\n                { description: 'profile',    option: 'profile',    value: ['dry', 'progress'],          expected: [ '--profile', 'dry', '--profile', 'progress' ] },\n                { description: 'require',    option: 'require',    value: [ 'features/**/*.ts' ],       expected: [ '--require', 'features/**/*.ts' ] },\n                { description: 'name',       option: 'name',       value: [ 'checkout.*', 'smoke.*' ],  expected: [ '--name', 'checkout.*',  '--name', 'smoke.*'  ] },\n            ]).\n            it('includes any other options', ({ option, value, expected }) => {\n                const options = new CucumberOptions(dummyFS(), {\n                    [option]: value,\n                });\n\n                expect(options.asArgumentsForCucumber(new Version('5.0.0'))).to.deep.equal(\n                    ['node', 'cucumber-js'].concat(expected),\n                );\n            });\n        });\n\n        describe('camelCase to kebab-case', () => {\n\n            given([\n                { description: 'dryRun on',         option: 'dryRun',           value: true,        expected: [ '--dry-run' ] },\n                { description: 'dryRun off',        option: 'dryRun',           value: false,       expected: [ '--no-dry-run' ] },\n                { description: 'noFailFast',        option: 'noFailFast',       value: true,        expected: [ '--no-fail-fast' ] },\n                { description: 'retryTagFilter',    option: 'retryTagFilter',   value: '@flaky',    expected: [ '--retry-tag-filter', '@flaky' ] },\n            ]).\n            it('converts camelCased options to kebab-case', ({ option, value, expected }) => {\n                const options = new CucumberOptions(dummyFS(), {\n                    [option]: value,\n                });\n\n                expect(options.asArgumentsForCucumber(new Version('7.0.0'))).to.deep.equal(\n                    ['node', 'cucumber-js'].concat(expected),\n                );\n            });\n        });\n\n        describe('empty values', () => {\n\n            given([\n                { description: 'undefined',         option: 'format',           value: undefined,   },\n                { description: 'null',              option: 'format',           value: null,        },\n                { description: 'empty list',        option: 'format',           value: [],          },\n            ]).\n            it('ignores empty values', ({ option, value }) => {\n                const options = new CucumberOptions(dummyFS(), {\n                    [option]: value,\n                });\n\n                expect(options.asArgumentsForCucumber(new Version('7.0.0'))).to.deep.equal(\n                    ['node', 'cucumber-js'],\n                );\n            });\n        });\n\n        describe('objects', () => {\n\n            given([\n                { description: 'camelCase',   option: 'worldParameters',    value: { baseUrl: 'https://example.org' }   },\n                { description: 'kebab-case',  option: 'world-parameters',   value: { baseUrl: 'https://example.org' }   },\n                { description: 'string',      option: 'worldParameters',    value: '{\"baseUrl\":\"https://example.org\"}'  },\n            ]).\n            it('ignores empty values', ({ option, value }) => {\n                const options = new CucumberOptions(dummyFS(), {\n                    [option]: value,\n                });\n\n                expect(options.asArgumentsForCucumber(new Version('7.0.0'))).to.deep.equal(\n                    ['node', 'cucumber-js', '--world-parameters', '{\"baseUrl\":\"https://example.org\"}'],\n                );\n            });\n        });\n    });\n});\n\nfunction dummyFS(): FileSystem {\n    return fsWithRerunFile(false);\n}\n\nfunction fsWithRerunFile(hasFile: boolean): FileSystem {\n    return {\n        exists: (relativePath_: Path): boolean => {\n            return hasFile\n        }\n    } as unknown as FileSystem;\n}\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/cli/CucumberOptions.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "spec/cli/CucumberOptions.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3",
    "access": null,
    "description": "CucumberOptions",
    "lineNumber": 11,
    "testTargets": [
      "CucumberOptions"
    ]
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "describe4",
    "testId": 4,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe4",
    "access": null,
    "description": "strict mode",
    "lineNumber": 13
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5",
    "access": null,
    "description": "when used to produce command line arguments for Cucumber CLI",
    "lineNumber": 77
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe6",
    "access": null,
    "description": "rerun formatter",
    "see": [
      "https://github.com/cucumber/cucumber-js/blob/main/features/rerun_formatter.feature"
    ],
    "lineNumber": 95
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe6",
    "testDepth": 3,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe6.it7",
    "access": null,
    "description": "adds the rerun formatter",
    "lineNumber": 97
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe6",
    "testDepth": 3,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe6.it8",
    "access": null,
    "description": "appends the rerun file",
    "lineNumber": 107
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe6",
    "testDepth": 3,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe6.it9",
    "access": null,
    "description": "does not append the rerun file when it does not exist",
    "lineNumber": 118
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "describe10",
    "testId": 10,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe10",
    "access": null,
    "description": "tags",
    "lineNumber": 130
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe10",
    "testDepth": 3,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe10.it11",
    "access": null,
    "description": "passes the tags individually to Cucumber 1.x",
    "lineNumber": 174
  },
  {
    "__docId__": 477,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe12",
    "access": null,
    "description": "flags",
    "lineNumber": 189
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe13",
    "access": null,
    "description": "other options",
    "lineNumber": 240
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe14",
    "access": null,
    "description": "camelCase to kebab-case",
    "lineNumber": 258
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe15",
    "access": null,
    "description": "empty values",
    "lineNumber": 277
  },
  {
    "__docId__": 481,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "spec/cli/CucumberOptions.spec.ts~describe3.describe5",
    "testDepth": 2,
    "static": true,
    "longname": "spec/cli/CucumberOptions.spec.ts~describe3.describe5.describe16",
    "access": null,
    "description": "objects",
    "lineNumber": 295
  },
  {
    "__docId__": 482,
    "kind": "testFile",
    "name": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts",
    "content": "/* eslint-disable @typescript-eslint/no-var-requires */\nimport 'mocha';\n\nimport { EventRecorder, expect, PickEvent } from '@integration/testing-tools';\nimport { ImplementationPendingError, Serenity } from '@serenity-js/core';\nimport { SceneFinished, SceneStarts, SceneTagged, TaskFinished, TaskStarts, TestRunnerDetected } from '@serenity-js/core/lib/events';\nimport { FileSystemLocation, ModuleLoader, Path, Version } from '@serenity-js/core/lib/io';\nimport { Category, ExecutionFailedWithError, ExecutionSkipped, ExecutionSuccessful, FeatureTag, ImplementationPending, Name, ScenarioDetails } from '@serenity-js/core/lib/model';\nimport { EventEmitter } from 'events';\nimport * as sinon from 'sinon';\nimport { JSONObject } from 'tiny-types';\n\nimport { AmbiguousStepDefinitionError } from '../../../src/errors';\nimport { createListener } from '../../../src/listeners/legacy';\n\ndescribe('CucumberEventProtocolAdapter', () => {\n\n    type CucumberHook = (event?: object) =>     // eslint-disable-line @typescript-eslint/ban-types\n    Promise<void> | void;\n\n    let afterHook: CucumberHook;\n\n    const fakeCucumber = {\n        BeforeAll: (hook: CucumberHook) => Promise.resolve(hook()),\n        Before: (hook: CucumberHook) => Promise.resolve(hook()),\n        After: (hook: CucumberHook) => { afterHook = hook; },\n        AfterAll: (hook: CucumberHook) => Promise.resolve(hook()),\n    };\n\n    let recorder: EventRecorder,\n        serenity: Serenity,\n        log: typeof console.log,\n        eventBroadcaster: EventEmitter,\n        moduleLoader: sinon.SinonStubbedInstance<ModuleLoader>,\n        adapter: any;\n\n    beforeEach(() => {\n\n        log      = sinon.spy();\n        moduleLoader = sinon.createStubInstance(ModuleLoader);\n        serenity = new Serenity();\n        recorder = new EventRecorder();\n        eventBroadcaster = new EventEmitter();\n\n        serenity.configure({\n            crew: [recorder],\n        });\n\n        moduleLoader.hasAvailable.withArgs('@cucumber/cucumber').returns(false);\n\n        moduleLoader.hasAvailable.withArgs('cucumber').returns(true);\n        moduleLoader.versionOf.withArgs('cucumber').returns(new Version('5.0.0'));\n        moduleLoader.require.withArgs('cucumber').returns(fakeCucumber);\n\n        const listener = createListener(serenity, moduleLoader);\n\n        adapter = new listener({ eventBroadcaster, log });  // eslint-disable-line @typescript-eslint/no-unused-vars\n    });\n\n    it('correctly recognises Cucumber Event Protocol events', () => {\n\n        eventBroadcaster.on('test-case-finished', () => afterHook({ result: { duration: 2, status: 'passed' } }));\n\n        emitAllFrom(require('./samples/scenario-with-hooks.json'));\n\n        const expectedScenarioDetails = new ScenarioDetails(\n            new Name('Hooks'),\n            new Category('Event Protocol'),\n            new FileSystemLocation(\n                new Path('features/tasty-cucumber.feature'),\n                3,\n                3,\n            ),\n        );\n\n        return serenity.waitForNextCue().then(() => {\n            PickEvent.from(recorder.events)\n                .next(SceneStarts,          e => expect(e.details).to.equal(expectedScenarioDetails))\n                .next(TestRunnerDetected,   e => expect(e.name).to.equal(new Name('Cucumber')))\n                .next(SceneTagged,          e => expect(e.tag).to.equal(new FeatureTag('Event Protocol')))\n                .next(TaskStarts,           e => expect(e.details.name).to.equal(new Name('Given I have a tasty cucumber in my belly')))\n                .next(TaskFinished,         e => {\n                    expect(e.details.name).to.equal(new Name('Given I have a tasty cucumber in my belly'));\n                    expect(e.outcome).to.equal(new ExecutionSuccessful());\n                })\n                .next(TaskStarts,           e => expect(e.details.name).to.equal(new Name(`Then I'm very happy`)))\n                .next(TaskFinished,         e => {\n                    expect(e.details.name).to.equal(new Name(`Then I'm very happy`));\n                    expect(e.outcome).to.equal(new ExecutionSuccessful());\n                })\n                .next(SceneFinished,        e => {\n                    expect(e.details).to.equal(expectedScenarioDetails);\n                    expect(e.outcome).to.equal(new ExecutionSuccessful());\n                })\n            ;\n        });\n    });\n\n    it('correctly recognises undefined steps', () => {\n\n        eventBroadcaster.on('test-case-finished', () => afterHook({ result: { duration: 0, status: 'undefined' } }));\n\n        emitAllFrom(require('./samples/scenario-with-undefined-steps.json'));\n\n        const expectedScenarioDetails = new ScenarioDetails(\n            new Name('Undefined steps'),\n            new Category('Event Protocol'),\n            new FileSystemLocation(\n                new Path('features/undefined-steps.feature'),\n                3,\n                3,\n            ),\n        );\n\n        return serenity.waitForNextCue().then(() => {\n\n            PickEvent.from(recorder.events)\n                .next(SceneStarts, e => expect(e.details).to.equal(expectedScenarioDetails))\n                .next(TestRunnerDetected, e => expect(e.name).to.equal(new Name('Cucumber')))\n                .next(SceneTagged, e => expect(e.tag).to.equal(new FeatureTag('Event Protocol')))\n                .next(TaskStarts, e => expect(e.details.name).to.equal(new Name('Given I have an undefined step')))\n                .next(TaskFinished, e => {\n                    expect(e.details.name).to.equal(new Name('Given I have an undefined step'));\n                    expect(e.outcome).to.be.instanceOf(ImplementationPending);\n                })\n                .next(TaskStarts, e => expect(e.details.name).to.equal(new Name(`Then I should implement it`)))\n                .next(TaskFinished, e => {\n                    expect(e.details.name).to.equal(new Name('Then I should implement it'));\n                    expect(e.outcome).to.be.instanceOf(ImplementationPending);\n                })\n                .next(SceneFinished, e => {\n                    expect(e.details).to.equal(expectedScenarioDetails);\n                    expect(e.outcome).to.be.instanceOf(ImplementationPending);\n                })\n            ;\n        });\n    });\n\n    it('correctly recognises pending steps', () => {\n\n        eventBroadcaster.on('test-case-finished', () => afterHook({ result: { duration: 0, status: 'pending' } }));\n\n        emitAllFrom(require('./samples/scenario-with-pending-steps.json'));\n\n        const expectedScenarioDetails = new ScenarioDetails(\n            new Name('Pending steps'),\n            new Category('Event Protocol'),\n            new FileSystemLocation(\n                new Path('features/pending-steps.feature'),\n                3,\n                3,\n            ),\n        );\n\n        return serenity.waitForNextCue().then(() => {\n\n            PickEvent.from(recorder.events)\n                .next(SceneStarts, e => expect(e.details).to.equal(expectedScenarioDetails))\n                .next(TestRunnerDetected, e => expect(e.name).to.equal(new Name('Cucumber')))\n                .next(SceneTagged, e => expect(e.tag).to.equal(new FeatureTag('Event Protocol')))\n                .next(TaskStarts, e => expect(e.details.name).to.equal(new Name('Given I have a pending step')))\n                .next(TaskFinished, e => {\n                    expect(e.details.name).to.equal(new Name('Given I have a pending step'));\n                    expect(e.outcome).to.be.instanceOf(ImplementationPending);\n                })\n                .next(TaskStarts, e => expect(e.details.name).to.equal(new Name(`Then I should implement it`)))\n                .next(TaskFinished, e => {\n                    expect(e.details.name).to.equal(new Name('Then I should implement it'));\n                    expect(e.outcome).to.be.instanceOf(ExecutionSkipped);\n                })\n                .next(SceneFinished, e => {\n                    expect(e.details).to.equal(expectedScenarioDetails);\n                    expect(e.outcome).to.be.instanceOf(ImplementationPending);\n                })\n            ;\n        });\n    });\n\n    it('correctly recognises ambiguous steps', () => {\n\n        eventBroadcaster.on('test-case-finished', () => afterHook({\n            result: {\n                duration: 0,\n                status: 'ambiguous',\n                exception: 'Multiple step definitions match:\\n  /^I have an ambiguous step definition$/ - step_definitions/ambiguous.steps.ts:3\\n  /^I have an ambiguous step definition$/ - step_definitions/ambiguous.steps.ts:7'\n            },\n        }));\n\n        emitAllFrom(require('./samples/scenario-with-ambiguous-steps.json'));\n\n        const expectedScenarioDetails = new ScenarioDetails(\n            new Name('Ambiguous steps'),\n            new Category('Event Protocol'),\n            new FileSystemLocation(\n                new Path('features/ambiguous-steps.feature'),\n                3,\n                3,\n            ),\n        );\n\n        return serenity.waitForNextCue().then(() => {\n            PickEvent.from(recorder.events)\n                .next(SceneStarts, e => expect(e.details).to.equal(expectedScenarioDetails))\n                .next(TestRunnerDetected, e => expect(e.name).to.equal(new Name('Cucumber')))\n                .next(SceneTagged, e => expect(e.tag).to.equal(new FeatureTag('Event Protocol')))\n                .next(TaskStarts, e => expect(e.details.name).to.equal(new Name('Given I have an ambiguous step definition')))\n                .next(TaskFinished, e => {\n                    expect(e.details.name).to.equal(new Name('Given I have an ambiguous step definition'));\n                    expect(e.outcome).to.be.instanceOf(ExecutionFailedWithError);\n                    expect((e.outcome as ExecutionFailedWithError).error).to.be.instanceOf(AmbiguousStepDefinitionError);\n                })\n                .next(TaskStarts, e => expect(e.details.name).to.equal(new Name(`Then I should correct it`)))\n                .next(TaskFinished, e => {\n                    expect(e.details.name).to.equal(new Name('Then I should correct it'));\n                    expect(e.outcome).to.be.instanceOf(ExecutionSkipped);\n                })\n                .next(SceneFinished, e => {\n                    expect(e.details).to.equal(expectedScenarioDetails);\n                    expect(e.outcome).to.be.instanceOf(ExecutionFailedWithError);\n                    expect((e.outcome as ExecutionFailedWithError).error).to.be.instanceOf(AmbiguousStepDefinitionError);\n                })\n            ;\n        });\n    });\n\n    it('correctly recognises errors thrown in steps', () => {\n\n        eventBroadcaster.on('test-case-finished', () => afterHook({\n            result: {\n                duration: 0,\n                status: 'failed',\n                exception: `Error: We're sorry, something happened\\n    at World.<anonymous> (step_definitions/errors.steps.ts:4:11)`\n            },\n        }));\n\n        emitAllFrom(require('./samples/scenario-with-errors.json'));\n\n        const expectedScenarioDetails = new ScenarioDetails(\n            new Name('Errors in steps'),\n            new Category('Event Protocol'),\n            new FileSystemLocation(\n                new Path('features/errors-in-steps.feature'),\n                3,\n                3,\n            ),\n        );\n\n        return serenity.waitForNextCue().then(() => {\n\n            PickEvent.from(recorder.events)\n                .next(SceneStarts, e => expect(e.details).to.equal(expectedScenarioDetails))\n                .next(TestRunnerDetected, e => expect(e.name).to.equal(new Name('Cucumber')))\n                .next(SceneTagged, e => expect(e.tag).to.equal(new FeatureTag('Event Protocol')))\n                .next(TaskStarts, e => expect(e.details.name).to.equal(new Name('Given I have a step that throws an error')))\n                .next(TaskFinished, e => {\n                    expect(e.details.name).to.equal(new Name('Given I have a step that throws an error'));\n                    expect(e.outcome).to.be.instanceOf(ExecutionFailedWithError);\n                    expect((e.outcome as ExecutionFailedWithError).error).to.be.instanceOf(Error);\n                    expect((e.outcome as ExecutionFailedWithError).error.message).to.equal(`We're sorry, something happened`);\n                })\n                .next(SceneFinished, e => {\n                    expect(e.details).to.equal(expectedScenarioDetails);\n                    expect(e.outcome).to.be.instanceOf(ExecutionFailedWithError);\n                    expect((e.outcome as ExecutionFailedWithError).error).to.be.instanceOf(Error);\n                    expect((e.outcome as ExecutionFailedWithError).error.message).to.equal(`We're sorry, something happened`);\n                })\n            ;\n        });\n    });\n\n    it('correctly recognises scenario outlines', () => {\n\n        eventBroadcaster.on('test-case-finished', () => afterHook({\n            result: {\n                duration: 0,\n                status: 'passed',\n            },\n        }));\n\n        emitAllFrom(require('./samples/scenario-outline.json'));\n\n        // eslint-disable-next-line unicorn/consistent-function-scoping\n        const expectedScenarioDetails = (line: number) => new ScenarioDetails(\n            new Name('The things I like'),\n            new Category('Event Protocol'),\n            new FileSystemLocation(\n                new Path('features/outlines.feature'),\n                line,\n                7,\n            ),\n        );\n\n        return serenity.waitForNextCue().then(() => {\n\n            PickEvent.from(recorder.events)\n                .next(SceneStarts, e => expect(e.details).to.equal(expectedScenarioDetails(10)))\n                .next(TestRunnerDetected, e => expect(e.name).to.equal(new Name('Cucumber')))\n                .next(SceneTagged, e => expect(e.tag).to.equal(new FeatureTag('Event Protocol')))\n                .next(TaskStarts, e => expect(e.details.name).to.equal(new Name('Given I like programming')))\n                .next(TaskFinished, e => expect(e.details.name).to.equal(new Name('Given I like programming')))\n                .next(SceneFinished, e => expect(e.details).to.equal(expectedScenarioDetails(10)))\n\n                .next(SceneStarts, e => expect(e.details).to.equal(expectedScenarioDetails(11)))\n                .next(TestRunnerDetected, e => expect(e.name).to.equal(new Name('Cucumber')))\n                .next(SceneTagged, e => expect(e.tag).to.equal(new FeatureTag('Event Protocol')))\n                .next(TaskStarts, e => expect(e.details.name).to.equal(new Name('Given I like to play guitar')))\n                .next(TaskFinished, e => expect(e.details.name).to.equal(new Name('Given I like to play guitar')))\n                .next(SceneFinished, e => expect(e.details).to.equal(expectedScenarioDetails(11)))\n\n                .next(SceneStarts, e => expect(e.details).to.equal(expectedScenarioDetails(12)))\n                .next(TestRunnerDetected, e => expect(e.name).to.equal(new Name('Cucumber')))\n                .next(SceneTagged, e => expect(e.tag).to.equal(new FeatureTag('Event Protocol')))\n                .next(TaskStarts, e => expect(e.details.name).to.equal(new Name('Given I like martial arts')))\n                .next(TaskFinished, e => expect(e.details.name).to.equal(new Name('Given I like martial arts')))\n                .next(SceneFinished, e => expect(e.details).to.equal(expectedScenarioDetails(12)))\n            ;\n        });\n    });\n\n    it('considers a scenario with no steps and no hooks to be pending implementation', () => {\n\n        eventBroadcaster.on('test-case-finished', () => afterHook({\n            result: {\n                duration: 0,\n                status: 'passed',\n            },\n        }));\n\n        emitAllFrom(require('./samples/pending-scenario.json'));\n\n        const expectedScenarioDetails = new ScenarioDetails(\n            new Name('Implement me'),\n            new Category('Event Protocol'),\n            new FileSystemLocation(\n                new Path('features/pending-scenario.feature'),\n                3,\n                3,\n            ),\n        );\n\n        return serenity.waitForNextCue().then(() => {\n\n            PickEvent.from(recorder.events)\n                .next(SceneStarts, e => expect(e.details).to.equal(expectedScenarioDetails))\n                .next(TestRunnerDetected, e => expect(e.name).to.equal(new Name('Cucumber')))\n                .next(SceneTagged, e => expect(e.tag).to.equal(new FeatureTag('Event Protocol')))\n                .next(SceneFinished, e => {\n                    expect(e.details).to.equal(expectedScenarioDetails);\n                    expect(e.outcome).to.be.instanceOf(ImplementationPending);\n                    expect((e.outcome as ImplementationPending).error).to.be.instanceOf(ImplementationPendingError);\n                    expect((e.outcome as ImplementationPending).error.message).to.equal(`\"Implement me\" has no test steps`);\n                })\n            ;\n        });\n    });\n\n    function emitAllFrom(events: JSONObject[]): void {\n        events.forEach(event => {\n            // I can't use the convenient { type, ...body } construct because ESDoc/Babylon doesn't understand it; falling back to es5:\n            const emitted = Object.assign({}, event);\n            delete emitted.type;\n            eventBroadcaster.emit(event.type as string, emitted);\n        });\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17",
    "access": null,
    "description": "CucumberEventProtocolAdapter",
    "lineNumber": 16
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17.it18",
    "access": null,
    "description": "correctly recognises Cucumber Event Protocol events",
    "lineNumber": 67
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17.it19",
    "access": null,
    "description": "correctly recognises undefined steps",
    "lineNumber": 106
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17.it20",
    "access": null,
    "description": "correctly recognises pending steps",
    "lineNumber": 146
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17.it21",
    "access": null,
    "description": "correctly recognises ambiguous steps",
    "lineNumber": 186
  },
  {
    "__docId__": 488,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17.it22",
    "access": null,
    "description": "correctly recognises errors thrown in steps",
    "lineNumber": 233
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17.it23",
    "access": null,
    "description": "correctly recognises scenario outlines",
    "lineNumber": 278
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/CucumberEventProtocolAdapter.spec.ts~describe17.it24",
    "access": null,
    "description": "considers a scenario with no steps and no hooks to be pending implementation",
    "lineNumber": 327
  },
  {
    "__docId__": 491,
    "kind": "testFile",
    "name": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Path } from '@serenity-js/core/lib/io';\n\nimport { Cache } from '../../../../../src/listeners/legacy/gherkin';\n\ndescribe('Cache', () => {\n\n    it('starts empty', () => {\n        const cache = new Cache();\n\n        expect(cache.size()).to.equal(0);\n    });\n\n    it('allows for items to be stored and retrieved', () => {\n        const cache = new Cache<Path, number>();\n\n        cache.set(new Path('/home/alice'), 1);\n        cache.set(new Path('/home/bob'), 2);\n\n        expect(cache.size()).to.equal(2);\n        expect(cache.get(new Path('/home/alice'))).to.equal(1);\n        expect(cache.get(new Path('/home/bob'))).to.equal(2);\n    });\n\n    it('tells whether or not an item has already been cached', () => {\n        const cache = new Cache<Path, number>();\n\n        cache.set(new Path('/home/alice'), 1);\n\n        expect(cache.has(new Path('/home/alice'))).to.equal(true);\n        expect(cache.has(new Path('/home/bob'))).to.equal(false);\n    });\n\n    it('complains when you try to retrieve an object that has not been cached yet', () => {\n        const cache = new Cache<Path, number>();\n\n        expect(() => cache.get(new Path('/home/alice'))).to.throw(\n            'Make sure you cache a value under Path(value=/home/alice) before trying to retrieve it',\n        );\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts~describe25",
    "access": null,
    "description": "Cache",
    "lineNumber": 8
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts~describe25.it26",
    "access": null,
    "description": "starts empty",
    "lineNumber": 10
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts~describe25.it27",
    "access": null,
    "description": "allows for items to be stored and retrieved",
    "lineNumber": 16
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts~describe25.it28",
    "access": null,
    "description": "tells whether or not an item has already been cached",
    "lineNumber": 27
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/Cache.spec.ts~describe25.it29",
    "access": null,
    "description": "complains when you try to retrieve an object that has not been cached yet",
    "lineNumber": 36
  },
  {
    "__docId__": 497,
    "kind": "testFile",
    "name": "spec/listeners/legacy/gherkin/feature-files/FeatureFileLoader.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Path } from '@serenity-js/core/lib/io';\nimport * as sinon from 'sinon';\n\nimport Gherkin = require('gherkin');\nimport { Cache, FeatureFileLoader, FeatureFileMap, FeatureFileMapper, FeatureFileParser } from '../../../../../src/listeners/legacy/gherkin';\n\ndescribe('FeatureFileLoader', () => {\n\n    const sampleFeature = new Path(__dirname).join(new Path('fixtures')).join(new Path('sample.feature'));\n\n    it('caches the feature file map it has loaded', () => {\n\n        const\n            parser = new FeatureFileParser(new Gherkin.Parser()),\n            mapper = new FeatureFileMapper(),\n            cache  = new Cache<Path, FeatureFileMap>();\n\n        const\n            parse = sinon.spy(parser, 'parse'),\n            map = sinon.spy(mapper, 'map');\n\n        const loader = new FeatureFileLoader(\n            parser,\n            mapper,\n            cache,\n        );\n\n        return loader.load(sampleFeature)\n            .then(_ => loader.load(sampleFeature))\n            .then(_ => loader.load(sampleFeature))\n            .then(_ => {\n                expect(cache.has(sampleFeature)).to.equal(true);\n\n                expect(parse.callCount).to.equal(1);\n                expect(map.callCount).to.equal(1);\n            });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/legacy/gherkin/feature-files/FeatureFileLoader.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 498,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileLoader.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileLoader.spec.ts~describe30",
    "access": null,
    "description": "FeatureFileLoader",
    "lineNumber": 10
  },
  {
    "__docId__": 499,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileLoader.spec.ts~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileLoader.spec.ts~describe30.it31",
    "access": null,
    "description": "caches the feature file map it has loaded",
    "lineNumber": 14
  },
  {
    "__docId__": 500,
    "kind": "testFile",
    "name": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Description, Name } from '@serenity-js/core/lib/model';\n\nimport { FeatureFileMap } from '../../../../../src/listeners/legacy/gherkin';\n\ndescribe('FeatureFileMap', () => {\n\n    const\n        featureName = new Description('some feature');\n\n    it('allows for values to be stored and retrieved', () => {\n        const map = new FeatureFileMap()\n            .set(featureName).onLine(1);\n\n        expect(map.get(Description).onLine(1)).to.equal(featureName);\n    });\n\n    it('allows for values to be retrieved based on their type when their location is not known', () => {\n        const map = new FeatureFileMap()\n            .set(featureName).onLine(1);\n\n        expect(map.getFirst(Description)).to.equal(featureName);\n    });\n\n    it('allows for values to be retrieved based on the line alone', () => {\n        const map = new FeatureFileMap()\n            .set(featureName).onLine(1);\n\n        expect(map.get(Description).onLine(1)).to.equal(featureName);\n    });\n\n    it('complains if the value stored is not of the same type as value that needs to be retrieved', () => {\n        const map = new FeatureFileMap()\n            .set(featureName).onLine(1);\n\n        expect(() => map.get(Name).onLine(1)).to.throw('Item on line 1 is a Description, not a Name');\n    });\n\n    it('complains if the requested value is not present', () => {\n        const map = new FeatureFileMap();\n\n        expect(() => map.get(Name).onLine(1)).to.throw('Nothing was found on line 1');\n        expect(() => map.getFirst(Name)).to.throw(`Didn't find any Name amongst no items`);\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32",
    "access": null,
    "description": "FeatureFileMap",
    "lineNumber": 8
  },
  {
    "__docId__": 502,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32.it33",
    "access": null,
    "description": "allows for values to be stored and retrieved",
    "lineNumber": 13
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32.it34",
    "access": null,
    "description": "allows for values to be retrieved based on their type when their location is not known",
    "lineNumber": 20
  },
  {
    "__docId__": 504,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32.it35",
    "access": null,
    "description": "allows for values to be retrieved based on the line alone",
    "lineNumber": 27
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32.it36",
    "access": null,
    "description": "complains if the value stored is not of the same type as value that needs to be retrieved",
    "lineNumber": 34
  },
  {
    "__docId__": 506,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMap.spec.ts~describe32.it37",
    "access": null,
    "description": "complains if the requested value is not present",
    "lineNumber": 41
  },
  {
    "__docId__": 507,
    "kind": "testFile",
    "name": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { FileSystemLocation, Path } from '@serenity-js/core/lib/io';\nimport { ArbitraryTag, Description, IssueTag, Name, ScenarioParameters } from '@serenity-js/core/lib/model';\nimport Gherkin = require('gherkin'); // ts-node:disable-line:no-var-requires     No type definitions available\n\nimport {\n    Background,\n    Feature,\n    FeatureFileMap,\n    FeatureFileMapper,\n    FeatureFileParser,\n    Scenario,\n    ScenarioOutline,\n    Step,\n} from '../../../../../src/listeners/legacy/gherkin';\n\ndescribe('FeatureFileMapper', () => {\n\n    const fixtures = new Path(__dirname).join(new Path('fixtures'));\n\n    describe('when mapping names and descriptions', () => {\n\n        it('maps a feature', parse('names_and_descriptions.feature', map => {\n            expect(map.get(Feature).onLine(1)).to.equal(new Feature(\n                new FileSystemLocation(fixtures.join(new Path('names_and_descriptions.feature')),\n                    1,\n                    1,\n                ),\n                new Name('Names and descriptions'),\n                new Description('A multi-line\\n\\ndescription\\nof a feature'),\n            ));\n        }));\n\n        it('maps a scenario with a single-line description', parse('names_and_descriptions.feature', map => {\n            const scenario = map.get(Scenario).onLine(8);\n\n            expect(scenario.name).to.equal(new Name('The one with a description'));\n            expect(scenario.description).to.equal(new Description('Description of a scenario'));\n        }));\n\n        it('maps a scenario with a multi-line description', parse('names_and_descriptions.feature', map => {\n            const scenario = map.get(Scenario).onLine(14);\n\n            expect(scenario.name).to.equal(new Name('The one with a multi-line description'));\n            expect(scenario.description).to.equal(new Description('A multi-line\\n\\ndescription\\nof a scenario'));\n        }));\n    });\n\n    describe('when mapping scenarios with no steps', () => {\n\n        it('maps a scenario even though it has no steps defined', parse('no_steps.feature', map => {\n            const scenario = map.get(Scenario).onLine(3);\n\n            expect(scenario.name).to.equal(new Name('The one with no steps'));\n            expect(scenario.steps).have.lengthOf(0);\n        }));\n    });\n\n    describe('when mapping scenarios with backgrounds', () => {\n\n        it('maps the background with no name or description', parse('background_with_no_name_or_description.feature', map => {\n            const firstBackground = map.get(Background).onLine(3);\n\n            expect(firstBackground.name).to.equal(new Name(''));\n            expect(firstBackground.description).to.equal(undefined);\n            expect(firstBackground.steps).to.deep.equal([\n                new Step(\n                    new FileSystemLocation(fixtures.join(new Path('background_with_no_name_or_description.feature')),\n                        5,\n                        5,\n                    ),\n                    new Name('Given a prerequisite'),\n                ),\n            ]);\n        }));\n\n        it('maps the background with name and description', parse('backgrounds.feature', map => {\n            const firstBackground = map.get(Background).onLine(3);\n\n            expect(firstBackground.name).to.equal(new Name('The one that provides some context'));\n            expect(firstBackground.description).to.equal(new Description('Once upon a time, there was a test suite.'));\n            expect(firstBackground.steps).to.deep.equal([\n                new Step(\n                    new FileSystemLocation(fixtures.join(new Path('backgrounds.feature')),\n                        7,\n                        5,\n                    ),\n                    new Name('Given a prerequisite'),\n                ),\n            ]);\n        }));\n\n        it('associates the background with the feature', parse('backgrounds.feature', map => {\n            const feature = map.get(Feature).onLine(1);\n\n            expect(feature.background).to.equal(\n                new Background(\n                    new FileSystemLocation(fixtures.join(new Path('backgrounds.feature')), 3, 3),\n                    new Name('The one that provides some context'),\n                    new Description('Once upon a time, there was a test suite.'),\n                    [\n                        new Step(\n                            new FileSystemLocation(fixtures.join(new Path('backgrounds.feature')), 7, 5),\n                            new Name('Given a prerequisite'),\n                        ),\n                    ],\n                )\n            );\n        }));\n\n        it('associates the background steps with the scenarios', parse('backgrounds.feature', map => {\n            const scenario = map.get(Scenario).onLine(9);\n\n            expect(scenario.steps).to.deep.equal([\n                new Step(\n                    new FileSystemLocation(fixtures.join(new Path('backgrounds.feature')), 7, 5),\n                    new Name('Given a prerequisite'),\n                ),\n                new Step(\n                    new FileSystemLocation(fixtures.join(new Path('backgrounds.feature')), 11, 5),\n                    new Name('Given some scenario step'),\n                ),\n            ]);\n        }));\n    });\n\n    describe('when mapping scenario with special step arguments', () => {\n\n        it('recognises DocString argument', parse('step_arguments.feature', map => {\n            const scenario = map.get(Scenario).onLine(3);\n\n            expect(scenario.steps).to.deep.equal([\n                new Step(\n                    new FileSystemLocation(fixtures.join(new Path('step_arguments.feature')), 5, 5),\n                    new Name('Given a step with DocString argument:\\nA couple of\\nlines of\\ntext'),\n                ),\n            ]);\n        }));\n\n        it('recognises DataTable argument', parse('step_arguments.feature', map => {\n            const scenario = map.get(Scenario).onLine(12);\n\n            expect(scenario.steps).to.deep.equal([\n                new Step(\n                    new FileSystemLocation(fixtures.join(new Path('step_arguments.feature')), 14, 5),\n                    new Name('Given a step with a DataTable argument:\\n| first name | last name |\\n| Jan | Molak |'),\n                ),\n            ]);\n        }));\n    });\n\n    describe('when mapping scenario outlines with one set of examples', () => {\n        it('maps the scenario template', parse('scenario_outlines.feature', map => {\n            const\n                scenario = map.get(ScenarioOutline).onLine(3),\n                path = fixtures.join(new Path('scenario_outlines.feature'));\n\n            expect(scenario).to.equal(new ScenarioOutline(\n                new FileSystemLocation(path, 3, 3),\n                new Name('The one with examples'),\n                new Description('Description of the scenario with examples'),\n                [\n                    new Step(\n                        new FileSystemLocation(path, 7, 5),\n                        new Name('Given step with a <parameter>'),\n                    ),\n                ],\n                {\n                    14: new ScenarioParameters(\n                        new Name('Name of the example set'),\n                        new Description('Description of the example set'),\n                        { parameter: 'value one' },\n                    ),\n                    15: new ScenarioParameters(\n                        new Name('Name of the example set'),\n                        new Description('Description of the example set'),\n                        { parameter: 'value two' },\n                    ),\n                },\n            ));\n        }));\n\n        it('maps the interpolated scenario', parse('scenario_outlines.feature', map => {\n            const path = fixtures.join(new Path('scenario_outlines.feature'));\n\n            expect(map.get(Scenario).onLine(14)).to.equal(new Scenario(\n                new FileSystemLocation(path, 14, 7),\n                new Name('The one with examples'),\n                new Description('Description of the scenario with examples'),\n                [\n                    new Step(\n                        new FileSystemLocation(path, 7, 5),\n                        new Name('Given step with a value one'),\n                    ),\n                ],\n                [],\n                new FileSystemLocation(path, 3, 3),\n            ));\n\n            expect(map.get(Scenario).onLine(15)).to.equal(new Scenario(\n                new FileSystemLocation(path, 15, 7),\n                new Name('The one with examples'),\n                new Description('Description of the scenario with examples'),\n                [\n                    new Step(\n                        new FileSystemLocation(path, 7, 5),\n                        new Name('Given step with a value two'),\n                    ),\n                ],\n                [],\n                new FileSystemLocation(path, 3, 3),\n            ));\n        }));\n    });\n\n    describe('when mapping scenario outlines with multiple sets of examples', () => {\n        it('recognises the different names and descriptions of example sets', parse('scenario_outlines.feature', map => {\n            const path = fixtures.join(new Path('scenario_outlines.feature'));\n\n            /* eslint-disable @typescript-eslint/indent */\n            expect(map.get(ScenarioOutline).onLine(17)).to.equal(\n                new ScenarioOutline(\n                    new FileSystemLocation(path, 17, 3),\n                    new Name('The one with more examples'),\n                    new Description('Description of the scenario with more examples'),\n                    [\n                        new Step(\n                            new FileSystemLocation(path, 21, 5),\n                            new Name('Given step with a <parameter>'),\n                        ),\n                    ],\n                    {\n                        28: new ScenarioParameters(\n                                new Name('Name of the first set of examples'),\n                                new Description('Description of the first set of examples'),\n                                { parameter: 'value one' },\n                            ),\n                        29: new ScenarioParameters(\n                                new Name('Name of the first set of examples'),\n                                new Description('Description of the first set of examples'),\n                                { parameter: 'value two' },\n                            ),\n                        36: new ScenarioParameters(\n                                new Name('Name of the second set of examples'),\n                                new Description('Description of the second set of examples'),\n                                { parameter: 'value three' },\n                            ),\n                        37: new ScenarioParameters(\n                                new Name('Name of the second set of examples'),\n                                new Description('Description of the second set of examples'),\n                                { parameter: 'value four' },\n                            ),\n                    },\n                )\n            );\n            /* eslint-enable */\n        }));\n    });\n\n    describe('when mapping scenario outlines with special step arguments', () => {\n        it('recognises and interpolates DocString arguments', parse('scenario_outlines.feature', map => {\n            const\n                path = fixtures.join(new Path('scenario_outlines.feature')),\n                outline = map.get(ScenarioOutline).onLine(39);\n\n            expect(outline.name).to.equal(new Name('The one with parametrised step argument (DocString)'));\n            expect(outline.steps[0]).to.equal(new Step(\n                new FileSystemLocation(path, 41, 5),\n                new Name('Given step with a:\\nParameter of <parameter>'),\n            ));\n            expect(outline.parameters[49]).to.equal(new ScenarioParameters(\n                new Name(''),\n                new Description(''),\n                { parameter: 'value one' },\n            ));\n\n            const scenario = map.get(Scenario).onLine(49);\n            expect(scenario.steps[ 0 ]).to.equal(new Step(\n                new FileSystemLocation(path, 41, 5),\n                new Name('Given step with a:\\nParameter of value one'),\n            ));\n        }));\n\n        it('recognises and interpolates DataTable arguments', parse('scenario_outlines.feature', map => {\n            const\n                outline = map.get(ScenarioOutline).onLine(51),\n                path = fixtures.join(new Path('scenario_outlines.feature'));\n\n            expect(outline.name).to.equal(new Name('The one with parametrised step argument (DataTable)'));\n            expect(outline.steps[0])\n                .to.equal(new Step(\n                    new FileSystemLocation(path, 53, 5),\n                    new Name('Given the user logs in as <username> with the following credentials:\\n| username | <username> |\\n| password | <password> |'),\n                ));\n            expect(outline.parameters[60]).to.equal(new ScenarioParameters(\n                new Name(''),\n                new Description(''),\n                { username: 'admin', password: 'P@ssw0rd1' },\n            ));\n            expect(outline.parameters[61]).to.equal(new ScenarioParameters(\n                new Name(''),\n                new Description(''),\n                { username: 'editor', password: 'P@ssw0rd2' },\n            ));\n\n            expect(map.get(Scenario).onLine(60).steps[0])\n                .to.equal(new Step(\n                    new FileSystemLocation(path, 53, 5),\n                    new Name('Given the user logs in as admin with the following credentials:\\n| username | admin |\\n| password | P@ssw0rd1 |'),\n                ));\n\n            expect(map.get(Scenario).onLine(61).steps[0])\n                .to.equal(new Step(\n                    new FileSystemLocation(path, 53, 5),\n                    new Name('Given the user logs in as editor with the following credentials:\\n| username | editor |\\n| password | P@ssw0rd2 |'),\n                ));\n        }));\n    });\n\n    describe('when mapping an empty feature file', () => {\n\n        it('returns an empty map', () => {\n            const empty = { type: 'GherkinDocument', comments: [] };\n\n            const mapper = new FeatureFileMapper();\n\n            expect(mapper.map(empty, fixtures).size()).to.equal(0); // eslint-disable-line unicorn/no-array-method-this-argument\n        });\n    });\n\n    describe('when mapping a tagged scenario', () => {\n\n        it('detects all the applicable tags',  parse('tags.feature', map => {\n            const scenario = map.get(Scenario).onLine(7);\n\n            expect(scenario.tags[0]).to.equal(new IssueTag('ABC-123'));\n            expect(scenario.tags[1]).to.equal(new IssueTag('DEF-456'));\n            expect(scenario.tags[2]).to.equal(new ArbitraryTag('saves-data'));\n            expect(scenario.tags[3]).to.equal(new IssueTag('GHI-789'));\n            expect(scenario.tags[4]).to.equal(new ArbitraryTag('regression'));\n        }));\n    });\n\n    function parse(featureFileName: string, spec: (map: FeatureFileMap) => void) {\n        const\n            path = fixtures.join(new Path(featureFileName)),\n            mapper = new FeatureFileMapper(),\n            loader = new FeatureFileParser(new Gherkin.Parser());\n\n        // eslint-disable-next-line unicorn/no-array-method-this-argument\n        return () => loader.parse(path).then(document => mapper.map(document, path)).then(spec);\n    }\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 508,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38",
    "access": null,
    "description": "FeatureFileMapper",
    "lineNumber": 19
  },
  {
    "__docId__": 509,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe39",
    "access": null,
    "description": "when mapping names and descriptions",
    "lineNumber": 23
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe39.it40",
    "access": null,
    "description": "maps a feature",
    "lineNumber": 25
  },
  {
    "__docId__": 511,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe39.it41",
    "access": null,
    "description": "maps a scenario with a single-line description",
    "lineNumber": 36
  },
  {
    "__docId__": 512,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe39.it42",
    "access": null,
    "description": "maps a scenario with a multi-line description",
    "lineNumber": 43
  },
  {
    "__docId__": 513,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe43",
    "access": null,
    "description": "when mapping scenarios with no steps",
    "lineNumber": 51
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe43",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe43.it44",
    "access": null,
    "description": "maps a scenario even though it has no steps defined",
    "lineNumber": 53
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe45",
    "access": null,
    "description": "when mapping scenarios with backgrounds",
    "lineNumber": 61
  },
  {
    "__docId__": 516,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe45.it46",
    "access": null,
    "description": "maps the background with no name or description",
    "lineNumber": 63
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe45.it47",
    "access": null,
    "description": "maps the background with name and description",
    "lineNumber": 79
  },
  {
    "__docId__": 518,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe45.it48",
    "access": null,
    "description": "associates the background with the feature",
    "lineNumber": 95
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe45.it49",
    "access": null,
    "description": "associates the background steps with the scenarios",
    "lineNumber": 113
  },
  {
    "__docId__": 520,
    "kind": "test",
    "name": "describe50",
    "testId": 50,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe50",
    "access": null,
    "description": "when mapping scenario with special step arguments",
    "lineNumber": 129
  },
  {
    "__docId__": 521,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe50.it51",
    "access": null,
    "description": "recognises DocString argument",
    "lineNumber": 131
  },
  {
    "__docId__": 522,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe50.it52",
    "access": null,
    "description": "recognises DataTable argument",
    "lineNumber": 142
  },
  {
    "__docId__": 523,
    "kind": "test",
    "name": "describe53",
    "testId": 53,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe53",
    "access": null,
    "description": "when mapping scenario outlines with one set of examples",
    "lineNumber": 154
  },
  {
    "__docId__": 524,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe53",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe53.it54",
    "access": null,
    "description": "maps the scenario template",
    "lineNumber": 155
  },
  {
    "__docId__": 525,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe53",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe53.it55",
    "access": null,
    "description": "maps the interpolated scenario",
    "lineNumber": 185
  },
  {
    "__docId__": 526,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe56",
    "access": null,
    "description": "when mapping scenario outlines with multiple sets of examples",
    "lineNumber": 218
  },
  {
    "__docId__": 527,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe56.it57",
    "access": null,
    "description": "recognises the different names and descriptions of example sets",
    "lineNumber": 219
  },
  {
    "__docId__": 528,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe58",
    "access": null,
    "description": "when mapping scenario outlines with special step arguments",
    "lineNumber": 262
  },
  {
    "__docId__": 529,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe58.it59",
    "access": null,
    "description": "recognises and interpolates DocString arguments",
    "lineNumber": 263
  },
  {
    "__docId__": 530,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe58.it60",
    "access": null,
    "description": "recognises and interpolates DataTable arguments",
    "lineNumber": 286
  },
  {
    "__docId__": 531,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe61",
    "access": null,
    "description": "when mapping an empty feature file",
    "lineNumber": 322
  },
  {
    "__docId__": 532,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe61",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe61.it62",
    "access": null,
    "description": "returns an empty map",
    "lineNumber": 324
  },
  {
    "__docId__": 533,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe63",
    "access": null,
    "description": "when mapping a tagged scenario",
    "lineNumber": 333
  },
  {
    "__docId__": 534,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileMapper.spec.ts~describe38.describe63.it64",
    "access": null,
    "description": "detects all the applicable tags",
    "lineNumber": 335
  },
  {
    "__docId__": 535,
    "kind": "testFile",
    "name": "spec/listeners/legacy/gherkin/feature-files/FeatureFileParser.spec.ts",
    "content": "import 'mocha';\n\nimport { expect } from '@integration/testing-tools';\nimport { Path } from '@serenity-js/core/lib/io';\nimport Gherkin = require('gherkin'); // ts-node:disable-line:no-var-requires     No type definitions available\n\nimport { FeatureFileParser } from '../../../../../src/listeners/legacy/gherkin';\n\ndescribe('FeatureFileParser', () => {\n\n    const\n        sampleFeature = new Path(__dirname).join(new Path('fixtures')).join(new Path('sample.feature')),\n        brokenFeature = new Path(__dirname).join(new Path('fixtures')).join(new Path('broken.feature'));\n\n    it('loads a GherkinDocument from a file', () => {\n        const loader = new FeatureFileParser(new Gherkin.Parser());\n\n        return loader.parse(sampleFeature)\n            .then(document => {\n                expect(document).to.deep.equal({\n                    type: 'GherkinDocument',\n                    feature: {\n                        type: 'Feature',\n                        tags: [],\n                        location: { line: 1, column: 1 },\n                        language: 'en',\n                        keyword: 'Feature',\n                        name: 'Sample feature',\n                        description: '  Description of the feature',\n                        children: [ {\n                            type: 'Scenario',\n                            tags: [],\n                            location: { line: 5, column: 3 },\n                            keyword: 'Scenario',\n                            name: 'Sample scenario',\n                            description: '    Description of a scenario',\n                            steps: [ {\n                                argument: undefined,\n                                type: 'Step',\n                                location: { line: 9, column: 5 },\n                                keyword: 'Given ',\n                                text: 'some step',\n                            } ],\n                        } ],\n                    },\n                    comments: [],\n                });\n            });\n    });\n\n    it('complains if the feature file does not exist', () => {\n        const loader = new FeatureFileParser(new Gherkin.Parser());\n\n        return expect(loader.parse(new Path('path/to/invalid.feature')))\n            .to.be.rejectedWith('Could not read feature file at \"path/to/invalid.feature\"');\n    });\n\n    it('complains if the feature file could not be parsed', () => {\n        const loader = new FeatureFileParser(new Gherkin.Parser());\n\n        return expect(loader.parse(brokenFeature))\n            .to.be.rejectedWith('Could not parse feature file');\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/legacy/gherkin/feature-files/FeatureFileParser.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 536,
    "kind": "test",
    "name": "describe65",
    "testId": 65,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileParser.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileParser.spec.ts~describe65",
    "access": null,
    "description": "FeatureFileParser",
    "lineNumber": 9
  },
  {
    "__docId__": 537,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileParser.spec.ts~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileParser.spec.ts~describe65.it66",
    "access": null,
    "description": "loads a GherkinDocument from a file",
    "lineNumber": 15
  },
  {
    "__docId__": 538,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileParser.spec.ts~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileParser.spec.ts~describe65.it67",
    "access": null,
    "description": "complains if the feature file does not exist",
    "lineNumber": 51
  },
  {
    "__docId__": 539,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "spec/listeners/legacy/gherkin/feature-files/FeatureFileParser.spec.ts~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/legacy/gherkin/feature-files/FeatureFileParser.spec.ts~describe65.it68",
    "access": null,
    "description": "complains if the feature file could not be parsed",
    "lineNumber": 58
  },
  {
    "__docId__": 540,
    "kind": "testFile",
    "name": "spec/listeners/messages/ambiguous_steps.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport {\n    ActivityFinished,\n    ActivityStarts,\n    SceneFinished, SceneFinishes,\n    SceneStarts,\n    SceneTagged,\n    TestRunnerDetected,\n} from '@serenity-js/core/lib/events';\nimport { ExecutionFailedWithError, FeatureTag, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises scenarios with ambiguous steps', () =>\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/ambiguous.steps.ts',\n                './examples/features/passing_scenario.feature',\n            )\n            .then(ifExitCodeIsOtherThan(1, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(1);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts, event => expect(event.details.name).to.equal(new Name('A passing scenario')))\n                    .next(TestRunnerDetected, event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged, event => expect(event.tag).to.equal(new FeatureTag('A passing feature')))\n                    .next(ActivityStarts, event => expect(event.details.name).to.equal(new Name('Given a step that passes')))\n                    .next(ActivityFinished, event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError);\n\n                        const error = (event.outcome as ExecutionFailedWithError).error;\n\n                        const lines = error.message.split('\\n');\n\n                        expect(lines[0]).to.equal('Multiple step definitions match:');\n                        expect(lines[1]).to.contain('/^.*step .* passes$/');\n                        expect(lines[1]).to.contain('ambiguous.steps.ts');\n                        expect(lines[2]).to.contain('/^.*step .* passes$/');\n                        expect(lines[2]).to.contain('ambiguous.steps.ts');\n                    })\n                    .next(SceneFinishes, event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError);\n\n                        const error = (event.outcome as ExecutionFailedWithError).error;\n\n                        expect(error.message).to.match(/^Multiple step definitions match/);\n                    })\n                    .next(SceneFinished, event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError);\n\n                        const error = (event.outcome as ExecutionFailedWithError).error;\n\n                        expect(error.message).to.match(/^Multiple step definitions match/);\n                    })\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/ambiguous_steps.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 541,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "spec/listeners/messages/ambiguous_steps.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/ambiguous_steps.spec.ts~describe69",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 17
  },
  {
    "__docId__": 542,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "spec/listeners/messages/ambiguous_steps.spec.ts~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/ambiguous_steps.spec.ts~describe69.describe70",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 19
  },
  {
    "__docId__": 543,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "spec/listeners/messages/ambiguous_steps.spec.ts~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/ambiguous_steps.spec.ts~describe69.describe70.it71",
    "access": null,
    "description": "recognises scenarios with ambiguous steps",
    "lineNumber": 21
  },
  {
    "__docId__": 544,
    "kind": "testFile",
    "name": "spec/listeners/messages/assertion_failure_scenario.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { AssertionError } from '@serenity-js/core';\nimport { ActivityFinished, ActivityStarts, SceneFinished, SceneFinishes, SceneStarts, SceneTagged, TestRunnerDetected } from '@serenity-js/core/lib/events';\nimport { ExecutionFailedWithAssertionError, FeatureTag, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises a scenario failing due to a Serenity/JS assertion error being thrown', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/assertion_failure_scenario.feature',\n            )\n            .then(ifExitCodeIsOtherThan(1, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(1);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,         event => expect(event.details.name).to.equal(new Name('An assertion failure scenario')))\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises a scenario failing due to an assertion error')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that fails with an assertion error')))\n                    .next(ActivityFinished,    event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithAssertionError);\n                        expect((event.outcome as ExecutionFailedWithAssertionError).error).to.be.instanceOf(AssertionError);\n                    })\n                    .next(SceneFinishes,       event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithAssertionError);\n                        expect((event.outcome as ExecutionFailedWithAssertionError).error).to.be.instanceOf(AssertionError);\n                    })\n                    .next(SceneFinished,       event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithAssertionError);\n                        expect((event.outcome as ExecutionFailedWithAssertionError).error).to.be.instanceOf(AssertionError);\n                    });\n            }));\n\n        it('recognises a scenario failing due to a non-Serenity/JS assertion error being thrown', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/non_serenity_assertion_failure_scenario.feature',\n            )\n            .then(ifExitCodeIsOtherThan(1, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(1);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,         event => expect(event.details.name).to.equal(new Name('An assertion failure scenario')))\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises a scenario failing due to an assertion error')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that fails with a non-Serenity assertion error')))\n                    .next(ActivityFinished,    event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithAssertionError);\n                        expect((event.outcome as ExecutionFailedWithAssertionError).error.constructor.name).to.equal('AssertionError');\n                    })\n                    .next(SceneFinishes,       event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithAssertionError);\n                        expect((event.outcome as ExecutionFailedWithAssertionError).error.constructor.name).to.equal('AssertionError');\n                    })\n                    .next(SceneFinished,       event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithAssertionError);\n                        expect((event.outcome as ExecutionFailedWithAssertionError).error.constructor.name).to.equal('AssertionError');\n                    });\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/assertion_failure_scenario.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 545,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "spec/listeners/messages/assertion_failure_scenario.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/assertion_failure_scenario.spec.ts~describe72",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 11
  },
  {
    "__docId__": 546,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "spec/listeners/messages/assertion_failure_scenario.spec.ts~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/assertion_failure_scenario.spec.ts~describe72.describe73",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 13
  },
  {
    "__docId__": 547,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "spec/listeners/messages/assertion_failure_scenario.spec.ts~describe72.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/assertion_failure_scenario.spec.ts~describe72.describe73.it74",
    "access": null,
    "description": "recognises a scenario failing due to a Serenity/JS assertion error being thrown",
    "lineNumber": 15
  },
  {
    "__docId__": 548,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "spec/listeners/messages/assertion_failure_scenario.spec.ts~describe72.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/assertion_failure_scenario.spec.ts~describe72.describe73.it75",
    "access": null,
    "description": "recognises a scenario failing due to a non-Serenity/JS assertion error being thrown",
    "lineNumber": 46
  },
  {
    "__docId__": 549,
    "kind": "testFile",
    "name": "spec/listeners/messages/capabilities.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { SceneTagged } from '@serenity-js/core/lib/events';\nimport { CapabilityTag, FeatureTag } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', function () {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises directories that features are grouped in as capabilities', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/capability/example.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new CapabilityTag('capability')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises capabilities')))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/capabilities.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 550,
    "kind": "test",
    "name": "describe76",
    "testId": 76,
    "memberof": "spec/listeners/messages/capabilities.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/capabilities.spec.ts~describe76",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 9
  },
  {
    "__docId__": 551,
    "kind": "test",
    "name": "describe77",
    "testId": 77,
    "memberof": "spec/listeners/messages/capabilities.spec.ts~describe76",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/capabilities.spec.ts~describe76.describe77",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 11
  },
  {
    "__docId__": 552,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "spec/listeners/messages/capabilities.spec.ts~describe76.describe77",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/capabilities.spec.ts~describe76.describe77.it78",
    "access": null,
    "description": "recognises directories that features are grouped in as capabilities",
    "lineNumber": 13
  },
  {
    "__docId__": 553,
    "kind": "testFile",
    "name": "spec/listeners/messages/data_table.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { ActivityStarts } from '@serenity-js/core/lib/events';\nimport { Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises a scenario with a Data Table step', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/data_table.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(ActivityStarts, event => expect(event.details.name).to.equal(new Name(\n                        'Given a step that receives a table:\\n' +\n                        '| Developer | Website      |\\n' +\n                        '| Jan Molak | janmolak.com |',\n                    )))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/data_table.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 554,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "spec/listeners/messages/data_table.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/data_table.spec.ts~describe79",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 10
  },
  {
    "__docId__": 555,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "spec/listeners/messages/data_table.spec.ts~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/data_table.spec.ts~describe79.describe80",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 12
  },
  {
    "__docId__": 556,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "spec/listeners/messages/data_table.spec.ts~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/data_table.spec.ts~describe79.describe80.it81",
    "access": null,
    "description": "recognises a scenario with a Data Table step",
    "lineNumber": 14
  },
  {
    "__docId__": 557,
    "kind": "testFile",
    "name": "spec/listeners/messages/descriptions.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { FeatureNarrativeDetected, SceneDescriptionDetected, SceneStarts } from '@serenity-js/core/lib/events';\nimport { Description, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises scenario descriptions', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/descriptions.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,              event => expect(event.details.name).to.equal(new Name('First scenario')))\n                    .next(FeatureNarrativeDetected, event => {\n                        expect(event.description).to.equal(new Description(\n                            'In order to accurately report the scenario\\n' +\n                            'Serenity/JS should recognise all of its important parts',\n                        ));\n                    })\n                    .next(SceneDescriptionDetected, event => {\n                        expect(event.description).to.equal(new Description(\n                            'A scenario where all the steps pass\\nIs reported as passing',\n                        ));\n                    })\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/descriptions.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 558,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "spec/listeners/messages/descriptions.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/descriptions.spec.ts~describe82",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 9
  },
  {
    "__docId__": 559,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "spec/listeners/messages/descriptions.spec.ts~describe82",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/descriptions.spec.ts~describe82.describe83",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 11
  },
  {
    "__docId__": 560,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "spec/listeners/messages/descriptions.spec.ts~describe82.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/descriptions.spec.ts~describe82.describe83.it84",
    "access": null,
    "description": "recognises scenario descriptions",
    "lineNumber": 13
  },
  {
    "__docId__": 561,
    "kind": "testFile",
    "name": "spec/listeners/messages/doc_string.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case,unicorn/prevent-abbreviations */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { ActivityStarts } from '@serenity-js/core/lib/events';\nimport { Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises a scenario with a DocString step', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/doc_string.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(ActivityStarts, event => expect(event.details.name).to.equal(new Name(\n                        'Given a step that receives a doc string:\\n' +\n                        'Dear customer,\\n' +\n                        '\\n' +\n                        'Please click this link to reset your password.',\n                    )))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/doc_string.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 562,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "spec/listeners/messages/doc_string.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/doc_string.spec.ts~describe85",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 10
  },
  {
    "__docId__": 563,
    "kind": "test",
    "name": "describe86",
    "testId": 86,
    "memberof": "spec/listeners/messages/doc_string.spec.ts~describe85",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/doc_string.spec.ts~describe85.describe86",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 12
  },
  {
    "__docId__": 564,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "spec/listeners/messages/doc_string.spec.ts~describe85.describe86",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/doc_string.spec.ts~describe85.describe86.it87",
    "access": null,
    "description": "recognises a scenario with a DocString step",
    "lineNumber": 14
  },
  {
    "__docId__": 565,
    "kind": "testFile",
    "name": "spec/listeners/messages/failing_scenario.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport {\n    ActivityFinished,\n    ActivityStarts,\n    SceneFinished,\n    SceneFinishes,\n    SceneStarts,\n    SceneTagged,\n    TestRunFinished,\n    TestRunFinishes,\n    TestRunnerDetected,\n    TestRunStarts,\n} from '@serenity-js/core/lib/events';\nimport { ExecutionFailedWithError, FeatureTag, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises scenarios failing due to a generic error', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/failing_scenario.feature',\n            )\n            .then(ifExitCodeIsOtherThan(1, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(1);\n\n                PickEvent.from(result.events)\n                    .next(TestRunStarts,       event => expect(event).to.be.instanceOf(TestRunStarts))\n                    .next(SceneStarts,         event => {\n                        expect(event.details.name).to.equal(new Name('A failing scenario'))\n                        expect(event.details.location.path.value).to.match(/examples\\/features\\/failing_scenario.feature$/)\n                        expect(event.details.location.line).to.equal(3);\n                        expect(event.details.location.column).to.equal(3);\n                    })\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('A failing feature')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that fails with a generic error')))\n                    .next(ActivityFinished,    event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError)\n                        const outcome = event.outcome as ExecutionFailedWithError;\n\n                        expect(outcome.error.name).to.equal('Error');\n                        expect(outcome.error.message).to.equal(`Something's wrong`);\n                    })\n                    .next(SceneFinishes,       event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError)\n                        const outcome = event.outcome as ExecutionFailedWithError;\n\n                        expect(outcome.error.name).to.equal('Error');\n                        expect(outcome.error.message).to.equal(`Something's wrong`);\n                    })\n                    .next(SceneFinished,       event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError)\n                        const outcome = event.outcome as ExecutionFailedWithError;\n\n                        expect(outcome.error.name).to.equal('Error');\n                        expect(outcome.error.message).to.equal(`Something's wrong`);\n                    })\n                    .next(TestRunFinishes,     event => expect(event).to.be.instanceOf(TestRunFinishes))\n                    .next(TestRunFinished,     event => expect(event).to.be.instanceOf(TestRunFinished))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/failing_scenario.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 566,
    "kind": "test",
    "name": "describe88",
    "testId": 88,
    "memberof": "spec/listeners/messages/failing_scenario.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/failing_scenario.spec.ts~describe88",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 21
  },
  {
    "__docId__": 567,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "spec/listeners/messages/failing_scenario.spec.ts~describe88",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/failing_scenario.spec.ts~describe88.describe89",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 23
  },
  {
    "__docId__": 568,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "spec/listeners/messages/failing_scenario.spec.ts~describe88.describe89",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/failing_scenario.spec.ts~describe88.describe89.it90",
    "access": null,
    "description": "recognises scenarios failing due to a generic error",
    "lineNumber": 25
  },
  {
    "__docId__": 569,
    "kind": "testFile",
    "name": "spec/listeners/messages/hooks.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { InteractionFinished, InteractionStarts, SceneFinished, SceneFinishes, SceneStarts, SceneTagged, TaskFinished, TaskStarts } from '@serenity-js/core/lib/events';\nimport { ExecutionSuccessful, FeatureTag, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises Screenplay activities in any part of a Cucumber scenario', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/hooks.steps.ts',\n                './examples/features/hooks.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    // before all\n                    .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Helen performs in BeforeAll')))\n                    .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Helen performs in BeforeAll')))\n\n                    // first scenario\n                    .next(SceneStarts,         event => expect(event.details.name).to.equal(new Name('First screenplay scenario')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises Cucumber hooks')))\n\n                    // Before\n                    .next(TaskStarts,          event => expect(event.details.name).to.equal(new Name('Before')))\n                    .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Helen performs in Before')))\n                    .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Helen performs in Before')))\n                    .next(TaskFinished,        event => expect(event.details.name).to.equal(new Name('Before')))\n\n                    // Given\n                    .next(TaskStarts,          event => expect(event.details.name).to.equal(new Name('Given Amanda fulfills a task')))\n\n                        // BeforeStep\n                        .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Helen performs in BeforeStep')))\n                        .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Helen performs in BeforeStep')))\n\n                        // ... actual Given\n                        .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Amanda performs in Given')))\n                        .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Amanda performs in Given')))\n\n                        // AfterStep\n                        .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Helen performs in AfterStep')))\n                        .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Helen performs in AfterStep')))\n\n                    .next(TaskFinished,         event => expect(event.details.name).to.equal(new Name('Given Amanda fulfills a task')))\n\n                    // after\n                    .next(TaskStarts,          event => expect(event.details.name).to.equal(new Name('After')))\n                    .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Helen performs in After')))\n                    .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Helen performs in After')))\n                    .next(TaskFinished,        event => expect(event.details.name).to.equal(new Name('After')))\n\n                    .next(SceneFinishes,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                    .next(SceneFinished,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n\n                    // second scenario\n                    .next(SceneStarts,         event => expect(event.details.name).to.equal(new Name('Second screenplay scenario')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises Cucumber hooks')))\n\n                    // Before\n                    .next(TaskStarts,          event => expect(event.details.name).to.equal(new Name('Before')))\n                    .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Helen performs in Before')))\n                    .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Helen performs in Before')))\n                    .next(TaskFinished,        event => expect(event.details.name).to.equal(new Name('Before')))\n\n                    // Given\n                    .next(TaskStarts,          event => expect(event.details.name).to.equal(new Name('Given Beth fulfills a task')))\n\n                        // BeforeStep\n                        .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Helen performs in BeforeStep')))\n                        .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Helen performs in BeforeStep')))\n\n                        // ... actual Given\n                        .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Beth performs in Given')))\n                        .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Beth performs in Given')))\n\n                        // AfterStep\n                        .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Helen performs in AfterStep')))\n                        .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Helen performs in AfterStep')))\n\n                    .next(TaskFinished,         event => expect(event.details.name).to.equal(new Name('Given Beth fulfills a task')))\n\n                    // after\n                    .next(TaskStarts,          event => expect(event.details.name).to.equal(new Name('After')))\n                    .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Helen performs in After')))\n                    .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Helen performs in After')))\n                    .next(TaskFinished,        event => expect(event.details.name).to.equal(new Name('After')))\n\n                    .next(SceneFinishes,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                    .next(SceneFinished,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n\n                    // after all\n                    .next(InteractionStarts,   event => expect(event.details.name).to.equal(new Name('Helen performs in AfterAll')))\n                    .next(InteractionFinished, event => expect(event.details.name).to.equal(new Name('Helen performs in AfterAll')))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/hooks.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 570,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "spec/listeners/messages/hooks.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/hooks.spec.ts~describe91",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 9
  },
  {
    "__docId__": 571,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "spec/listeners/messages/hooks.spec.ts~describe91",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/hooks.spec.ts~describe91.describe92",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 11
  },
  {
    "__docId__": 572,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "spec/listeners/messages/hooks.spec.ts~describe91.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/hooks.spec.ts~describe91.describe92.it93",
    "access": null,
    "description": "recognises Screenplay activities in any part of a Cucumber scenario",
    "lineNumber": 13
  },
  {
    "__docId__": 573,
    "kind": "testFile",
    "name": "spec/listeners/messages/passing_scenario.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport {\n    ActivityFinished,\n    ActivityStarts,\n    SceneFinished, SceneFinishes,\n    SceneStarts,\n    SceneTagged,\n    TestRunFinished,\n    TestRunFinishes,\n    TestRunnerDetected,\n    TestRunStarts,\n} from '@serenity-js/core/lib/events';\nimport { ExecutionSuccessful, FeatureTag, Name, Timestamp } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises passing scenarios', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/passing_scenario.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(TestRunStarts,       event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                    .next(SceneStarts,         event => {\n                        expect(event.details.name).to.equal(new Name('A passing scenario'))\n                        expect(event.details.location.path.value).to.match(/examples\\/features\\/passing_scenario.feature$/)\n                        expect(event.details.location.line).to.equal(3);\n                        expect(event.details.location.column).to.equal(3);\n                    })\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('A passing feature')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that passes')))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                    .next(SceneFinished,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                    .next(TestRunFinishes,     event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                    .next(TestRunFinished,     event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/passing_scenario.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 574,
    "kind": "test",
    "name": "describe94",
    "testId": 94,
    "memberof": "spec/listeners/messages/passing_scenario.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/passing_scenario.spec.ts~describe94",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 20
  },
  {
    "__docId__": 575,
    "kind": "test",
    "name": "describe95",
    "testId": 95,
    "memberof": "spec/listeners/messages/passing_scenario.spec.ts~describe94",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/passing_scenario.spec.ts~describe94.describe95",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 22
  },
  {
    "__docId__": 576,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "spec/listeners/messages/passing_scenario.spec.ts~describe94.describe95",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/passing_scenario.spec.ts~describe94.describe95.it96",
    "access": null,
    "description": "recognises passing scenarios",
    "lineNumber": 24
  },
  {
    "__docId__": 577,
    "kind": "testFile",
    "name": "spec/listeners/messages/pending_scenarios.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { ActivityFinished, ActivityStarts, SceneFinished, SceneFinishes, SceneStarts, SceneTagged, TestRunnerDetected } from '@serenity-js/core/lib/events';\nimport { FeatureTag, ImplementationPending, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it(`recognises a pending scenario where some steps are marked as 'pending'`, () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                '--name', 'A scenario with steps marked as pending',\n                '--no-strict',  // considered only when steps are explicitly marked as 'pending'\n                './examples/features/pending_scenarios.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,         event => expect(event.details.name).to.equal(new Name('A scenario with steps marked as pending')))\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises pending scenarios')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name(`Given a step that's marked as pending`)))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.be.instanceOf(ImplementationPending))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.be.instanceOf(ImplementationPending))\n                    .next(SceneFinished,       event => expect(event.outcome).to.be.instanceOf(ImplementationPending))\n                ;\n            }));\n\n        it(`recognises a scenario tagged as 'pending'`, () =>\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                '--require', './examples/step_definitions/wip_hook.ts',\n                '--name', 'A scenario which tag marks it as pending',\n                '--no-strict',  // considered only when steps are explicitly marked as 'pending'\n                './examples/features/pending_scenarios.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,         event => expect(event.details.name).to.equal(new Name('A scenario which tag marks it as pending')))\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises pending scenarios')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name(`Before`)))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.be.instanceOf(ImplementationPending))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.be.instanceOf(ImplementationPending))\n                    .next(SceneFinished,       event => expect(event.outcome).to.be.instanceOf(ImplementationPending))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/pending_scenarios.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 578,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "spec/listeners/messages/pending_scenarios.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/pending_scenarios.spec.ts~describe97",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 10
  },
  {
    "__docId__": 579,
    "kind": "test",
    "name": "describe98",
    "testId": 98,
    "memberof": "spec/listeners/messages/pending_scenarios.spec.ts~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/pending_scenarios.spec.ts~describe97.describe98",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 12
  },
  {
    "__docId__": 580,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "spec/listeners/messages/pending_scenarios.spec.ts~describe97.describe98",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/pending_scenarios.spec.ts~describe97.describe98.it99",
    "access": null,
    "lineNumber": 14
  },
  {
    "__docId__": 581,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "spec/listeners/messages/pending_scenarios.spec.ts~describe97.describe98",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/pending_scenarios.spec.ts~describe97.describe98.it100",
    "access": null,
    "lineNumber": 39
  },
  {
    "__docId__": 582,
    "kind": "testFile",
    "name": "spec/listeners/messages/retry.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport {\n    ActivityFinished,\n    ActivityStarts,\n    RetryableSceneDetected,\n    SceneFinished,\n    SceneFinishes,\n    SceneStarts,\n    SceneTagged,\n    TestRunFinished,\n    TestRunFinishes,\n    TestRunStarts,\n} from '@serenity-js/core/lib/events';\nimport { ArbitraryTag, CorrelationId, ExecutionFailedWithError, ExecutionRetriedTag, ExecutionSuccessful, Name, Timestamp } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', function () {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('reports scenarios that have been retried and succeeded', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--retry', '2',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/retry.steps.ts',\n                './examples/features/retry.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                let sceneId: CorrelationId;\n\n                PickEvent.from(result.events)\n                    .next(TestRunStarts,       event => expect(event.timestamp).to.be.instanceof(Timestamp))\n\n                    .next(SceneStarts,         event => {\n                        expect(event.details.name).to.equal(new Name('An eventually passing scenario'))\n                        sceneId = event.sceneId;\n                    })\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that eventually passes')))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n                    .next(RetryableSceneDetected, event => expect(event.sceneId).to.equal(sceneId))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new ArbitraryTag('retried')))\n                    .next(SceneFinished,       event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n\n                    .next(SceneStarts,         event => {\n                        expect(event.details.name).to.equal(new Name('An eventually passing scenario'))\n                        sceneId = event.sceneId;\n                    })\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that eventually passes')))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n                    .next(RetryableSceneDetected, event => expect(event.sceneId).to.equal(sceneId))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new ArbitraryTag('retried')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new ExecutionRetriedTag(1)))\n                    .next(SceneFinished,       event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n\n                    .next(SceneStarts,         event => {\n                        expect(event.details.name).to.equal(new Name('An eventually passing scenario'))\n                        sceneId = event.sceneId;\n                    })\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that eventually passes')))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.be.instanceOf(ExecutionSuccessful))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.be.instanceOf(ExecutionSuccessful))\n                    // the scene is no longer retryable, so no RetryableSceneDetected\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new ArbitraryTag('retried')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new ExecutionRetriedTag(2)))\n                    .next(SceneFinished,       event => expect(event.outcome).to.be.instanceOf(ExecutionSuccessful))\n\n                    .next(TestRunFinishes,     event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                    .next(TestRunFinished,     event => expect(event.timestamp).to.be.instanceof(Timestamp))\n                ;\n\n                const retryableSceneDetectedEvents = result.events.filter(event => event instanceof RetryableSceneDetected)\n\n                expect(retryableSceneDetectedEvents).to.have.lengthOf(2);\n            }));\n\n        it('reports scenarios that have been retried and failed', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--retry', '1',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/retry.steps.ts',\n                './examples/features/retry.feature',\n            )\n            .then(ifExitCodeIsOtherThan(1, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(1);\n\n                let sceneId: CorrelationId;\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,         event => {\n                        expect(event.details.name).to.equal(new Name('An eventually passing scenario'))\n                        sceneId = event.sceneId;\n                    })\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that eventually passes')))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n                    .next(RetryableSceneDetected, event => expect(event.sceneId).to.equal(sceneId))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new ArbitraryTag('retried')))\n                    .next(SceneFinished,       event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n\n                    .next(SceneStarts,         event => {\n                        expect(event.details.name).to.equal(new Name('An eventually passing scenario'))\n                        sceneId = event.sceneId;\n                    })\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that eventually passes')))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n\n                    // the scene is no longer retryable, so no RetryableSceneDetected\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new ArbitraryTag('retried')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new ExecutionRetriedTag(1)))\n                    .next(SceneFinished,       event => expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError))\n\n                    .next(TestRunFinishes,     event => expect(event).to.be.instanceOf(TestRunFinishes))\n                    .next(TestRunFinished,     event => expect(event).to.be.instanceOf(TestRunFinished))\n                ;\n\n                const retryableSceneDetectedEvents = result.events.filter(event => event instanceof RetryableSceneDetected)\n\n                expect(retryableSceneDetectedEvents).to.have.lengthOf(1);\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/retry.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 583,
    "kind": "test",
    "name": "describe101",
    "testId": 101,
    "memberof": "spec/listeners/messages/retry.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/retry.spec.ts~describe101",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 20
  },
  {
    "__docId__": 584,
    "kind": "test",
    "name": "describe102",
    "testId": 102,
    "memberof": "spec/listeners/messages/retry.spec.ts~describe101",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/retry.spec.ts~describe101.describe102",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 22
  },
  {
    "__docId__": 585,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "spec/listeners/messages/retry.spec.ts~describe101.describe102",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/retry.spec.ts~describe101.describe102.it103",
    "access": null,
    "description": "reports scenarios that have been retried and succeeded",
    "lineNumber": 24
  },
  {
    "__docId__": 586,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "spec/listeners/messages/retry.spec.ts~describe101.describe102",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/retry.spec.ts~describe101.describe102.it104",
    "access": null,
    "description": "reports scenarios that have been retried and failed",
    "lineNumber": 86
  },
  {
    "__docId__": 587,
    "kind": "testFile",
    "name": "spec/listeners/messages/rules.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { BusinessRuleDetected, FeatureNarrativeDetected, SceneDescriptionDetected, SceneFinished, SceneFinishes, SceneStarts, SceneTagged } from '@serenity-js/core/lib/events';\nimport { trimmed } from '@serenity-js/core/lib/io';\nimport { BusinessRule, Description, ExecutionSuccessful, FeatureTag, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it(`recognises rules and examples`, () =>\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/rules.steps.ts',\n                './examples/features/rules.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                const expectedFeatureNarrative = new Description(trimmed `\n                    | As a Frequent Flyer Member\n                    | I want to transfer points that I don't need to members of my family\n                    | So that the points don't go to waste\n                `.trim());\n\n                const firstBusinessRule = new BusinessRule(\n                    new Name(`Frequent Flyer members in the same family can transfer points`),\n                    new Description(`Each family has a unique family code`),\n                );\n\n                const secondBusinessRule = new BusinessRule(\n                    new Name(`Members cannot transfer more points than they have`),\n                    new Description(``),    // no description represented as empty description\n                );\n\n                PickEvent.from(result.events)\n                    // Rule 1, Example 1\n                    .next(SceneStarts,              event => {\n                        expect(event.details.name).to.equal(new Name('Transfer points between existing members'))\n                    })\n                    .next(FeatureNarrativeDetected, event => {\n                        expect(event.description).to.equal(expectedFeatureNarrative);\n                    })\n                    .next(SceneDescriptionDetected, event => {\n                        expect(event.description).to.equal(new Description('Sarah and Steve are members of the same family'))\n                    })\n                    .next(BusinessRuleDetected,     event => {\n                        expect(event.rule).to.equal(firstBusinessRule);\n                    })\n                    .next(SceneTagged,         event => {\n                        expect(event.tag).to.equal(new FeatureTag('Transferring points between members'))\n                    })\n                    .next(SceneFinishes,       event => {\n                        expect(event.outcome).to.equal(new ExecutionSuccessful())\n                    })\n                    .next(SceneFinished,       event => {\n                        expect(event.outcome).to.equal(new ExecutionSuccessful())\n                    })\n\n                    // Rule 1, Example 2\n                    .next(SceneStarts,              event => {\n                        expect(event.details.name).to.equal(new Name(`Transfer points between non-family members`))\n                    })\n                    .next(FeatureNarrativeDetected, event => {\n                        expect(event.description).to.equal(expectedFeatureNarrative);\n                    })\n                    .next(SceneDescriptionDetected, event => {\n                        expect(event.description).to.equal(new Description('Sarah and Fred are members of different families'))\n                    })\n                    .next(BusinessRuleDetected,     event => {\n                        expect(event.rule).to.equal(firstBusinessRule);\n                    })\n                    .next(SceneTagged,         event => {\n                        expect(event.tag).to.equal(new FeatureTag('Transferring points between members'))\n                    })\n                    .next(SceneFinishes,       event => {\n                        expect(event.outcome).to.equal(new ExecutionSuccessful())\n                    })\n                    .next(SceneFinished,       event => {\n                        expect(event.outcome).to.equal(new ExecutionSuccessful())\n                    })\n\n                    // Rule 2, Example 1\n                    .next(SceneStarts,              event => {\n                        expect(event.details.name).to.equal(new Name(`Steve tries to transfer more points than he has`))\n                    })\n                    .next(FeatureNarrativeDetected, event => {\n                        expect(event.description).to.equal(expectedFeatureNarrative);\n                    })\n                    .next(BusinessRuleDetected,     event => {\n                        expect(event.rule).to.equal(secondBusinessRule);\n                    })\n                    .next(SceneTagged,         event => {\n                        expect(event.tag).to.equal(new FeatureTag('Transferring points between members'))\n                    })\n                    .next(SceneFinishes,       event => {\n                        expect(event.outcome).to.equal(new ExecutionSuccessful())\n                    })\n                    .next(SceneFinished,       event => {\n                        expect(event.outcome).to.equal(new ExecutionSuccessful())\n                    })\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/rules.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 588,
    "kind": "test",
    "name": "describe105",
    "testId": 105,
    "memberof": "spec/listeners/messages/rules.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/rules.spec.ts~describe105",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 10
  },
  {
    "__docId__": 589,
    "kind": "test",
    "name": "describe106",
    "testId": 106,
    "memberof": "spec/listeners/messages/rules.spec.ts~describe105",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/rules.spec.ts~describe105.describe106",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 12
  },
  {
    "__docId__": 590,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "spec/listeners/messages/rules.spec.ts~describe105.describe106",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/rules.spec.ts~describe105.describe106.it107",
    "access": null,
    "lineNumber": 14
  },
  {
    "__docId__": 591,
    "kind": "testFile",
    "name": "spec/listeners/messages/scenario_outlines.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { SceneFinished, SceneFinishes, SceneParametersDetected, SceneSequenceDetected, SceneStarts } from '@serenity-js/core/lib/events';\nimport { Category, Description, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises scenario outlines as sequences of scenes', () =>\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/scenario_outlines.feature',\n            )\n            .then(ifExitCodeIsOtherThan(1, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(1);\n\n                const\n                    expectedScenarioName = new Name('Sample outline'),\n                    expectedScenarioCategory = new Category('Serenity/JS recognises scenario outlines'),\n                    outlineLine = 3,\n                    firstScenarioLine = 12,\n                    secondScenarioLine = 13,\n                    thirdScenarioLine = 18,\n                    expectedExamplesName = new Name('Example results'),\n                    expectedExamplesDescription = new Description('Description of the examples');\n\n                PickEvent.from(result.events)\n                    .next(SceneSequenceDetected, event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(outlineLine);\n                    })\n                    .next(SceneParametersDetected, event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.parameters.name).to.equal(expectedExamplesName);\n                        expect(event.parameters.description).to.equal(expectedExamplesDescription);\n                        expect(event.parameters.values).to.deep.equal({ result: 'passes' });\n                    })\n                    .next(SceneStarts,          event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(firstScenarioLine);\n                    })\n                    .next(SceneFinishes,          event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(firstScenarioLine);\n                    })\n                    .next(SceneFinished,          event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(firstScenarioLine);\n                    })\n                    .next(SceneSequenceDetected, event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(outlineLine);\n                    })\n                    .next(SceneParametersDetected, event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.parameters.name).to.equal(expectedExamplesName);\n                        expect(event.parameters.description).to.equal(expectedExamplesDescription);\n                        expect(event.parameters.values).to.deep.equal({ result: 'fails with a generic error' });\n                    })\n                    .next(SceneStarts,          event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(secondScenarioLine);\n                    })\n                    .next(SceneFinishes,          event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(secondScenarioLine);\n                    })\n                    .next(SceneFinished,          event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(secondScenarioLine);\n                    })\n                    .next(SceneSequenceDetected, event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(outlineLine);\n                    })\n                    .next(SceneParametersDetected, event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.parameters.name.value).to.equal('');\n                        expect(event.parameters.description.value).to.equal('');\n                        expect(event.parameters.values).to.deep.equal({ result: 'passes' });\n                    })\n                    .next(SceneStarts,          event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(thirdScenarioLine);\n                    })\n                    .next(SceneFinishes,          event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(thirdScenarioLine);\n                    })\n                    .next(SceneFinished,          event => {\n                        expect(event.details.name).to.equal(expectedScenarioName);\n                        expect(event.details.category).to.equal(expectedScenarioCategory);\n                        expect(event.details.location.line).to.equal(thirdScenarioLine);\n                    })\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/scenario_outlines.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 592,
    "kind": "test",
    "name": "describe108",
    "testId": 108,
    "memberof": "spec/listeners/messages/scenario_outlines.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/scenario_outlines.spec.ts~describe108",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 10
  },
  {
    "__docId__": 593,
    "kind": "test",
    "name": "describe109",
    "testId": 109,
    "memberof": "spec/listeners/messages/scenario_outlines.spec.ts~describe108",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/scenario_outlines.spec.ts~describe108.describe109",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 12
  },
  {
    "__docId__": 594,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "spec/listeners/messages/scenario_outlines.spec.ts~describe108.describe109",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/scenario_outlines.spec.ts~describe108.describe109.it110",
    "access": null,
    "description": "recognises scenario outlines as sequences of scenes",
    "lineNumber": 14
  },
  {
    "__docId__": 595,
    "kind": "testFile",
    "name": "spec/listeners/messages/screenplay_scenario.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { ActivityFinished, ActivityStarts, SceneFinished, SceneFinishes, SceneStarts, SceneTagged, TestRunnerDetected } from '@serenity-js/core/lib/events';\nimport { ExecutionSuccessful, FeatureTag, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises Screenplay activities in any part of a Cucumber scenario', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/screenplay.steps.ts',\n                './examples/features/screenplay_scenario.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,         event => expect(event.details.name).to.equal(new Name('A screenplay scenario')))\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises Screenplay activities')))\n                    // before\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Before')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Lara makes an arrow')))\n                    .next(ActivityFinished,    event => expect(event.details.name).to.equal(new Name('Lara makes an arrow')))\n                    .next(ActivityFinished,    event => expect(event.details.name).to.equal(new Name('Before')))\n                    // when step\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('When Lara shoots an arrow')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Lara fits an arrow to the bowstring')))\n                    .next(ActivityFinished,    event => expect(event.details.name).to.equal(new Name('Lara fits an arrow to the bowstring')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Lara draws the bow')))\n                    .next(ActivityFinished,    event => expect(event.details.name).to.equal(new Name('Lara draws the bow')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Lara releases the bowstring')))\n                    .next(ActivityFinished,    event => expect(event.details.name).to.equal(new Name('Lara releases the bowstring')))\n                    .next(ActivityFinished,    event => expect(event.details.name).to.equal(new Name('When Lara shoots an arrow')))\n                    // then step\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Then she should hit a target')))\n                    .next(ActivityFinished,    event => expect(event.details.name).to.equal(new Name('Then she should hit a target')))\n                    // after\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('After')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Lara retrieves the arrow from the target')))\n                    .next(ActivityFinished,    event => expect(event.details.name).to.equal(new Name('Lara retrieves the arrow from the target')))\n                    .next(ActivityFinished,    event => expect(event.details.name).to.equal(new Name('After')))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                    .next(SceneFinished,       event => expect(event.outcome).to.equal(new ExecutionSuccessful()))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/screenplay_scenario.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 596,
    "kind": "test",
    "name": "describe111",
    "testId": 111,
    "memberof": "spec/listeners/messages/screenplay_scenario.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/screenplay_scenario.spec.ts~describe111",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 10
  },
  {
    "__docId__": 597,
    "kind": "test",
    "name": "describe112",
    "testId": 112,
    "memberof": "spec/listeners/messages/screenplay_scenario.spec.ts~describe111",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/screenplay_scenario.spec.ts~describe111.describe112",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 12
  },
  {
    "__docId__": 598,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "spec/listeners/messages/screenplay_scenario.spec.ts~describe111.describe112",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/screenplay_scenario.spec.ts~describe111.describe112.it113",
    "access": null,
    "description": "recognises Screenplay activities in any part of a Cucumber scenario",
    "lineNumber": 14
  },
  {
    "__docId__": 599,
    "kind": "testFile",
    "name": "spec/listeners/messages/skipped_scenarios.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { ActivityFinished, ActivityStarts, SceneFinished, SceneFinishes, SceneStarts, SceneTagged, TestRunnerDetected } from '@serenity-js/core/lib/events';\nimport { ExecutionSkipped, FeatureTag, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it(`recognises a scenario tagged as 'skipped'`, () =>\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                '--require', './examples/step_definitions/skip_hook.ts',\n                '--name', 'A scenario which tag marks it as skipped',\n                './examples/features/skipped_scenario.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,         event => expect(event.details.name).to.equal(new Name('A scenario which tag marks it as skipped')))\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises skipped scenarios')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name(`Before`)))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.equal(new ExecutionSkipped()))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name(`Given step number one that passes`)))\n                    .next(ActivityFinished,    event => expect(event.outcome).to.equal(new ExecutionSkipped()))\n                    .next(SceneFinishes,       event => expect(event.outcome).to.equal(new ExecutionSkipped()))\n                    .next(SceneFinished,       event => expect(event.outcome).to.equal(new ExecutionSkipped()))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/skipped_scenarios.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 600,
    "kind": "test",
    "name": "describe114",
    "testId": 114,
    "memberof": "spec/listeners/messages/skipped_scenarios.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/skipped_scenarios.spec.ts~describe114",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 10
  },
  {
    "__docId__": 601,
    "kind": "test",
    "name": "describe115",
    "testId": 115,
    "memberof": "spec/listeners/messages/skipped_scenarios.spec.ts~describe114",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/skipped_scenarios.spec.ts~describe114.describe115",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 12
  },
  {
    "__docId__": 602,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "spec/listeners/messages/skipped_scenarios.spec.ts~describe114.describe115",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/skipped_scenarios.spec.ts~describe114.describe115.it116",
    "access": null,
    "lineNumber": 14
  },
  {
    "__docId__": 603,
    "kind": "testFile",
    "name": "spec/listeners/messages/snippets.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { ActivityFinished, ActivityStarts, SceneFinished, SceneFinishes, SceneStarts, SceneTagged, TestRunnerDetected } from '@serenity-js/core/lib/events';\nimport { trimmed } from '@serenity-js/core/lib/io';\nimport { FeatureTag, ImplementationPending, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', () => {\n\n    describe('when working with Cucumber 7', () => {\n\n        it(`suggests implementation of Cucumber steps that haven't been implemented yet`, () =>\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                '--name', 'A scenario with steps that have not been implemented yet',\n                '--no-strict',  // --no-strict won't affect the outcome in this case\n                './examples/features/snippets.feature',\n            )\n            .then(ifExitCodeIsOtherThan(1, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(1);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,         event => expect(event.details.name).to.equal(new Name('A scenario with steps that have not been implemented yet')))\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS suggest implementation snippets')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name(`Given a step that hasn't been implemented yet`)))\n                    .next(ActivityFinished,    event => {\n                        expect(event.outcome).to.be.instanceOf(ImplementationPending);\n                        const error = (event.outcome as ImplementationPending).error;\n\n                        expect(error.message).to.equal(trimmed `\n                            | Step implementation missing:\n                            |\n                            | Given('a step that hasn\\\\'t been implemented yet', function () {\n                            |   // Write code here that turns the phrase above into concrete actions\n                            |   return 'pending';\n                            | });\n                        `.trim());\n                    })\n                    .next(SceneFinishes,       event => {\n                        expect(event.outcome).to.be.instanceOf(ImplementationPending);\n\n                        const error = (event.outcome as ImplementationPending).error;\n\n                        // SceneFinishes is triggered by an AfterHook, which doesn't have access to code snippets\n                        expect(error.message).to.equal('Step implementation missing');\n                    })\n                    .next(SceneFinished,       event => {\n                        expect(event.outcome).to.be.instanceOf(ImplementationPending);\n\n                        const error = (event.outcome as ImplementationPending).error;\n\n                        expect(error.message).to.equal(trimmed `\n                            | Step implementation missing:\n                            |\n                            | Given('a step that hasn\\\\'t been implemented yet', function () {\n                            |   // Write code here that turns the phrase above into concrete actions\n                            |   return 'pending';\n                            | });\n                            |\n                            | Given('another one', function () {\n                            |   // Write code here that turns the phrase above into concrete actions\n                            |   return 'pending';\n                            | });\n                        `.trim());\n                    })\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/snippets.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 604,
    "kind": "test",
    "name": "describe117",
    "testId": 117,
    "memberof": "spec/listeners/messages/snippets.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/snippets.spec.ts~describe117",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 10
  },
  {
    "__docId__": 605,
    "kind": "test",
    "name": "describe118",
    "testId": 118,
    "memberof": "spec/listeners/messages/snippets.spec.ts~describe117",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/snippets.spec.ts~describe117.describe118",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 12
  },
  {
    "__docId__": 606,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "spec/listeners/messages/snippets.spec.ts~describe117.describe118",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/snippets.spec.ts~describe117.describe118.it119",
    "access": null,
    "lineNumber": 14
  },
  {
    "__docId__": 607,
    "kind": "testFile",
    "name": "spec/listeners/messages/tags.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { SceneStarts, SceneTagged } from '@serenity-js/core/lib/events';\nimport { ArbitraryTag, FeatureTag } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', function () {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises tags on a scenario', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                '--name', 'A tagged scenario',\n                './examples/features/tags.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,  event => expect(event.details.name.value).to.equal('A tagged scenario'))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises tags at multiple levels')))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new ArbitraryTag('feature-tag')))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new ArbitraryTag('scenario-tag')))\n                ;\n            }));\n\n        it('recognises tags on a scenario outline and its examples', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                '--name', 'More tagged scenarios',\n                './examples/features/tags.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,  event => expect(event.details.name.value).to.equal('More tagged scenarios'))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises tags at multiple levels')))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new ArbitraryTag('feature-tag')))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new ArbitraryTag('scenario-outline-tag')))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new ArbitraryTag('example-set-1')))\n                    .next(SceneStarts,  event => expect(event.details.name.value).to.equal('More tagged scenarios'))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises tags at multiple levels')))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new ArbitraryTag('feature-tag')))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new ArbitraryTag('scenario-outline-tag')))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new ArbitraryTag('example-set-2')))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/tags.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 608,
    "kind": "test",
    "name": "describe120",
    "testId": 120,
    "memberof": "spec/listeners/messages/tags.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/tags.spec.ts~describe120",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 9
  },
  {
    "__docId__": 609,
    "kind": "test",
    "name": "describe121",
    "testId": 121,
    "memberof": "spec/listeners/messages/tags.spec.ts~describe120",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/tags.spec.ts~describe120.describe121",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 11
  },
  {
    "__docId__": 610,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "spec/listeners/messages/tags.spec.ts~describe120.describe121",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/tags.spec.ts~describe120.describe121.it122",
    "access": null,
    "description": "recognises tags on a scenario",
    "lineNumber": 13
  },
  {
    "__docId__": 611,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "spec/listeners/messages/tags.spec.ts~describe120.describe121",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/tags.spec.ts~describe120.describe121.it123",
    "access": null,
    "description": "recognises tags on a scenario outline and its examples",
    "lineNumber": 34
  },
  {
    "__docId__": 612,
    "kind": "testFile",
    "name": "spec/listeners/messages/themes.spec.ts",
    "content": "import 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { SceneTagged } from '@serenity-js/core/lib/events';\nimport { CapabilityTag, FeatureTag, ThemeTag } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', function () {\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises directories that group capabilities as themes', () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/theme/capability/example.feature',\n            )\n            .then(ifExitCodeIsOtherThan(0, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(0);\n\n                PickEvent.from(result.events)\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new ThemeTag('theme')))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new CapabilityTag('capability')))\n                    .next(SceneTagged,  event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises capabilities and themes')))\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/themes.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 613,
    "kind": "test",
    "name": "describe124",
    "testId": 124,
    "memberof": "spec/listeners/messages/themes.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/themes.spec.ts~describe124",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 9
  },
  {
    "__docId__": 614,
    "kind": "test",
    "name": "describe125",
    "testId": 125,
    "memberof": "spec/listeners/messages/themes.spec.ts~describe124",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/themes.spec.ts~describe124.describe125",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 11
  },
  {
    "__docId__": 615,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "spec/listeners/messages/themes.spec.ts~describe124.describe125",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/themes.spec.ts~describe124.describe125.it126",
    "access": null,
    "description": "recognises directories that group capabilities as themes",
    "lineNumber": 13
  },
  {
    "__docId__": 616,
    "kind": "testFile",
    "name": "spec/listeners/messages/timed_out_scenario.spec.ts",
    "content": "/* eslint-disable unicorn/filename-case */\nimport 'mocha';\n\nimport { expect, ifExitCodeIsOtherThan, logOutput, PickEvent } from '@integration/testing-tools';\nimport { ActivityFinished, ActivityStarts, SceneFinished, SceneFinishes, SceneStarts, SceneTagged, TestRunnerDetected } from '@serenity-js/core/lib/events';\nimport { ExecutionFailedWithError, FeatureTag, Name } from '@serenity-js/core/lib/model';\n\nimport { cucumber7 } from './bin/cucumber-7';\n\ndescribe('CucumberMessagesListener', function () {\n\n    this.timeout(10000);\n\n    describe('when working with Cucumber 7', () => {\n\n        it('recognises a timed out scenario',  () =>\n\n            cucumber7(\n                '--format', '../../../src',\n                '--require', './examples/support/serenity.config.ts',\n                '--require', './examples/step_definitions/common.steps.ts',\n                './examples/features/timed_out_scenario.feature',\n            )\n            .then(ifExitCodeIsOtherThan(1, logOutput))\n            .then(result => {\n                expect(result.exitCode).to.equal(1);\n\n                PickEvent.from(result.events)\n                    .next(SceneStarts,         event => expect(event.details.name).to.equal(new Name('A timed out scenario')))\n                    .next(TestRunnerDetected,  event => expect(event.name).to.equal(new Name('Cucumber')))\n                    .next(SceneTagged,         event => expect(event.tag).to.equal(new FeatureTag('Serenity/JS recognises a timed out scenario')))\n                    .next(ActivityStarts,      event => expect(event.details.name).to.equal(new Name('Given a step that times out')))\n                    .next(ActivityFinished,    event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError);\n                        expect((event.outcome as ExecutionFailedWithError).error.message).to.match(/function timed out.*100 milliseconds/);\n                    })\n                    .next(SceneFinishes,       event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError);\n                        expect((event.outcome as ExecutionFailedWithError).error.message).to.match(/function timed out.*100 milliseconds/);\n                    })\n                    .next(SceneFinished,       event => {\n                        expect(event.outcome).to.be.instanceOf(ExecutionFailedWithError);\n                        expect((event.outcome as ExecutionFailedWithError).error.message).to.match(/function timed out.*100 milliseconds/);\n                    })\n                ;\n            }));\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/serenity-js/serenity-js/packages/cucumber/spec/listeners/messages/timed_out_scenario.spec.ts",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 617,
    "kind": "test",
    "name": "describe127",
    "testId": 127,
    "memberof": "spec/listeners/messages/timed_out_scenario.spec.ts",
    "testDepth": 0,
    "static": true,
    "longname": "spec/listeners/messages/timed_out_scenario.spec.ts~describe127",
    "access": null,
    "description": "CucumberMessagesListener",
    "lineNumber": 10
  },
  {
    "__docId__": 618,
    "kind": "test",
    "name": "describe128",
    "testId": 128,
    "memberof": "spec/listeners/messages/timed_out_scenario.spec.ts~describe127",
    "testDepth": 1,
    "static": true,
    "longname": "spec/listeners/messages/timed_out_scenario.spec.ts~describe127.describe128",
    "access": null,
    "description": "when working with Cucumber 7",
    "lineNumber": 14
  },
  {
    "__docId__": 619,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "spec/listeners/messages/timed_out_scenario.spec.ts~describe127.describe128",
    "testDepth": 2,
    "static": true,
    "longname": "spec/listeners/messages/timed_out_scenario.spec.ts~describe127.describe128.it129",
    "access": null,
    "description": "recognises a timed out scenario",
    "lineNumber": 16
  }
]